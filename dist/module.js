function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    };
  }

  return _get.apply(this, arguments);
}

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");

  return _classApplyDescriptorGet(receiver, descriptor);
}

function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");

  _classApplyDescriptorSet(receiver, descriptor, value);

  return value;
}

function _classPrivateFieldDestructureSet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");

  return _classApplyDescriptorDestructureSet(receiver, descriptor);
}

function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }

  return privateMap.get(receiver);
}

function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }

  return descriptor.value;
}

function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    descriptor.value = value;
  }
}

function _classApplyDescriptorDestructureSet(receiver, descriptor) {
  if (descriptor.set) {
    if (!("__destrObj" in descriptor)) {
      descriptor.__destrObj = {
        set value(v) {
          descriptor.set.call(receiver, v);
        }

      };
    }

    return descriptor.__destrObj;
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    return descriptor;
  }
}

function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return fn;
}

function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap);

  privateMap.set(obj, value);
}

function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);

  privateSet.add(obj);
}

let _$1 = t => t,
    _t$1,
    _t2$1,
    _t3$1,
    _t4$1,
    _t5$1,
    _t6$1,
    _t7$1,
    _t8$1,
    _t9$1,
    _t10$1,
    _t11$1,
    _t12$1,
    _t13$1,
    _t14$1,
    _t15$1,
    _t16$1,
    _t17$1,
    _t18$1,
    _t19$1,
    _t20$1,
    _t21$1,
    _t22$1,
    _t23$1,
    _t24$1,
    _t25$1,
    _t26$1,
    _t27$1,
    _t28$1,
    _t29$1,
    _t30$1,
    _t31$1,
    _t32$1,
    _t33$1,
    _t34$1,
    _t35$1,
    _t36$1,
    _t37$1,
    _t38$1,
    _t39$1,
    _t40$1,
    _t41$1,
    _t42$1,
    _t43$1,
    _t44$1,
    _t45$1,
    _t46$1,
    _t47$1,
    _t48$1,
    _t49$1,
    _t50$1,
    _t51$1,
    _t52$1,
    _t53$1,
    _t54$1,
    _t55$1,
    _t56$1,
    _t57$1,
    _t58$1,
    _t59$1,
    _t60$1,
    _t61$1,
    _t62$1,
    _t63$1,
    _t64$1,
    _t65$1,
    _t66$1,
    _t67$1,
    _t68$1,
    _t69$1,
    _t70$1,
    _t71$1,
    _t72$1,
    _t73$1,
    _t74$1,
    _t75$1,
    _t76$1,
    _t77$1,
    _t78$1,
    _t79$1,
    _t80$1,
    _t81$1,
    _t82$1,
    _t83$1,
    _t84$1,
    _t85$1,
    _t86$1,
    _t87$1,
    _t88$1,
    _t89$1,
    _t90$1,
    _t91$1,
    _t92$1,
    _t93$1,
    _t94$1,
    _t95$1,
    _t96$1,
    _t97$1,
    _t98$1,
    _t99$1,
    _t100$1,
    _t101$1,
    _t102$1,
    _t103$1,
    _t104$1,
    _t105$1,
    _t106$1,
    _t107$1,
    _t108$1,
    _t109$1,
    _t110$1,
    _t111$1,
    _t112$1,
    _t113$1,
    _t114$1,
    _t115$1,
    _t116$1,
    _t117$1,
    _t118$1,
    _t119$1,
    _t120$1,
    _t121$1,
    _t122$1,
    _t123$1,
    _t124$1,
    _t125$1,
    _t126$1,
    _t127$1,
    _t128$1,
    _t129$1,
    _t130$1,
    _t131$1,
    _t132$1,
    _t133$1,
    _t134$1,
    _t135$1,
    _t136$1,
    _t137$1,
    _t138$1,
    _t139$1,
    _t140$1,
    _t141$1,
    _t142$1,
    _t143$1,
    _t144$1,
    _t145$1,
    _t146$1,
    _t147$1,
    _t148$1,
    _t149$1,
    _t150$1,
    _t151$1,
    _t152$1,
    _t153$1,
    _t154$1,
    _t155$1,
    _t156$1,
    _t157$1,
    _t158$1,
    _t159$1,
    _t160$1,
    _t161$1,
    _t162$1,
    _t163$1,
    _t164$1,
    _t165$1,
    _t166$1,
    _t167$1,
    _t168$1,
    _t169$1,
    _t170$1,
    _t171$1,
    _t172$1,
    _t173$1,
    _t174$1,
    _t175$1,
    _t176$1,
    _t177$1,
    _t178$1,
    _t179$1,
    _t180$1,
    _t181$1,
    _t182$1,
    _t183$1,
    _t184$1,
    _t185$1,
    _t186$1,
    _t187$1,
    _t188$1,
    _t189$1,
    _t190$1,
    _t191$1,
    _t192$1,
    _t193$1,
    _t194$1,
    _t195$1,
    _t196$1,
    _t197$1,
    _t198$1,
    _t199$1,
    _t200$1,
    _t201$1,
    _t202$1,
    _t203$1,
    _t204$1,
    _t205$1,
    _t206$1,
    _t207$1,
    _t208$1,
    _t209$1,
    _t210$1,
    _t211$1,
    _t212$1,
    _t213$1,
    _t214$1,
    _t215$1,
    _t216$1,
    _t217$1,
    _t218$1,
    _t219$1,
    _t220$1,
    _t221$1,
    _t222$1,
    _t223$1,
    _t224$1,
    _t225$1,
    _t226$1,
    _t227$1,
    _t228$1,
    _t229$1,
    _t230$1,
    _t231$1,
    _t232$1,
    _t233$1,
    _t234$1,
    _t235$1,
    _t236$1,
    _t237$1,
    _t238$1,
    _t239$1,
    _t240$1,
    _t241$1,
    _t242$1,
    _t243$1,
    _t244$1,
    _t245$1,
    _t246$1,
    _t247$1,
    _t248$1,
    _t249$1,
    _t250$1,
    _t251$1,
    _t252$1,
    _t253$1,
    _t254$1,
    _t255$1,
    _t256$1,
    _t257$1,
    _t258$1,
    _t259$1,
    _t260$1,
    _t261$1,
    _t262$1,
    _t263$1,
    _t264$1,
    _t265$1,
    _t266$1,
    _t267$1,
    _t268$1,
    _t269$1,
    _t270$1,
    _t271$1,
    _t272$1,
    _t273$1,
    _t274$1,
    _t275$1,
    _t276$1,
    _t277$1,
    _t278$1,
    _t279$1,
    _t280$1,
    _t281$1,
    _t282$1,
    _t283$1,
    _t284$1,
    _t285$1,
    _t286$1,
    _t287$1,
    _t288$1,
    _t289$1,
    _t290$1,
    _t291$1,
    _t292$1,
    _t293$1,
    _t294$1,
    _t295$1,
    _t296$1,
    _t297$1,
    _t298$1,
    _t299$1,
    _t300$1,
    _t301$1,
    _t302$1,
    _t303$1,
    _t304$1,
    _t305$1,
    _t306$1,
    _t307$1,
    _t308$1,
    _t309$1,
    _t310$1,
    _t311$1,
    _t312$1,
    _t313$1,
    _t314$1,
    _t315$1,
    _t316$1,
    _t317$1,
    _t318$1,
    _t319$1,
    _t320$1,
    _t321$1,
    _t322$1,
    _t323$1,
    _t324$1,
    _t325$1,
    _t326$1,
    _t327$1,
    _t328$1,
    _t329$1,
    _t330$1,
    _t331$1,
    _t332$1,
    _t333$1,
    _t334$1,
    _t335$1,
    _t336$1,
    _t337$1,
    _t338$1,
    _t339$1,
    _t340$1,
    _t341$1,
    _t342$1,
    _t343$1,
    _t344$1,
    _t345$1,
    _t346$1,
    _t347$1,
    _t348$1,
    _t349$1,
    _t350$1,
    _t351$1,
    _t352$1,
    _t353$1,
    _t354$1,
    _t355$1,
    _t356$1,
    _t357$1,
    _t358$1,
    _t359$1,
    _t360$1,
    _t361$1,
    _t362$1,
    _t363$1,
    _t364$1,
    _t365$1,
    _t366$1,
    _t367$1,
    _t368$1,
    _t369$1,
    _t370$1,
    _t371$1,
    _t372$1,
    _t373$1,
    _t374$1,
    _t375$1,
    _t376$1,
    _t377$1,
    _t378$1,
    _t379$1,
    _t380$1,
    _t381$1,
    _t382$1,
    _t383$1,
    _t384$1,
    _t385$1,
    _t386$1,
    _t387$1,
    _t388$1,
    _t389$1,
    _t390$1,
    _t391$1,
    _t392$1,
    _t393$1,
    _t394$1,
    _t395$1,
    _t396$1,
    _t397$1,
    _t398$1,
    _t399$1,
    _t400$1,
    _t401$1,
    _t402$1,
    _t403$1,
    _t404$1,
    _t405$1,
    _t406$1,
    _t407$1,
    _t408$1,
    _t409$1,
    _t410$1,
    _t411$1,
    _t412$1,
    _t413$1,
    _t414$1,
    _t415$1,
    _t416$1,
    _t417$1,
    _t418$1,
    _t419$1,
    _t420$1,
    _t421$1,
    _t422$1,
    _t423$1,
    _t424$1,
    _t425$1,
    _t426$1,
    _t427$1,
    _t428$1,
    _t429$1,
    _t430$1,
    _t431$1,
    _t432$1,
    _t433$1,
    _t434$1,
    _t435$1,
    _t436$1,
    _t437$1,
    _t438$1,
    _t439$1,
    _t440$1,
    _t441$1,
    _t442$1,
    _t443$1,
    _t444$1,
    _t445$1,
    _t446$1,
    _t447$1,
    _t448$1,
    _t449$1,
    _t450$1,
    _t451$1,
    _t452$1,
    _t453$1,
    _t454$1,
    _t455$1,
    _t456$1,
    _t457$1,
    _t458$1,
    _t459$1,
    _t460$1,
    _t461$1,
    _t462$1,
    _t463$1,
    _t464$1,
    _t465$1,
    _t466$1,
    _t467$1,
    _t468$1,
    _t469$1,
    _t470$1,
    _t471$1,
    _t472$1,
    _t473$1,
    _t474$1,
    _t475$1,
    _t476$1,
    _t477$1,
    _t478$1,
    _t479$1,
    _t480$1,
    _t481$1,
    _t482$1,
    _t483$1,
    _t484$1,
    _t485$1,
    _t486$1,
    _t487$1,
    _t488$1,
    _t489$1,
    _t490$1,
    _t491$1,
    _t492$1,
    _t493$1,
    _t494$1,
    _t495$1,
    _t496$1,
    _t497$1,
    _t498$1,
    _t499$1,
    _t500$1,
    _t501$1,
    _t502$1,
    _t503$1,
    _t504$1,
    _t505$1,
    _t506$1,
    _t507$1,
    _t508$1,
    _t509$1,
    _t510$1,
    _t511$1,
    _t512$1,
    _t513$1,
    _t514$1,
    _t515$1,
    _t516$1,
    _t517$1,
    _t518$1,
    _t519$1,
    _t520$1,
    _t521$1,
    _t522$1,
    _t523$1,
    _t524$1,
    _t525$1,
    _t526$1,
    _t527$1,
    _t528$1,
    _t529$1,
    _t530$1,
    _t531$1,
    _t532$1,
    _t533$1,
    _t534$1,
    _t535$1,
    _t536$1,
    _t537$1,
    _t538$1,
    _t539$1,
    _t540$1,
    _t541$1,
    _t542$1,
    _t543$1,
    _t544$1,
    _t545$1,
    _t546$1,
    _t547$1,
    _t548$1,
    _t549$1,
    _t550$1,
    _t551$1,
    _t552$1,
    _t553$1,
    _t554$1,
    _t555$1,
    _t556$1,
    _t557$1,
    _t558$1,
    _t559$1,
    _t560$1,
    _t561$1,
    _t562$1,
    _t563$1,
    _t564$1,
    _t565$1,
    _t566$1,
    _t567$1,
    _t568$1,
    _t569$1,
    _t570$1,
    _t571$1,
    _t572$1,
    _t573$1,
    _t574$1,
    _t575$1,
    _t576$1,
    _t577$1,
    _t578$1,
    _t579$1,
    _t580$1,
    _t581$1,
    _t582$1,
    _t583$1,
    _t584$1,
    _t585$1,
    _t586$1,
    _t587$1,
    _t588$1,
    _t589$1,
    _t590$1,
    _t591$1,
    _t592$1,
    _t593$1,
    _t594$1,
    _t595$1,
    _t596$1,
    _t597$1,
    _t598$1,
    _t599$1,
    _t600$1,
    _t601$1,
    _t602$1,
    _t603$1,
    _t604$1,
    _t605$1,
    _t606$1,
    _t607$1,
    _t608$1,
    _t609$1,
    _t610$1,
    _t611$1,
    _t612$1,
    _t613$1,
    _t614$1,
    _t615$1,
    _t616$1,
    _t617$1,
    _t618$1,
    _t619$1,
    _t620$1,
    _t621$1,
    _t622$1,
    _t623$1,
    _t624$1,
    _t625$1,
    _t626$1,
    _t627$1,
    _t628$1,
    _t629$1,
    _t630$1,
    _t631$1,
    _t632$1,
    _t633$1,
    _t634$1,
    _t635$1,
    _t636$1,
    _t637$1,
    _t638$1,
    _t639$1,
    _t640$1,
    _t641$1,
    _t642$1,
    _t643$1,
    _t644$1,
    _t645$1,
    _t646$1,
    _t647,
    _t648,
    _t649,
    _t650,
    _t651,
    _t652,
    _t653,
    _t654,
    _t655,
    _t656,
    _t657,
    _t658,
    _t659,
    _t660,
    _t661,
    _t662,
    _t663,
    _t664,
    _t665,
    _t666,
    _t667,
    _t668,
    _t669,
    _t670,
    _t671,
    _t672,
    _t673,
    _t674,
    _t675,
    _t676,
    _t677,
    _t678,
    _t679,
    _t680,
    _t681,
    _t682,
    _t683,
    _t684,
    _t685,
    _t686,
    _t687,
    _t688,
    _t689,
    _t690,
    _t691,
    _t692,
    _t693,
    _t694,
    _t695,
    _t696,
    _t697,
    _t698,
    _t699,
    _t700,
    _t701,
    _t702,
    _t703,
    _t704,
    _t705,
    _t706,
    _t707,
    _t708,
    _t709,
    _t710,
    _t711,
    _t712,
    _t713,
    _t714,
    _t715,
    _t716,
    _t717,
    _t718,
    _t719,
    _t720,
    _t721,
    _t722,
    _t723,
    _t724,
    _t725,
    _t726,
    _t727,
    _t728,
    _t729,
    _t730,
    _t731,
    _t732,
    _t733,
    _t734,
    _t735,
    _t736,
    _t737,
    _t738,
    _t739,
    _t740,
    _t741,
    _t742,
    _t743,
    _t744,
    _t745,
    _t746,
    _t747,
    _t748,
    _t749,
    _t750,
    _t751,
    _t752,
    _t753,
    _t754,
    _t755,
    _t756,
    _t757,
    _t758,
    _t759,
    _t760,
    _t761,
    _t762,
    _t763,
    _t764,
    _t765,
    _t766,
    _t767,
    _t768,
    _t769,
    _t770,
    _t771,
    _t772,
    _t773,
    _t774,
    _t775,
    _t776,
    _t777,
    _t778,
    _t779,
    _t780,
    _t781,
    _t782,
    _t783,
    _t784,
    _t785,
    _t786,
    _t787,
    _t788,
    _t789,
    _t790,
    _t791,
    _t792,
    _t793,
    _t794,
    _t795,
    _t796,
    _t797,
    _t798,
    _t799,
    _t800,
    _t801,
    _t802,
    _t803,
    _t804,
    _t805,
    _t806,
    _t807,
    _t808,
    _t809,
    _t810,
    _t811,
    _t812,
    _t813,
    _t814,
    _t815,
    _t816,
    _t817,
    _t818,
    _t819,
    _t820,
    _t821,
    _t822,
    _t823,
    _t824,
    _t825,
    _t826,
    _t827,
    _t828,
    _t829,
    _t830,
    _t831,
    _t832,
    _t833,
    _t834,
    _t835,
    _t836,
    _t837,
    _t838,
    _t839,
    _t840,
    _t841,
    _t842,
    _t843,
    _t844,
    _t845,
    _t846,
    _t847,
    _t848,
    _t849,
    _t850,
    _t851,
    _t852,
    _t853,
    _t854,
    _t855,
    _t856,
    _t857,
    _t858,
    _t859,
    _t860,
    _t861,
    _t862,
    _t863,
    _t864,
    _t865,
    _t866,
    _t867,
    _t868,
    _t869,
    _t870,
    _t871,
    _t872,
    _t873,
    _t874,
    _t875,
    _t876,
    _t877,
    _t878,
    _t879,
    _t880,
    _t881,
    _t882,
    _t883,
    _t884,
    _t885,
    _t886,
    _t887,
    _t888,
    _t889,
    _t890,
    _t891,
    _t892,
    _t893,
    _t894,
    _t895,
    _t896,
    _t897,
    _t898,
    _t899,
    _t900,
    _t901,
    _t902,
    _t903,
    _t904,
    _t905,
    _t906,
    _t907,
    _t908,
    _t909,
    _t910,
    _t911,
    _t912,
    _t913,
    _t914,
    _t915,
    _t916,
    _t917,
    _t918,
    _t919,
    _t920,
    _t921,
    _t922,
    _t923,
    _t924,
    _t925,
    _t926,
    _t927,
    _t928,
    _t929,
    _t930,
    _t931,
    _t932,
    _t933,
    _t934,
    _t935,
    _t936,
    _t937,
    _t938,
    _t939,
    _t940,
    _t941,
    _t942,
    _t943,
    _t944,
    _t945,
    _t946,
    _t947,
    _t948,
    _t949,
    _t950,
    _t951,
    _t952,
    _t953,
    _t954,
    _t955,
    _t956,
    _t957,
    _t958,
    _t959,
    _t960,
    _t961,
    _t962,
    _t963,
    _t964,
    _t965,
    _t966,
    _t967,
    _t968,
    _t969,
    _t970,
    _t971,
    _t972,
    _t973,
    _t974,
    _t975,
    _t976,
    _t977,
    _t978,
    _t979,
    _t980,
    _t981,
    _t982,
    _t983,
    _t984,
    _t985,
    _t986,
    _t987,
    _t988,
    _t989,
    _t990,
    _t991,
    _t992,
    _t993,
    _t994,
    _t995,
    _t996,
    _t997,
    _t998,
    _t999,
    _t1000,
    _t1001,
    _t1002,
    _t1003,
    _t1004,
    _t1005,
    _t1006,
    _t1007,
    _t1008,
    _t1009,
    _t1010,
    _t1011,
    _t1012,
    _t1013,
    _t1014,
    _t1015,
    _t1016,
    _t1017,
    _t1018,
    _t1019,
    _t1020,
    _t1021,
    _t1022,
    _t1023,
    _t1024,
    _t1025,
    _t1026,
    _t1027,
    _t1028,
    _t1029,
    _t1030,
    _t1031,
    _t1032,
    _t1033,
    _t1034,
    _t1035,
    _t1036,
    _t1037,
    _t1038,
    _t1039,
    _t1040,
    _t1041,
    _t1042,
    _t1043,
    _t1044,
    _t1045,
    _t1046,
    _t1047,
    _t1048,
    _t1049,
    _t1050,
    _t1051,
    _t1052,
    _t1053,
    _t1054,
    _t1055,
    _t1056,
    _t1057,
    _t1058,
    _t1059,
    _t1060,
    _t1061,
    _t1062,
    _t1063,
    _t1064,
    _t1065,
    _t1066,
    _t1067,
    _t1068,
    _t1069,
    _t1070,
    _t1071,
    _t1072,
    _t1073,
    _t1074,
    _t1075,
    _t1076,
    _t1077,
    _t1078,
    _t1079,
    _t1080,
    _t1081,
    _t1082,
    _t1083,
    _t1084,
    _t1085,
    _t1086,
    _t1087,
    _t1088,
    _t1089,
    _t1090,
    _t1091,
    _t1092,
    _t1093,
    _t1094,
    _t1095,
    _t1096,
    _t1097,
    _t1098,
    _t1099,
    _t1100,
    _t1101,
    _t1102,
    _t1103,
    _t1104,
    _t1105,
    _t1106,
    _t1107,
    _t1108,
    _t1109,
    _t1110,
    _t1111,
    _t1112,
    _t1113,
    _t1114,
    _t1115,
    _t1116,
    _t1117,
    _t1118,
    _t1119,
    _t1120,
    _t1121,
    _t1122,
    _t1123,
    _t1124,
    _t1125,
    _t1126,
    _t1127,
    _t1128,
    _t1129,
    _t1130,
    _t1131,
    _t1132,
    _t1133,
    _t1134,
    _t1135,
    _t1136,
    _t1137,
    _t1138,
    _t1139,
    _t1140,
    _t1141,
    _t1142,
    _t1143,
    _t1144,
    _t1145,
    _t1146,
    _t1147,
    _t1148,
    _t1149,
    _t1150,
    _t1151,
    _t1152,
    _t1153,
    _t1154,
    _t1155,
    _t1156,
    _t1157,
    _t1158,
    _t1159,
    _t1160,
    _t1161,
    _t1162,
    _t1163,
    _t1164,
    _t1165,
    _t1166,
    _t1167,
    _t1168,
    _t1169,
    _t1170,
    _t1171,
    _t1172,
    _t1173,
    _t1174,
    _t1175,
    _t1176,
    _t1177,
    _t1178,
    _t1179,
    _t1180,
    _t1181,
    _t1182,
    _t1183,
    _t1184,
    _t1185,
    _t1186,
    _t1187,
    _t1188,
    _t1189,
    _t1190,
    _t1191,
    _t1192,
    _t1193,
    _t1194,
    _t1195,
    _t1196,
    _t1197,
    _t1198,
    _t1199,
    _t1200,
    _t1201,
    _t1202,
    _t1203,
    _t1204,
    _t1205,
    _t1206,
    _t1207,
    _t1208,
    _t1209,
    _t1210,
    _t1211,
    _t1212,
    _t1213,
    _t1214,
    _t1215,
    _t1216,
    _t1217,
    _t1218,
    _t1219,
    _t1220,
    _t1221,
    _t1222,
    _t1223,
    _t1224,
    _t1225,
    _t1226,
    _t1227,
    _t1228,
    _t1229,
    _t1230,
    _t1231,
    _t1232,
    _t1233,
    _t1234,
    _t1235,
    _t1236,
    _t1237,
    _t1238,
    _t1239,
    _t1240,
    _t1241,
    _t1242,
    _t1243,
    _t1244,
    _t1245,
    _t1246,
    _t1247,
    _t1248,
    _t1249,
    _t1250,
    _t1251,
    _t1252,
    _t1253,
    _t1254,
    _t1255,
    _t1256,
    _t1257,
    _t1258,
    _t1259,
    _t1260,
    _t1261,
    _t1262,
    _t1263,
    _t1264,
    _t1265,
    _t1266,
    _t1267,
    _t1268,
    _t1269,
    _t1270,
    _t1271,
    _t1272,
    _t1273,
    _t1274,
    _t1275,
    _t1276,
    _t1277,
    _t1278,
    _t1279,
    _t1280,
    _t1281,
    _t1282,
    _t1283,
    _t1284,
    _t1285,
    _t1286,
    _t1287,
    _t1288,
    _t1289,
    _t1290,
    _t1291,
    _t1292,
    _t1293,
    _t1294,
    _t1295,
    _t1296,
    _t1297,
    _t1298,
    _t1299,
    _t1300,
    _t1301,
    _t1302,
    _t1303,
    _t1304,
    _t1305,
    _t1306,
    _t1307,
    _t1308,
    _t1309,
    _t1310,
    _t1311,
    _t1312,
    _t1313,
    _t1314,
    _t1315,
    _t1316,
    _t1317,
    _t1318,
    _t1319,
    _t1320,
    _t1321,
    _t1322,
    _t1323,
    _t1324,
    _t1325,
    _t1326,
    _t1327,
    _t1328,
    _t1329,
    _t1330,
    _t1331,
    _t1332,
    _t1333,
    _t1334,
    _t1335,
    _t1336,
    _t1337,
    _t1338,
    _t1339,
    _t1340,
    _t1341,
    _t1342,
    _t1343,
    _t1344,
    _t1345,
    _t1346,
    _t1347,
    _t1348,
    _t1349,
    _t1350,
    _t1351,
    _t1352,
    _t1353,
    _t1354,
    _t1355,
    _t1356,
    _t1357,
    _t1358,
    _t1359,
    _t1360,
    _t1361,
    _t1362,
    _t1363,
    _t1364,
    _t1365,
    _t1366,
    _t1367,
    _t1368,
    _t1369,
    _t1370,
    _t1371,
    _t1372,
    _t1373,
    _t1374,
    _t1375,
    _t1376,
    _t1377,
    _t1378,
    _t1379,
    _t1380,
    _t1381,
    _t1382,
    _t1383,
    _t1384,
    _t1385,
    _t1386,
    _t1387,
    _t1388,
    _t1389,
    _t1390,
    _t1391,
    _t1392,
    _t1393,
    _t1394,
    _t1395,
    _t1396,
    _t1397,
    _t1398,
    _t1399,
    _t1400,
    _t1401,
    _t1402,
    _t1403,
    _t1404,
    _t1405,
    _t1406,
    _t1407,
    _t1408,
    _t1409,
    _t1410,
    _t1411,
    _t1412,
    _t1413,
    _t1414,
    _t1415,
    _t1416,
    _t1417,
    _t1418,
    _t1419,
    _t1420,
    _t1421,
    _t1422,
    _t1423,
    _t1424,
    _t1425,
    _t1426,
    _t1427,
    _t1428,
    _t1429,
    _t1430,
    _t1431,
    _t1432,
    _t1433,
    _t1434,
    _t1435,
    _t1436,
    _t1437,
    _t1438,
    _t1439,
    _t1440,
    _t1441,
    _t1442,
    _t1443,
    _t1444,
    _t1445,
    _t1446,
    _t1447,
    _t1448,
    _t1449,
    _t1450,
    _t1451,
    _t1452,
    _t1453,
    _t1454,
    _t1455,
    _t1456,
    _t1457,
    _t1458,
    _t1459,
    _t1460,
    _t1461,
    _t1462,
    _t1463,
    _t1464,
    _t1465,
    _t1466,
    _t1467,
    _t1468,
    _t1469,
    _t1470,
    _t1471,
    _t1472,
    _t1473,
    _t1474,
    _t1475,
    _t1476,
    _t1477,
    _t1478,
    _t1479,
    _t1480,
    _t1481,
    _t1482,
    _t1483,
    _t1484,
    _t1485,
    _t1486,
    _t1487,
    _t1488,
    _t1489,
    _t1490,
    _t1491,
    _t1492,
    _t1493,
    _t1494,
    _t1495,
    _t1496,
    _t1497,
    _t1498,
    _t1499,
    _t1500,
    _t1501,
    _t1502,
    _t1503,
    _t1504,
    _t1505,
    _t1506,
    _t1507,
    _t1508,
    _t1509,
    _t1510,
    _t1511,
    _t1512,
    _t1513,
    _t1514,
    _t1515,
    _t1516,
    _t1517,
    _t1518,
    _t1519,
    _t1520,
    _t1521,
    _t1522,
    _t1523,
    _t1524,
    _t1525,
    _t1526,
    _t1527,
    _t1528,
    _t1529,
    _t1530,
    _t1531,
    _t1532,
    _t1533,
    _t1534,
    _t1535,
    _t1536,
    _t1537,
    _t1538,
    _t1539,
    _t1540,
    _t1541,
    _t1542,
    _t1543,
    _t1544,
    _t1545,
    _t1546,
    _t1547,
    _t1548,
    _t1549,
    _t1550,
    _t1551,
    _t1552,
    _t1553,
    _t1554,
    _t1555,
    _t1556,
    _t1557,
    _t1558,
    _t1559,
    _t1560,
    _t1561,
    _t1562,
    _t1563,
    _t1564,
    _t1565,
    _t1566,
    _t1567,
    _t1568,
    _t1569,
    _t1570,
    _t1571,
    _t1572,
    _t1573,
    _t1574,
    _t1575,
    _t1576,
    _t1577,
    _t1578,
    _t1579,
    _t1580,
    _t1581,
    _t1582,
    _t1583,
    _t1584,
    _t1585,
    _t1586,
    _t1587,
    _t1588,
    _t1589,
    _t1590,
    _t1591,
    _t1592,
    _t1593,
    _t1594,
    _t1595,
    _t1596,
    _t1597,
    _t1598,
    _t1599,
    _t1600,
    _t1601,
    _t1602,
    _t1603,
    _t1604,
    _t1605,
    _t1606,
    _t1607,
    _t1608,
    _t1609,
    _t1610,
    _t1611,
    _t1612,
    _t1613,
    _t1614,
    _t1615,
    _t1616,
    _t1617,
    _t1618,
    _t1619,
    _t1620,
    _t1621,
    _t1622,
    _t1623,
    _t1624,
    _t1625,
    _t1626,
    _t1627,
    _t1628,
    _t1629,
    _t1630,
    _t1631,
    _t1632,
    _t1633,
    _t1634,
    _t1635,
    _t1636,
    _t1637,
    _t1638,
    _t1639,
    _t1640,
    _t1641,
    _t1642,
    _t1643,
    _t1644,
    _t1645,
    _t1646,
    _t1647,
    _t1648,
    _t1649,
    _t1650,
    _t1651,
    _t1652,
    _t1653,
    _t1654,
    _t1655,
    _t1656,
    _t1657,
    _t1658,
    _t1659,
    _t1660,
    _t1661,
    _t1662,
    _t1663,
    _t1664,
    _t1665,
    _t1666,
    _t1667,
    _t1668,
    _t1669,
    _t1670,
    _t1671,
    _t1672,
    _t1673,
    _t1674,
    _t1675,
    _t1676,
    _t1677,
    _t1678,
    _t1679,
    _t1680,
    _t1681,
    _t1682,
    _t1683,
    _t1684,
    _t1685,
    _t1686,
    _t1687,
    _t1688,
    _t1689,
    _t1690,
    _t1691,
    _t1692,
    _t1693,
    _t1694,
    _t1695,
    _t1696,
    _t1697,
    _t1698,
    _t1699,
    _t1700,
    _t1701,
    _t1702,
    _t1703,
    _t1704,
    _t1705,
    _t1706,
    _t1707,
    _t1708,
    _t1709,
    _t1710,
    _t1711,
    _t1712,
    _t1713,
    _t1714,
    _t1715,
    _t1716,
    _t1717,
    _t1718,
    _t1719,
    _t1720,
    _t1721,
    _t1722,
    _t1723,
    _t1724,
    _t1725,
    _t1726,
    _t1727,
    _t1728,
    _t1729,
    _t1730,
    _t1731,
    _t1732,
    _t1733,
    _t1734,
    _t1735,
    _t1736,
    _t1737,
    _t1738,
    _t1739,
    _t1740,
    _t1741,
    _t1742,
    _t1743,
    _t1744,
    _t1745,
    _t1746,
    _t1747,
    _t1748,
    _t1749,
    _t1750,
    _t1751,
    _t1752,
    _t1753,
    _t1754,
    _t1755,
    _t1756,
    _t1757,
    _t1758,
    _t1759,
    _t1760,
    _t1761,
    _t1762,
    _t1763,
    _t1764,
    _t1765,
    _t1766,
    _t1767,
    _t1768,
    _t1769,
    _t1770,
    _t1771,
    _t1772,
    _t1773,
    _t1774,
    _t1775,
    _t1776,
    _t1777,
    _t1778,
    _t1779,
    _t1780,
    _t1781,
    _t1782,
    _t1783,
    _t1784,
    _t1785,
    _t1786,
    _t1787,
    _t1788,
    _t1789,
    _t1790,
    _t1791,
    _t1792,
    _t1793,
    _t1794,
    _t1795,
    _t1796,
    _t1797,
    _t1798,
    _t1799,
    _t1800,
    _t1801,
    _t1802,
    _t1803,
    _t1804,
    _t1805,
    _t1806,
    _t1807,
    _t1808,
    _t1809,
    _t1810,
    _t1811,
    _t1812,
    _t1813,
    _t1814,
    _t1815,
    _t1816,
    _t1817,
    _t1818,
    _t1819,
    _t1820,
    _t1821,
    _t1822,
    _t1823,
    _t1824,
    _t1825,
    _t1826,
    _t1827,
    _t1828,
    _t1829,
    _t1830,
    _t1831,
    _t1832,
    _t1833,
    _t1834,
    _t1835,
    _t1836,
    _t1837,
    _t1838,
    _t1839,
    _t1840,
    _t1841,
    _t1842,
    _t1843,
    _t1844,
    _t1845,
    _t1846,
    _t1847,
    _t1848,
    _t1849,
    _t1850,
    _t1851,
    _t1852,
    _t1853,
    _t1854,
    _t1855,
    _t1856,
    _t1857,
    _t1858,
    _t1859,
    _t1860,
    _t1861,
    _t1862,
    _t1863,
    _t1864,
    _t1865,
    _t1866,
    _t1867,
    _t1868,
    _t1869,
    _t1870,
    _t1871,
    _t1872,
    _t1873,
    _t1874,
    _t1875,
    _t1876,
    _t1877,
    _t1878,
    _t1879,
    _t1880,
    _t1881,
    _t1882,
    _t1883,
    _t1884,
    _t1885,
    _t1886,
    _t1887,
    _t1888,
    _t1889,
    _t1890,
    _t1891,
    _t1892,
    _t1893,
    _t1894,
    _t1895,
    _t1896,
    _t1897,
    _t1898,
    _t1899,
    _t1900,
    _t1901,
    _t1902,
    _t1903,
    _t1904,
    _t1905,
    _t1906,
    _t1907,
    _t1908,
    _t1909,
    _t1910,
    _t1911,
    _t1912,
    _t1913,
    _t1914,
    _t1915,
    _t1916,
    _t1917,
    _t1918,
    _t1919,
    _t1920,
    _t1921,
    _t1922,
    _t1923,
    _t1924,
    _t1925,
    _t1926,
    _t1927,
    _t1928,
    _t1929,
    _t1930,
    _t1931,
    _t1932,
    _t1933,
    _t1934,
    _t1935,
    _t1936,
    _t1937,
    _t1938,
    _t1939,
    _t1940,
    _t1941,
    _t1942,
    _t1943,
    _t1944,
    _t1945,
    _t1946,
    _t1947,
    _t1948,
    _t1949,
    _t1950,
    _t1951,
    _t1952,
    _t1953,
    _t1954,
    _t1955,
    _t1956,
    _t1957,
    _t1958,
    _t1959,
    _t1960,
    _t1961,
    _t1962,
    _t1963,
    _t1964,
    _t1965,
    _t1966,
    _t1967,
    _t1968,
    _t1969,
    _t1970,
    _t1971,
    _t1972,
    _t1973,
    _t1974,
    _t1975,
    _t1976,
    _t1977,
    _t1978,
    _t1979,
    _t1980,
    _t1981,
    _t1982,
    _t1983,
    _t1984,
    _t1985,
    _t1986,
    _t1987,
    _t1988,
    _t1989,
    _t1990,
    _t1991,
    _t1992,
    _t1993,
    _t1994,
    _t1995,
    _t1996,
    _t1997,
    _t1998,
    _t1999,
    _t2000,
    _t2001,
    _t2002,
    _t2003,
    _t2004,
    _t2005,
    _t2006,
    _t2007,
    _t2008,
    _t2009,
    _t2010,
    _t2011,
    _t2012,
    _t2013,
    _t2014,
    _t2015,
    _t2016,
    _t2017,
    _t2018,
    _t2019,
    _t2020,
    _t2021,
    _t2022,
    _t2023,
    _t2024,
    _t2025,
    _t2026,
    _t2027,
    _t2028,
    _t2029,
    _t2030,
    _t2031,
    _t2032,
    _t2033,
    _t2034,
    _t2035,
    _t2036,
    _t2037,
    _t2038,
    _t2039,
    _t2040,
    _t2041,
    _t2042,
    _t2043,
    _t2044,
    _t2045,
    _t2046,
    _t2047,
    _t2048,
    _t2049,
    _t2050,
    _t2051,
    _t2052,
    _t2053,
    _t2054,
    _t2055,
    _t2056,
    _t2057,
    _t2058,
    _t2059,
    _t2060,
    _t2061,
    _t2062,
    _t2063,
    _t2064,
    _t2065,
    _t2066,
    _t2067,
    _t2068,
    _t2069,
    _t2070,
    _t2071,
    _t2072,
    _t2073,
    _t2074,
    _t2075,
    _t2076,
    _t2077,
    _t2078,
    _t2079,
    _t2080,
    _t2081,
    _t2082,
    _t2083,
    _t2084,
    _t2085,
    _t2086,
    _t2087,
    _t2088,
    _t2089,
    _t2090,
    _t2091,
    _t2092,
    _t2093,
    _t2094,
    _t2095,
    _t2096,
    _t2097,
    _t2098,
    _t2099,
    _t2100,
    _t2101,
    _t2102,
    _t2103,
    _t2104,
    _t2105,
    _t2106,
    _t2107,
    _t2108,
    _t2109,
    _t2110,
    _t2111,
    _t2112,
    _t2113,
    _t2114,
    _t2115,
    _t2116,
    _t2117,
    _t2118,
    _t2119,
    _t2120,
    _t2121,
    _t2122,
    _t2123,
    _t2124,
    _t2125,
    _t2126,
    _t2127,
    _t2128,
    _t2129,
    _t2130,
    _t2131,
    _t2132,
    _t2133,
    _t2134,
    _t2135,
    _t2136,
    _t2137,
    _t2138,
    _t2139,
    _t2140,
    _t2141,
    _t2142,
    _t2143,
    _t2144,
    _t2145,
    _t2146,
    _t2147,
    _t2148,
    _t2149,
    _t2150,
    _t2151,
    _t2152,
    _t2153,
    _t2154,
    _t2155,
    _t2156,
    _t2157,
    _t2158,
    _t2159,
    _t2160,
    _t2161,
    _t2162,
    _t2163,
    _t2164,
    _t2165,
    _t2166,
    _t2167,
    _t2168,
    _t2169,
    _t2170,
    _t2171,
    _t2172,
    _t2173,
    _t2174,
    _t2175,
    _t2176,
    _t2177,
    _t2178,
    _t2179,
    _t2180,
    _t2181,
    _t2182,
    _t2183,
    _t2184,
    _t2185,
    _t2186,
    _t2187,
    _t2188,
    _t2189,
    _t2190,
    _t2191,
    _t2192,
    _t2193,
    _t2194,
    _t2195,
    _t2196,
    _t2197,
    _t2198,
    _t2199,
    _t2200,
    _t2201,
    _t2202,
    _t2203,
    _t2204,
    _t2205,
    _t2206,
    _t2207,
    _t2208,
    _t2209,
    _t2210,
    _t2211,
    _t2212,
    _t2213,
    _t2214,
    _t2215,
    _t2216,
    _t2217,
    _t2218,
    _t2219,
    _t2220,
    _t2221,
    _t2222,
    _t2223,
    _t2224,
    _t2225,
    _t2226,
    _t2227,
    _t2228,
    _t2229,
    _t2230,
    _t2231,
    _t2232,
    _t2233,
    _t2234,
    _t2235,
    _t2236,
    _t2237,
    _t2238,
    _t2239,
    _t2240,
    _t2241,
    _t2242,
    _t2243,
    _t2244,
    _t2245,
    _t2246,
    _t2247,
    _t2248,
    _t2249,
    _t2250,
    _t2251,
    _t2252,
    _t2253,
    _t2254,
    _t2255,
    _t2256,
    _t2257,
    _t2258,
    _t2259,
    _t2260,
    _t2261,
    _t2262,
    _t2263,
    _t2264,
    _t2265,
    _t2266,
    _t2267,
    _t2268,
    _t2269,
    _t2270,
    _t2271,
    _t2272,
    _t2273,
    _t2274,
    _t2275,
    _t2276,
    _t2277,
    _t2278,
    _t2279,
    _t2280,
    _t2281,
    _t2282,
    _t2283,
    _t2284,
    _t2285,
    _t2286,
    _t2287,
    _t2288,
    _t2289,
    _t2290,
    _t2291,
    _t2292,
    _t2293,
    _t2294,
    _t2295,
    _t2296,
    _t2297,
    _t2298,
    _t2299,
    _t2300,
    _t2301,
    _t2302,
    _t2303,
    _t2304,
    _t2305,
    _t2306,
    _t2307,
    _t2308,
    _t2309,
    _t2310,
    _t2311,
    _t2312,
    _t2313,
    _t2314,
    _t2315,
    _t2316,
    _t2317,
    _t2318,
    _t2319,
    _t2320,
    _t2321,
    _t2322,
    _t2323,
    _t2324,
    _t2325,
    _t2326,
    _t2327,
    _t2328,
    _t2329,
    _t2330,
    _t2331,
    _t2332,
    _t2333,
    _t2334,
    _t2335,
    _t2336,
    _t2337,
    _t2338,
    _t2339,
    _t2340,
    _t2341,
    _t2342,
    _t2343,
    _t2344,
    _t2345,
    _t2346,
    _t2347,
    _t2348,
    _t2349,
    _t2350,
    _t2351,
    _t2352,
    _t2353,
    _t2354,
    _t2355,
    _t2356,
    _t2357,
    _t2358,
    _t2359,
    _t2360,
    _t2361,
    _t2362,
    _t2363,
    _t2364,
    _t2365,
    _t2366,
    _t2367,
    _t2368,
    _t2369,
    _t2370,
    _t2371,
    _t2372,
    _t2373,
    _t2374,
    _t2375,
    _t2376,
    _t2377,
    _t2378,
    _t2379,
    _t2380,
    _t2381,
    _t2382,
    _t2383,
    _t2384,
    _t2385,
    _t2386,
    _t2387,
    _t2388,
    _t2389,
    _t2390,
    _t2391,
    _t2392,
    _t2393,
    _t2394,
    _t2395,
    _t2396,
    _t2397,
    _t2398,
    _t2399,
    _t2400,
    _t2401,
    _t2402,
    _t2403,
    _t2404,
    _t2405,
    _t2406,
    _t2407,
    _t2408,
    _t2409,
    _t2410,
    _t2411,
    _t2412,
    _t2413,
    _t2414,
    _t2415,
    _t2416,
    _t2417,
    _t2418,
    _t2419,
    _t2420,
    _t2421,
    _t2422,
    _t2423,
    _t2424,
    _t2425,
    _t2426,
    _t2427,
    _t2428,
    _t2429,
    _t2430,
    _t2431,
    _t2432,
    _t2433,
    _t2434,
    _t2435,
    _t2436,
    _t2437,
    _t2438,
    _t2439,
    _t2440,
    _t2441,
    _t2442,
    _t2443,
    _t2444,
    _t2445,
    _t2446,
    _t2447,
    _t2448,
    _t2449,
    _t2450,
    _t2451,
    _t2452,
    _t2453,
    _t2454,
    _t2455,
    _t2456,
    _t2457,
    _t2458,
    _t2459,
    _t2460,
    _t2461,
    _t2462,
    _t2463,
    _t2464,
    _t2465,
    _t2466,
    _t2467,
    _t2468,
    _t2469,
    _t2470,
    _t2471,
    _t2472,
    _t2473,
    _t2474,
    _t2475,
    _t2476,
    _t2477,
    _t2478,
    _t2479,
    _t2480,
    _t2481,
    _t2482,
    _t2483,
    _t2484,
    _t2485,
    _t2486,
    _t2487,
    _t2488,
    _t2489,
    _t2490,
    _t2491,
    _t2492,
    _t2493,
    _t2494,
    _t2495,
    _t2496,
    _t2497,
    _t2498,
    _t2499,
    _t2500,
    _t2501,
    _t2502,
    _t2503,
    _t2504,
    _t2505,
    _t2506,
    _t2507,
    _t2508,
    _t2509,
    _t2510,
    _t2511,
    _t2512,
    _t2513,
    _t2514,
    _t2515,
    _t2516,
    _t2517,
    _t2518,
    _t2519,
    _t2520,
    _t2521,
    _t2522,
    _t2523,
    _t2524,
    _t2525,
    _t2526,
    _t2527,
    _t2528,
    _t2529,
    _t2530,
    _t2531,
    _t2532,
    _t2533,
    _t2534,
    _t2535,
    _t2536,
    _t2537,
    _t2538,
    _t2539,
    _t2540,
    _t2541,
    _t2542,
    _t2543,
    _t2544,
    _t2545,
    _t2546,
    _t2547,
    _t2548,
    _t2549,
    _t2550,
    _t2551,
    _t2552,
    _t2553,
    _t2554,
    _t2555,
    _t2556,
    _t2557,
    _t2558,
    _t2559,
    _t2560,
    _t2561,
    _t2562,
    _t2563,
    _t2564,
    _t2565,
    _t2566,
    _t2567,
    _t2568,
    _t2569,
    _t2570,
    _t2571,
    _t2572,
    _t2573,
    _t2574,
    _t2575,
    _t2576,
    _t2577,
    _t2578,
    _t2579,
    _t2580,
    _t2581,
    _t2582,
    _t2583,
    _t2584,
    _t2585,
    _t2586,
    _t2587,
    _t2588,
    _t2589,
    _t2590,
    _t2591,
    _t2592,
    _t2593,
    _t2594,
    _t2595,
    _t2596,
    _t2597,
    _t2598,
    _t2599,
    _t2600,
    _t2601,
    _t2602,
    _t2603,
    _t2604,
    _t2605,
    _t2606,
    _t2607,
    _t2608,
    _t2609,
    _t2610,
    _t2611,
    _t2612,
    _t2613,
    _t2614,
    _t2615,
    _t2616,
    _t2617,
    _t2618,
    _t2619,
    _t2620,
    _t2621,
    _t2622,
    _t2623,
    _t2624,
    _t2625,
    _t2626,
    _t2627,
    _t2628,
    _t2629,
    _t2630,
    _t2631,
    _t2632,
    _t2633,
    _t2634,
    _t2635,
    _t2636,
    _t2637,
    _t2638,
    _t2639,
    _t2640,
    _t2641,
    _t2642,
    _t2643,
    _t2644,
    _t2645,
    _t2646,
    _t2647,
    _t2648,
    _t2649,
    _t2650,
    _t2651,
    _t2652,
    _t2653,
    _t2654,
    _t2655,
    _t2656,
    _t2657,
    _t2658,
    _t2659,
    _t2660,
    _t2661,
    _t2662,
    _t2663,
    _t2664,
    _t2665,
    _t2666,
    _t2667,
    _t2668,
    _t2669,
    _t2670,
    _t2671,
    _t2672,
    _t2673,
    _t2674,
    _t2675,
    _t2676,
    _t2677,
    _t2678,
    _t2679,
    _t2680,
    _t2681,
    _t2682,
    _t2683,
    _t2684,
    _t2685,
    _t2686,
    _t2687,
    _t2688,
    _t2689,
    _t2690,
    _t2691,
    _t2692,
    _t2693,
    _t2694,
    _t2695,
    _t2696,
    _t2697,
    _t2698,
    _t2699,
    _t2700,
    _t2701,
    _t2702,
    _t2703,
    _t2704,
    _t2705,
    _t2706,
    _t2707,
    _t2708,
    _t2709,
    _t2710,
    _t2711,
    _t2712,
    _t2713,
    _t2714,
    _t2715,
    _t2716,
    _t2717,
    _t2718,
    _t2719,
    _t2720,
    _t2721,
    _t2722,
    _t2723,
    _t2724,
    _t2725,
    _t2726,
    _t2727,
    _t2728,
    _t2729,
    _t2730,
    _t2731,
    _t2732,
    _t2733,
    _t2734,
    _t2735,
    _t2736,
    _t2737,
    _t2738,
    _t2739,
    _t2740,
    _t2741,
    _t2742,
    _t2743,
    _t2744,
    _t2745,
    _t2746,
    _t2747,
    _t2748,
    _t2749,
    _t2750,
    _t2751,
    _t2752,
    _t2753,
    _t2754,
    _t2755,
    _t2756,
    _t2757,
    _t2758,
    _t2759,
    _t2760,
    _t2761,
    _t2762,
    _t2763,
    _t2764,
    _t2765,
    _t2766,
    _t2767,
    _t2768,
    _t2769,
    _t2770,
    _t2771,
    _t2772,
    _t2773,
    _t2774,
    _t2775,
    _t2776,
    _t2777,
    _t2778,
    _t2779,
    _t2780,
    _t2781,
    _t2782,
    _t2783,
    _t2784,
    _t2785,
    _t2786,
    _t2787,
    _t2788,
    _t2789,
    _t2790,
    _t2791,
    _t2792,
    _t2793,
    _t2794,
    _t2795,
    _t2796,
    _t2797,
    _t2798,
    _t2799,
    _t2800,
    _t2801,
    _t2802,
    _t2803,
    _t2804,
    _t2805,
    _t2806,
    _t2807,
    _t2808,
    _t2809,
    _t2810,
    _t2811,
    _t2812,
    _t2813,
    _t2814,
    _t2815,
    _t2816,
    _t2817,
    _t2818,
    _t2819,
    _t2820,
    _t2821,
    _t2822,
    _t2823,
    _t2824,
    _t2825,
    _t2826,
    _t2827,
    _t2828,
    _t2829,
    _t2830,
    _t2831,
    _t2832,
    _t2833,
    _t2834,
    _t2835,
    _t2836,
    _t2837,
    _t2838,
    _t2839,
    _t2840,
    _t2841,
    _t2842,
    _t2843,
    _t2844,
    _t2845,
    _t2846,
    _t2847,
    _t2848,
    _t2849,
    _t2850,
    _t2851,
    _t2852,
    _t2853,
    _t2854,
    _t2855,
    _t2856,
    _t2857,
    _t2858,
    _t2859,
    _t2860,
    _t2861,
    _t2862,
    _t2863,
    _t2864,
    _t2865,
    _t2866,
    _t2867,
    _t2868,
    _t2869,
    _t2870,
    _t2871,
    _t2872,
    _t2873,
    _t2874,
    _t2875,
    _t2876,
    _t2877,
    _t2878,
    _t2879,
    _t2880,
    _t2881,
    _t2882,
    _t2883,
    _t2884,
    _t2885,
    _t2886,
    _t2887,
    _t2888,
    _t2889,
    _t2890,
    _t2891,
    _t2892,
    _t2893,
    _t2894,
    _t2895,
    _t2896,
    _t2897,
    _t2898,
    _t2899,
    _t2900,
    _t2901,
    _t2902,
    _t2903,
    _t2904,
    _t2905,
    _t2906,
    _t2907,
    _t2908,
    _t2909,
    _t2910,
    _t2911,
    _t2912,
    _t2913,
    _t2914,
    _t2915,
    _t2916,
    _t2917,
    _t2918,
    _t2919,
    _t2920,
    _t2921,
    _t2922,
    _t2923,
    _t2924,
    _t2925,
    _t2926,
    _t2927,
    _t2928,
    _t2929,
    _t2930,
    _t2931,
    _t2932,
    _t2933,
    _t2934,
    _t2935,
    _t2936,
    _t2937,
    _t2938,
    _t2939,
    _t2940,
    _t2941,
    _t2942,
    _t2943,
    _t2944,
    _t2945,
    _t2946,
    _t2947,
    _t2948,
    _t2949,
    _t2950,
    _t2951,
    _t2952,
    _t2953,
    _t2954,
    _t2955,
    _t2956,
    _t2957,
    _t2958,
    _t2959,
    _t2960,
    _t2961,
    _t2962,
    _t2963,
    _t2964,
    _t2965,
    _t2966,
    _t2967,
    _t2968,
    _t2969,
    _t2970,
    _t2971,
    _t2972,
    _t2973,
    _t2974,
    _t2975,
    _t2976,
    _t2977,
    _t2978,
    _t2979,
    _t2980,
    _t2981,
    _t2982,
    _t2983,
    _t2984,
    _t2985,
    _t2986,
    _t2987,
    _t2988,
    _t2989,
    _t2990,
    _t2991,
    _t2992,
    _t2993,
    _t2994,
    _t2995,
    _t2996,
    _t2997,
    _t2998,
    _t2999,
    _t3000,
    _t3001,
    _t3002,
    _t3003,
    _t3004,
    _t3005,
    _t3006,
    _t3007,
    _t3008,
    _t3009,
    _t3010,
    _t3011,
    _t3012,
    _t3013,
    _t3014,
    _t3015,
    _t3016,
    _t3017,
    _t3018,
    _t3019,
    _t3020,
    _t3021,
    _t3022,
    _t3023,
    _t3024,
    _t3025,
    _t3026,
    _t3027,
    _t3028,
    _t3029,
    _t3030,
    _t3031,
    _t3032,
    _t3033,
    _t3034,
    _t3035,
    _t3036,
    _t3037,
    _t3038,
    _t3039,
    _t3040,
    _t3041,
    _t3042,
    _t3043,
    _t3044,
    _t3045,
    _t3046,
    _t3047,
    _t3048,
    _t3049,
    _t3050,
    _t3051,
    _t3052,
    _t3053,
    _t3054,
    _t3055,
    _t3056,
    _t3057,
    _t3058,
    _t3059,
    _t3060,
    _t3061,
    _t3062,
    _t3063,
    _t3064,
    _t3065,
    _t3066,
    _t3067,
    _t3068,
    _t3069,
    _t3070,
    _t3071,
    _t3072,
    _t3073,
    _t3074,
    _t3075,
    _t3076,
    _t3077,
    _t3078,
    _t3079,
    _t3080,
    _t3081,
    _t3082,
    _t3083,
    _t3084,
    _t3085,
    _t3086,
    _t3087,
    _t3088,
    _t3089,
    _t3090,
    _t3091,
    _t3092,
    _t3093,
    _t3094,
    _t3095,
    _t3096,
    _t3097,
    _t3098,
    _t3099,
    _t3100,
    _t3101,
    _t3102,
    _t3103,
    _t3104,
    _t3105,
    _t3106,
    _t3107,
    _t3108,
    _t3109,
    _t3110,
    _t3111,
    _t3112,
    _t3113,
    _t3114,
    _t3115,
    _t3116,
    _t3117,
    _t3118,
    _t3119,
    _t3120,
    _t3121,
    _t3122,
    _t3123,
    _t3124,
    _t3125,
    _t3126,
    _t3127,
    _t3128,
    _t3129,
    _t3130,
    _t3131,
    _t3132,
    _t3133,
    _t3134,
    _t3135,
    _t3136,
    _t3137,
    _t3138,
    _t3139,
    _t3140,
    _t3141,
    _t3142,
    _t3143,
    _t3144,
    _t3145,
    _t3146,
    _t3147,
    _t3148,
    _t3149,
    _t3150,
    _t3151,
    _t3152,
    _t3153,
    _t3154,
    _t3155,
    _t3156,
    _t3157,
    _t3158,
    _t3159,
    _t3160,
    _t3161,
    _t3162,
    _t3163,
    _t3164,
    _t3165,
    _t3166,
    _t3167,
    _t3168,
    _t3169,
    _t3170,
    _t3171,
    _t3172,
    _t3173,
    _t3174,
    _t3175,
    _t3176,
    _t3177,
    _t3178,
    _t3179,
    _t3180,
    _t3181,
    _t3182,
    _t3183,
    _t3184,
    _t3185,
    _t3186,
    _t3187,
    _t3188,
    _t3189,
    _t3190,
    _t3191,
    _t3192,
    _t3193,
    _t3194,
    _t3195,
    _t3196,
    _t3197,
    _t3198,
    _t3199,
    _t3200,
    _t3201,
    _t3202,
    _t3203,
    _t3204,
    _t3205,
    _t3206,
    _t3207,
    _t3208,
    _t3209,
    _t3210,
    _t3211,
    _t3212,
    _t3213,
    _t3214,
    _t3215,
    _t3216,
    _t3217,
    _t3218,
    _t3219,
    _t3220,
    _t3221,
    _t3222,
    _t3223,
    _t3224,
    _t3225,
    _t3226,
    _t3227,
    _t3228,
    _t3229,
    _t3230,
    _t3231,
    _t3232,
    _t3233,
    _t3234,
    _t3235,
    _t3236,
    _t3237,
    _t3238,
    _t3239,
    _t3240,
    _t3241,
    _t3242,
    _t3243,
    _t3244,
    _t3245,
    _t3246,
    _t3247,
    _t3248,
    _t3249,
    _t3250,
    _t3251,
    _t3252,
    _t3253,
    _t3254,
    _t3255,
    _t3256,
    _t3257,
    _t3258,
    _t3259,
    _t3260,
    _t3261,
    _t3262,
    _t3263,
    _t3264,
    _t3265,
    _t3266,
    _t3267,
    _t3268,
    _t3269,
    _t3270,
    _t3271,
    _t3272,
    _t3273,
    _t3274,
    _t3275,
    _t3276,
    _t3277,
    _t3278,
    _t3279,
    _t3280,
    _t3281,
    _t3282,
    _t3283,
    _t3284,
    _t3285,
    _t3286,
    _t3287,
    _t3288,
    _t3289,
    _t3290,
    _t3291,
    _t3292,
    _t3293,
    _t3294,
    _t3295,
    _t3296,
    _t3297,
    _t3298,
    _t3299,
    _t3300,
    _t3301,
    _t3302,
    _t3303,
    _t3304,
    _t3305,
    _t3306,
    _t3307,
    _t3308,
    _t3309,
    _t3310,
    _t3311,
    _t3312,
    _t3313,
    _t3314,
    _t3315,
    _t3316,
    _t3317,
    _t3318,
    _t3319,
    _t3320,
    _t3321,
    _t3322,
    _t3323,
    _t3324,
    _t3325,
    _t3326,
    _t3327,
    _t3328,
    _t3329,
    _t3330,
    _t3331,
    _t3332,
    _t3333,
    _t3334,
    _t3335,
    _t3336,
    _t3337,
    _t3338,
    _t3339,
    _t3340,
    _t3341,
    _t3342,
    _t3343,
    _t3344,
    _t3345,
    _t3346,
    _t3347,
    _t3348,
    _t3349,
    _t3350,
    _t3351,
    _t3352,
    _t3353,
    _t3354,
    _t3355,
    _t3356,
    _t3357,
    _t3358,
    _t3359,
    _t3360,
    _t3361,
    _t3362,
    _t3363,
    _t3364,
    _t3365,
    _t3366,
    _t3367,
    _t3368,
    _t3369,
    _t3370,
    _t3371,
    _t3372,
    _t3373,
    _t3374,
    _t3375,
    _t3376,
    _t3377,
    _t3378,
    _t3379,
    _t3380,
    _t3381,
    _t3382,
    _t3383,
    _t3384,
    _t3385,
    _t3386,
    _t3387,
    _t3388,
    _t3389,
    _t3390,
    _t3391,
    _t3392,
    _t3393,
    _t3394,
    _t3395,
    _t3396,
    _t3397,
    _t3398,
    _t3399,
    _t3400,
    _t3401,
    _t3402,
    _t3403,
    _t3404,
    _t3405,
    _t3406,
    _t3407,
    _t3408,
    _t3409,
    _t3410,
    _t3411,
    _t3412,
    _t3413,
    _t3414,
    _t3415,
    _t3416,
    _t3417,
    _t3418,
    _t3419,
    _t3420,
    _t3421,
    _t3422,
    _t3423,
    _t3424,
    _t3425,
    _t3426,
    _t3427,
    _t3428,
    _t3429,
    _t3430,
    _t3431,
    _t3432,
    _t3433,
    _t3434,
    _t3435,
    _t3436,
    _t3437,
    _t3438,
    _t3439,
    _t3440,
    _t3441,
    _t3442,
    _t3443,
    _t3444,
    _t3445,
    _t3446,
    _t3447,
    _t3448,
    _t3449,
    _t3450,
    _t3451,
    _t3452,
    _t3453,
    _t3454,
    _t3455,
    _t3456,
    _t3457,
    _t3458,
    _t3459,
    _t3460,
    _t3461,
    _t3462,
    _t3463,
    _t3464,
    _t3465,
    _t3466,
    _t3467,
    _t3468,
    _t3469,
    _t3470,
    _t3471,
    _t3472,
    _t3473,
    _t3474,
    _t3475,
    _t3476,
    _t3477,
    _t3478,
    _t3479,
    _t3480,
    _t3481,
    _t3482,
    _t3483,
    _t3484,
    _t3485,
    _t3486,
    _t3487,
    _t3488,
    _t3489,
    _t3490,
    _t3491,
    _t3492,
    _t3493,
    _t3494,
    _t3495,
    _t3496,
    _t3497,
    _t3498,
    _t3499,
    _t3500,
    _t3501,
    _t3502,
    _t3503,
    _t3504,
    _t3505,
    _t3506,
    _t3507,
    _t3508,
    _t3509,
    _t3510,
    _t3511,
    _t3512,
    _t3513,
    _t3514,
    _t3515,
    _t3516,
    _t3517,
    _t3518,
    _t3519,
    _t3520,
    _t3521,
    _t3522,
    _t3523,
    _t3524,
    _t3525,
    _t3526,
    _t3527,
    _t3528,
    _t3529,
    _t3530,
    _t3531,
    _t3532,
    _t3533,
    _t3534,
    _t3535,
    _t3536,
    _t3537,
    _t3538,
    _t3539,
    _t3540,
    _t3541,
    _t3542,
    _t3543,
    _t3544,
    _t3545,
    _t3546,
    _t3547,
    _t3548,
    _t3549,
    _t3550,
    _t3551,
    _t3552,
    _t3553,
    _t3554,
    _t3555,
    _t3556,
    _t3557,
    _t3558,
    _t3559,
    _t3560,
    _t3561,
    _t3562,
    _t3563,
    _t3564,
    _t3565,
    _t3566,
    _t3567,
    _t3568,
    _t3569,
    _t3570,
    _t3571,
    _t3572,
    _t3573,
    _t3574,
    _t3575,
    _t3576,
    _t3577,
    _t3578,
    _t3579,
    _t3580,
    _t3581,
    _t3582,
    _t3583,
    _t3584,
    _t3585,
    _t3586,
    _t3587,
    _t3588,
    _t3589,
    _t3590,
    _t3591,
    _t3592,
    _t3593,
    _t3594,
    _t3595,
    _t3596,
    _t3597,
    _t3598,
    _t3599,
    _t3600;

const JB2APATREONDB = {};
async function jb2aAAPatreonDatabase(path) {
  JB2APATREONDB._templates = {
    ranged: [200, 200, 200]
  };
  const BASE = `${path}/Library/`;

  const prefix = str => (strs, ...exprs) => `${BASE}${str}/${strs.reduce((a, c, i) => a + exprs[i - 1] + c)}`;

  const l0 = prefix('Cantrip');
  const l1 = prefix('1st_Level');
  const l2 = prefix('2nd_Level');
  const l3 = prefix('3rd_Level');
  const l4 = prefix('4th_Level');
  const l5 = prefix('5th_Level');
  const l6 = prefix('6th_Level');
  const l7 = prefix('7th_Level');
  const lg = prefix('Generic');
  /**
   * Range Types:
   * 
   * Weapon
   * Spell
   * Generic
   * 
   */

  JB2APATREONDB.range = {
    _template: 'ranged',
    weapon: {
      arrow: {
        'regular': {
          regular: {
            '05ft': [lg(_t$1 || (_t$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_05ft_600x400.webm`))],
            '15ft': [lg(_t2$1 || (_t2$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t3$1 || (_t3$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t4$1 || (_t4$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t5$1 || (_t5$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t6$1 || (_t6$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Glowing_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t7$1 || (_t7$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Glowing_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t8$1 || (_t8$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Glowing_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t9$1 || (_t9$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Glowing_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t10$1 || (_t10$1 = _$1`Weapon_Attacks/Ranged/Arrow01_01_Glowing_Green_90ft_4000x400.webm`))]
          }
        },
        'physical': {
          blue: {
            '05ft': [lg(_t11$1 || (_t11$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t12$1 || (_t12$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t13$1 || (_t13$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t14$1 || (_t14$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t15$1 || (_t15$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t16$1 || (_t16$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t17$1 || (_t17$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t18$1 || (_t18$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t19$1 || (_t19$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t20$1 || (_t20$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Physical_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t21$1 || (_t21$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t22$1 || (_t22$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t23$1 || (_t23$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t24$1 || (_t24$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t25$1 || (_t25$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Physical_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t26$1 || (_t26$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t27$1 || (_t27$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t28$1 || (_t28$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t29$1 || (_t29$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t30$1 || (_t30$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Physical_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t31$1 || (_t31$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t32$1 || (_t32$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t33$1 || (_t33$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t34$1 || (_t34$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t35$1 || (_t35$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Physical_90ft_4000x400.webm`))]
          },
          white: {
            '05ft': [lg(_t36$1 || (_t36$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_White_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t37$1 || (_t37$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_White_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t38$1 || (_t38$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_White_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t39$1 || (_t39$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_White_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t40$1 || (_t40$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_White_Physical_90ft_4000x400.webm`))]
          }
        },
        'poison': {
          blue: {
            '05ft': [lg(_t41$1 || (_t41$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t42$1 || (_t42$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t43$1 || (_t43$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t44$1 || (_t44$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t45$1 || (_t45$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Poison_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t46$1 || (_t46$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t47$1 || (_t47$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t48$1 || (_t48$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t49$1 || (_t49$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t50$1 || (_t50$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Poison_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t51$1 || (_t51$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t52$1 || (_t52$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t53$1 || (_t53$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t54$1 || (_t54$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t55$1 || (_t55$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Poison_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t56$1 || (_t56$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t57$1 || (_t57$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t58$1 || (_t58$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t59$1 || (_t59$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t60$1 || (_t60$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Poison_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t61$1 || (_t61$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t62$1 || (_t62$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t63$1 || (_t63$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t64$1 || (_t64$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t65$1 || (_t65$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Poison_90ft_4000x400.webm`))]
          }
        },
        'fire': {
          blue: {
            '05ft': [lg(_t66$1 || (_t66$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t67$1 || (_t67$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t68$1 || (_t68$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t69$1 || (_t69$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t70$1 || (_t70$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Fire_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t71$1 || (_t71$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t72$1 || (_t72$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t73$1 || (_t73$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t74$1 || (_t74$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t75$1 || (_t75$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Fire_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t76$1 || (_t76$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t77$1 || (_t77$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t78$1 || (_t78$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t79$1 || (_t79$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t80$1 || (_t80$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Fire_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t81$1 || (_t81$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t82$1 || (_t82$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t83$1 || (_t83$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t84$1 || (_t84$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t85$1 || (_t85$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Fire_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t86$1 || (_t86$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t87$1 || (_t87$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t88$1 || (_t88$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t89$1 || (_t89$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t90$1 || (_t90$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Fire_90ft_4000x400.webm`))]
          }
        },
        'cold': {
          blue: {
            '05ft': [lg(_t91$1 || (_t91$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t92$1 || (_t92$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t93$1 || (_t93$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t94$1 || (_t94$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t95$1 || (_t95$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Cold_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t96$1 || (_t96$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t97$1 || (_t97$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t98$1 || (_t98$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t99$1 || (_t99$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t100$1 || (_t100$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Cold_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t101$1 || (_t101$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t102$1 || (_t102$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t103$1 || (_t103$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t104$1 || (_t104$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t105$1 || (_t105$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Cold_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t106$1 || (_t106$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t107$1 || (_t107$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t108$1 || (_t108$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t109$1 || (_t109$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t110$1 || (_t110$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Cold_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t111$1 || (_t111$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t112$1 || (_t112$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t113$1 || (_t113$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t114$1 || (_t114$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t115$1 || (_t115$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Cold_90ft_4000x400.webm`))]
          }
        },
        'lightning': {
          blue: {
            '05ft': [lg(_t116$1 || (_t116$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t117$1 || (_t117$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t118$1 || (_t118$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t119$1 || (_t119$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t120$1 || (_t120$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Lightning_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t121$1 || (_t121$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t122$1 || (_t122$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t123$1 || (_t123$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t124$1 || (_t124$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t125$1 || (_t125$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Green_Lightning_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t126$1 || (_t126$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t127$1 || (_t127$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t128$1 || (_t128$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t129$1 || (_t129$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t130$1 || (_t130$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Orange_Lightning_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t131$1 || (_t131$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t132$1 || (_t132$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t133$1 || (_t133$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t134$1 || (_t134$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t135$1 || (_t135$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Pink_Lightning_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t136$1 || (_t136$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t137$1 || (_t137$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t138$1 || (_t138$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t139$1 || (_t139$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t140$1 || (_t140$1 = _$1`Weapon_Attacks/Ranged/Arrow02_01_Regular_Purple_Lightning_90ft_4000x400.webm`))]
          }
        }
      },
      bolt: {
        'physical': {
          orange: {
            '05ft': [lg(_t141$1 || (_t141$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t142$1 || (_t142$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t143$1 || (_t143$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t144$1 || (_t144$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t145$1 || (_t145$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t146$1 || (_t146$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t147$1 || (_t147$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t148$1 || (_t148$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t149$1 || (_t149$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t150$1 || (_t150$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Physical_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t151$1 || (_t151$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t152$1 || (_t152$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t153$1 || (_t153$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t154$1 || (_t154$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t155$1 || (_t155$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Physical_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t156$1 || (_t156$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t157$1 || (_t157$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t158$1 || (_t158$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t159$1 || (_t159$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t160$1 || (_t160$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Physical_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t161$1 || (_t161$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t162$1 || (_t162$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t163$1 || (_t163$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t164$1 || (_t164$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t165$1 || (_t165$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Physical_90ft_4000x400.webm`))]
          },
          white: {
            '05ft': [lg(_t166$1 || (_t166$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_White_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t167$1 || (_t167$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_White_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t168$1 || (_t168$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_White_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t169$1 || (_t169$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_White_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t170$1 || (_t170$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_White_Physical_90ft_4000x400.webm`))]
          }
        },
        'poison': {
          blue: {
            '05ft': [lg(_t171$1 || (_t171$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t172$1 || (_t172$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t173$1 || (_t173$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t174$1 || (_t174$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t175$1 || (_t175$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Poison_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t176$1 || (_t176$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t177$1 || (_t177$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t178$1 || (_t178$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t179$1 || (_t179$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t180$1 || (_t180$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Poison_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t181$1 || (_t181$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t182$1 || (_t182$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t183$1 || (_t183$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t184$1 || (_t184$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t185$1 || (_t185$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Poison_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t186$1 || (_t186$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t187$1 || (_t187$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t188$1 || (_t188$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t189$1 || (_t189$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t190$1 || (_t190$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Poison_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t191$1 || (_t191$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Poison_05ft_600x400.webm`))],
            '15ft': [lg(_t192$1 || (_t192$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Poison_15ft_1000x400.webm`))],
            '30ft': [lg(_t193$1 || (_t193$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Poison_30ft_1600x400.webm`))],
            '60ft': [lg(_t194$1 || (_t194$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Poison_60ft_2800x400.webm`))],
            '90ft': [lg(_t195$1 || (_t195$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Poison_90ft_4000x400.webm`))]
          }
        },
        'fire': {
          blue: {
            '05ft': [lg(_t196$1 || (_t196$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t197$1 || (_t197$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t198$1 || (_t198$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t199$1 || (_t199$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t200$1 || (_t200$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Fire_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t201$1 || (_t201$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t202$1 || (_t202$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t203$1 || (_t203$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t204$1 || (_t204$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t205$1 || (_t205$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Fire_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t206$1 || (_t206$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t207$1 || (_t207$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t208$1 || (_t208$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t209$1 || (_t209$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t210$1 || (_t210$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Fire_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t211$1 || (_t211$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t212$1 || (_t212$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t213$1 || (_t213$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t214$1 || (_t214$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t215$1 || (_t215$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Fire_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t216$1 || (_t216$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Fire_05ft_600x400.webm`))],
            '15ft': [lg(_t217$1 || (_t217$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Fire_15ft_1000x400.webm`))],
            '30ft': [lg(_t218$1 || (_t218$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Fire_30ft_1600x400.webm`))],
            '60ft': [lg(_t219$1 || (_t219$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Fire_60ft_2800x400.webm`))],
            '90ft': [lg(_t220$1 || (_t220$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Fire_90ft_4000x400.webm`))]
          }
        },
        'cold': {
          blue: {
            '05ft': [lg(_t221$1 || (_t221$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t222$1 || (_t222$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t223$1 || (_t223$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t224$1 || (_t224$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t225$1 || (_t225$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Cold_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t226$1 || (_t226$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t227$1 || (_t227$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t228$1 || (_t228$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t229$1 || (_t229$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t230$1 || (_t230$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Cold_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t231$1 || (_t231$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t232$1 || (_t232$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t233$1 || (_t233$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t234$1 || (_t234$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t235$1 || (_t235$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Cold_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t236$1 || (_t236$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t237$1 || (_t237$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t238$1 || (_t238$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t239$1 || (_t239$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t240$1 || (_t240$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Cold_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t241$1 || (_t241$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Cold_05ft_600x400.webm`))],
            '15ft': [lg(_t242$1 || (_t242$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Cold_15ft_1000x400.webm`))],
            '30ft': [lg(_t243$1 || (_t243$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Cold_30ft_1600x400.webm`))],
            '60ft': [lg(_t244$1 || (_t244$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Cold_60ft_2800x400.webm`))],
            '90ft': [lg(_t245$1 || (_t245$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Cold_90ft_4000x400.webm`))]
          }
        },
        'lightning': {
          blue: {
            '05ft': [lg(_t246$1 || (_t246$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t247$1 || (_t247$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t248$1 || (_t248$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t249$1 || (_t249$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t250$1 || (_t250$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Blue_Lightning_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t251$1 || (_t251$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t252$1 || (_t252$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t253$1 || (_t253$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t254$1 || (_t254$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t255$1 || (_t255$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Green_Lightning_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t256$1 || (_t256$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t257$1 || (_t257$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t258$1 || (_t258$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t259$1 || (_t259$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t260$1 || (_t260$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Lightning_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t261$1 || (_t261$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t262$1 || (_t262$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t263$1 || (_t263$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t264$1 || (_t264$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t265$1 || (_t265$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Pink_Lightning_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t266$1 || (_t266$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Lightning_05ft_600x400.webm`))],
            '15ft': [lg(_t267$1 || (_t267$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Lightning_15ft_1000x400.webm`))],
            '30ft': [lg(_t268$1 || (_t268$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Lightning_30ft_1600x400.webm`))],
            '60ft': [lg(_t269$1 || (_t269$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Lightning_60ft_2800x400.webm`))],
            '90ft': [lg(_t270$1 || (_t270$1 = _$1`Weapon_Attacks/Ranged/Bolt01_01_Regular_Purple_Lightning_90ft_4000x400.webm`))]
          }
        }
      },
      boulder: {
        '01': {
          white: {
            '05ft': [lg(_t271$1 || (_t271$1 = _$1`Weapon_Attacks/Ranged/BoulderToss01_01_Regular_White_05ft_600x500.webm`))],
            '15ft': [lg(_t272$1 || (_t272$1 = _$1`Weapon_Attacks/Ranged/BoulderToss01_01_Regular_White_15ft_1000x500.webm`))],
            '30ft': [lg(_t273$1 || (_t273$1 = _$1`Weapon_Attacks/Ranged/BoulderToss01_01_Regular_White_30ft_1600x500.webm`))],
            '60ft': [lg(_t274$1 || (_t274$1 = _$1`Weapon_Attacks/Ranged/BoulderToss01_01_Regular_White_60ft_2800x500.webm`))],
            '90ft': [lg(_t275$1 || (_t275$1 = _$1`Weapon_Attacks/Ranged/BoulderToss01_01_Regular_White_90ft_4000x500.webm`))]
          }
        }
      },
      bullet: {
        '1': {
          orange: {
            '05ft': [lg(_t276$1 || (_t276$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t277$1 || (_t277$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t278$1 || (_t278$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t279$1 || (_t279$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t280$1 || (_t280$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t281$1 || (_t281$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t282$1 || (_t282$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t283$1 || (_t283$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t284$1 || (_t284$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t285$1 || (_t285$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t286$1 || (_t286$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t287$1 || (_t287$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t288$1 || (_t288$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t289$1 || (_t289$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t290$1 || (_t290$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Green_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t291$1 || (_t291$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t292$1 || (_t292$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t293$1 || (_t293$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t294$1 || (_t294$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t295$1 || (_t295$1 = _$1`Weapon_Attacks/Ranged/Bullet_01_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '2': {
          orange: {
            '05ft': [lg(_t296$1 || (_t296$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t297$1 || (_t297$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t298$1 || (_t298$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t299$1 || (_t299$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t300$1 || (_t300$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t301$1 || (_t301$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t302$1 || (_t302$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t303$1 || (_t303$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t304$1 || (_t304$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t305$1 || (_t305$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t306$1 || (_t306$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t307$1 || (_t307$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t308$1 || (_t308$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t309$1 || (_t309$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t310$1 || (_t310$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Green_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t311$1 || (_t311$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t312$1 || (_t312$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t313$1 || (_t313$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t314$1 || (_t314$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t315$1 || (_t315$1 = _$1`Weapon_Attacks/Ranged/Bullet_02_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '3': {
          orange: {
            '05ft': [lg(_t316$1 || (_t316$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t317$1 || (_t317$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t318$1 || (_t318$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t319$1 || (_t319$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t320$1 || (_t320$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Orange_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t321$1 || (_t321$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t322$1 || (_t322$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t323$1 || (_t323$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t324$1 || (_t324$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t325$1 || (_t325$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t326$1 || (_t326$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t327$1 || (_t327$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t328$1 || (_t328$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t329$1 || (_t329$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t330$1 || (_t330$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Green_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t331$1 || (_t331$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t332$1 || (_t332$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t333$1 || (_t333$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t334$1 || (_t334$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t335$1 || (_t335$1 = _$1`Weapon_Attacks/Ranged/Bullet_03_Regular_Red_90ft_4000x400.webm`))]
          }
        }
      },
      chakram: {
        '01': {
          white: {
            '15ft': [lg(_t336$1 || (_t336$1 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t337$1 || (_t337$1 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t338$1 || (_t338$1 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t339$1 || (_t339$1 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_90ft_4000x400.webm`))]
          }
        },
        '02': {
          white: {
            '15ft': [lg(_t340$1 || (_t340$1 = _$1`Weapon_Attacks/Ranged/Chakram01_02_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t341$1 || (_t341$1 = _$1`Weapon_Attacks/Ranged/Chakram01_02_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t342$1 || (_t342$1 = _$1`Weapon_Attacks/Ranged/Chakram01_02_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t343$1 || (_t343$1 = _$1`Weapon_Attacks/Ranged/Chakram01_02_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      dagger: {
        '01': {
          white: {
            '15ft': [lg(_t344$1 || (_t344$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t345$1 || (_t345$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t346$1 || (_t346$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t347$1 || (_t347$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_90ft_4000x400.webm`))]
          },
          blue: {
            '15ft': [lg(_t348$1 || (_t348$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t349$1 || (_t349$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t350$1 || (_t350$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t351$1 || (_t351$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '15ft': [lg(_t352$1 || (_t352$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t353$1 || (_t353$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t354$1 || (_t354$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t355$1 || (_t355$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_90ft_4000x400.webm`))]
          },
          pink: {
            '15ft': [lg(_t356$1 || (_t356$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [lg(_t357$1 || (_t357$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [lg(_t358$1 || (_t358$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [lg(_t359$1 || (_t359$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          red: {
            '15ft': [lg(_t360$1 || (_t360$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t361$1 || (_t361$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t362$1 || (_t362$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t363$1 || (_t363$1 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '02': {
          white: {
            '15ft': [lg(_t364$1 || (_t364$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t365$1 || (_t365$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t366$1 || (_t366$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t367$1 || (_t367$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_90ft_4000x400.webm`))]
          },
          blue: {
            '15ft': [lg(_t368$1 || (_t368$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t369$1 || (_t369$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t370$1 || (_t370$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t371$1 || (_t371$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '15ft': [lg(_t372$1 || (_t372$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t373$1 || (_t373$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t374$1 || (_t374$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t375$1 || (_t375$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_90ft_4000x400.webm`))]
          },
          pink: {
            '15ft': [lg(_t376$1 || (_t376$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [lg(_t377$1 || (_t377$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [lg(_t378$1 || (_t378$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [lg(_t379$1 || (_t379$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          red: {
            '15ft': [lg(_t380$1 || (_t380$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t381$1 || (_t381$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t382$1 || (_t382$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t383$1 || (_t383$1 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        'kunai': {
          white: {
            '15ft': [lg(_t384$1 || (_t384$1 = _$1`Weapon_Attacks/Ranged/Kunai01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t385$1 || (_t385$1 = _$1`Weapon_Attacks/Ranged/Kunai01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t386$1 || (_t386$1 = _$1`Weapon_Attacks/Ranged/Kunai01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t387$1 || (_t387$1 = _$1`Weapon_Attacks/Ranged/Kunai01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      greataxe: {
        '01': {
          white: {
            '15ft': [lg(_t388$1 || (_t388$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t389$1 || (_t389$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t390$1 || (_t390$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t391$1 || (_t391$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_White_90ft_4000x600.webm`))]
          },
          blue: {
            '15ft': [lg(_t392$1 || (_t392$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_Blue_15ft_1000x600.webm`))],
            '30ft': [lg(_t393$1 || (_t393$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_Blue_30ft_1600x600.webm`))],
            '60ft': [lg(_t394$1 || (_t394$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_Blue_60ft_2800x600.webm`))],
            '90ft': [lg(_t395$1 || (_t395$1 = _$1`Weapon_Attacks/Ranged/GreatAxe01_01_Regular_Blue_90ft_4000x600.webm`))]
          }
        }
      },
      greatsword: {
        '01': {
          white: {
            '15ft': [lg(_t396$1 || (_t396$1 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t397$1 || (_t397$1 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t398$1 || (_t398$1 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t399$1 || (_t399$1 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_90ft_4000x600.webm`))]
          }
        }
      },
      hammer: {
        '01': {
          white: {
            '15ft': [lg(_t400$1 || (_t400$1 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t401$1 || (_t401$1 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t402$1 || (_t402$1 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t403$1 || (_t403$1 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      handaxe: {
        '01': {
          white: {
            '15ft': [lg(_t404$1 || (_t404$1 = _$1`Weapon_Attacks/Ranged/HandAxe01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t405$1 || (_t405$1 = _$1`Weapon_Attacks/Ranged/HandAxe01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t406$1 || (_t406$1 = _$1`Weapon_Attacks/Ranged/HandAxe01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t407$1 || (_t407$1 = _$1`Weapon_Attacks/Ranged/HandAxe01_01_Regular_White_90ft_4000x400.webm`))]
          }
        },
        '02': {
          white: {
            '15ft': [lg(_t408$1 || (_t408$1 = _$1`Weapon_Attacks/Ranged/HandAxe02_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t409$1 || (_t409$1 = _$1`Weapon_Attacks/Ranged/HandAxe02_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t410$1 || (_t410$1 = _$1`Weapon_Attacks/Ranged/HandAxe02_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t411$1 || (_t411$1 = _$1`Weapon_Attacks/Ranged/HandAxe02_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      javelin: {
        '01': {
          white: {
            '15ft': [lg(_t412$1 || (_t412$1 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t413$1 || (_t413$1 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t414$1 || (_t414$1 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t415$1 || (_t415$1 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      lasershot: {
        '01': {
          blue: {
            '05ft': [lg(_t416$1 || (_t416$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t417$1 || (_t417$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t418$1 || (_t418$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t419$1 || (_t419$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t420$1 || (_t420$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t421$1 || (_t421$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t422$1 || (_t422$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t423$1 || (_t423$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t424$1 || (_t424$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t425$1 || (_t425$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t426$1 || (_t426$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t427$1 || (_t427$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t428$1 || (_t428$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t429$1 || (_t429$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t430$1 || (_t430$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [lg(_t431$1 || (_t431$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Pink_05ft_600x400.webm`))],
            '15ft': [lg(_t432$1 || (_t432$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [lg(_t433$1 || (_t433$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [lg(_t434$1 || (_t434$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [lg(_t435$1 || (_t435$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t436$1 || (_t436$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t437$1 || (_t437$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t438$1 || (_t438$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t439$1 || (_t439$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t440$1 || (_t440$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Purple_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t441$1 || (_t441$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t442$1 || (_t442$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t443$1 || (_t443$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t444$1 || (_t444$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t445$1 || (_t445$1 = _$1`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_90ft_4000x400.webm`))]
          }
        }
      },
      lasersword: {
        '01': {
          blue: {
            '15ft': [lg(_t446$1 || (_t446$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_15ft_1000x600.webm`))],
            '30ft': [lg(_t447$1 || (_t447$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_30ft_1600x600.webm`))],
            '60ft': [lg(_t448$1 || (_t448$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_60ft_2800x600.webm`))],
            '90ft': [lg(_t449$1 || (_t449$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_90ft_4000x600.webm`))]
          },
          darkred: {
            '15ft': [lg(_t450$1 || (_t450$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_Red_15ft_1000x600.webm`))],
            '30ft': [lg(_t451$1 || (_t451$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_Red_30ft_1600x600.webm`))],
            '60ft': [lg(_t452$1 || (_t452$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_Red_60ft_2800x600.webm`))],
            '90ft': [lg(_t453$1 || (_t453$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_Red_90ft_4000x600.webm`))]
          },
          darkwhite: {
            '15ft': [lg(_t454$1 || (_t454$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t455$1 || (_t455$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t456$1 || (_t456$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t457$1 || (_t457$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Dark_White_90ft_4000x600.webm`))]
          },
          darkblue: {
            '15ft': [lg(_t458$1 || (_t458$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue02_15ft_1000x600.webm`))],
            '30ft': [lg(_t459$1 || (_t459$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue02_30ft_1600x600.webm`))],
            '60ft': [lg(_t460$1 || (_t460$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue02_60ft_2800x600.webm`))],
            '90ft': [lg(_t461$1 || (_t461$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue02_90ft_4000x600.webm`))]
          },
          green: {
            '15ft': [lg(_t462$1 || (_t462$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green_15ft_1000x600.webm`))],
            '30ft': [lg(_t463$1 || (_t463$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green_30ft_1600x600.webm`))],
            '60ft': [lg(_t464$1 || (_t464$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green_60ft_2800x600.webm`))],
            '90ft': [lg(_t465$1 || (_t465$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green_90ft_4000x600.webm`))]
          },
          palegreen: {
            '15ft': [lg(_t466$1 || (_t466$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green02_15ft_1000x600.webm`))],
            '30ft': [lg(_t467$1 || (_t467$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green02_30ft_1600x600.webm`))],
            '60ft': [lg(_t468$1 || (_t468$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green02_60ft_2800x600.webm`))],
            '90ft': [lg(_t469$1 || (_t469$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Green02_90ft_4000x600.webm`))]
          },
          orange: {
            '15ft': [lg(_t470$1 || (_t470$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Orange_15ft_1000x600.webm`))],
            '30ft': [lg(_t471$1 || (_t471$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Orange_30ft_1600x600.webm`))],
            '60ft': [lg(_t472$1 || (_t472$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Orange_60ft_2800x600.webm`))],
            '90ft': [lg(_t473$1 || (_t473$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Orange_90ft_4000x600.webm`))]
          },
          purple: {
            '15ft': [lg(_t474$1 || (_t474$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Purple_15ft_1000x600.webm`))],
            '30ft': [lg(_t475$1 || (_t475$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Purple_30ft_1600x600.webm`))],
            '60ft': [lg(_t476$1 || (_t476$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Purple_60ft_2800x600.webm`))],
            '90ft': [lg(_t477$1 || (_t477$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Purple_90ft_4000x600.webm`))]
          },
          red: {
            '15ft': [lg(_t478$1 || (_t478$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Red_15ft_1000x600.webm`))],
            '30ft': [lg(_t479$1 || (_t479$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Red_30ft_1600x600.webm`))],
            '60ft': [lg(_t480$1 || (_t480$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Red_60ft_2800x600.webm`))],
            '90ft': [lg(_t481$1 || (_t481$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Red_90ft_4000x600.webm`))]
          },
          yellow: {
            '15ft': [lg(_t482$1 || (_t482$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Yellow_15ft_1000x600.webm`))],
            '30ft': [lg(_t483$1 || (_t483$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Yellow_30ft_1600x600.webm`))],
            '60ft': [lg(_t484$1 || (_t484$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Yellow_60ft_2800x600.webm`))],
            '90ft': [lg(_t485$1 || (_t485$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Yellow_90ft_4000x600.webm`))]
          },
          white: {
            '15ft': [lg(_t486$1 || (_t486$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t487$1 || (_t487$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t488$1 || (_t488$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t489$1 || (_t489$1 = _$1`Weapon_Attacks/Ranged/LaserSword01_01_Regular_White_90ft_4000x600.webm`))]
          }
        },
        '02': {
          blue: {
            '15ft': [lg(_t490$1 || (_t490$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue_15ft_1000x600.webm`))],
            '30ft': [lg(_t491$1 || (_t491$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue_30ft_1600x600.webm`))],
            '60ft': [lg(_t492$1 || (_t492$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue_60ft_2800x600.webm`))],
            '90ft': [lg(_t493$1 || (_t493$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue_90ft_4000x600.webm`))]
          },
          darkred: {
            '15ft': [lg(_t494$1 || (_t494$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_Red_15ft_1000x600.webm`))],
            '30ft': [lg(_t495$1 || (_t495$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_Red_30ft_1600x600.webm`))],
            '60ft': [lg(_t496$1 || (_t496$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_Red_60ft_2800x600.webm`))],
            '90ft': [lg(_t497$1 || (_t497$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_Red_90ft_4000x600.webm`))]
          },
          darkwhite: {
            '15ft': [lg(_t498$1 || (_t498$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t499$1 || (_t499$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t500$1 || (_t500$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t501$1 || (_t501$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Dark_White_90ft_4000x600.webm`))]
          },
          darkblue: {
            '15ft': [lg(_t502$1 || (_t502$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue02_15ft_1000x600.webm`))],
            '30ft': [lg(_t503$1 || (_t503$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue02_30ft_1600x600.webm`))],
            '60ft': [lg(_t504$1 || (_t504$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue02_60ft_2800x600.webm`))],
            '90ft': [lg(_t505$1 || (_t505$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Blue02_90ft_4000x600.webm`))]
          },
          green: {
            '15ft': [lg(_t506$1 || (_t506$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green_15ft_1000x600.webm`))],
            '30ft': [lg(_t507$1 || (_t507$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green_30ft_1600x600.webm`))],
            '60ft': [lg(_t508$1 || (_t508$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green_60ft_2800x600.webm`))],
            '90ft': [lg(_t509$1 || (_t509$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green_90ft_4000x600.webm`))]
          },
          palegreen: {
            '15ft': [lg(_t510$1 || (_t510$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green02_15ft_1000x600.webm`))],
            '30ft': [lg(_t511$1 || (_t511$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green02_30ft_1600x600.webm`))],
            '60ft': [lg(_t512$1 || (_t512$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green02_60ft_2800x600.webm`))],
            '90ft': [lg(_t513$1 || (_t513$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Green02_90ft_4000x600.webm`))]
          },
          orange: {
            '15ft': [lg(_t514$1 || (_t514$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Orange_15ft_1000x600.webm`))],
            '30ft': [lg(_t515$1 || (_t515$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Orange_30ft_1600x600.webm`))],
            '60ft': [lg(_t516$1 || (_t516$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Orange_60ft_2800x600.webm`))],
            '90ft': [lg(_t517$1 || (_t517$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Orange_90ft_4000x600.webm`))]
          },
          purple: {
            '15ft': [lg(_t518$1 || (_t518$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Purple_15ft_1000x600.webm`))],
            '30ft': [lg(_t519$1 || (_t519$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Purple_30ft_1600x600.webm`))],
            '60ft': [lg(_t520$1 || (_t520$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Purple_60ft_2800x600.webm`))],
            '90ft': [lg(_t521$1 || (_t521$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Purple_90ft_4000x600.webm`))]
          },
          red: {
            '15ft': [lg(_t522$1 || (_t522$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_15ft_1000x600.webm`))],
            '30ft': [lg(_t523$1 || (_t523$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_30ft_1600x600.webm`))],
            '60ft': [lg(_t524$1 || (_t524$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_60ft_2800x600.webm`))],
            '90ft': [lg(_t525$1 || (_t525$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_90ft_4000x600.webm`))]
          },
          yellow: {
            '15ft': [lg(_t526$1 || (_t526$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Yellow_15ft_1000x600.webm`))],
            '30ft': [lg(_t527$1 || (_t527$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Yellow_30ft_1600x600.webm`))],
            '60ft': [lg(_t528$1 || (_t528$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Yellow_60ft_2800x600.webm`))],
            '90ft': [lg(_t529$1 || (_t529$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Yellow_90ft_4000x600.webm`))]
          },
          white: {
            '15ft': [lg(_t530$1 || (_t530$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t531$1 || (_t531$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t532$1 || (_t532$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t533$1 || (_t533$1 = _$1`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_White_90ft_4000x600.webm`))]
          }
        }
      },
      mace: {
        '01': {
          white: {
            '15ft': [lg(_t534$1 || (_t534$1 = _$1`Weapon_Attacks/Ranged/Mace01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t535$1 || (_t535$1 = _$1`Weapon_Attacks/Ranged/Mace01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t536$1 || (_t536$1 = _$1`Weapon_Attacks/Ranged/Mace01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t537$1 || (_t537$1 = _$1`Weapon_Attacks/Ranged/Mace01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      pumpkin: {
        '01': {
          regular: {
            '05ft': [lg(_t538$1 || (_t538$1 = _$1`Weapon_Attacks/Ranged/PumpkinToss01_01_Regular_Orange_05ft_600x500.webm`))],
            '15ft': [lg(_t539$1 || (_t539$1 = _$1`Weapon_Attacks/Ranged/PumpkinToss01_01_Regular_Orange_15ft_1000x500.webm`))],
            '30ft': [lg(_t540$1 || (_t540$1 = _$1`Weapon_Attacks/Ranged/PumpkinToss01_01_Regular_Orange_30ft_1600x500.webm`))],
            '60ft': [lg(_t541$1 || (_t541$1 = _$1`Weapon_Attacks/Ranged/PumpkinToss01_01_Regular_Orange_60ft_2800x500.webm`))],
            '90ft': [lg(_t542$1 || (_t542$1 = _$1`Weapon_Attacks/Ranged/PumpkinToss01_01_Regular_Orange_90ft_4000x500.webm`))]
          }
        }
      },
      siegeboulder: {
        '01': {
          white: {
            '05ft': [lg(_t543$1 || (_t543$1 = _$1`Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_05ft_600x500.webm`))],
            '15ft': [lg(_t544$1 || (_t544$1 = _$1`Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_15ft_1000x500.webm`))],
            '30ft': [lg(_t545$1 || (_t545$1 = _$1`Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_30ft_1600x500.webm`))],
            '60ft': [lg(_t546$1 || (_t546$1 = _$1`Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_60ft_2800x500.webm`))],
            '90ft': [lg(_t547$1 || (_t547$1 = _$1`Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_90ft_4000x500.webm`))]
          }
        }
      },
      sling: {
        '01': {
          white: {
            '05ft': [lg(_t548$1 || (_t548$1 = _$1`Weapon_Attacks/Ranged/SlingShot_01_Regular_White_05ft_600x400.webm`))],
            '15ft': [lg(_t549$1 || (_t549$1 = _$1`Weapon_Attacks/Ranged/SlingShot_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t550$1 || (_t550$1 = _$1`Weapon_Attacks/Ranged/SlingShot_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t551$1 || (_t551$1 = _$1`Weapon_Attacks/Ranged/SlingShot_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t552$1 || (_t552$1 = _$1`Weapon_Attacks/Ranged/SlingShot_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      snipe: {
        '01': {
          blue: {
            '05ft': [lg(_t553$1 || (_t553$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t554$1 || (_t554$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t555$1 || (_t555$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t556$1 || (_t556$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t557$1 || (_t557$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t558$1 || (_t558$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t559$1 || (_t559$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t560$1 || (_t560$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t561$1 || (_t561$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t562$1 || (_t562$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Green_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t563$1 || (_t563$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t564$1 || (_t564$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t565$1 || (_t565$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t566$1 || (_t566$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t567$1 || (_t567$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t568$1 || (_t568$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t569$1 || (_t569$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t570$1 || (_t570$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t571$1 || (_t571$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t572$1 || (_t572$1 = _$1`Weapon_Attacks/Ranged/Snipe_01_Regular_Red_90ft_4000x400.webm`))]
          }
        }
      },
      snowball: {
        '01': {
          white: {
            '05ft': [lg(_t573$1 || (_t573$1 = _$1`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_05ft_600x500.webm`))],
            '15ft': [lg(_t574$1 || (_t574$1 = _$1`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_15ft_1000x500.webm`))],
            '30ft': [lg(_t575$1 || (_t575$1 = _$1`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_30ft_1600x500.webm`))],
            '60ft': [lg(_t576$1 || (_t576$1 = _$1`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_60ft_2800x500.webm`))],
            '90ft': [lg(_t577$1 || (_t577$1 = _$1`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_90ft_4000x500.webm`))]
          }
        }
      },
      spear: {
        '01': {
          white: {
            '15ft': [lg(_t578$1 || (_t578$1 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t579$1 || (_t579$1 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t580$1 || (_t580$1 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t581$1 || (_t581$1 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      sword: {
        '01': {
          blue: {
            '15ft': [lg(_t582$1 || (_t582$1 = _$1`Weapon_Attacks/Ranged/Sword01_02_Regular_Blue_15ft_1000x600.webm`))],
            '30ft': [lg(_t583$1 || (_t583$1 = _$1`Weapon_Attacks/Ranged/Sword01_02_Regular_Blue_30ft_1600x600.webm`))],
            '60ft': [lg(_t584$1 || (_t584$1 = _$1`Weapon_Attacks/Ranged/Sword01_02_Regular_Blue_60ft_2800x600.webm`))],
            '90ft': [lg(_t585$1 || (_t585$1 = _$1`Weapon_Attacks/Ranged/Sword01_02_Regular_Blue_90ft_4000x600.webm`))]
          },
          white: {
            '15ft': [lg(_t586$1 || (_t586$1 = _$1`Weapon_Attacks/Ranged/Sword01_01_Regular_White_15ft_1000x600.webm`))],
            '30ft': [lg(_t587$1 || (_t587$1 = _$1`Weapon_Attacks/Ranged/Sword01_01_Regular_White_30ft_1600x600.webm`))],
            '60ft': [lg(_t588$1 || (_t588$1 = _$1`Weapon_Attacks/Ranged/Sword01_01_Regular_White_60ft_2800x600.webm`))],
            '90ft': [lg(_t589$1 || (_t589$1 = _$1`Weapon_Attacks/Ranged/Sword01_01_Regular_White_90ft_4000x600.webm`))]
          }
        }
      }
    },
    spell: {
      chainlightning: {
        primary: {
          blue: {
            '05ft': [l6(_t590$1 || (_t590$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t591$1 || (_t591$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t592$1 || (_t592$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t593$1 || (_t593$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t594$1 || (_t594$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_90ft_Primary_4000x400.webm`))]
          },
          darkgreen: {
            '05ft': [l6(_t595$1 || (_t595$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t596$1 || (_t596$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t597$1 || (_t597$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t598$1 || (_t598$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t599$1 || (_t599$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_90ft_Primary_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [l6(_t600$1 || (_t600$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t601$1 || (_t601$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t602$1 || (_t602$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t603$1 || (_t603$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t604$1 || (_t604$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_90ft_Primary_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l6(_t605$1 || (_t605$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t606$1 || (_t606$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t607$1 || (_t607$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t608$1 || (_t608$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t609$1 || (_t609$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_90ft_Primary_4000x400.webm`))]
          },
          green: {
            '05ft': [l6(_t610$1 || (_t610$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t611$1 || (_t611$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t612$1 || (_t612$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t613$1 || (_t613$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t614$1 || (_t614$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_90ft_Primary_4000x400.webm`))]
          },
          orange: {
            '05ft': [l6(_t615$1 || (_t615$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t616$1 || (_t616$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t617$1 || (_t617$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t618$1 || (_t618$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t619$1 || (_t619$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_90ft_Primary_4000x400.webm`))]
          },
          purple: {
            '05ft': [l6(_t620$1 || (_t620$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t621$1 || (_t621$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t622$1 || (_t622$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t623$1 || (_t623$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t624$1 || (_t624$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_90ft_Primary_4000x400.webm`))]
          },
          red: {
            '05ft': [l6(_t625$1 || (_t625$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t626$1 || (_t626$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t627$1 || (_t627$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t628$1 || (_t628$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t629$1 || (_t629$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_90ft_Primary_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l6(_t630$1 || (_t630$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t631$1 || (_t631$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t632$1 || (_t632$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t633$1 || (_t633$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t634$1 || (_t634$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_90ft_Primary_4000x400.webm`))]
          }
        },
        secondary: {
          blue: {
            '05ft': [l6(_t635$1 || (_t635$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t636$1 || (_t636$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t637$1 || (_t637$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t638$1 || (_t638$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t639$1 || (_t639$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Blue_90ft_Secondary_4000x400.webm`))]
          },
          darkgreen: {
            '05ft': [l6(_t640$1 || (_t640$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t641$1 || (_t641$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t642$1 || (_t642$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t643$1 || (_t643$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t644$1 || (_t644$1 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green02_90ft_Secondary_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [l6(_t645$1 || (_t645$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t646$1 || (_t646$1 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t647 || (_t647 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t648 || (_t648 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t649 || (_t649 = _$1`Chain_Lightning/ChainLightning_01_Dark_Purple_90ft_Secondary_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l6(_t650 || (_t650 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t651 || (_t651 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t652 || (_t652 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t653 || (_t653 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t654 || (_t654 = _$1`Chain_Lightning/ChainLightning_01_Dark_Red_90ft_Secondary_4000x400.webm`))]
          },
          green: {
            '05ft': [l6(_t655 || (_t655 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t656 || (_t656 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t657 || (_t657 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t658 || (_t658 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t659 || (_t659 = _$1`Chain_Lightning/ChainLightning_01_Regular_Green_90ft_Secondary_4000x400.webm`))]
          },
          orange: {
            '05ft': [l6(_t660 || (_t660 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t661 || (_t661 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t662 || (_t662 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t663 || (_t663 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t664 || (_t664 = _$1`Chain_Lightning/ChainLightning_01_Regular_Orange_90ft_Secondary_4000x400.webm`))]
          },
          purple: {
            '05ft': [l6(_t665 || (_t665 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t666 || (_t666 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t667 || (_t667 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t668 || (_t668 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t669 || (_t669 = _$1`Chain_Lightning/ChainLightning_01_Regular_Purple_90ft_Secondary_4000x400.webm`))]
          },
          red: {
            '05ft': [l6(_t670 || (_t670 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t671 || (_t671 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t672 || (_t672 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t673 || (_t673 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t674 || (_t674 = _$1`Chain_Lightning/ChainLightning_01_Regular_Red_90ft_Secondary_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l6(_t675 || (_t675 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t676 || (_t676 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t677 || (_t677 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t678 || (_t678 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t679 || (_t679 = _$1`Chain_Lightning/ChainLightning_01_Regular_Yellow_90ft_Secondary_4000x400.webm`))]
          }
        }
      },
      disintegrate: {
        '01': {
          green: {
            '05ft': [l6(_t680 || (_t680 = _$1`Disintegrate/Disintegrate_01_Regular_Green01_05ft_600x400.webm`))],
            '15ft': [l6(_t681 || (_t681 = _$1`Disintegrate/Disintegrate_01_Regular_Green01_15ft_1000x400.webm`))],
            '30ft': [l6(_t682 || (_t682 = _$1`Disintegrate/Disintegrate_01_Regular_Green01_30ft_1600x400.webm`))],
            '60ft': [l6(_t683 || (_t683 = _$1`Disintegrate/Disintegrate_01_Regular_Green01_60ft_2800x400.webm`))],
            '90ft': [l6(_t684 || (_t684 = _$1`Disintegrate/Disintegrate_01_Regular_Green01_90ft_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l6(_t685 || (_t685 = _$1`Disintegrate/Disintegrate_01_Dark_Red_05ft_600x400.webm`))],
            '15ft': [l6(_t686 || (_t686 = _$1`Disintegrate/Disintegrate_01_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [l6(_t687 || (_t687 = _$1`Disintegrate/Disintegrate_01_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [l6(_t688 || (_t688 = _$1`Disintegrate/Disintegrate_01_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [l6(_t689 || (_t689 = _$1`Disintegrate/Disintegrate_01_Dark_Red_90ft_4000x400.webm`))]
          },
          orangepink: {
            '05ft': [l6(_t690 || (_t690 = _$1`Disintegrate/Disintegrate_01_Regular_OrangePink_05ft_600x400.webm`))],
            '15ft': [l6(_t691 || (_t691 = _$1`Disintegrate/Disintegrate_01_Regular_OrangePink_15ft_1000x400.webm`))],
            '30ft': [l6(_t692 || (_t692 = _$1`Disintegrate/Disintegrate_01_Regular_OrangePink_30ft_1600x400.webm`))],
            '60ft': [l6(_t693 || (_t693 = _$1`Disintegrate/Disintegrate_01_Regular_OrangePink_60ft_2800x400.webm`))],
            '90ft': [l6(_t694 || (_t694 = _$1`Disintegrate/Disintegrate_01_Regular_OrangePink_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [l6(_t695 || (_t695 = _$1`Disintegrate/Disintegrate_01_Regular_Pink_05ft_600x400.webm`))],
            '15ft': [l6(_t696 || (_t696 = _$1`Disintegrate/Disintegrate_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [l6(_t697 || (_t697 = _$1`Disintegrate/Disintegrate_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [l6(_t698 || (_t698 = _$1`Disintegrate/Disintegrate_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [l6(_t699 || (_t699 = _$1`Disintegrate/Disintegrate_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          purpleblue: {
            '05ft': [l6(_t700 || (_t700 = _$1`Disintegrate/Disintegrate_01_Regular_PurpleBlue_05ft_600x400.webm`))],
            '15ft': [l6(_t701 || (_t701 = _$1`Disintegrate/Disintegrate_01_Regular_PurpleBlue_15ft_1000x400.webm`))],
            '30ft': [l6(_t702 || (_t702 = _$1`Disintegrate/Disintegrate_01_Regular_PurpleBlue_30ft_1600x400.webm`))],
            '60ft': [l6(_t703 || (_t703 = _$1`Disintegrate/Disintegrate_01_Regular_PurpleBlue_60ft_2800x400.webm`))],
            '90ft': [l6(_t704 || (_t704 = _$1`Disintegrate/Disintegrate_01_Regular_PurpleBlue_90ft_4000x400.webm`))]
          }
        }
      },
      eldritchblast: {
        '01': {
          purple: {
            '05ft': [l0(_t705 || (_t705 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [l0(_t706 || (_t706 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [l0(_t707 || (_t707 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [l0(_t708 || (_t708 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [l0(_t709 || (_t709 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Purple_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '30ft': [l0(_t710 || (_t710 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [l0(_t711 || (_t711 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [l0(_t712 || (_t712 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Purple_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [l0(_t713 || (_t713 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [l0(_t714 || (_t714 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [l0(_t715 || (_t715 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [l0(_t716 || (_t716 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [l0(_t717 || (_t717 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Green_90ft_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l0(_t718 || (_t718 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Yellow_05ft_600x400.webm`))],
            '15ft': [l0(_t719 || (_t719 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Yellow_15ft_1000x400.webm`))],
            '30ft': [l0(_t720 || (_t720 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Yellow_30ft_1600x400.webm`))],
            '60ft': [l0(_t721 || (_t721 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Yellow_60ft_2800x400.webm`))],
            '90ft': [l0(_t722 || (_t722 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Yellow_90ft_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l0(_t723 || (_t723 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Red_05ft_600x400.webm`))],
            '15ft': [l0(_t724 || (_t724 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [l0(_t725 || (_t725 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [l0(_t726 || (_t726 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [l0(_t727 || (_t727 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Red_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [l0(_t728 || (_t728 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [l0(_t729 || (_t729 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [l0(_t730 || (_t730 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [l0(_t731 || (_t731 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [l0(_t732 || (_t732 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [l0(_t733 || (_t733 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Pink_05ft_600x400.webm`))],
            '15ft': [l0(_t734 || (_t734 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [l0(_t735 || (_t735 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [l0(_t736 || (_t736 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [l0(_t737 || (_t737 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          lightgreen: {
            '05ft': [l0(_t738 || (_t738 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightGreen_05ft_600x400.webm`))],
            '15ft': [l0(_t739 || (_t739 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightGreen_15ft_1000x400.webm`))],
            '30ft': [l0(_t740 || (_t740 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightGreen_30ft_1600x400.webm`))],
            '60ft': [l0(_t741 || (_t741 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightGreen_60ft_2800x400.webm`))],
            '90ft': [l0(_t742 || (_t742 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightGreen_90ft_4000x400.webm`))]
          },
          darkgreen: {
            '05ft': [l0(_t743 || (_t743 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Green_05ft_600x400.webm`))],
            '15ft': [l0(_t744 || (_t744 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [l0(_t745 || (_t745 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [l0(_t746 || (_t746 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [l0(_t747 || (_t747 = _$1`Eldritch_Blast/EldritchBlast_01_Dark_Green_90ft_4000x400.webm`))]
          },
          rainbow: {
            '05ft': [l0(_t748 || (_t748 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Rainbow_05ft_600x400.webm`))],
            '15ft': [l0(_t749 || (_t749 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Rainbow_15ft_1000x400.webm`))],
            '30ft': [l0(_t750 || (_t750 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Rainbow_30ft_1600x400.webm`))],
            '60ft': [l0(_t751 || (_t751 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Rainbow_60ft_2800x400.webm`))],
            '90ft': [l0(_t752 || (_t752 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_Rainbow_90ft_4000x400.webm`))]
          },
          lightblue: {
            '05ft': [l0(_t753 || (_t753 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightBlue_05ft_600x400.webm`))],
            '15ft': [l0(_t754 || (_t754 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightBlue_15ft_1000x400.webm`))],
            '30ft': [l0(_t755 || (_t755 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightBlue_30ft_1600x400.webm`))],
            '60ft': [l0(_t756 || (_t756 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightBlue_60ft_2800x400.webm`))],
            '90ft': [l0(_t757 || (_t757 = _$1`Eldritch_Blast/EldritchBlast_01_Regular_LightBlue_90ft_4000x400.webm`))]
          }
        }
      },
      fireballbeam: {
        '01': {
          blue: {
            '05ft': [l3(_t758 || (_t758 = _$1`Fireball/FireballBeam_01_Blue_05ft_600x400.webm`))],
            '15ft': [l3(_t759 || (_t759 = _$1`Fireball/FireballBeam_01_Blue_15ft_1000x400.webm`))],
            '30ft': [l3(_t760 || (_t760 = _$1`Fireball/FireballBeam_01_Blue_30ft_1600x400.webm`))],
            '60ft': [l3(_t761 || (_t761 = _$1`Fireball/FireballBeam_01_Blue_60ft_2800x400.webm`))],
            '90ft': [l3(_t762 || (_t762 = _$1`Fireball/FireballBeam_01_Blue_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [l3(_t763 || (_t763 = _$1`Fireball/FireballBeam_01_Dark_Purple_05ft_600x400.webm`))],
            '15ft': [l3(_t764 || (_t764 = _$1`Fireball/FireballBeam_01_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [l3(_t765 || (_t765 = _$1`Fireball/FireballBeam_01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [l3(_t766 || (_t766 = _$1`Fireball/FireballBeam_01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [l3(_t767 || (_t767 = _$1`Fireball/FireballBeam_01_Dark_Purple_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [l3(_t768 || (_t768 = _$1`Fireball/FireballBeam_01_Orange_05ft_600x400.webm`))],
            '15ft': [l3(_t769 || (_t769 = _$1`Fireball/FireballBeam_01_Orange_15ft_1000x400.webm`))],
            '30ft': [l3(_t770 || (_t770 = _$1`Fireball/FireballBeam_01_Orange_30ft_1600x400.webm`))],
            '60ft': [l3(_t771 || (_t771 = _$1`Fireball/FireballBeam_01_Orange_60ft_2800x400.webm`))],
            '90ft': [l3(_t772 || (_t772 = _$1`Fireball/FireballBeam_01_Orange_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [l3(_t773 || (_t773 = _$1`Fireball/FireballBeam_01_Purple_05ft_600x400.webm`))],
            '15ft': [l3(_t774 || (_t774 = _$1`Fireball/FireballBeam_01_Purple_15ft_1000x400.webm`))],
            '30ft': [l3(_t775 || (_t775 = _$1`Fireball/FireballBeam_01_Purple_30ft_1600x400.webm`))],
            '60ft': [l3(_t776 || (_t776 = _$1`Fireball/FireballBeam_01_Purple_60ft_2800x400.webm`))],
            '90ft': [l3(_t777 || (_t777 = _$1`Fireball/FireballBeam_01_Purple_90ft_4000x400.webm`))]
          }
        }
      },
      firebolt: {
        '01': {
          orange: {
            '05ft': [l0(_t778 || (_t778 = _$1`Fire_Bolt/FireBolt_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [l0(_t779 || (_t779 = _$1`Fire_Bolt/FireBolt_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [l0(_t780 || (_t780 = _$1`Fire_Bolt/FireBolt_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [l0(_t781 || (_t781 = _$1`Fire_Bolt/FireBolt_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [l0(_t782 || (_t782 = _$1`Fire_Bolt/FireBolt_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [l0(_t783 || (_t783 = _$1`Fire_Bolt/FireBolt_01_Dark_Red_05ft_600x400.webm`))],
            '15ft': [l0(_t784 || (_t784 = _$1`Fire_Bolt/FireBolt_01_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [l0(_t785 || (_t785 = _$1`Fire_Bolt/FireBolt_01_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [l0(_t786 || (_t786 = _$1`Fire_Bolt/FireBolt_01_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [l0(_t787 || (_t787 = _$1`Fire_Bolt/FireBolt_01_Dark_Red_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [l0(_t788 || (_t788 = _$1`Fire_Bolt/FireBolt_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l0(_t789 || (_t789 = _$1`Fire_Bolt/FireBolt_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l0(_t790 || (_t790 = _$1`Fire_Bolt/FireBolt_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l0(_t791 || (_t791 = _$1`Fire_Bolt/FireBolt_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l0(_t792 || (_t792 = _$1`Fire_Bolt/FireBolt_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [l0(_t793 || (_t793 = _$1`Fire_Bolt/FireBolt_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [l0(_t794 || (_t794 = _$1`Fire_Bolt/FireBolt_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [l0(_t795 || (_t795 = _$1`Fire_Bolt/FireBolt_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [l0(_t796 || (_t796 = _$1`Fire_Bolt/FireBolt_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [l0(_t797 || (_t797 = _$1`Fire_Bolt/FireBolt_01_Regular_Green_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [l0(_t798 || (_t798 = _$1`Fire_Bolt/FireBolt_01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [l0(_t799 || (_t799 = _$1`Fire_Bolt/FireBolt_01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [l0(_t800 || (_t800 = _$1`Fire_Bolt/FireBolt_01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [l0(_t801 || (_t801 = _$1`Fire_Bolt/FireBolt_01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [l0(_t802 || (_t802 = _$1`Fire_Bolt/FireBolt_01_Regular_Purple_90ft_4000x400.webm`))]
          },
          darkgreen: {
            '05ft': [l0(_t803 || (_t803 = _$1`Fire_Bolt/FireBolt_01_Dark_Green02_05ft_600x400.webm`))],
            '15ft': [l0(_t804 || (_t804 = _$1`Fire_Bolt/FireBolt_01_Dark_Green02_15ft_1000x400.webm`))],
            '30ft': [l0(_t805 || (_t805 = _$1`Fire_Bolt/FireBolt_01_Dark_Green02_30ft_1600x400.webm`))],
            '60ft': [l0(_t806 || (_t806 = _$1`Fire_Bolt/FireBolt_01_Dark_Green02_60ft_2800x400.webm`))],
            '90ft': [l0(_t807 || (_t807 = _$1`Fire_Bolt/FireBolt_01_Dark_Green02_90ft_4000x400.webm`))]
          },
          palegreen: {
            '05ft': [l0(_t808 || (_t808 = _$1`Fire_Bolt/FireBolt_01_Regular_Green02_05ft_600x400.webm`))],
            '15ft': [l0(_t809 || (_t809 = _$1`Fire_Bolt/FireBolt_01_Regular_Green02_15ft_1000x400.webm`))],
            '30ft': [l0(_t810 || (_t810 = _$1`Fire_Bolt/FireBolt_01_Regular_Green02_30ft_1600x400.webm`))],
            '60ft': [l0(_t811 || (_t811 = _$1`Fire_Bolt/FireBolt_01_Regular_Green02_60ft_2800x400.webm`))],
            '90ft': [l0(_t812 || (_t812 = _$1`Fire_Bolt/FireBolt_01_Regular_Green02_90ft_4000x400.webm`))]
          }
        }
      },
      guidingbolt: {
        '01': {
          yellowblue: {
            '05ft': [l1(_t813 || (_t813 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_05ft_600x400.webm`))],
            '15ft': [l1(_t814 || (_t814 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_15ft_1000x400.webm`))],
            '30ft': [l1(_t815 || (_t815 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_30ft_1600x400.webm`))],
            '60ft': [l1(_t816 || (_t816 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_60ft_2800x400.webm`))],
            '90ft': [l1(_t817 || (_t817 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_90ft_4000x400.webm`))]
          },
          greenorange: {
            '05ft': [l1(_t818 || (_t818 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_GreenOrange_05ft_600x400.webm`))],
            '15ft': [l1(_t819 || (_t819 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_GreenOrange_15ft_1000x400.webm`))],
            '30ft': [l1(_t820 || (_t820 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_GreenOrange_30ft_1600x400.webm`))],
            '60ft': [l1(_t821 || (_t821 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_GreenOrange_60ft_2800x400.webm`))],
            '90ft': [l1(_t822 || (_t822 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_GreenOrange_90ft_4000x400.webm`))]
          },
          purplepink: {
            '05ft': [l1(_t823 || (_t823 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_PurplePink_05ft_600x400.webm`))],
            '15ft': [l1(_t824 || (_t824 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_PurplePink_15ft_1000x400.webm`))],
            '30ft': [l1(_t825 || (_t825 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_PurplePink_30ft_1600x400.webm`))],
            '60ft': [l1(_t826 || (_t826 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_PurplePink_60ft_2800x400.webm`))],
            '90ft': [l1(_t827 || (_t827 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_PurplePink_90ft_4000x400.webm`))]
          },
          whiteblue: {
            '05ft': [l1(_t828 || (_t828 = _$1`Guiding_Bolt/GuidingBolt_01_Dark_BlueWhite_05ft_600x400.webm`))],
            '15ft': [l1(_t829 || (_t829 = _$1`Guiding_Bolt/GuidingBolt_01_Dark_BlueWhite_15ft_1000x400.webm`))],
            '30ft': [l1(_t830 || (_t830 = _$1`Guiding_Bolt/GuidingBolt_01_Dark_BlueWhite_30ft_1600x400.webm`))],
            '60ft': [l1(_t831 || (_t831 = _$1`Guiding_Bolt/GuidingBolt_01_Dark_BlueWhite_60ft_2800x400.webm`))],
            '90ft': [l1(_t832 || (_t832 = _$1`Guiding_Bolt/GuidingBolt_01_Dark_BlueWhite_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [l1(_t833 || (_t833 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Pink_05ft_600x400.webm`))],
            '15ft': [l1(_t834 || (_t834 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [l1(_t835 || (_t835 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [l1(_t836 || (_t836 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [l1(_t837 || (_t837 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Pink_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [l1(_t838 || (_t838 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [l1(_t839 || (_t839 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [l1(_t840 || (_t840 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [l1(_t841 || (_t841 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [l1(_t842 || (_t842 = _$1`Guiding_Bolt/GuidingBolt_01_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '02': {
          yellowblue: {
            '05ft': [l1(_t843 || (_t843 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_BlueYellow_05ft_600x400.webm`))],
            '15ft': [l1(_t844 || (_t844 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_BlueYellow_15ft_1000x400.webm`))],
            '30ft': [l1(_t845 || (_t845 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_BlueYellow_30ft_1600x400.webm`))],
            '60ft': [l1(_t846 || (_t846 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_BlueYellow_60ft_2800x400.webm`))],
            '90ft': [l1(_t847 || (_t847 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_BlueYellow_90ft_4000x400.webm`))]
          },
          greenorange: {
            '05ft': [l1(_t848 || (_t848 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_GreenOrange_05ft_600x400.webm`))],
            '15ft': [l1(_t849 || (_t849 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_GreenOrange_15ft_1000x400.webm`))],
            '30ft': [l1(_t850 || (_t850 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_GreenOrange_30ft_1600x400.webm`))],
            '60ft': [l1(_t851 || (_t851 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_GreenOrange_60ft_2800x400.webm`))],
            '90ft': [l1(_t852 || (_t852 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_GreenOrange_90ft_4000x400.webm`))]
          },
          pink: {
            '05ft': [l1(_t853 || (_t853 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Pink_05ft_600x400.webm`))],
            '15ft': [l1(_t854 || (_t854 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Pink_15ft_1000x400.webm`))],
            '30ft': [l1(_t855 || (_t855 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Pink_30ft_1600x400.webm`))],
            '60ft': [l1(_t856 || (_t856 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Pink_60ft_2800x400.webm`))],
            '90ft': [l1(_t857 || (_t857 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Pink_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [l1(_t858 || (_t858 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Red_05ft_600x400.webm`))],
            '15ft': [l1(_t859 || (_t859 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [l1(_t860 || (_t860 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [l1(_t861 || (_t861 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [l1(_t862 || (_t862 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_Red_90ft_4000x400.webm`))]
          },
          purplepink: {
            '05ft': [l1(_t863 || (_t863 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_PurplePink_05ft_600x400.webm`))],
            '15ft': [l1(_t864 || (_t864 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_PurplePink_15ft_1000x400.webm`))],
            '30ft': [l1(_t865 || (_t865 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_PurplePink_30ft_1600x400.webm`))],
            '60ft': [l1(_t866 || (_t866 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_PurplePink_60ft_2800x400.webm`))],
            '90ft': [l1(_t867 || (_t867 = _$1`Guiding_Bolt/GuidingBolt_02_Regular_PurplePink_90ft_4000x400.webm`))]
          },
          whiteblue: {
            '05ft': [l1(_t868 || (_t868 = _$1`Guiding_Bolt/GuidingBolt_02_Dark_BlueWhite_05ft_600x400.webm`))],
            '15ft': [l1(_t869 || (_t869 = _$1`Guiding_Bolt/GuidingBolt_02_Dark_BlueWhite_15ft_1000x400.webm`))],
            '30ft': [l1(_t870 || (_t870 = _$1`Guiding_Bolt/GuidingBolt_02_Dark_BlueWhite_30ft_1600x400.webm`))],
            '60ft': [l1(_t871 || (_t871 = _$1`Guiding_Bolt/GuidingBolt_02_Dark_BlueWhite_60ft_2800x400.webm`))],
            '90ft': [l1(_t872 || (_t872 = _$1`Guiding_Bolt/GuidingBolt_02_Dark_BlueWhite_90ft_4000x400.webm`))]
          }
        }
      },
      magicmissile: {
        '01': {
          blue: {
            '05ft': [l1(_t873 || (_t873 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_05ft_01_600x400.webm`)), l1(_t874 || (_t874 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_05ft_02_600x400.webm`)), l1(_t875 || (_t875 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_05ft_03_600x400.webm`)), l1(_t876 || (_t876 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_05ft_04_600x400.webm`))],
            '15ft': [l1(_t877 || (_t877 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_15ft_01_1000x400.webm`)), l1(_t878 || (_t878 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_15ft_02_1000x400.webm`)), l1(_t879 || (_t879 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_15ft_03_1000x400.webm`)), l1(_t880 || (_t880 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t881 || (_t881 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_30ft_01_1600x400.webm`)), l1(_t882 || (_t882 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_30ft_02_1600x400.webm`)), l1(_t883 || (_t883 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_30ft_03_1600x400.webm`)), l1(_t884 || (_t884 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t885 || (_t885 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_60ft_01_2800x400.webm`)), l1(_t886 || (_t886 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_60ft_02_2800x400.webm`)), l1(_t887 || (_t887 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_60ft_03_2800x400.webm`)), l1(_t888 || (_t888 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t889 || (_t889 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_90ft_01_4000x400.webm`)), l1(_t890 || (_t890 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_90ft_02_4000x400.webm`)), l1(_t891 || (_t891 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_90ft_03_4000x400.webm`)), l1(_t892 || (_t892 = _$1`Magic_Missile/MagicMissile_01_Regular_Blue_90ft_04_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l1(_t893 || (_t893 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_05ft_01_600x400.webm`)), l1(_t894 || (_t894 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_05ft_02_600x400.webm`)), l1(_t895 || (_t895 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_05ft_03_600x400.webm`)), l1(_t896 || (_t896 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_05ft_04_600x400.webm`))],
            '15ft': [l1(_t897 || (_t897 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_15ft_01_1000x400.webm`)), l1(_t898 || (_t898 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_15ft_02_1000x400.webm`)), l1(_t899 || (_t899 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_15ft_03_1000x400.webm`)), l1(_t900 || (_t900 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t901 || (_t901 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_30ft_01_1600x400.webm`)), l1(_t902 || (_t902 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_30ft_02_1600x400.webm`)), l1(_t903 || (_t903 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_30ft_03_1600x400.webm`)), l1(_t904 || (_t904 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t905 || (_t905 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_60ft_01_2800x400.webm`)), l1(_t906 || (_t906 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_60ft_02_2800x400.webm`)), l1(_t907 || (_t907 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_60ft_03_2800x400.webm`)), l1(_t908 || (_t908 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t909 || (_t909 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_90ft_01_4000x400.webm`)), l1(_t910 || (_t910 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_90ft_02_4000x400.webm`)), l1(_t911 || (_t911 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_90ft_03_4000x400.webm`)), l1(_t912 || (_t912 = _$1`Magic_Missile/MagicMissile_01_Dark_Red_90ft_04_4000x400.webm`))]
          },
          green: {
            '05ft': [l1(_t913 || (_t913 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_05ft_01_600x400.webm`)), l1(_t914 || (_t914 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_05ft_02_600x400.webm`)), l1(_t915 || (_t915 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_05ft_03_600x400.webm`)), l1(_t916 || (_t916 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_05ft_04_600x400.webm`))],
            '15ft': [l1(_t917 || (_t917 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_15ft_01_1000x400.webm`)), l1(_t918 || (_t918 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_15ft_02_1000x400.webm`)), l1(_t919 || (_t919 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_15ft_03_1000x400.webm`)), l1(_t920 || (_t920 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t921 || (_t921 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_30ft_01_1600x400.webm`)), l1(_t922 || (_t922 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_30ft_02_1600x400.webm`)), l1(_t923 || (_t923 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_30ft_03_1600x400.webm`)), l1(_t924 || (_t924 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t925 || (_t925 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_60ft_01_2800x400.webm`)), l1(_t926 || (_t926 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_60ft_02_2800x400.webm`)), l1(_t927 || (_t927 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_60ft_03_2800x400.webm`)), l1(_t928 || (_t928 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t929 || (_t929 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_90ft_01_4000x400.webm`)), l1(_t930 || (_t930 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_90ft_02_4000x400.webm`)), l1(_t931 || (_t931 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_90ft_03_4000x400.webm`)), l1(_t932 || (_t932 = _$1`Magic_Missile/MagicMissile_01_Regular_Green_90ft_04_4000x400.webm`))]
          },
          purple: {
            '05ft': [l1(_t933 || (_t933 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_01_600x400.webm`)), l1(_t934 || (_t934 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_02_600x400.webm`)), l1(_t935 || (_t935 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_03_600x400.webm`)), l1(_t936 || (_t936 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_04_600x400.webm`))],
            '15ft': [l1(_t937 || (_t937 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_01_1000x400.webm`)), l1(_t938 || (_t938 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_02_1000x400.webm`)), l1(_t939 || (_t939 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_03_1000x400.webm`)), l1(_t940 || (_t940 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t941 || (_t941 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_01_1600x400.webm`)), l1(_t942 || (_t942 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_02_1600x400.webm`)), l1(_t943 || (_t943 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_03_1600x400.webm`)), l1(_t944 || (_t944 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t945 || (_t945 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_01_2800x400.webm`)), l1(_t946 || (_t946 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_02_2800x400.webm`)), l1(_t947 || (_t947 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_03_2800x400.webm`)), l1(_t948 || (_t948 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t949 || (_t949 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_01_4000x400.webm`)), l1(_t950 || (_t950 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_02_4000x400.webm`)), l1(_t951 || (_t951 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_03_4000x400.webm`)), l1(_t952 || (_t952 = _$1`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_04_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l1(_t953 || (_t953 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_05ft_01_600x400.webm`)), l1(_t954 || (_t954 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_05ft_02_600x400.webm`)), l1(_t955 || (_t955 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_05ft_03_600x400.webm`)), l1(_t956 || (_t956 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_05ft_04_600x400.webm`))],
            '15ft': [l1(_t957 || (_t957 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_15ft_01_1000x400.webm`)), l1(_t958 || (_t958 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_15ft_02_1000x400.webm`)), l1(_t959 || (_t959 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_15ft_03_1000x400.webm`)), l1(_t960 || (_t960 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t961 || (_t961 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_30ft_01_1600x400.webm`)), l1(_t962 || (_t962 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_30ft_02_1600x400.webm`)), l1(_t963 || (_t963 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_30ft_03_1600x400.webm`)), l1(_t964 || (_t964 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t965 || (_t965 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_60ft_01_2800x400.webm`)), l1(_t966 || (_t966 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_60ft_02_2800x400.webm`)), l1(_t967 || (_t967 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_60ft_03_2800x400.webm`)), l1(_t968 || (_t968 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t969 || (_t969 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_90ft_01_4000x400.webm`)), l1(_t970 || (_t970 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_90ft_02_4000x400.webm`)), l1(_t971 || (_t971 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_90ft_03_4000x400.webm`)), l1(_t972 || (_t972 = _$1`Magic_Missile/MagicMissile_01_Regular_Yellow_90ft_04_4000x400.webm`))]
          },
          orange: {
            '05ft': [l1(_t973 || (_t973 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_05ft_01_600x400.webm`)), l1(_t974 || (_t974 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_05ft_02_600x400.webm`)), l1(_t975 || (_t975 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_05ft_03_600x400.webm`)), l1(_t976 || (_t976 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_05ft_04_600x400.webm`))],
            '15ft': [l1(_t977 || (_t977 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_15ft_01_1000x400.webm`)), l1(_t978 || (_t978 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_15ft_02_1000x400.webm`)), l1(_t979 || (_t979 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_15ft_03_1000x400.webm`)), l1(_t980 || (_t980 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t981 || (_t981 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_30ft_01_1600x400.webm`)), l1(_t982 || (_t982 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_30ft_02_1600x400.webm`)), l1(_t983 || (_t983 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_30ft_03_1600x400.webm`)), l1(_t984 || (_t984 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t985 || (_t985 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_60ft_01_2800x400.webm`)), l1(_t986 || (_t986 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_60ft_02_2800x400.webm`)), l1(_t987 || (_t987 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_60ft_03_2800x400.webm`)), l1(_t988 || (_t988 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t989 || (_t989 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_90ft_01_4000x400.webm`)), l1(_t990 || (_t990 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_90ft_02_4000x400.webm`)), l1(_t991 || (_t991 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_90ft_03_4000x400.webm`)), l1(_t992 || (_t992 = _$1`Magic_Missile/MagicMissile_01_Regular_Orange_90ft_04_4000x400.webm`))]
          }
        }
      },
      rayoffrost: {
        '01': {
          blue: {
            '05ft': [l0(_t993 || (_t993 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l0(_t994 || (_t994 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l0(_t995 || (_t995 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l0(_t996 || (_t996 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l0(_t997 || (_t997 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [l0(_t998 || (_t998 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [l0(_t999 || (_t999 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [l0(_t1000 || (_t1000 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [l0(_t1001 || (_t1001 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [l0(_t1002 || (_t1002 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_Green_90ft_4000x400.webm`))]
          },
          purpleteal: {
            '05ft': [l0(_t1003 || (_t1003 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_PurpleTeal_05ft_600x400.webm`))],
            '15ft': [l0(_t1004 || (_t1004 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_PurpleTeal_15ft_1000x400.webm`))],
            '30ft': [l0(_t1005 || (_t1005 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_PurpleTeal_30ft_1600x400.webm`))],
            '60ft': [l0(_t1006 || (_t1006 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_PurpleTeal_60ft_2800x400.webm`))],
            '90ft': [l0(_t1007 || (_t1007 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_PurpleTeal_90ft_4000x400.webm`))]
          },
          yellowblue: {
            '05ft': [l0(_t1008 || (_t1008 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_BlueYellow_05ft_600x400.webm`))],
            '15ft': [l0(_t1009 || (_t1009 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_BlueYellow_15ft_1000x400.webm`))],
            '30ft': [l0(_t1010 || (_t1010 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_BlueYellow_30ft_1600x400.webm`))],
            '60ft': [l0(_t1011 || (_t1011 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_BlueYellow_60ft_2800x400.webm`))],
            '90ft': [l0(_t1012 || (_t1012 = _$1`Ray_Of_Frost/RayOfFrost_01_Regular_BlueYellow_90ft_4000x400.webm`))]
          }
        }
      },
      scorchingray: {
        '01': {
          orange: {
            '05ft': [l2(_t1013 || (_t1013 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [l2(_t1014 || (_t1014 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [l2(_t1015 || (_t1015 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [l2(_t1016 || (_t1016 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [l2(_t1017 || (_t1017 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [l2(_t1018 || (_t1018 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l2(_t1019 || (_t1019 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l2(_t1020 || (_t1020 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l2(_t1021 || (_t1021 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l2(_t1022 || (_t1022 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [l2(_t1023 || (_t1023 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [l2(_t1024 || (_t1024 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [l2(_t1025 || (_t1025 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [l2(_t1026 || (_t1026 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [l2(_t1027 || (_t1027 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Green_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [l2(_t1028 || (_t1028 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [l2(_t1029 || (_t1029 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [l2(_t1030 || (_t1030 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [l2(_t1031 || (_t1031 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [l2(_t1032 || (_t1032 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Purple_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [l2(_t1033 || (_t1033 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [l2(_t1034 || (_t1034 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [l2(_t1035 || (_t1035 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [l2(_t1036 || (_t1036 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [l2(_t1037 || (_t1037 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Red_90ft_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l2(_t1038 || (_t1038 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Yellow_05ft_600x400.webm`))],
            '15ft': [l2(_t1039 || (_t1039 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Yellow_15ft_1000x400.webm`))],
            '30ft': [l2(_t1040 || (_t1040 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Yellow_30ft_1600x400.webm`))],
            '60ft': [l2(_t1041 || (_t1041 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Yellow_60ft_2800x400.webm`))],
            '90ft': [l2(_t1042 || (_t1042 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Yellow_90ft_4000x400.webm`))]
          },
          rainbow01: {
            '05ft': [l2(_t1043 || (_t1043 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow01_05ft_600x400.webm`))],
            '15ft': [l2(_t1044 || (_t1044 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow01_15ft_1000x400.webm`))],
            '30ft': [l2(_t1045 || (_t1045 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow01_30ft_1600x400.webm`))],
            '60ft': [l2(_t1046 || (_t1046 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow01_60ft_2800x400.webm`))],
            '90ft': [l2(_t1047 || (_t1047 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow01_90ft_4000x400.webm`))]
          },
          rainbow02: {
            '05ft': [l2(_t1048 || (_t1048 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow02_05ft_600x400.webm`))],
            '15ft': [l2(_t1049 || (_t1049 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow02_15ft_1000x400.webm`))],
            '30ft': [l2(_t1050 || (_t1050 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow02_30ft_1600x400.webm`))],
            '60ft': [l2(_t1051 || (_t1051 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow02_60ft_2800x400.webm`))],
            '90ft': [l2(_t1052 || (_t1052 = _$1`Scorching_Ray/ScorchingRay_01_Regular_Rainbow02_90ft_4000x400.webm`))]
          }
        },
        '02': {
          blue: {
            '05ft': [l2(_t1053 || (_t1053 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_05ft_01_600x400.webm`)), l2(_t1054 || (_t1054 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_05ft_02_600x400.webm`)), l2(_t1055 || (_t1055 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_05ft_03_600x400.webm`))],
            '15ft': [l2(_t1056 || (_t1056 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_15ft_01_1000x400.webm`)), l2(_t1057 || (_t1057 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_15ft_02_1000x400.webm`)), l2(_t1058 || (_t1058 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_15ft_03_1000x400.webm`))],
            '30ft': [l2(_t1059 || (_t1059 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_30ft_01_1600x400.webm`)), l2(_t1060 || (_t1060 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_30ft_02_1600x400.webm`)), l2(_t1061 || (_t1061 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_30ft_03_1600x400.webm`))],
            '60ft': [l2(_t1062 || (_t1062 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_60ft_01_2800x400.webm`)), l2(_t1063 || (_t1063 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_60ft_02_2800x400.webm`)), l2(_t1064 || (_t1064 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_60ft_03_2800x400.webm`))],
            '90ft': [l2(_t1065 || (_t1065 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_90ft_01_4000x400.webm`)), l2(_t1066 || (_t1066 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_90ft_02_4000x400.webm`)), l2(_t1067 || (_t1067 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Blue_90ft_03_4000x400.webm`))]
          },
          green: {
            '05ft': [l2(_t1068 || (_t1068 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_05ft_01_600x400.webm`)), l2(_t1069 || (_t1069 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_05ft_02_600x400.webm`)), l2(_t1070 || (_t1070 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_05ft_03_600x400.webm`))],
            '15ft': [l2(_t1071 || (_t1071 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_15ft_01_1000x400.webm`)), l2(_t1072 || (_t1072 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_15ft_02_1000x400.webm`)), l2(_t1073 || (_t1073 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_15ft_03_1000x400.webm`))],
            '30ft': [l2(_t1074 || (_t1074 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_30ft_01_1600x400.webm`)), l2(_t1075 || (_t1075 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_30ft_02_1600x400.webm`)), l2(_t1076 || (_t1076 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_30ft_03_1600x400.webm`))],
            '60ft': [l2(_t1077 || (_t1077 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_60ft_01_2800x400.webm`)), l2(_t1078 || (_t1078 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_60ft_02_2800x400.webm`)), l2(_t1079 || (_t1079 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_60ft_03_2800x400.webm`))],
            '90ft': [l2(_t1080 || (_t1080 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_90ft_01_4000x400.webm`)), l2(_t1081 || (_t1081 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_90ft_02_4000x400.webm`)), l2(_t1082 || (_t1082 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Green_90ft_03_4000x400.webm`))]
          },
          orange: {
            '05ft': [l2(_t1083 || (_t1083 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_05ft_01_600x400.webm`)), l2(_t1084 || (_t1084 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_05ft_02_600x400.webm`)), l2(_t1085 || (_t1085 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_05ft_03_600x400.webm`))],
            '15ft': [l2(_t1086 || (_t1086 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_15ft_01_1000x400.webm`)), l2(_t1087 || (_t1087 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_15ft_02_1000x400.webm`)), l2(_t1088 || (_t1088 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_15ft_03_1000x400.webm`))],
            '30ft': [l2(_t1089 || (_t1089 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_30ft_01_1600x400.webm`)), l2(_t1090 || (_t1090 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_30ft_02_1600x400.webm`)), l2(_t1091 || (_t1091 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_30ft_03_1600x400.webm`))],
            '60ft': [l2(_t1092 || (_t1092 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_60ft_01_2800x400.webm`)), l2(_t1093 || (_t1093 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_60ft_02_2800x400.webm`)), l2(_t1094 || (_t1094 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_60ft_03_2800x400.webm`))],
            '90ft': [l2(_t1095 || (_t1095 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_90ft_01_4000x400.webm`)), l2(_t1096 || (_t1096 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_90ft_02_4000x400.webm`)), l2(_t1097 || (_t1097 = _$1`Scorching_Ray/ScorchingRay_02_Regular_Orange_90ft_03_4000x400.webm`))]
          }
        }
      },
      witchbolt: {
        '01': {
          blue: {
            '05ft': [l1(_t1098 || (_t1098 = _$1`Witch_Bolt/WitchBolt_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l1(_t1099 || (_t1099 = _$1`Witch_Bolt/WitchBolt_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l1(_t1100 || (_t1100 = _$1`Witch_Bolt/WitchBolt_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l1(_t1101 || (_t1101 = _$1`Witch_Bolt/WitchBolt_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l1(_t1102 || (_t1102 = _$1`Witch_Bolt/WitchBolt_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [l1(_t1103 || (_t1103 = _$1`Witch_Bolt/WitchBolt_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [l1(_t1104 || (_t1104 = _$1`Witch_Bolt/WitchBolt_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [l1(_t1105 || (_t1105 = _$1`Witch_Bolt/WitchBolt_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [l1(_t1106 || (_t1106 = _$1`Witch_Bolt/WitchBolt_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [l1(_t1107 || (_t1107 = _$1`Witch_Bolt/WitchBolt_01_Regular_Green_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [l1(_t1108 || (_t1108 = _$1`Witch_Bolt/WitchBolt_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [l1(_t1109 || (_t1109 = _$1`Witch_Bolt/WitchBolt_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [l1(_t1110 || (_t1110 = _$1`Witch_Bolt/WitchBolt_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [l1(_t1111 || (_t1111 = _$1`Witch_Bolt/WitchBolt_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [l1(_t1112 || (_t1112 = _$1`Witch_Bolt/WitchBolt_01_Regular_Red_90ft_4000x400.webm`))]
          },
          yellow: {
            '05ft': [l1(_t1113 || (_t1113 = _$1`Witch_Bolt/WitchBolt_01_Regular_Yellow_05ft_600x400.webm`))],
            '15ft': [l1(_t1114 || (_t1114 = _$1`Witch_Bolt/WitchBolt_01_Regular_Yellow_15ft_1000x400.webm`))],
            '30ft': [l1(_t1115 || (_t1115 = _$1`Witch_Bolt/WitchBolt_01_Regular_Yellow_30ft_1600x400.webm`))],
            '60ft': [l1(_t1116 || (_t1116 = _$1`Witch_Bolt/WitchBolt_01_Regular_Yellow_60ft_2800x400.webm`))],
            '90ft': [l1(_t1117 || (_t1117 = _$1`Witch_Bolt/WitchBolt_01_Regular_Yellow_90ft_4000x400.webm`))]
          },
          darkred: {
            '05ft': [l1(_t1118 || (_t1118 = _$1`Witch_Bolt/WitchBolt_01_Dark_Red_05ft_600x400.webm`))],
            '15ft': [l1(_t1119 || (_t1119 = _$1`Witch_Bolt/WitchBolt_01_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [l1(_t1120 || (_t1120 = _$1`Witch_Bolt/WitchBolt_01_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [l1(_t1121 || (_t1121 = _$1`Witch_Bolt/WitchBolt_01_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [l1(_t1122 || (_t1122 = _$1`Witch_Bolt/WitchBolt_01_Dark_Red_90ft_4000x400.webm`))]
          },
          darkgreen: {
            '05ft': [l1(_t1123 || (_t1123 = _$1`Witch_Bolt/WitchBolt_01_Dark_Green_05ft_600x400.webm`))],
            '15ft': [l1(_t1124 || (_t1124 = _$1`Witch_Bolt/WitchBolt_01_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [l1(_t1125 || (_t1125 = _$1`Witch_Bolt/WitchBolt_01_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [l1(_t1126 || (_t1126 = _$1`Witch_Bolt/WitchBolt_01_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [l1(_t1127 || (_t1127 = _$1`Witch_Bolt/WitchBolt_01_Dark_Green_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [l1(_t1128 || (_t1128 = _$1`Witch_Bolt/WitchBolt_01_Dark_Purple_05ft_600x400.webm`))],
            '15ft': [l1(_t1129 || (_t1129 = _$1`Witch_Bolt/WitchBolt_01_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [l1(_t1130 || (_t1130 = _$1`Witch_Bolt/WitchBolt_01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [l1(_t1131 || (_t1131 = _$1`Witch_Bolt/WitchBolt_01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [l1(_t1132 || (_t1132 = _$1`Witch_Bolt/WitchBolt_01_Dark_Purple_90ft_4000x400.webm`))]
          }
        }
      }
    },
    generic: {
      conduit: {
        square: {
          purpleblue: {
            '05ft': [lg(_t1133 || (_t1133 = _$1`Energy/EnergyConduitSquare_01_Regular_BluePurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1134 || (_t1134 = _$1`Energy/EnergyConduitSquare_01_Regular_BluePurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1135 || (_t1135 = _$1`Energy/EnergyConduitSquare_01_Regular_BluePurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1136 || (_t1136 = _$1`Energy/EnergyConduitSquare_01_Regular_BluePurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1137 || (_t1137 = _$1`Energy/EnergyConduitSquare_01_Regular_BluePurple_90ft_4000x400.webm`))]
          },
          greenyellow: {
            '05ft': [lg(_t1138 || (_t1138 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1139 || (_t1139 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1140 || (_t1140 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1141 || (_t1141 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1142 || (_t1142 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_90ft_4000x400.webm`))]
          }
        },
        circle: {
          purpleblue: {
            '05ft': [lg(_t1143 || (_t1143 = _$1`Energy/EnergyConduitCircle_01_Regular_BluePurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1144 || (_t1144 = _$1`Energy/EnergyConduitCircle_01_Regular_BluePurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1145 || (_t1145 = _$1`Energy/EnergyConduitCircle_01_Regular_BluePurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1146 || (_t1146 = _$1`Energy/EnergyConduitCircle_01_Regular_BluePurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1147 || (_t1147 = _$1`Energy/EnergyConduitCircle_01_Regular_BluePurple_90ft_4000x400.webm`))]
          },
          greenyellow: {
            '05ft': [lg(_t1148 || (_t1148 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1149 || (_t1149 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1150 || (_t1150 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1151 || (_t1151 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1152 || (_t1152 = _$1`Energy/EnergyConduitSquare_01_Regular_GreenYellow_90ft_4000x400.webm`))]
          }
        }
      },
      energybeam: {
        '01': {
          blue: {
            '15ft': [lg(_t1153 || (_t1153 = _$1`Energy/EnergyBeam_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t1154 || (_t1154 = _$1`Energy/EnergyBeam_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t1155 || (_t1155 = _$1`Energy/EnergyBeam_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t1156 || (_t1156 = _$1`Energy/EnergyBeam_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          bluegreen: {
            '15ft': [lg(_t1157 || (_t1157 = _$1`Energy/EnergyBeam_01_Regular_BlueGreen_15ft_1000x400.webm`))],
            '30ft': [lg(_t1158 || (_t1158 = _$1`Energy/EnergyBeam_01_Regular_BlueGreen_30ft_1600x400.webm`))],
            '60ft': [lg(_t1159 || (_t1159 = _$1`Energy/EnergyBeam_01_Regular_BlueGreen_60ft_2800x400.webm`))],
            '90ft': [lg(_t1160 || (_t1160 = _$1`Energy/EnergyBeam_01_Regular_BlueGreen_90ft_4000x400.webm`))]
          },
          darkgreen: {
            '15ft': [lg(_t1161 || (_t1161 = _$1`Energy/EnergyBeam_01_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t1162 || (_t1162 = _$1`Energy/EnergyBeam_01_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t1163 || (_t1163 = _$1`Energy/EnergyBeam_01_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t1164 || (_t1164 = _$1`Energy/EnergyBeam_01_Dark_Green_90ft_4000x400.webm`))]
          }
        },
        '02': {
          darkgreenpurple: {
            '05ft': [lg(_t1165 || (_t1165 = _$1`Energy/EnergyBeam_02_Dark_GreenPurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1166 || (_t1166 = _$1`Energy/EnergyBeam_02_Dark_GreenPurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1167 || (_t1167 = _$1`Energy/EnergyBeam_02_Dark_GreenPurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1168 || (_t1168 = _$1`Energy/EnergyBeam_02_Dark_GreenPurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1169 || (_t1169 = _$1`Energy/EnergyBeam_02_Dark_GreenPurple_90ft_4000x400.webm`))]
          },
          darkpurplered: {
            '05ft': [lg(_t1170 || (_t1170 = _$1`Energy/EnergyBeam_02_Dark_PurpleRed_05ft_600x400.webm`))],
            '15ft': [lg(_t1171 || (_t1171 = _$1`Energy/EnergyBeam_02_Dark_PurpleRed_15ft_1000x400.webm`))],
            '30ft': [lg(_t1172 || (_t1172 = _$1`Energy/EnergyBeam_02_Dark_PurpleRed_30ft_1600x400.webm`))],
            '60ft': [lg(_t1173 || (_t1173 = _$1`Energy/EnergyBeam_02_Dark_PurpleRed_60ft_2800x400.webm`))],
            '90ft': [lg(_t1174 || (_t1174 = _$1`Energy/EnergyBeam_02_Dark_PurpleRed_90ft_4000x400.webm`))]
          },
          bluepink: {
            '05ft': [lg(_t1175 || (_t1175 = _$1`Energy/EnergyBeam_02_Regular_BluePink_05ft_600x400.webm`))],
            '15ft': [lg(_t1176 || (_t1176 = _$1`Energy/EnergyBeam_02_Regular_BluePink_15ft_1000x400.webm`))],
            '30ft': [lg(_t1177 || (_t1177 = _$1`Energy/EnergyBeam_02_Regular_BluePink_30ft_1600x400.webm`))],
            '60ft': [lg(_t1178 || (_t1178 = _$1`Energy/EnergyBeam_02_Regular_BluePink_60ft_2800x400.webm`))],
            '90ft': [lg(_t1179 || (_t1179 = _$1`Energy/EnergyBeam_02_Regular_BluePink_90ft_4000x400.webm`))]
          },
          greenyellow: {
            '05ft': [lg(_t1180 || (_t1180 = _$1`Energy/EnergyBeam_02_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1181 || (_t1181 = _$1`Energy/EnergyBeam_02_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1182 || (_t1182 = _$1`Energy/EnergyBeam_02_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1183 || (_t1183 = _$1`Energy/EnergyBeam_02_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1184 || (_t1184 = _$1`Energy/EnergyBeam_02_Regular_GreenYellow_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t1185 || (_t1185 = _$1`Energy/EnergyBeam_02_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t1186 || (_t1186 = _$1`Energy/EnergyBeam_02_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t1187 || (_t1187 = _$1`Energy/EnergyBeam_02_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t1188 || (_t1188 = _$1`Energy/EnergyBeam_02_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t1189 || (_t1189 = _$1`Energy/EnergyBeam_02_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '03': {
          darkgreenpurple: {
            '05ft': [lg(_t1190 || (_t1190 = _$1`Energy/EnergyBeam_03_Dark_GreenPurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1191 || (_t1191 = _$1`Energy/EnergyBeam_03_Dark_GreenPurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1192 || (_t1192 = _$1`Energy/EnergyBeam_03_Dark_GreenPurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1193 || (_t1193 = _$1`Energy/EnergyBeam_03_Dark_GreenPurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1194 || (_t1194 = _$1`Energy/EnergyBeam_03_Dark_GreenPurple_90ft_4000x400.webm`))]
          },
          darkpurplered: {
            '05ft': [lg(_t1195 || (_t1195 = _$1`Energy/EnergyBeam_03_Dark_PurpleRed_05ft_600x400.webm`))],
            '15ft': [lg(_t1196 || (_t1196 = _$1`Energy/EnergyBeam_03_Dark_PurpleRed_15ft_1000x400.webm`))],
            '30ft': [lg(_t1197 || (_t1197 = _$1`Energy/EnergyBeam_03_Dark_PurpleRed_30ft_1600x400.webm`))],
            '60ft': [lg(_t1198 || (_t1198 = _$1`Energy/EnergyBeam_03_Dark_PurpleRed_60ft_2800x400.webm`))],
            '90ft': [lg(_t1199 || (_t1199 = _$1`Energy/EnergyBeam_03_Dark_PurpleRed_90ft_4000x400.webm`))]
          },
          bluepink: {
            '05ft': [lg(_t1200 || (_t1200 = _$1`Energy/EnergyBeam_03_Regular_BluePink_05ft_600x400.webm`))],
            '15ft': [lg(_t1201 || (_t1201 = _$1`Energy/EnergyBeam_03_Regular_BluePink_15ft_1000x400.webm`))],
            '30ft': [lg(_t1202 || (_t1202 = _$1`Energy/EnergyBeam_03_Regular_BluePink_30ft_1600x400.webm`))],
            '60ft': [lg(_t1203 || (_t1203 = _$1`Energy/EnergyBeam_03_Regular_BluePink_60ft_2800x400.webm`))],
            '90ft': [lg(_t1204 || (_t1204 = _$1`Energy/EnergyBeam_03_Regular_BluePink_90ft_4000x400.webm`))]
          },
          greenyellow: {
            '05ft': [lg(_t1205 || (_t1205 = _$1`Energy/EnergyBeam_03_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1206 || (_t1206 = _$1`Energy/EnergyBeam_03_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1207 || (_t1207 = _$1`Energy/EnergyBeam_03_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1208 || (_t1208 = _$1`Energy/EnergyBeam_03_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1209 || (_t1209 = _$1`Energy/EnergyBeam_03_Regular_GreenYellow_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t1210 || (_t1210 = _$1`Energy/EnergyBeam_03_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t1211 || (_t1211 = _$1`Energy/EnergyBeam_03_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t1212 || (_t1212 = _$1`Energy/EnergyBeam_03_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t1213 || (_t1213 = _$1`Energy/EnergyBeam_03_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t1214 || (_t1214 = _$1`Energy/EnergyBeam_03_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        reverse: {
          blue: {
            '15ft': [lg(_t1215 || (_t1215 = _$1`Energy/EnergyBeamReverse_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t1216 || (_t1216 = _$1`Energy/EnergyBeamReverse_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t1217 || (_t1217 = _$1`Energy/EnergyBeamReverse_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t1218 || (_t1218 = _$1`Energy/EnergyBeamReverse_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          bluegreen: {
            '15ft': [lg(_t1219 || (_t1219 = _$1`Energy/EnergyBeamReverse_01_Regular_BlueGreen_15ft_1000x400.webm`))],
            '30ft': [lg(_t1220 || (_t1220 = _$1`Energy/EnergyBeamReverse_01_Regular_BlueGreen_30ft_1600x400.webm`))],
            '60ft': [lg(_t1221 || (_t1221 = _$1`Energy/EnergyBeamReverse_01_Regular_BlueGreen_60ft_2800x400.webm`))],
            '90ft': [lg(_t1222 || (_t1222 = _$1`Energy/EnergyBeamReverse_01_Regular_BlueGreen_90ft_4000x400.webm`))]
          },
          darkgreen: {
            '15ft': [lg(_t1223 || (_t1223 = _$1`Energy/EnergyBeamReverse_01_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t1224 || (_t1224 = _$1`Energy/EnergyBeamReverse_01_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t1225 || (_t1225 = _$1`Energy/EnergyBeamReverse_01_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t1226 || (_t1226 = _$1`Energy/EnergyBeamReverse_01_Dark_Green_90ft_4000x400.webm`))]
          }
        }
      },
      energystrand: {
        '01': {
          darkgreen: {
            '05ft': [lg(_t1227 || (_t1227 = _$1`Energy/EnergyStrand_01_Dark_Green_05ft_600x400.webm`)), lg(_t1228 || (_t1228 = _$1`Energy/EnergyStrand_02_Dark_Green_05ft_600x400.webm`)), lg(_t1229 || (_t1229 = _$1`Energy/EnergyStrand_03_Dark_Green_05ft_600x400.webm`)), lg(_t1230 || (_t1230 = _$1`Energy/EnergyStrand_04_Dark_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t1231 || (_t1231 = _$1`Energy/EnergyStrand_01_Dark_Green_15ft_1000x400.webm`)), lg(_t1232 || (_t1232 = _$1`Energy/EnergyStrand_02_Dark_Green_15ft_1000x400.webm`)), lg(_t1233 || (_t1233 = _$1`Energy/EnergyStrand_03_Dark_Green_15ft_1000x400.webm`)), lg(_t1234 || (_t1234 = _$1`Energy/EnergyStrand_04_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t1235 || (_t1235 = _$1`Energy/EnergyStrand_01_Dark_Green_30ft_1600x400.webm`)), lg(_t1236 || (_t1236 = _$1`Energy/EnergyStrand_02_Dark_Green_30ft_1600x400.webm`)), lg(_t1237 || (_t1237 = _$1`Energy/EnergyStrand_03_Dark_Green_30ft_1600x400.webm`)), lg(_t1238 || (_t1238 = _$1`Energy/EnergyStrand_04_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t1239 || (_t1239 = _$1`Energy/EnergyStrand_01_Dark_Green_60ft_2800x400.webm`)), lg(_t1240 || (_t1240 = _$1`Energy/EnergyStrand_02_Dark_Green_60ft_2800x400.webm`)), lg(_t1241 || (_t1241 = _$1`Energy/EnergyStrand_03_Dark_Green_60ft_2800x400.webm`)), lg(_t1242 || (_t1242 = _$1`Energy/EnergyStrand_04_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t1243 || (_t1243 = _$1`Energy/EnergyStrand_01_Dark_Green_90ft_4000x400.webm`)), lg(_t1244 || (_t1244 = _$1`Energy/EnergyStrand_02_Dark_Green_90ft_4000x400.webm`)), lg(_t1245 || (_t1245 = _$1`Energy/EnergyStrand_03_Dark_Green_90ft_4000x400.webm`)), lg(_t1246 || (_t1246 = _$1`Energy/EnergyStrand_04_Dark_Green_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [lg(_t1247 || (_t1247 = _$1`Energy/EnergyStrand_01_Dark_Purple_05ft_600x400.webm`)), lg(_t1248 || (_t1248 = _$1`Energy/EnergyStrand_02_Dark_Purple_05ft_600x400.webm`)), lg(_t1249 || (_t1249 = _$1`Energy/EnergyStrand_03_Dark_Purple_05ft_600x400.webm`)), lg(_t1250 || (_t1250 = _$1`Energy/EnergyStrand_04_Dark_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t1251 || (_t1251 = _$1`Energy/EnergyStrand_01_Dark_Purple_15ft_1000x400.webm`)), lg(_t1252 || (_t1252 = _$1`Energy/EnergyStrand_02_Dark_Purple_15ft_1000x400.webm`)), lg(_t1253 || (_t1253 = _$1`Energy/EnergyStrand_03_Dark_Purple_15ft_1000x400.webm`)), lg(_t1254 || (_t1254 = _$1`Energy/EnergyStrand_04_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1255 || (_t1255 = _$1`Energy/EnergyStrand_01_Dark_Purple_30ft_1600x400.webm`)), lg(_t1256 || (_t1256 = _$1`Energy/EnergyStrand_02_Dark_Purple_30ft_1600x400.webm`)), lg(_t1257 || (_t1257 = _$1`Energy/EnergyStrand_03_Dark_Purple_30ft_1600x400.webm`)), lg(_t1258 || (_t1258 = _$1`Energy/EnergyStrand_04_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1259 || (_t1259 = _$1`Energy/EnergyStrand_01_Dark_Purple_60ft_2800x400.webm`)), lg(_t1260 || (_t1260 = _$1`Energy/EnergyStrand_02_Dark_Purple_60ft_2800x400.webm`)), lg(_t1261 || (_t1261 = _$1`Energy/EnergyStrand_03_Dark_Purple_60ft_2800x400.webm`)), lg(_t1262 || (_t1262 = _$1`Energy/EnergyStrand_04_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1263 || (_t1263 = _$1`Energy/EnergyStrand_01_Dark_Purple_90ft_4000x400.webm`)), lg(_t1264 || (_t1264 = _$1`Energy/EnergyStrand_02_Dark_Purple_90ft_4000x400.webm`)), lg(_t1265 || (_t1265 = _$1`Energy/EnergyStrand_03_Dark_Purple_90ft_4000x400.webm`)), lg(_t1266 || (_t1266 = _$1`Energy/EnergyStrand_04_Dark_Purple_90ft_4000x400.webm`))]
          },
          darkred: {
            '05ft': [lg(_t1267 || (_t1267 = _$1`Energy/EnergyStrand_01_Dark_Red_05ft_600x400.webm`)), lg(_t1268 || (_t1268 = _$1`Energy/EnergyStrand_02_Dark_Red_05ft_600x400.webm`)), lg(_t1269 || (_t1269 = _$1`Energy/EnergyStrand_03_Dark_Red_05ft_600x400.webm`)), lg(_t1270 || (_t1270 = _$1`Energy/EnergyStrand_04_Dark_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t1271 || (_t1271 = _$1`Energy/EnergyStrand_01_Dark_Red_15ft_1000x400.webm`)), lg(_t1272 || (_t1272 = _$1`Energy/EnergyStrand_02_Dark_Red_15ft_1000x400.webm`)), lg(_t1273 || (_t1273 = _$1`Energy/EnergyStrand_03_Dark_Red_15ft_1000x400.webm`)), lg(_t1274 || (_t1274 = _$1`Energy/EnergyStrand_04_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t1275 || (_t1275 = _$1`Energy/EnergyStrand_01_Dark_Red_30ft_1600x400.webm`)), lg(_t1276 || (_t1276 = _$1`Energy/EnergyStrand_02_Dark_Red_30ft_1600x400.webm`)), lg(_t1277 || (_t1277 = _$1`Energy/EnergyStrand_03_Dark_Red_30ft_1600x400.webm`)), lg(_t1278 || (_t1278 = _$1`Energy/EnergyStrand_04_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t1279 || (_t1279 = _$1`Energy/EnergyStrand_01_Dark_Red_60ft_2800x400.webm`)), lg(_t1280 || (_t1280 = _$1`Energy/EnergyStrand_02_Dark_Red_60ft_2800x400.webm`)), lg(_t1281 || (_t1281 = _$1`Energy/EnergyStrand_03_Dark_Red_60ft_2800x400.webm`)), lg(_t1282 || (_t1282 = _$1`Energy/EnergyStrand_04_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t1283 || (_t1283 = _$1`Energy/EnergyStrand_01_Dark_Red_90ft_4000x400.webm`)), lg(_t1284 || (_t1284 = _$1`Energy/EnergyStrand_02_Dark_Red_90ft_4000x400.webm`)), lg(_t1285 || (_t1285 = _$1`Energy/EnergyStrand_03_Dark_Red_90ft_4000x400.webm`)), lg(_t1286 || (_t1286 = _$1`Energy/EnergyStrand_04_Dark_Red_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t1287 || (_t1287 = _$1`Energy/EnergyStrand_01_Regular_Blue_05ft_600x400.webm`)), lg(_t1288 || (_t1288 = _$1`Energy/EnergyStrand_02_Regular_Blue_05ft_600x400.webm`)), lg(_t1289 || (_t1289 = _$1`Energy/EnergyStrand_03_Regular_Blue_05ft_600x400.webm`)), lg(_t1290 || (_t1290 = _$1`Energy/EnergyStrand_04_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t1291 || (_t1291 = _$1`Energy/EnergyStrand_01_Regular_Blue_15ft_1000x400.webm`)), lg(_t1292 || (_t1292 = _$1`Energy/EnergyStrand_02_Regular_Blue_15ft_1000x400.webm`)), lg(_t1293 || (_t1293 = _$1`Energy/EnergyStrand_03_Regular_Blue_15ft_1000x400.webm`)), lg(_t1294 || (_t1294 = _$1`Energy/EnergyStrand_04_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t1295 || (_t1295 = _$1`Energy/EnergyStrand_01_Regular_Blue_30ft_1600x400.webm`)), lg(_t1296 || (_t1296 = _$1`Energy/EnergyStrand_02_Regular_Blue_30ft_1600x400.webm`)), lg(_t1297 || (_t1297 = _$1`Energy/EnergyStrand_03_Regular_Blue_30ft_1600x400.webm`)), lg(_t1298 || (_t1298 = _$1`Energy/EnergyStrand_04_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t1299 || (_t1299 = _$1`Energy/EnergyStrand_01_Regular_Blue_60ft_2800x400.webm`)), lg(_t1300 || (_t1300 = _$1`Energy/EnergyStrand_02_Regular_Blue_60ft_2800x400.webm`)), lg(_t1301 || (_t1301 = _$1`Energy/EnergyStrand_03_Regular_Blue_60ft_2800x400.webm`)), lg(_t1302 || (_t1302 = _$1`Energy/EnergyStrand_04_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t1303 || (_t1303 = _$1`Energy/EnergyStrand_01_Regular_Blue_90ft_4000x400.webm`)), lg(_t1304 || (_t1304 = _$1`Energy/EnergyStrand_02_Regular_Blue_90ft_4000x400.webm`)), lg(_t1305 || (_t1305 = _$1`Energy/EnergyStrand_03_Regular_Blue_90ft_4000x400.webm`)), lg(_t1306 || (_t1306 = _$1`Energy/EnergyStrand_04_Regular_Blue_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t1307 || (_t1307 = _$1`Energy/EnergyStrand_01_Regular_Orange_05ft_600x400.webm`)), lg(_t1308 || (_t1308 = _$1`Energy/EnergyStrand_02_Regular_Orange_05ft_600x400.webm`)), lg(_t1309 || (_t1309 = _$1`Energy/EnergyStrand_03_Regular_Orange_05ft_600x400.webm`)), lg(_t1310 || (_t1310 = _$1`Energy/EnergyStrand_04_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t1311 || (_t1311 = _$1`Energy/EnergyStrand_01_Regular_Orange_15ft_1000x400.webm`)), lg(_t1312 || (_t1312 = _$1`Energy/EnergyStrand_02_Regular_Orange_15ft_1000x400.webm`)), lg(_t1313 || (_t1313 = _$1`Energy/EnergyStrand_03_Regular_Orange_15ft_1000x400.webm`)), lg(_t1314 || (_t1314 = _$1`Energy/EnergyStrand_04_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t1315 || (_t1315 = _$1`Energy/EnergyStrand_01_Regular_Orange_30ft_1600x400.webm`)), lg(_t1316 || (_t1316 = _$1`Energy/EnergyStrand_02_Regular_Orange_30ft_1600x400.webm`)), lg(_t1317 || (_t1317 = _$1`Energy/EnergyStrand_03_Regular_Orange_30ft_1600x400.webm`)), lg(_t1318 || (_t1318 = _$1`Energy/EnergyStrand_04_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t1319 || (_t1319 = _$1`Energy/EnergyStrand_01_Regular_Orange_60ft_2800x400.webm`)), lg(_t1320 || (_t1320 = _$1`Energy/EnergyStrand_02_Regular_Orange_60ft_2800x400.webm`)), lg(_t1321 || (_t1321 = _$1`Energy/EnergyStrand_03_Regular_Orange_60ft_2800x400.webm`)), lg(_t1322 || (_t1322 = _$1`Energy/EnergyStrand_04_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t1323 || (_t1323 = _$1`Energy/EnergyStrand_01_Regular_Orange_90ft_4000x400.webm`)), lg(_t1324 || (_t1324 = _$1`Energy/EnergyStrand_02_Regular_Orange_90ft_4000x400.webm`)), lg(_t1325 || (_t1325 = _$1`Energy/EnergyStrand_03_Regular_Orange_90ft_4000x400.webm`)), lg(_t1326 || (_t1326 = _$1`Energy/EnergyStrand_04_Regular_Orange_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t1327 || (_t1327 = _$1`Energy/EnergyStrand_01_Regular_Purple_05ft_600x400.webm`)), lg(_t1328 || (_t1328 = _$1`Energy/EnergyStrand_02_Regular_Purple_05ft_600x400.webm`)), lg(_t1329 || (_t1329 = _$1`Energy/EnergyStrand_03_Regular_Purple_05ft_600x400.webm`)), lg(_t1330 || (_t1330 = _$1`Energy/EnergyStrand_04_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t1331 || (_t1331 = _$1`Energy/EnergyStrand_01_Regular_Purple_15ft_1000x400.webm`)), lg(_t1332 || (_t1332 = _$1`Energy/EnergyStrand_02_Regular_Purple_15ft_1000x400.webm`)), lg(_t1333 || (_t1333 = _$1`Energy/EnergyStrand_03_Regular_Purple_15ft_1000x400.webm`)), lg(_t1334 || (_t1334 = _$1`Energy/EnergyStrand_04_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1335 || (_t1335 = _$1`Energy/EnergyStrand_01_Regular_Purple_30ft_1600x400.webm`)), lg(_t1336 || (_t1336 = _$1`Energy/EnergyStrand_02_Regular_Purple_30ft_1600x400.webm`)), lg(_t1337 || (_t1337 = _$1`Energy/EnergyStrand_03_Regular_Purple_30ft_1600x400.webm`)), lg(_t1338 || (_t1338 = _$1`Energy/EnergyStrand_04_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1339 || (_t1339 = _$1`Energy/EnergyStrand_01_Regular_Purple_60ft_2800x400.webm`)), lg(_t1340 || (_t1340 = _$1`Energy/EnergyStrand_02_Regular_Purple_60ft_2800x400.webm`)), lg(_t1341 || (_t1341 = _$1`Energy/EnergyStrand_03_Regular_Purple_60ft_2800x400.webm`)), lg(_t1342 || (_t1342 = _$1`Energy/EnergyStrand_04_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1343 || (_t1343 = _$1`Energy/EnergyStrand_01_Regular_Purple_90ft_4000x400.webm`)), lg(_t1344 || (_t1344 = _$1`Energy/EnergyStrand_02_Regular_Purple_90ft_4000x400.webm`)), lg(_t1345 || (_t1345 = _$1`Energy/EnergyStrand_03_Regular_Purple_90ft_4000x400.webm`)), lg(_t1346 || (_t1346 = _$1`Energy/EnergyStrand_04_Regular_Purple_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t1347 || (_t1347 = _$1`Energy/EnergyStrand_05_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t1348 || (_t1348 = _$1`Energy/EnergyStrand_05_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t1349 || (_t1349 = _$1`Energy/EnergyStrand_05_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t1350 || (_t1350 = _$1`Energy/EnergyStrand_05_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t1351 || (_t1351 = _$1`Energy/EnergyStrand_05_Regular_Red_90ft_4000x400.webm`))]
          }
        },
        '02': {
          darkgreen: {
            '05ft': [lg(_t1352 || (_t1352 = _$1`Energy/EnergyStrand_Multiple01_Dark_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t1353 || (_t1353 = _$1`Energy/EnergyStrand_Multiple01_Dark_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t1354 || (_t1354 = _$1`Energy/EnergyStrand_Multiple01_Dark_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t1355 || (_t1355 = _$1`Energy/EnergyStrand_Multiple01_Dark_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t1356 || (_t1356 = _$1`Energy/EnergyStrand_Multiple01_Dark_Green_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '05ft': [lg(_t1357 || (_t1357 = _$1`Energy/EnergyStrand_Multiple01_Dark_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t1358 || (_t1358 = _$1`Energy/EnergyStrand_Multiple01_Dark_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1359 || (_t1359 = _$1`Energy/EnergyStrand_Multiple01_Dark_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1360 || (_t1360 = _$1`Energy/EnergyStrand_Multiple01_Dark_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1361 || (_t1361 = _$1`Energy/EnergyStrand_Multiple01_Dark_Purple_90ft_4000x400.webm`))]
          },
          darkred: {
            '05ft': [lg(_t1362 || (_t1362 = _$1`Energy/EnergyStrand_Multiple01_Dark_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t1363 || (_t1363 = _$1`Energy/EnergyStrand_Multiple01_Dark_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t1364 || (_t1364 = _$1`Energy/EnergyStrand_Multiple01_Dark_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t1365 || (_t1365 = _$1`Energy/EnergyStrand_Multiple01_Dark_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t1366 || (_t1366 = _$1`Energy/EnergyStrand_Multiple01_Dark_Red_90ft_4000x400.webm`))]
          },
          blue: {
            '05ft': [lg(_t1367 || (_t1367 = _$1`Energy/EnergyStrand_Multiple01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t1368 || (_t1368 = _$1`Energy/EnergyStrand_Multiple01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t1369 || (_t1369 = _$1`Energy/EnergyStrand_Multiple01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t1370 || (_t1370 = _$1`Energy/EnergyStrand_Multiple01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t1371 || (_t1371 = _$1`Energy/EnergyStrand_Multiple01_Regular_Blue_90ft_4000x400.webm`))]
          },
          purple: {
            '05ft': [lg(_t1372 || (_t1372 = _$1`Energy/EnergyStrand_Multiple01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t1373 || (_t1373 = _$1`Energy/EnergyStrand_Multiple01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1374 || (_t1374 = _$1`Energy/EnergyStrand_Multiple01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1375 || (_t1375 = _$1`Energy/EnergyStrand_Multiple01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1376 || (_t1376 = _$1`Energy/EnergyStrand_Multiple01_Regular_Purple_90ft_4000x400.webm`))]
          }
        },
        '03': {
          bluepink: {
            '05ft': [lg(_t1377 || (_t1377 = _$1`Energy/EnergyStrand_Multiple02_Regular_BluePink_05ft_600x400.webm`))],
            '15ft': [lg(_t1378 || (_t1378 = _$1`Energy/EnergyStrand_Multiple02_Regular_BluePink_15ft_1000x400.webm`))],
            '30ft': [lg(_t1379 || (_t1379 = _$1`Energy/EnergyStrand_Multiple02_Regular_BluePink_30ft_1600x400.webm`))],
            '60ft': [lg(_t1380 || (_t1380 = _$1`Energy/EnergyStrand_Multiple02_Regular_BluePink_60ft_2800x400.webm`))],
            '90ft': [lg(_t1381 || (_t1381 = _$1`Energy/EnergyStrand_Multiple02_Regular_BluePink_90ft_4000x400.webm`))]
          },
          greenyellow: {
            '05ft': [lg(_t1382 || (_t1382 = _$1`Energy/EnergyStrand_Multiple02_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1383 || (_t1383 = _$1`Energy/EnergyStrand_Multiple02_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1384 || (_t1384 = _$1`Energy/EnergyStrand_Multiple02_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1385 || (_t1385 = _$1`Energy/EnergyStrand_Multiple02_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1386 || (_t1386 = _$1`Energy/EnergyStrand_Multiple02_Regular_GreenYellow_90ft_4000x400.webm`))]
          },
          darkpurplered: {
            '05ft': [lg(_t1387 || (_t1387 = _$1`Energy/EnergyStrand_Multiple02_Dark_PurpleRed_05ft_600x400.webm`))],
            '15ft': [lg(_t1388 || (_t1388 = _$1`Energy/EnergyStrand_Multiple02_Dark_PurpleRed_15ft_1000x400.webm`))],
            '30ft': [lg(_t1389 || (_t1389 = _$1`Energy/EnergyStrand_Multiple02_Dark_PurpleRed_30ft_1600x400.webm`))],
            '60ft': [lg(_t1390 || (_t1390 = _$1`Energy/EnergyStrand_Multiple02_Dark_PurpleRed_60ft_2800x400.webm`))],
            '90ft': [lg(_t1391 || (_t1391 = _$1`Energy/EnergyStrand_Multiple02_Dark_PurpleRed_90ft_4000x400.webm`))]
          },
          darkgreenpurple: {
            '05ft': [lg(_t1392 || (_t1392 = _$1`Energy/EnergyStrand_Multiple02_Dark_GreenPurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1393 || (_t1393 = _$1`Energy/EnergyStrand_Multiple02_Dark_GreenPurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1394 || (_t1394 = _$1`Energy/EnergyStrand_Multiple02_Dark_GreenPurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1395 || (_t1395 = _$1`Energy/EnergyStrand_Multiple02_Dark_GreenPurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1396 || (_t1396 = _$1`Energy/EnergyStrand_Multiple02_Dark_GreenPurple_90ft_4000x400.webm`))]
          }
        }
      },
      heart: {
        '01': {
          pinkyellow: {
            '05ft': [lg(_t1397 || (_t1397 = _$1`RangedSpell/ProjectileHeart01_01_Regular_PinkYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1398 || (_t1398 = _$1`RangedSpell/ProjectileHeart01_01_Regular_PinkYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1399 || (_t1399 = _$1`RangedSpell/ProjectileHeart01_01_Regular_PinkYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1400 || (_t1400 = _$1`RangedSpell/ProjectileHeart01_01_Regular_PinkYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1401 || (_t1401 = _$1`RangedSpell/ProjectileHeart01_01_Regular_PinkYellow_90ft_4000x400.webm`))]
          }
        }
      },
      iceshard: {
        '01': {
          blue: {
            '05ft': [lg(_t1402 || (_t1402 = _$1`RangedSpell/ProjectileIceShard01_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t1403 || (_t1403 = _$1`RangedSpell/ProjectileIceShard01_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t1404 || (_t1404 = _$1`RangedSpell/ProjectileIceShard01_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t1405 || (_t1405 = _$1`RangedSpell/ProjectileIceShard01_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t1406 || (_t1406 = _$1`RangedSpell/ProjectileIceShard01_01_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      },
      musicnote: {
        '01': {
          greenyellow: {
            '05ft': [lg(_t1407 || (_t1407 = _$1`RangedSpell/ProjectileMusicNote01_01_Regular_GreenYellow_05ft_600x400.webm`))],
            '15ft': [lg(_t1408 || (_t1408 = _$1`RangedSpell/ProjectileMusicNote01_01_Regular_GreenYellow_15ft_1000x400.webm`))],
            '30ft': [lg(_t1409 || (_t1409 = _$1`RangedSpell/ProjectileMusicNote01_01_Regular_GreenYellow_30ft_1600x400.webm`))],
            '60ft': [lg(_t1410 || (_t1410 = _$1`RangedSpell/ProjectileMusicNote01_01_Regular_GreenYellow_60ft_2800x400.webm`))],
            '90ft': [lg(_t1411 || (_t1411 = _$1`RangedSpell/ProjectileMusicNote01_01_Regular_GreenYellow_90ft_4000x400.webm`))]
          }
        }
      },
      skull: {
        '01': {
          purplepink: {
            '05ft': [lg(_t1412 || (_t1412 = _$1`RangedSpell/ProjectileSkull01_01_Regular_PinkPurple_05ft_600x400.webm`))],
            '15ft': [lg(_t1413 || (_t1413 = _$1`RangedSpell/ProjectileSkull01_01_Regular_PinkPurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t1414 || (_t1414 = _$1`RangedSpell/ProjectileSkull01_01_Regular_PinkPurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t1415 || (_t1415 = _$1`RangedSpell/ProjectileSkull01_01_Regular_PinkPurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t1416 || (_t1416 = _$1`RangedSpell/ProjectileSkull01_01_Regular_PinkPurple_90ft_4000x400.webm`))]
          }
        }
      }
    }
  };
  /**
   * Melee Types:
   *
   * Weapon 
   * Generic
   * Creature
   * 
   */

  JB2APATREONDB.melee = {
    creature: {
      bite: {
        '01': {
          red: [lg(_t1417 || (_t1417 = _$1`Creature/Bite_01_Regular_Red_400x400.webm`))],
          blue: [lg(_t1418 || (_t1418 = _$1`Creature/Bite_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t1419 || (_t1419 = _$1`Creature/Bite_01_Regular_Green_400x400.webm`))],
          grey: [lg(_t1420 || (_t1420 = _$1`Creature/Bite_01_Regular_Grey_400x400.webm`))],
          orange: [lg(_t1421 || (_t1421 = _$1`Creature/Bite_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t1422 || (_t1422 = _$1`Creature/Bite_01_Regular_Purple_400x400.webm`))],
          yellow: [lg(_t1423 || (_t1423 = _$1`Creature/Bite_01_Regular_Yellow_400x400.webm`))]
        }
      },
      claw: {
        '01': {
          blue: [lg(_t1424 || (_t1424 = _$1`Creature/Claws_01_Bright_Blue_400x400.webm`))],
          brown: [lg(_t1425 || (_t1425 = _$1`Creature/Claws_01_Regular_Brown_400x400.webm`))],
          darkred: [lg(_t1426 || (_t1426 = _$1`Creature/Claws_01_Dark_Red_400x400.webm`))],
          green: [lg(_t1427 || (_t1427 = _$1`Creature/Claws_01_Bright_Green_400x400.webm`))],
          orange: [lg(_t1428 || (_t1428 = _$1`Creature/Claws_01_Bright_Orange_400x400.webm`))],
          purple: [lg(_t1429 || (_t1429 = _$1`Creature/Claws_01_Bright_Purple_400x400.webm`))],
          red: [lg(_t1430 || (_t1430 = _$1`Creature/Claws_01_Regular_Red_400x400.webm`))],
          yellow: [lg(_t1431 || (_t1431 = _$1`Creature/Claws_01_Bright_Yellow_400x400.webm`))]
        }
      }
    },
    generic: {
      '1hs': {
        '01': {
          white: [lg(_t1432 || (_t1432 = _$1`Weapon_Attacks/Melee/DmgSlashing_01_Regular_Yellow_1Handed_800x600.webm`))]
        }
      },
      '2hs': {
        '01': {
          white: [lg(_t1433 || (_t1433 = _$1`Weapon_Attacks/Melee/DmgSlashing_01_Regular_Yellow_2Handed_800x600.webm`))]
        }
      },
      '1hb': {
        '01': {
          white: [lg(_t1434 || (_t1434 = _$1`Weapon_Attacks/Melee/DmgBludgeoning_01_Regular_Yellow_1Handed_800x600.webm`))]
        }
      },
      '2hb': {
        '01': {
          white: [lg(_t1435 || (_t1435 = _$1`Weapon_Attacks/Melee/DmgBludgeoning_01_Regular_Yellow_2Handed_800x600.webm`))]
        }
      },
      '1hp': {
        '01': {
          white: [lg(_t1436 || (_t1436 = _$1`Weapon_Attacks/Melee/DmgPiercing_01_Regular_Yellow_1Handed_800x600.webm`))]
        }
      },
      '2hp': {
        '01': {
          white: [lg(_t1437 || (_t1437 = _$1`Weapon_Attacks/Melee/DmgPiercing_01_Regular_Yellow_2Handed_800x600.webm`))]
        }
      }
    },
    weapon: {
      club: {
        '01': {
          white: [[lg(_t1438 || (_t1438 = _$1`Weapon_Attacks/Melee/Club01_01_Regular_White_800x600.webm`))], [lg(_t1439 || (_t1439 = _$1`Weapon_Attacks/Melee/Club01_02_Regular_White_800x600.webm`))], [lg(_t1440 || (_t1440 = _$1`Weapon_Attacks/Melee/Club01_03_Regular_White_800x600.webm`))], [lg(_t1441 || (_t1441 = _$1`Weapon_Attacks/Melee/Club01_04_Regular_White_800x600.webm`))], [lg(_t1442 || (_t1442 = _$1`Weapon_Attacks/Melee/Club01_05_Regular_White_800x600.webm`))], [lg(_t1443 || (_t1443 = _$1`Weapon_Attacks/Melee/Club01_06_Regular_White_800x600.webm`))]],
          blue: [[lg(_t1444 || (_t1444 = _$1`Weapon_Attacks/Melee/Club01_01_Regular_Blue_800x600.webm`))], [lg(_t1445 || (_t1445 = _$1`Weapon_Attacks/Melee/Club01_02_Regular_Blue_800x600.webm`))], [lg(_t1446 || (_t1446 = _$1`Weapon_Attacks/Melee/Club01_03_Regular_Blue_800x600.webm`))], [lg(_t1447 || (_t1447 = _$1`Weapon_Attacks/Melee/Club01_04_Regular_Blue_800x600.webm`))], [lg(_t1448 || (_t1448 = _$1`Weapon_Attacks/Melee/Club01_05_Regular_Blue_800x600.webm`))], [lg(_t1449 || (_t1449 = _$1`Weapon_Attacks/Melee/Club01_06_Regular_Blue_800x600.webm`))]],
          orange: [[lg(_t1450 || (_t1450 = _$1`Weapon_Attacks/Melee/Club01_01_Regular_Orange_800x600.webm`))], [lg(_t1451 || (_t1451 = _$1`Weapon_Attacks/Melee/Club01_02_Regular_Orange_800x600.webm`))], [lg(_t1452 || (_t1452 = _$1`Weapon_Attacks/Melee/Club01_03_Regular_Orange_800x600.webm`))], [lg(_t1453 || (_t1453 = _$1`Weapon_Attacks/Melee/Club01_04_Regular_Orange_800x600.webm`))], [lg(_t1454 || (_t1454 = _$1`Weapon_Attacks/Melee/Club01_05_Regular_Orange_800x600.webm`))], [lg(_t1455 || (_t1455 = _$1`Weapon_Attacks/Melee/Club01_06_Regular_Orange_800x600.webm`))]],
          purple: [[lg(_t1456 || (_t1456 = _$1`Weapon_Attacks/Melee/Club01_01_Regular_Purple_800x600.webm`))], [lg(_t1457 || (_t1457 = _$1`Weapon_Attacks/Melee/Club01_02_Regular_Purple_800x600.webm`))], [lg(_t1458 || (_t1458 = _$1`Weapon_Attacks/Melee/Club01_03_Regular_Purple_800x600.webm`))], [lg(_t1459 || (_t1459 = _$1`Weapon_Attacks/Melee/Club01_04_Regular_Purple_800x600.webm`))], [lg(_t1460 || (_t1460 = _$1`Weapon_Attacks/Melee/Club01_05_Regular_Purple_800x600.webm`))], [lg(_t1461 || (_t1461 = _$1`Weapon_Attacks/Melee/Club01_06_Regular_Purple_800x600.webm`))]],
          darkorangepurple: [[lg(_t1462 || (_t1462 = _$1`Weapon_Attacks/Melee/Club01_01_Dark_OrangePurple_800x600.webm`))], [lg(_t1463 || (_t1463 = _$1`Weapon_Attacks/Melee/Club01_02_Dark_OrangePurple_800x600.webm`))], [lg(_t1464 || (_t1464 = _$1`Weapon_Attacks/Melee/Club01_03_Dark_OrangePurple_800x600.webm`))], [lg(_t1465 || (_t1465 = _$1`Weapon_Attacks/Melee/Club01_04_Dark_OrangePurple_800x600.webm`))], [lg(_t1466 || (_t1466 = _$1`Weapon_Attacks/Melee/Club01_05_Dark_OrangePurple_800x600.webm`))], [lg(_t1467 || (_t1467 = _$1`Weapon_Attacks/Melee/Club01_06_Dark_OrangePurple_800x600.webm`))]]
        }
      },
      dagger: {
        '01': {
          white: [lg(_t1468 || (_t1468 = _$1`Weapon_Attacks/Melee/Dagger02_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1469 || (_t1469 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1470 || (_t1470 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1471 || (_t1471 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1472 || (_t1472 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1473 || (_t1473 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1474 || (_t1474 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1475 || (_t1475 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Regular_Green_800x600.webm`))],
          darkpurple: [lg(_t1476 || (_t1476 = _$1`Weapon_Attacks/Melee/Dagger02_Fire_Dark_Purple_800x600.webm`))]
        }
      },
      falchion: {
        '01': {
          darkorangepurple: [lg(_t1477 || (_t1477 = _$1`Weapon_Attacks/Melee/Falchion01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1478 || (_t1478 = _$1`Weapon_Attacks/Melee/Falchion01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1479 || (_t1479 = _$1`Weapon_Attacks/Melee/Falchion01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1480 || (_t1480 = _$1`Weapon_Attacks/Melee/Falchion01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1481 || (_t1481 = _$1`Weapon_Attacks/Melee/Falchion01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1482 || (_t1482 = _$1`Weapon_Attacks/Melee/Falchion01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1483 || (_t1483 = _$1`Weapon_Attacks/Melee/Falchion01_01_Regular_Blue_800x600.webm`)), lg(_t1484 || (_t1484 = _$1`Weapon_Attacks/Melee/Falchion01_02_Regular_Blue_800x600.webm`)), lg(_t1485 || (_t1485 = _$1`Weapon_Attacks/Melee/Falchion01_03_Regular_Blue_800x600.webm`)), lg(_t1486 || (_t1486 = _$1`Weapon_Attacks/Melee/Falchion01_04_Regular_Blue_800x600.webm`)), lg(_t1487 || (_t1487 = _$1`Weapon_Attacks/Melee/Falchion01_05_Regular_Blue_800x600.webm`)), lg(_t1488 || (_t1488 = _$1`Weapon_Attacks/Melee/Falchion01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1489 || (_t1489 = _$1`Weapon_Attacks/Melee/Falchion01_01_Regular_Orange_800x600.webm`)), lg(_t1490 || (_t1490 = _$1`Weapon_Attacks/Melee/Falchion01_02_Regular_Orange_800x600.webm`)), lg(_t1491 || (_t1491 = _$1`Weapon_Attacks/Melee/Falchion01_03_Regular_Orange_800x600.webm`)), lg(_t1492 || (_t1492 = _$1`Weapon_Attacks/Melee/Falchion01_04_Regular_Orange_800x600.webm`)), lg(_t1493 || (_t1493 = _$1`Weapon_Attacks/Melee/Falchion01_05_Regular_Orange_800x600.webm`)), lg(_t1494 || (_t1494 = _$1`Weapon_Attacks/Melee/Falchion01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1495 || (_t1495 = _$1`Weapon_Attacks/Melee/Falchion01_01_Regular_Purple_800x600.webm`)), lg(_t1496 || (_t1496 = _$1`Weapon_Attacks/Melee/Falchion01_02_Regular_Purple_800x600.webm`)), lg(_t1497 || (_t1497 = _$1`Weapon_Attacks/Melee/Falchion01_03_Regular_Purple_800x600.webm`)), lg(_t1498 || (_t1498 = _$1`Weapon_Attacks/Melee/Falchion01_04_Regular_Purple_800x600.webm`)), lg(_t1499 || (_t1499 = _$1`Weapon_Attacks/Melee/Falchion01_05_Regular_Purple_800x600.webm`)), lg(_t1500 || (_t1500 = _$1`Weapon_Attacks/Melee/Falchion01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1501 || (_t1501 = _$1`Weapon_Attacks/Melee/Falchion01_01_Regular_White_800x600.webm`)), lg(_t1502 || (_t1502 = _$1`Weapon_Attacks/Melee/Falchion01_02_Regular_White_800x600.webm`)), lg(_t1503 || (_t1503 = _$1`Weapon_Attacks/Melee/Falchion01_03_Regular_White_800x600.webm`)), lg(_t1504 || (_t1504 = _$1`Weapon_Attacks/Melee/Falchion01_04_Regular_White_800x600.webm`)), lg(_t1505 || (_t1505 = _$1`Weapon_Attacks/Melee/Falchion01_05_Regular_White_800x600.webm`)), lg(_t1506 || (_t1506 = _$1`Weapon_Attacks/Melee/Falchion01_06_Regular_White_800x600.webm`))]
        }
      },
      flurryofblows: {
        'magical': {
          darkred: [lg(_t1507 || (_t1507 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Red_Magical01_800x600.webm`)), lg(_t1508 || (_t1508 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Red_Magical02_800x600.webm`))],
          darkpurple: [lg(_t1509 || (_t1509 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Purple_Magical01_800x600.webm`)), lg(_t1510 || (_t1510 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Purple_Magical02_800x600.webm`))],
          blue: [lg(_t1511 || (_t1511 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Magical01_800x600.webm`)), lg(_t1512 || (_t1512 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Magical02_800x600.webm`))],
          green: [lg(_t1513 || (_t1513 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Green_Magical01_800x600.webm`)), lg(_t1514 || (_t1514 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Green_Magical02_800x600.webm`))],
          orange: [lg(_t1515 || (_t1515 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Orange_Magical01_800x600.webm`)), lg(_t1516 || (_t1516 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Orange_Magical02_800x600.webm`))],
          purplepink: [lg(_t1517 || (_t1517 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_PinkPurple_Magical01_800x600.webm`)), lg(_t1518 || (_t1518 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_PinkPurple_Magical02_800x600.webm`))],
          yellow: [lg(_t1519 || (_t1519 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Yellow_Magical01_800x600.webm`)), lg(_t1520 || (_t1520 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Yellow_Magical02_800x600.webm`))]
        },
        'physical': {
          darkred: [lg(_t1521 || (_t1521 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Red_Physical01_800x600.webm`))],
          darkpurple: [lg(_t1522 || (_t1522 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Dark_Purple_Physical01_800x600.webm`))],
          blue: [lg(_t1523 || (_t1523 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Physical01_800x600.webm`))],
          green: [lg(_t1524 || (_t1524 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Green_Physical01_800x600.webm`))],
          orange: [lg(_t1525 || (_t1525 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Orange_Physical01_800x600.webm`))],
          purplepink: [lg(_t1526 || (_t1526 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_PinkPurple_Physical01_800x600.webm`))],
          yellow: [lg(_t1527 || (_t1527 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Yellow_Physical01_800x600.webm`))]
        },
        'nohit': {
          blue: [lg(_t1528 || (_t1528 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlowsNoHit_01_Regular_Blue_800x600.webm`))],
          yellow: [lg(_t1529 || (_t1529 = _$1`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlowsNoHit_01_Regular_Yellow_800x600.webm`))]
        }
      },
      glaive: {
        '01': {
          darkorangepurple: [lg(_t1530 || (_t1530 = _$1`Weapon_Attacks/Melee/Glaive01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1531 || (_t1531 = _$1`Weapon_Attacks/Melee/Glaive01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1532 || (_t1532 = _$1`Weapon_Attacks/Melee/Glaive01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1533 || (_t1533 = _$1`Weapon_Attacks/Melee/Glaive01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1534 || (_t1534 = _$1`Weapon_Attacks/Melee/Glaive01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1535 || (_t1535 = _$1`Weapon_Attacks/Melee/Glaive01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1536 || (_t1536 = _$1`Weapon_Attacks/Melee/Glaive01_01_Regular_Blue_800x600.webm`)), lg(_t1537 || (_t1537 = _$1`Weapon_Attacks/Melee/Glaive01_02_Regular_Blue_800x600.webm`)), lg(_t1538 || (_t1538 = _$1`Weapon_Attacks/Melee/Glaive01_03_Regular_Blue_800x600.webm`)), lg(_t1539 || (_t1539 = _$1`Weapon_Attacks/Melee/Glaive01_04_Regular_Blue_800x600.webm`)), lg(_t1540 || (_t1540 = _$1`Weapon_Attacks/Melee/Glaive01_05_Regular_Blue_800x600.webm`)), lg(_t1541 || (_t1541 = _$1`Weapon_Attacks/Melee/Glaive01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1542 || (_t1542 = _$1`Weapon_Attacks/Melee/Glaive01_01_Regular_Orange_800x600.webm`)), lg(_t1543 || (_t1543 = _$1`Weapon_Attacks/Melee/Glaive01_02_Regular_Orange_800x600.webm`)), lg(_t1544 || (_t1544 = _$1`Weapon_Attacks/Melee/Glaive01_03_Regular_Orange_800x600.webm`)), lg(_t1545 || (_t1545 = _$1`Weapon_Attacks/Melee/Glaive01_04_Regular_Orange_800x600.webm`)), lg(_t1546 || (_t1546 = _$1`Weapon_Attacks/Melee/Glaive01_05_Regular_Orange_800x600.webm`)), lg(_t1547 || (_t1547 = _$1`Weapon_Attacks/Melee/Glaive01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1548 || (_t1548 = _$1`Weapon_Attacks/Melee/Glaive01_01_Regular_Purple_800x600.webm`)), lg(_t1549 || (_t1549 = _$1`Weapon_Attacks/Melee/Glaive01_02_Regular_Purple_800x600.webm`)), lg(_t1550 || (_t1550 = _$1`Weapon_Attacks/Melee/Glaive01_03_Regular_Purple_800x600.webm`)), lg(_t1551 || (_t1551 = _$1`Weapon_Attacks/Melee/Glaive01_04_Regular_Purple_800x600.webm`)), lg(_t1552 || (_t1552 = _$1`Weapon_Attacks/Melee/Glaive01_05_Regular_Purple_800x600.webm`)), lg(_t1553 || (_t1553 = _$1`Weapon_Attacks/Melee/Glaive01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1554 || (_t1554 = _$1`Weapon_Attacks/Melee/Glaive01_01_Regular_White_800x600.webm`)), lg(_t1555 || (_t1555 = _$1`Weapon_Attacks/Melee/Glaive01_02_Regular_White_800x600.webm`)), lg(_t1556 || (_t1556 = _$1`Weapon_Attacks/Melee/Glaive01_03_Regular_White_800x600.webm`)), lg(_t1557 || (_t1557 = _$1`Weapon_Attacks/Melee/Glaive01_04_Regular_White_800x600.webm`)), lg(_t1558 || (_t1558 = _$1`Weapon_Attacks/Melee/Glaive01_05_Regular_White_800x600.webm`)), lg(_t1559 || (_t1559 = _$1`Weapon_Attacks/Melee/Glaive01_06_Regular_White_800x600.webm`))]
        },
        '02': {
          darkorangepurple: [lg(_t1560 || (_t1560 = _$1`Weapon_Attacks/Melee/Glaive02_01_Dark_OrangePurple_800x600.webm`)), lg(_t1561 || (_t1561 = _$1`Weapon_Attacks/Melee/Glaive02_02_Dark_OrangePurple_800x600.webm`)), lg(_t1562 || (_t1562 = _$1`Weapon_Attacks/Melee/Glaive02_03_Dark_OrangePurple_800x600.webm`)), lg(_t1563 || (_t1563 = _$1`Weapon_Attacks/Melee/Glaive02_04_Dark_OrangePurple_800x600.webm`)), lg(_t1564 || (_t1564 = _$1`Weapon_Attacks/Melee/Glaive02_05_Dark_OrangePurple_800x600.webm`)), lg(_t1565 || (_t1565 = _$1`Weapon_Attacks/Melee/Glaive02_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1566 || (_t1566 = _$1`Weapon_Attacks/Melee/Glaive02_01_Regular_Blue_800x600.webm`)), lg(_t1567 || (_t1567 = _$1`Weapon_Attacks/Melee/Glaive02_02_Regular_Blue_800x600.webm`)), lg(_t1568 || (_t1568 = _$1`Weapon_Attacks/Melee/Glaive02_03_Regular_Blue_800x600.webm`)), lg(_t1569 || (_t1569 = _$1`Weapon_Attacks/Melee/Glaive02_04_Regular_Blue_800x600.webm`)), lg(_t1570 || (_t1570 = _$1`Weapon_Attacks/Melee/Glaive02_05_Regular_Blue_800x600.webm`)), lg(_t1571 || (_t1571 = _$1`Weapon_Attacks/Melee/Glaive02_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1572 || (_t1572 = _$1`Weapon_Attacks/Melee/Glaive02_01_Regular_Orange_800x600.webm`)), lg(_t1573 || (_t1573 = _$1`Weapon_Attacks/Melee/Glaive02_02_Regular_Orange_800x600.webm`)), lg(_t1574 || (_t1574 = _$1`Weapon_Attacks/Melee/Glaive02_03_Regular_Orange_800x600.webm`)), lg(_t1575 || (_t1575 = _$1`Weapon_Attacks/Melee/Glaive02_04_Regular_Orange_800x600.webm`)), lg(_t1576 || (_t1576 = _$1`Weapon_Attacks/Melee/Glaive02_05_Regular_Orange_800x600.webm`)), lg(_t1577 || (_t1577 = _$1`Weapon_Attacks/Melee/Glaive02_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1578 || (_t1578 = _$1`Weapon_Attacks/Melee/Glaive02_01_Regular_Purple_800x600.webm`)), lg(_t1579 || (_t1579 = _$1`Weapon_Attacks/Melee/Glaive02_02_Regular_Purple_800x600.webm`)), lg(_t1580 || (_t1580 = _$1`Weapon_Attacks/Melee/Glaive02_03_Regular_Purple_800x600.webm`)), lg(_t1581 || (_t1581 = _$1`Weapon_Attacks/Melee/Glaive02_04_Regular_Purple_800x600.webm`)), lg(_t1582 || (_t1582 = _$1`Weapon_Attacks/Melee/Glaive02_05_Regular_Purple_800x600.webm`)), lg(_t1583 || (_t1583 = _$1`Weapon_Attacks/Melee/Glaive02_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1584 || (_t1584 = _$1`Weapon_Attacks/Melee/Glaive02_01_Regular_White_800x600.webm`)), lg(_t1585 || (_t1585 = _$1`Weapon_Attacks/Melee/Glaive02_02_Regular_White_800x600.webm`)), lg(_t1586 || (_t1586 = _$1`Weapon_Attacks/Melee/Glaive02_03_Regular_White_800x600.webm`)), lg(_t1587 || (_t1587 = _$1`Weapon_Attacks/Melee/Glaive02_04_Regular_White_800x600.webm`)), lg(_t1588 || (_t1588 = _$1`Weapon_Attacks/Melee/Glaive02_05_Regular_White_800x600.webm`)), lg(_t1589 || (_t1589 = _$1`Weapon_Attacks/Melee/Glaive02_06_Regular_White_800x600.webm`))]
        }
      },
      greataxe: {
        '01': {
          white: [lg(_t1590 || (_t1590 = _$1`Weapon_Attacks/Melee/GreatAxe01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1591 || (_t1591 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1592 || (_t1592 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1593 || (_t1593 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1594 || (_t1594 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1595 || (_t1595 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1596 || (_t1596 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1597 || (_t1597 = _$1`Weapon_Attacks/Melee/GreatAxe01_Fire_Regular_Green_800x600.webm`))]
        }
      },
      greatclub: {
        '01': {
          white: [lg(_t1598 || (_t1598 = _$1`Weapon_Attacks/Melee/GreatClub01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1599 || (_t1599 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1600 || (_t1600 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1601 || (_t1601 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1602 || (_t1602 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1603 || (_t1603 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1604 || (_t1604 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1605 || (_t1605 = _$1`Weapon_Attacks/Melee/GreatClub01_Fire_Regular_Green_800x600.webm`))]
        }
      },
      greatsword: {
        '01': {
          white: [lg(_t1606 || (_t1606 = _$1`Weapon_Attacks/Melee/GreatSword01_01_Regular_White_800x600.webm`))],
          black: [lg(_t1607 || (_t1607 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Black_800x600.webm`))],
          orange: [lg(_t1608 || (_t1608 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1609 || (_t1609 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1610 || (_t1610 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1611 || (_t1611 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1612 || (_t1612 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1613 || (_t1613 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1614 || (_t1614 = _$1`Weapon_Attacks/Melee/GreatSword01_Fire_Regular_Green_800x600.webm`))]
        }
      },
      halberd: {
        '01': {
          white: [lg(_t1615 || (_t1615 = _$1`Weapon_Attacks/Melee/Halberd01_01_Regular_White_800x600.webm`)), lg(_t1616 || (_t1616 = _$1`Weapon_Attacks/Melee/Halberd01_02_Regular_White_800x600.webm`)), lg(_t1617 || (_t1617 = _$1`Weapon_Attacks/Melee/Halberd01_03_Regular_White_800x600.webm`)), lg(_t1618 || (_t1618 = _$1`Weapon_Attacks/Melee/Halberd01_04_Regular_White_800x600.webm`)), lg(_t1619 || (_t1619 = _$1`Weapon_Attacks/Melee/Halberd01_05_Regular_White_800x600.webm`)), lg(_t1620 || (_t1620 = _$1`Weapon_Attacks/Melee/Halberd01_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1621 || (_t1621 = _$1`Weapon_Attacks/Melee/Halberd01_01_Regular_Blue_800x600.webm`)), lg(_t1622 || (_t1622 = _$1`Weapon_Attacks/Melee/Halberd01_02_Regular_Blue_800x600.webm`)), lg(_t1623 || (_t1623 = _$1`Weapon_Attacks/Melee/Halberd01_03_Regular_Blue_800x600.webm`)), lg(_t1624 || (_t1624 = _$1`Weapon_Attacks/Melee/Halberd01_04_Regular_Blue_800x600.webm`)), lg(_t1625 || (_t1625 = _$1`Weapon_Attacks/Melee/Halberd01_05_Regular_Blue_800x600.webm`)), lg(_t1626 || (_t1626 = _$1`Weapon_Attacks/Melee/Halberd01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1627 || (_t1627 = _$1`Weapon_Attacks/Melee/Halberd01_01_Regular_Orange_800x600.webm`)), lg(_t1628 || (_t1628 = _$1`Weapon_Attacks/Melee/Halberd01_02_Regular_Orange_800x600.webm`)), lg(_t1629 || (_t1629 = _$1`Weapon_Attacks/Melee/Halberd01_03_Regular_Orange_800x600.webm`)), lg(_t1630 || (_t1630 = _$1`Weapon_Attacks/Melee/Halberd01_04_Regular_Orange_800x600.webm`)), lg(_t1631 || (_t1631 = _$1`Weapon_Attacks/Melee/Halberd01_05_Regular_Orange_800x600.webm`)), lg(_t1632 || (_t1632 = _$1`Weapon_Attacks/Melee/Halberd01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1633 || (_t1633 = _$1`Weapon_Attacks/Melee/Halberd01_01_Regular_Purple_800x600.webm`)), lg(_t1634 || (_t1634 = _$1`Weapon_Attacks/Melee/Halberd01_02_Regular_Purple_800x600.webm`)), lg(_t1635 || (_t1635 = _$1`Weapon_Attacks/Melee/Halberd01_03_Regular_Purple_800x600.webm`)), lg(_t1636 || (_t1636 = _$1`Weapon_Attacks/Melee/Halberd01_04_Regular_Purple_800x600.webm`)), lg(_t1637 || (_t1637 = _$1`Weapon_Attacks/Melee/Halberd01_05_Regular_Purple_800x600.webm`)), lg(_t1638 || (_t1638 = _$1`Weapon_Attacks/Melee/Halberd01_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1639 || (_t1639 = _$1`Weapon_Attacks/Melee/Halberd01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1640 || (_t1640 = _$1`Weapon_Attacks/Melee/Halberd01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1641 || (_t1641 = _$1`Weapon_Attacks/Melee/Halberd01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1642 || (_t1642 = _$1`Weapon_Attacks/Melee/Halberd01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1643 || (_t1643 = _$1`Weapon_Attacks/Melee/Halberd01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1644 || (_t1644 = _$1`Weapon_Attacks/Melee/Halberd01_06_Dark_OrangePurple_800x600.webm`))]
        }
      },
      hammer: {
        '01': {
          white: [lg(_t1645 || (_t1645 = _$1`Weapon_Attacks/Melee/Hammer01_01_Regular_White_800x600.webm`)), lg(_t1646 || (_t1646 = _$1`Weapon_Attacks/Melee/Hammer01_02_Regular_White_800x600.webm`)), lg(_t1647 || (_t1647 = _$1`Weapon_Attacks/Melee/Hammer01_03_Regular_White_800x600.webm`)), lg(_t1648 || (_t1648 = _$1`Weapon_Attacks/Melee/Hammer01_04_Regular_White_800x600.webm`)), lg(_t1649 || (_t1649 = _$1`Weapon_Attacks/Melee/Hammer01_05_Regular_White_800x600.webm`)), lg(_t1650 || (_t1650 = _$1`Weapon_Attacks/Melee/Hammer01_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1651 || (_t1651 = _$1`Weapon_Attacks/Melee/Hammer01_01_Regular_Blue_800x600.webm`)), lg(_t1652 || (_t1652 = _$1`Weapon_Attacks/Melee/Hammer01_02_Regular_Blue_800x600.webm`)), lg(_t1653 || (_t1653 = _$1`Weapon_Attacks/Melee/Hammer01_03_Regular_Blue_800x600.webm`)), lg(_t1654 || (_t1654 = _$1`Weapon_Attacks/Melee/Hammer01_04_Regular_Blue_800x600.webm`)), lg(_t1655 || (_t1655 = _$1`Weapon_Attacks/Melee/Hammer01_05_Regular_Blue_800x600.webm`)), lg(_t1656 || (_t1656 = _$1`Weapon_Attacks/Melee/Hammer01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1657 || (_t1657 = _$1`Weapon_Attacks/Melee/Hammer01_01_Regular_Orange_800x600.webm`)), lg(_t1658 || (_t1658 = _$1`Weapon_Attacks/Melee/Hammer01_02_Regular_Orange_800x600.webm`)), lg(_t1659 || (_t1659 = _$1`Weapon_Attacks/Melee/Hammer01_03_Regular_Orange_800x600.webm`)), lg(_t1660 || (_t1660 = _$1`Weapon_Attacks/Melee/Hammer01_04_Regular_Orange_800x600.webm`)), lg(_t1661 || (_t1661 = _$1`Weapon_Attacks/Melee/Hammer01_05_Regular_Orange_800x600.webm`)), lg(_t1662 || (_t1662 = _$1`Weapon_Attacks/Melee/Hammer01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1663 || (_t1663 = _$1`Weapon_Attacks/Melee/Hammer01_01_Regular_Purple_800x600.webm`)), lg(_t1664 || (_t1664 = _$1`Weapon_Attacks/Melee/Hammer01_02_Regular_Purple_800x600.webm`)), lg(_t1665 || (_t1665 = _$1`Weapon_Attacks/Melee/Hammer01_03_Regular_Purple_800x600.webm`)), lg(_t1666 || (_t1666 = _$1`Weapon_Attacks/Melee/Hammer01_04_Regular_Purple_800x600.webm`)), lg(_t1667 || (_t1667 = _$1`Weapon_Attacks/Melee/Hammer01_05_Regular_Purple_800x600.webm`)), lg(_t1668 || (_t1668 = _$1`Weapon_Attacks/Melee/Hammer01_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1669 || (_t1669 = _$1`Weapon_Attacks/Melee/Hammer01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1670 || (_t1670 = _$1`Weapon_Attacks/Melee/Hammer01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1671 || (_t1671 = _$1`Weapon_Attacks/Melee/Hammer01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1672 || (_t1672 = _$1`Weapon_Attacks/Melee/Hammer01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1673 || (_t1673 = _$1`Weapon_Attacks/Melee/Hammer01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1674 || (_t1674 = _$1`Weapon_Attacks/Melee/Hammer01_06_Dark_OrangePurple_800x600.webm`))],
          yellow: [lg(_t1675 || (_t1675 = _$1`Weapon_Attacks/Melee/Hammer01_01_Regular_Yellow_800x600.webm`)), lg(_t1676 || (_t1676 = _$1`Weapon_Attacks/Melee/Hammer01_02_Regular_Yellow_800x600.webm`)), lg(_t1677 || (_t1677 = _$1`Weapon_Attacks/Melee/Hammer01_03_Regular_Yellow_800x600.webm`)), lg(_t1678 || (_t1678 = _$1`Weapon_Attacks/Melee/Hammer01_04_Regular_Yellow_800x600.webm`)), lg(_t1679 || (_t1679 = _$1`Weapon_Attacks/Melee/Hammer01_05_Regular_Yellow_800x600.webm`)), lg(_t1680 || (_t1680 = _$1`Weapon_Attacks/Melee/Hammer01_06_Regular_Yellow_800x600.webm`))]
        }
      },
      handaxe: {
        '01': {
          white: [lg(_t1681 || (_t1681 = _$1`Weapon_Attacks/Melee/HandAxe02_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1682 || (_t1682 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1683 || (_t1683 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1684 || (_t1684 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1685 || (_t1685 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1686 || (_t1686 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1687 || (_t1687 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1688 || (_t1688 = _$1`Weapon_Attacks/Melee/HandAxe02_Fire_Regular_Green_800x600.webm`))]
        }
      },
      lasersword: {
        '01': {
          blue: [lg(_t1689 || (_t1689 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1690 || (_t1690 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Orange_800x600.webm`))],
          red: [lg(_t1691 || (_t1691 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1692 || (_t1692 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Yellow_800x600.webm`))],
          darkred: [lg(_t1693 || (_t1693 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Dark_Red_800x600.webm`))],
          purple: [lg(_t1694 || (_t1694 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Purple_800x600.webm`))],
          green: [lg(_t1695 || (_t1695 = _$1`Weapon_Attacks/Melee/LaserSword01_01_Regular_Green_800x600.webm`))]
        }
      },
      mace: {
        '01': {
          white: [lg(_t1696 || (_t1696 = _$1`Weapon_Attacks/Melee/Legacy/Mace01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1697 || (_t1697 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1698 || (_t1698 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1699 || (_t1699 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1700 || (_t1700 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1701 || (_t1701 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1702 || (_t1702 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1703 || (_t1703 = _$1`Weapon_Attacks/Melee/Mace01_Fire_Regular_Green_800x600.webm`))]
        },
        '02': {
          white: [[lg(_t1704 || (_t1704 = _$1`Weapon_Attacks/Melee/Mace01_01_Regular_White_800x600.webm`))], [lg(_t1705 || (_t1705 = _$1`Weapon_Attacks/Melee/Mace01_02_Regular_White_800x600.webm`))], [lg(_t1706 || (_t1706 = _$1`Weapon_Attacks/Melee/Mace01_03_Regular_White_800x600.webm`))], [lg(_t1707 || (_t1707 = _$1`Weapon_Attacks/Melee/Mace01_04_Regular_White_800x600.webm`))], [lg(_t1708 || (_t1708 = _$1`Weapon_Attacks/Melee/Mace01_05_Regular_White_800x600.webm`))], [lg(_t1709 || (_t1709 = _$1`Weapon_Attacks/Melee/Mace01_06_Regular_White_800x600.webm`))]],
          blue: [[lg(_t1710 || (_t1710 = _$1`Weapon_Attacks/Melee/Mace01_01_Regular_Blue_800x600.webm`))], [lg(_t1711 || (_t1711 = _$1`Weapon_Attacks/Melee/Mace01_02_Regular_Blue_800x600.webm`))], [lg(_t1712 || (_t1712 = _$1`Weapon_Attacks/Melee/Mace01_03_Regular_Blue_800x600.webm`))], [lg(_t1713 || (_t1713 = _$1`Weapon_Attacks/Melee/Mace01_04_Regular_Blue_800x600.webm`))], [lg(_t1714 || (_t1714 = _$1`Weapon_Attacks/Melee/Mace01_05_Regular_Blue_800x600.webm`))], [lg(_t1715 || (_t1715 = _$1`Weapon_Attacks/Melee/Mace01_06_Regular_Blue_800x600.webm`))]],
          orange: [[lg(_t1716 || (_t1716 = _$1`Weapon_Attacks/Melee/Mace01_01_Regular_Orange_800x600.webm`))], [lg(_t1717 || (_t1717 = _$1`Weapon_Attacks/Melee/Mace01_02_Regular_Orange_800x600.webm`))], [lg(_t1718 || (_t1718 = _$1`Weapon_Attacks/Melee/Mace01_03_Regular_Orange_800x600.webm`))], [lg(_t1719 || (_t1719 = _$1`Weapon_Attacks/Melee/Mace01_04_Regular_Orange_800x600.webm`))], [lg(_t1720 || (_t1720 = _$1`Weapon_Attacks/Melee/Mace01_05_Regular_Orange_800x600.webm`))], [lg(_t1721 || (_t1721 = _$1`Weapon_Attacks/Melee/Mace01_06_Regular_Orange_800x600.webm`))]],
          purple: [[lg(_t1722 || (_t1722 = _$1`Weapon_Attacks/Melee/Mace01_01_Regular_Purple_800x600.webm`))], [lg(_t1723 || (_t1723 = _$1`Weapon_Attacks/Melee/Mace01_02_Regular_Purple_800x600.webm`))], [lg(_t1724 || (_t1724 = _$1`Weapon_Attacks/Melee/Mace01_03_Regular_Purple_800x600.webm`))], [lg(_t1725 || (_t1725 = _$1`Weapon_Attacks/Melee/Mace01_04_Regular_Purple_800x600.webm`))], [lg(_t1726 || (_t1726 = _$1`Weapon_Attacks/Melee/Mace01_05_Regular_Purple_800x600.webm`))], [lg(_t1727 || (_t1727 = _$1`Weapon_Attacks/Melee/Mace01_06_Regular_Purple_800x600.webm`))]],
          darkorangepurple: [[lg(_t1728 || (_t1728 = _$1`Weapon_Attacks/Melee/Mace01_01_Dark_OrangePurple_800x600.webm`))], [lg(_t1729 || (_t1729 = _$1`Weapon_Attacks/Melee/Mace01_02_Dark_OrangePurple_800x600.webm`))], [lg(_t1730 || (_t1730 = _$1`Weapon_Attacks/Melee/Mace01_03_Dark_OrangePurple_800x600.webm`))], [lg(_t1731 || (_t1731 = _$1`Weapon_Attacks/Melee/Mace01_04_Dark_OrangePurple_800x600.webm`))], [lg(_t1732 || (_t1732 = _$1`Weapon_Attacks/Melee/Mace01_05_Dark_OrangePurple_800x600.webm`))], [lg(_t1733 || (_t1733 = _$1`Weapon_Attacks/Melee/Mace01_06_Dark_OrangePurple_800x600.webm`))]]
        }
      },
      maul: {
        '01': {
          white: [lg(_t1734 || (_t1734 = _$1`Weapon_Attacks/Melee/Maul01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1735 || (_t1735 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1736 || (_t1736 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1737 || (_t1737 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1738 || (_t1738 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1739 || (_t1739 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1740 || (_t1740 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1741 || (_t1741 = _$1`Weapon_Attacks/Melee/Maul01_Fire_Regular_Green_800x600.webm`))]
        }
      },
      quarterstaff: {
        '01': {
          white: [lg(_t1742 || (_t1742 = _$1`Weapon_Attacks/Melee/Quarterstaff01_01_Regular_White_800x600.webm`)), lg(_t1743 || (_t1743 = _$1`Weapon_Attacks/Melee/Quarterstaff01_02_Regular_White_800x600.webm`)), lg(_t1744 || (_t1744 = _$1`Weapon_Attacks/Melee/Quarterstaff01_03_Regular_White_800x600.webm`)), lg(_t1745 || (_t1745 = _$1`Weapon_Attacks/Melee/Quarterstaff01_04_Regular_White_800x600.webm`)), lg(_t1746 || (_t1746 = _$1`Weapon_Attacks/Melee/Quarterstaff01_05_Regular_White_800x600.webm`)), lg(_t1747 || (_t1747 = _$1`Weapon_Attacks/Melee/Quarterstaff01_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1748 || (_t1748 = _$1`Weapon_Attacks/Melee/Quarterstaff01_01_Regular_Blue_800x600.webm`)), lg(_t1749 || (_t1749 = _$1`Weapon_Attacks/Melee/Quarterstaff01_02_Regular_Blue_800x600.webm`)), lg(_t1750 || (_t1750 = _$1`Weapon_Attacks/Melee/Quarterstaff01_03_Regular_Blue_800x600.webm`)), lg(_t1751 || (_t1751 = _$1`Weapon_Attacks/Melee/Quarterstaff01_04_Regular_Blue_800x600.webm`)), lg(_t1752 || (_t1752 = _$1`Weapon_Attacks/Melee/Quarterstaff01_05_Regular_Blue_800x600.webm`)), lg(_t1753 || (_t1753 = _$1`Weapon_Attacks/Melee/Quarterstaff01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1754 || (_t1754 = _$1`Weapon_Attacks/Melee/Quarterstaff01_01_Regular_Orange_800x600.webm`)), lg(_t1755 || (_t1755 = _$1`Weapon_Attacks/Melee/Quarterstaff01_02_Regular_Orange_800x600.webm`)), lg(_t1756 || (_t1756 = _$1`Weapon_Attacks/Melee/Quarterstaff01_03_Regular_Orange_800x600.webm`)), lg(_t1757 || (_t1757 = _$1`Weapon_Attacks/Melee/Quarterstaff01_04_Regular_Orange_800x600.webm`)), lg(_t1758 || (_t1758 = _$1`Weapon_Attacks/Melee/Quarterstaff01_05_Regular_Orange_800x600.webm`)), lg(_t1759 || (_t1759 = _$1`Weapon_Attacks/Melee/Quarterstaff01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1760 || (_t1760 = _$1`Weapon_Attacks/Melee/Quarterstaff01_01_Regular_Purple_800x600.webm`)), lg(_t1761 || (_t1761 = _$1`Weapon_Attacks/Melee/Quarterstaff01_02_Regular_Purple_800x600.webm`)), lg(_t1762 || (_t1762 = _$1`Weapon_Attacks/Melee/Quarterstaff01_03_Regular_Purple_800x600.webm`)), lg(_t1763 || (_t1763 = _$1`Weapon_Attacks/Melee/Quarterstaff01_04_Regular_Purple_800x600.webm`)), lg(_t1764 || (_t1764 = _$1`Weapon_Attacks/Melee/Quarterstaff01_05_Regular_Purple_800x600.webm`)), lg(_t1765 || (_t1765 = _$1`Weapon_Attacks/Melee/Quarterstaff01_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1766 || (_t1766 = _$1`Weapon_Attacks/Melee/Quarterstaff01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1767 || (_t1767 = _$1`Weapon_Attacks/Melee/Quarterstaff01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1768 || (_t1768 = _$1`Weapon_Attacks/Melee/Quarterstaff01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1769 || (_t1769 = _$1`Weapon_Attacks/Melee/Quarterstaff01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1770 || (_t1770 = _$1`Weapon_Attacks/Melee/Quarterstaff01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1771 || (_t1771 = _$1`Weapon_Attacks/Melee/Quarterstaff01_06_Dark_OrangePurple_800x600.webm`))]
        },
        '02': {
          white: [lg(_t1772 || (_t1772 = _$1`Weapon_Attacks/Melee/Quarterstaff02_01_Regular_White_800x600.webm`)), lg(_t1773 || (_t1773 = _$1`Weapon_Attacks/Melee/Quarterstaff02_02_Regular_White_800x600.webm`)), lg(_t1774 || (_t1774 = _$1`Weapon_Attacks/Melee/Quarterstaff02_03_Regular_White_800x600.webm`)), lg(_t1775 || (_t1775 = _$1`Weapon_Attacks/Melee/Quarterstaff02_04_Regular_White_800x600.webm`)), lg(_t1776 || (_t1776 = _$1`Weapon_Attacks/Melee/Quarterstaff02_05_Regular_White_800x600.webm`)), lg(_t1777 || (_t1777 = _$1`Weapon_Attacks/Melee/Quarterstaff02_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1778 || (_t1778 = _$1`Weapon_Attacks/Melee/Quarterstaff02_01_Regular_Blue_800x600.webm`)), lg(_t1779 || (_t1779 = _$1`Weapon_Attacks/Melee/Quarterstaff02_02_Regular_Blue_800x600.webm`)), lg(_t1780 || (_t1780 = _$1`Weapon_Attacks/Melee/Quarterstaff02_03_Regular_Blue_800x600.webm`)), lg(_t1781 || (_t1781 = _$1`Weapon_Attacks/Melee/Quarterstaff02_04_Regular_Blue_800x600.webm`)), lg(_t1782 || (_t1782 = _$1`Weapon_Attacks/Melee/Quarterstaff02_05_Regular_Blue_800x600.webm`)), lg(_t1783 || (_t1783 = _$1`Weapon_Attacks/Melee/Quarterstaff02_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1784 || (_t1784 = _$1`Weapon_Attacks/Melee/Quarterstaff02_01_Regular_Orange_800x600.webm`)), lg(_t1785 || (_t1785 = _$1`Weapon_Attacks/Melee/Quarterstaff02_02_Regular_Orange_800x600.webm`)), lg(_t1786 || (_t1786 = _$1`Weapon_Attacks/Melee/Quarterstaff02_03_Regular_Orange_800x600.webm`)), lg(_t1787 || (_t1787 = _$1`Weapon_Attacks/Melee/Quarterstaff02_04_Regular_Orange_800x600.webm`)), lg(_t1788 || (_t1788 = _$1`Weapon_Attacks/Melee/Quarterstaff02_05_Regular_Orange_800x600.webm`)), lg(_t1789 || (_t1789 = _$1`Weapon_Attacks/Melee/Quarterstaff02_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1790 || (_t1790 = _$1`Weapon_Attacks/Melee/Quarterstaff02_01_Regular_Purple_800x600.webm`)), lg(_t1791 || (_t1791 = _$1`Weapon_Attacks/Melee/Quarterstaff02_02_Regular_Purple_800x600.webm`)), lg(_t1792 || (_t1792 = _$1`Weapon_Attacks/Melee/Quarterstaff02_03_Regular_Purple_800x600.webm`)), lg(_t1793 || (_t1793 = _$1`Weapon_Attacks/Melee/Quarterstaff02_04_Regular_Purple_800x600.webm`)), lg(_t1794 || (_t1794 = _$1`Weapon_Attacks/Melee/Quarterstaff02_05_Regular_Purple_800x600.webm`)), lg(_t1795 || (_t1795 = _$1`Weapon_Attacks/Melee/Quarterstaff02_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1796 || (_t1796 = _$1`Weapon_Attacks/Melee/Quarterstaff02_01_Dark_OrangePurple_800x600.webm`)), lg(_t1797 || (_t1797 = _$1`Weapon_Attacks/Melee/Quarterstaff02_02_Dark_OrangePurple_800x600.webm`)), lg(_t1798 || (_t1798 = _$1`Weapon_Attacks/Melee/Quarterstaff02_03_Dark_OrangePurple_800x600.webm`)), lg(_t1799 || (_t1799 = _$1`Weapon_Attacks/Melee/Quarterstaff02_04_Dark_OrangePurple_800x600.webm`)), lg(_t1800 || (_t1800 = _$1`Weapon_Attacks/Melee/Quarterstaff02_05_Dark_OrangePurple_800x600.webm`)), lg(_t1801 || (_t1801 = _$1`Weapon_Attacks/Melee/Quarterstaff02_06_Dark_OrangePurple_800x600.webm`))]
        },
        '03': {
          white: [lg(_t1802 || (_t1802 = _$1`Weapon_Attacks/Melee/Quarterstaff03_01_Regular_White_800x600.webm`)), lg(_t1803 || (_t1803 = _$1`Weapon_Attacks/Melee/Quarterstaff03_02_Regular_White_800x600.webm`)), lg(_t1804 || (_t1804 = _$1`Weapon_Attacks/Melee/Quarterstaff03_03_Regular_White_800x600.webm`)), lg(_t1805 || (_t1805 = _$1`Weapon_Attacks/Melee/Quarterstaff03_04_Regular_White_800x600.webm`)), lg(_t1806 || (_t1806 = _$1`Weapon_Attacks/Melee/Quarterstaff03_05_Regular_White_800x600.webm`)), lg(_t1807 || (_t1807 = _$1`Weapon_Attacks/Melee/Quarterstaff03_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1808 || (_t1808 = _$1`Weapon_Attacks/Melee/Quarterstaff03_01_Regular_Blue_800x600.webm`)), lg(_t1809 || (_t1809 = _$1`Weapon_Attacks/Melee/Quarterstaff03_02_Regular_Blue_800x600.webm`)), lg(_t1810 || (_t1810 = _$1`Weapon_Attacks/Melee/Quarterstaff03_03_Regular_Blue_800x600.webm`)), lg(_t1811 || (_t1811 = _$1`Weapon_Attacks/Melee/Quarterstaff03_04_Regular_Blue_800x600.webm`)), lg(_t1812 || (_t1812 = _$1`Weapon_Attacks/Melee/Quarterstaff03_05_Regular_Blue_800x600.webm`)), lg(_t1813 || (_t1813 = _$1`Weapon_Attacks/Melee/Quarterstaff03_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1814 || (_t1814 = _$1`Weapon_Attacks/Melee/Quarterstaff03_01_Regular_Orange_800x600.webm`)), lg(_t1815 || (_t1815 = _$1`Weapon_Attacks/Melee/Quarterstaff03_02_Regular_Orange_800x600.webm`)), lg(_t1816 || (_t1816 = _$1`Weapon_Attacks/Melee/Quarterstaff03_03_Regular_Orange_800x600.webm`)), lg(_t1817 || (_t1817 = _$1`Weapon_Attacks/Melee/Quarterstaff03_04_Regular_Orange_800x600.webm`)), lg(_t1818 || (_t1818 = _$1`Weapon_Attacks/Melee/Quarterstaff03_05_Regular_Orange_800x600.webm`)), lg(_t1819 || (_t1819 = _$1`Weapon_Attacks/Melee/Quarterstaff03_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1820 || (_t1820 = _$1`Weapon_Attacks/Melee/Quarterstaff03_01_Regular_Purple_800x600.webm`)), lg(_t1821 || (_t1821 = _$1`Weapon_Attacks/Melee/Quarterstaff03_02_Regular_Purple_800x600.webm`)), lg(_t1822 || (_t1822 = _$1`Weapon_Attacks/Melee/Quarterstaff03_03_Regular_Purple_800x600.webm`)), lg(_t1823 || (_t1823 = _$1`Weapon_Attacks/Melee/Quarterstaff03_04_Regular_Purple_800x600.webm`)), lg(_t1824 || (_t1824 = _$1`Weapon_Attacks/Melee/Quarterstaff03_05_Regular_Purple_800x600.webm`)), lg(_t1825 || (_t1825 = _$1`Weapon_Attacks/Melee/Quarterstaff03_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1826 || (_t1826 = _$1`Weapon_Attacks/Melee/Quarterstaff03_01_Dark_OrangePurple_800x600.webm`)), lg(_t1827 || (_t1827 = _$1`Weapon_Attacks/Melee/Quarterstaff03_02_Dark_OrangePurple_800x600.webm`)), lg(_t1828 || (_t1828 = _$1`Weapon_Attacks/Melee/Quarterstaff03_03_Dark_OrangePurple_800x600.webm`)), lg(_t1829 || (_t1829 = _$1`Weapon_Attacks/Melee/Quarterstaff03_04_Dark_OrangePurple_800x600.webm`)), lg(_t1830 || (_t1830 = _$1`Weapon_Attacks/Melee/Quarterstaff03_05_Dark_OrangePurple_800x600.webm`)), lg(_t1831 || (_t1831 = _$1`Weapon_Attacks/Melee/Quarterstaff03_06_Dark_OrangePurple_800x600.webm`))]
        },
        '04': {
          white: [lg(_t1832 || (_t1832 = _$1`Weapon_Attacks/Melee/Quarterstaff04_01_Regular_White_800x600.webm`)), lg(_t1833 || (_t1833 = _$1`Weapon_Attacks/Melee/Quarterstaff04_02_Regular_White_800x600.webm`)), lg(_t1834 || (_t1834 = _$1`Weapon_Attacks/Melee/Quarterstaff04_03_Regular_White_800x600.webm`)), lg(_t1835 || (_t1835 = _$1`Weapon_Attacks/Melee/Quarterstaff04_04_Regular_White_800x600.webm`)), lg(_t1836 || (_t1836 = _$1`Weapon_Attacks/Melee/Quarterstaff04_05_Regular_White_800x600.webm`)), lg(_t1837 || (_t1837 = _$1`Weapon_Attacks/Melee/Quarterstaff04_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1838 || (_t1838 = _$1`Weapon_Attacks/Melee/Quarterstaff04_01_Regular_Blue_800x600.webm`)), lg(_t1839 || (_t1839 = _$1`Weapon_Attacks/Melee/Quarterstaff04_02_Regular_Blue_800x600.webm`)), lg(_t1840 || (_t1840 = _$1`Weapon_Attacks/Melee/Quarterstaff04_03_Regular_Blue_800x600.webm`)), lg(_t1841 || (_t1841 = _$1`Weapon_Attacks/Melee/Quarterstaff04_04_Regular_Blue_800x600.webm`)), lg(_t1842 || (_t1842 = _$1`Weapon_Attacks/Melee/Quarterstaff04_05_Regular_Blue_800x600.webm`)), lg(_t1843 || (_t1843 = _$1`Weapon_Attacks/Melee/Quarterstaff04_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1844 || (_t1844 = _$1`Weapon_Attacks/Melee/Quarterstaff04_01_Regular_Orange_800x600.webm`)), lg(_t1845 || (_t1845 = _$1`Weapon_Attacks/Melee/Quarterstaff04_02_Regular_Orange_800x600.webm`)), lg(_t1846 || (_t1846 = _$1`Weapon_Attacks/Melee/Quarterstaff04_03_Regular_Orange_800x600.webm`)), lg(_t1847 || (_t1847 = _$1`Weapon_Attacks/Melee/Quarterstaff04_04_Regular_Orange_800x600.webm`)), lg(_t1848 || (_t1848 = _$1`Weapon_Attacks/Melee/Quarterstaff04_05_Regular_Orange_800x600.webm`)), lg(_t1849 || (_t1849 = _$1`Weapon_Attacks/Melee/Quarterstaff04_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1850 || (_t1850 = _$1`Weapon_Attacks/Melee/Quarterstaff04_01_Regular_Purple_800x600.webm`)), lg(_t1851 || (_t1851 = _$1`Weapon_Attacks/Melee/Quarterstaff04_02_Regular_Purple_800x600.webm`)), lg(_t1852 || (_t1852 = _$1`Weapon_Attacks/Melee/Quarterstaff04_03_Regular_Purple_800x600.webm`)), lg(_t1853 || (_t1853 = _$1`Weapon_Attacks/Melee/Quarterstaff04_04_Regular_Purple_800x600.webm`)), lg(_t1854 || (_t1854 = _$1`Weapon_Attacks/Melee/Quarterstaff04_05_Regular_Purple_800x600.webm`)), lg(_t1855 || (_t1855 = _$1`Weapon_Attacks/Melee/Quarterstaff04_06_Regular_Purple_800x600.webm`))],
          darkorangepurple: [lg(_t1856 || (_t1856 = _$1`Weapon_Attacks/Melee/Quarterstaff04_01_Dark_OrangePurple_800x600.webm`)), lg(_t1857 || (_t1857 = _$1`Weapon_Attacks/Melee/Quarterstaff04_02_Dark_OrangePurple_800x600.webm`)), lg(_t1858 || (_t1858 = _$1`Weapon_Attacks/Melee/Quarterstaff04_03_Dark_OrangePurple_800x600.webm`)), lg(_t1859 || (_t1859 = _$1`Weapon_Attacks/Melee/Quarterstaff04_04_Dark_OrangePurple_800x600.webm`)), lg(_t1860 || (_t1860 = _$1`Weapon_Attacks/Melee/Quarterstaff04_05_Dark_OrangePurple_800x600.webm`)), lg(_t1861 || (_t1861 = _$1`Weapon_Attacks/Melee/Quarterstaff04_06_Dark_OrangePurple_800x600.webm`))]
        }
      },
      rapier: {
        fire: {
          white: [lg(_t1862 || (_t1862 = _$1`Weapon_Attacks/Melee/Legacy/Rapier01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1863 || (_t1863 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1864 || (_t1864 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1865 || (_t1865 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1866 || (_t1866 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1867 || (_t1867 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1868 || (_t1868 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1869 || (_t1869 = _$1`Weapon_Attacks/Melee/Rapier01_Fire_Regular_Green_800x600.webm`))]
        },
        '01': {
          darkorangepurple: [lg(_t1870 || (_t1870 = _$1`Weapon_Attacks/Melee/Rapier01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1871 || (_t1871 = _$1`Weapon_Attacks/Melee/Rapier01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1872 || (_t1872 = _$1`Weapon_Attacks/Melee/Rapier01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1873 || (_t1873 = _$1`Weapon_Attacks/Melee/Rapier01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1874 || (_t1874 = _$1`Weapon_Attacks/Melee/Rapier01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1875 || (_t1875 = _$1`Weapon_Attacks/Melee/Rapier01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1876 || (_t1876 = _$1`Weapon_Attacks/Melee/Rapier01_01_Regular_Blue_800x600.webm`)), lg(_t1877 || (_t1877 = _$1`Weapon_Attacks/Melee/Rapier01_02_Regular_Blue_800x600.webm`)), lg(_t1878 || (_t1878 = _$1`Weapon_Attacks/Melee/Rapier01_03_Regular_Blue_800x600.webm`)), lg(_t1879 || (_t1879 = _$1`Weapon_Attacks/Melee/Rapier01_04_Regular_Blue_800x600.webm`)), lg(_t1880 || (_t1880 = _$1`Weapon_Attacks/Melee/Rapier01_05_Regular_Blue_800x600.webm`)), lg(_t1881 || (_t1881 = _$1`Weapon_Attacks/Melee/Rapier01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1882 || (_t1882 = _$1`Weapon_Attacks/Melee/Rapier01_01_Regular_Orange_800x600.webm`)), lg(_t1883 || (_t1883 = _$1`Weapon_Attacks/Melee/Rapier01_02_Regular_Orange_800x600.webm`)), lg(_t1884 || (_t1884 = _$1`Weapon_Attacks/Melee/Rapier01_03_Regular_Orange_800x600.webm`)), lg(_t1885 || (_t1885 = _$1`Weapon_Attacks/Melee/Rapier01_04_Regular_Orange_800x600.webm`)), lg(_t1886 || (_t1886 = _$1`Weapon_Attacks/Melee/Rapier01_05_Regular_Orange_800x600.webm`)), lg(_t1887 || (_t1887 = _$1`Weapon_Attacks/Melee/Rapier01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1888 || (_t1888 = _$1`Weapon_Attacks/Melee/Rapier01_01_Regular_Purple_800x600.webm`)), lg(_t1889 || (_t1889 = _$1`Weapon_Attacks/Melee/Rapier01_02_Regular_Purple_800x600.webm`)), lg(_t1890 || (_t1890 = _$1`Weapon_Attacks/Melee/Rapier01_03_Regular_Purple_800x600.webm`)), lg(_t1891 || (_t1891 = _$1`Weapon_Attacks/Melee/Rapier01_04_Regular_Purple_800x600.webm`)), lg(_t1892 || (_t1892 = _$1`Weapon_Attacks/Melee/Rapier01_05_Regular_Purple_800x600.webm`)), lg(_t1893 || (_t1893 = _$1`Weapon_Attacks/Melee/Rapier01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1894 || (_t1894 = _$1`Weapon_Attacks/Melee/Rapier01_01_Regular_White_800x600.webm`)), lg(_t1895 || (_t1895 = _$1`Weapon_Attacks/Melee/Rapier01_02_Regular_White_800x600.webm`)), lg(_t1896 || (_t1896 = _$1`Weapon_Attacks/Melee/Rapier01_03_Regular_White_800x600.webm`)), lg(_t1897 || (_t1897 = _$1`Weapon_Attacks/Melee/Rapier01_04_Regular_White_800x600.webm`)), lg(_t1898 || (_t1898 = _$1`Weapon_Attacks/Melee/Rapier01_05_Regular_White_800x600.webm`)), lg(_t1899 || (_t1899 = _$1`Weapon_Attacks/Melee/Rapier01_06_Regular_White_800x600.webm`))]
        }
      },
      scimitar: {
        '01': {
          darkorangepurple: [lg(_t1900 || (_t1900 = _$1`Weapon_Attacks/Melee/Scimitar01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1901 || (_t1901 = _$1`Weapon_Attacks/Melee/Scimitar01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1902 || (_t1902 = _$1`Weapon_Attacks/Melee/Scimitar01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1903 || (_t1903 = _$1`Weapon_Attacks/Melee/Scimitar01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1904 || (_t1904 = _$1`Weapon_Attacks/Melee/Scimitar01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1905 || (_t1905 = _$1`Weapon_Attacks/Melee/Scimitar01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1906 || (_t1906 = _$1`Weapon_Attacks/Melee/Scimitar01_01_Regular_Blue_800x600.webm`)), lg(_t1907 || (_t1907 = _$1`Weapon_Attacks/Melee/Scimitar01_02_Regular_Blue_800x600.webm`)), lg(_t1908 || (_t1908 = _$1`Weapon_Attacks/Melee/Scimitar01_03_Regular_Blue_800x600.webm`)), lg(_t1909 || (_t1909 = _$1`Weapon_Attacks/Melee/Scimitar01_04_Regular_Blue_800x600.webm`)), lg(_t1910 || (_t1910 = _$1`Weapon_Attacks/Melee/Scimitar01_05_Regular_Blue_800x600.webm`)), lg(_t1911 || (_t1911 = _$1`Weapon_Attacks/Melee/Scimitar01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1912 || (_t1912 = _$1`Weapon_Attacks/Melee/Scimitar01_01_Regular_Orange_800x600.webm`)), lg(_t1913 || (_t1913 = _$1`Weapon_Attacks/Melee/Scimitar01_02_Regular_Orange_800x600.webm`)), lg(_t1914 || (_t1914 = _$1`Weapon_Attacks/Melee/Scimitar01_03_Regular_Orange_800x600.webm`)), lg(_t1915 || (_t1915 = _$1`Weapon_Attacks/Melee/Scimitar01_04_Regular_Orange_800x600.webm`)), lg(_t1916 || (_t1916 = _$1`Weapon_Attacks/Melee/Scimitar01_05_Regular_Orange_800x600.webm`)), lg(_t1917 || (_t1917 = _$1`Weapon_Attacks/Melee/Scimitar01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1918 || (_t1918 = _$1`Weapon_Attacks/Melee/Scimitar01_01_Regular_Purple_800x600.webm`)), lg(_t1919 || (_t1919 = _$1`Weapon_Attacks/Melee/Scimitar01_02_Regular_Purple_800x600.webm`)), lg(_t1920 || (_t1920 = _$1`Weapon_Attacks/Melee/Scimitar01_03_Regular_Purple_800x600.webm`)), lg(_t1921 || (_t1921 = _$1`Weapon_Attacks/Melee/Scimitar01_04_Regular_Purple_800x600.webm`)), lg(_t1922 || (_t1922 = _$1`Weapon_Attacks/Melee/Scimitar01_05_Regular_Purple_800x600.webm`)), lg(_t1923 || (_t1923 = _$1`Weapon_Attacks/Melee/Scimitar01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1924 || (_t1924 = _$1`Weapon_Attacks/Melee/Scimitar01_01_Regular_White_800x600.webm`)), lg(_t1925 || (_t1925 = _$1`Weapon_Attacks/Melee/Scimitar01_02_Regular_White_800x600.webm`)), lg(_t1926 || (_t1926 = _$1`Weapon_Attacks/Melee/Scimitar01_03_Regular_White_800x600.webm`)), lg(_t1927 || (_t1927 = _$1`Weapon_Attacks/Melee/Scimitar01_04_Regular_White_800x600.webm`)), lg(_t1928 || (_t1928 = _$1`Weapon_Attacks/Melee/Scimitar01_05_Regular_White_800x600.webm`)), lg(_t1929 || (_t1929 = _$1`Weapon_Attacks/Melee/Scimitar01_06_Regular_White_800x600.webm`))]
        }
      },
      shortsword: {
        '01': {
          darkorangepurple: [lg(_t1930 || (_t1930 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Dark_OrangePurple_800x600.webm`)), lg(_t1931 || (_t1931 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Dark_OrangePurple_800x600.webm`)), lg(_t1932 || (_t1932 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Dark_OrangePurple_800x600.webm`)), lg(_t1933 || (_t1933 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Dark_OrangePurple_800x600.webm`)), lg(_t1934 || (_t1934 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Dark_OrangePurple_800x600.webm`)), lg(_t1935 || (_t1935 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t1936 || (_t1936 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Regular_Blue_800x600.webm`)), lg(_t1937 || (_t1937 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Regular_Blue_800x600.webm`)), lg(_t1938 || (_t1938 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Regular_Blue_800x600.webm`)), lg(_t1939 || (_t1939 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Regular_Blue_800x600.webm`)), lg(_t1940 || (_t1940 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Regular_Blue_800x600.webm`)), lg(_t1941 || (_t1941 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1942 || (_t1942 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Regular_Orange_800x600.webm`)), lg(_t1943 || (_t1943 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Regular_Orange_800x600.webm`)), lg(_t1944 || (_t1944 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Regular_Orange_800x600.webm`)), lg(_t1945 || (_t1945 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Regular_Orange_800x600.webm`)), lg(_t1946 || (_t1946 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Regular_Orange_800x600.webm`)), lg(_t1947 || (_t1947 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1948 || (_t1948 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Regular_Purple_800x600.webm`)), lg(_t1949 || (_t1949 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Regular_Purple_800x600.webm`)), lg(_t1950 || (_t1950 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Regular_Purple_800x600.webm`)), lg(_t1951 || (_t1951 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Regular_Purple_800x600.webm`)), lg(_t1952 || (_t1952 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Regular_Purple_800x600.webm`)), lg(_t1953 || (_t1953 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t1954 || (_t1954 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Regular_White_800x600.webm`)), lg(_t1955 || (_t1955 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Regular_White_800x600.webm`)), lg(_t1956 || (_t1956 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Regular_White_800x600.webm`)), lg(_t1957 || (_t1957 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Regular_White_800x600.webm`)), lg(_t1958 || (_t1958 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Regular_White_800x600.webm`)), lg(_t1959 || (_t1959 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Regular_White_800x600.webm`))],
          yellow: [lg(_t1960 || (_t1960 = _$1`Weapon_Attacks/Melee/Shortsword01_01_Regular_Yellow_800x600.webm`)), lg(_t1961 || (_t1961 = _$1`Weapon_Attacks/Melee/Shortsword01_02_Regular_Yellow_800x600.webm`)), lg(_t1962 || (_t1962 = _$1`Weapon_Attacks/Melee/Shortsword01_03_Regular_Yellow_800x600.webm`)), lg(_t1963 || (_t1963 = _$1`Weapon_Attacks/Melee/Shortsword01_04_Regular_Yellow_800x600.webm`)), lg(_t1964 || (_t1964 = _$1`Weapon_Attacks/Melee/Shortsword01_05_Regular_Yellow_800x600.webm`)), lg(_t1965 || (_t1965 = _$1`Weapon_Attacks/Melee/Shortsword01_06_Regular_Yellow_800x600.webm`))]
        }
      },
      spear: {
        'fire': {
          white: [lg(_t1966 || (_t1966 = _$1`Weapon_Attacks/Melee/Legacy/Spear01_01_Regular_White_800x600.webm`))],
          orange: [lg(_t1967 || (_t1967 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t1968 || (_t1968 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t1969 || (_t1969 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t1970 || (_t1970 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t1971 || (_t1971 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t1972 || (_t1972 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t1973 || (_t1973 = _$1`Weapon_Attacks/Melee/Spear01_Fire_Regular_Green_800x600.webm`))]
        },
        '01': {
          white: [lg(_t1974 || (_t1974 = _$1`Weapon_Attacks/Melee/Spear01_01_Regular_White_800x600.webm`)), lg(_t1975 || (_t1975 = _$1`Weapon_Attacks/Melee/Spear01_02_Regular_White_800x600.webm`)), lg(_t1976 || (_t1976 = _$1`Weapon_Attacks/Melee/Spear01_03_Regular_White_800x600.webm`)), lg(_t1977 || (_t1977 = _$1`Weapon_Attacks/Melee/Spear01_04_Regular_White_800x600.webm`)), lg(_t1978 || (_t1978 = _$1`Weapon_Attacks/Melee/Spear01_05_Regular_White_800x600.webm`)), lg(_t1979 || (_t1979 = _$1`Weapon_Attacks/Melee/Spear01_06_Regular_White_800x600.webm`))],
          blue: [lg(_t1980 || (_t1980 = _$1`Weapon_Attacks/Melee/Spear01_01_Regular_Blue_800x600.webm`)), lg(_t1981 || (_t1981 = _$1`Weapon_Attacks/Melee/Spear01_02_Regular_Blue_800x600.webm`)), lg(_t1982 || (_t1982 = _$1`Weapon_Attacks/Melee/Spear01_03_Regular_Blue_800x600.webm`)), lg(_t1983 || (_t1983 = _$1`Weapon_Attacks/Melee/Spear01_04_Regular_Blue_800x600.webm`)), lg(_t1984 || (_t1984 = _$1`Weapon_Attacks/Melee/Spear01_05_Regular_Blue_800x600.webm`)), lg(_t1985 || (_t1985 = _$1`Weapon_Attacks/Melee/Spear01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t1986 || (_t1986 = _$1`Weapon_Attacks/Melee/Spear01_01_Regular_Orange_800x600.webm`)), lg(_t1987 || (_t1987 = _$1`Weapon_Attacks/Melee/Spear01_02_Regular_Orange_800x600.webm`)), lg(_t1988 || (_t1988 = _$1`Weapon_Attacks/Melee/Spear01_03_Regular_Orange_800x600.webm`)), lg(_t1989 || (_t1989 = _$1`Weapon_Attacks/Melee/Spear01_04_Regular_Orange_800x600.webm`)), lg(_t1990 || (_t1990 = _$1`Weapon_Attacks/Melee/Spear01_05_Regular_Orange_800x600.webm`)), lg(_t1991 || (_t1991 = _$1`Weapon_Attacks/Melee/Spear01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t1992 || (_t1992 = _$1`Weapon_Attacks/Melee/Spear01_01_Regular_Purple_800x600.webm`)), lg(_t1993 || (_t1993 = _$1`Weapon_Attacks/Melee/Spear01_02_Regular_Purple_800x600.webm`)), lg(_t1994 || (_t1994 = _$1`Weapon_Attacks/Melee/Spear01_03_Regular_Purple_800x600.webm`)), lg(_t1995 || (_t1995 = _$1`Weapon_Attacks/Melee/Spear01_04_Regular_Purple_800x600.webm`)), lg(_t1996 || (_t1996 = _$1`Weapon_Attacks/Melee/Spear01_05_Regular_Purple_800x600.webm`)), lg(_t1997 || (_t1997 = _$1`Weapon_Attacks/Melee/Spear01_06_Regular_Purple_800x600.webm`))],
          yellow: [lg(_t1998 || (_t1998 = _$1`Weapon_Attacks/Melee/Spear01_01_Regular_Yellow_800x600.webm`)), lg(_t1999 || (_t1999 = _$1`Weapon_Attacks/Melee/Spear01_02_Regular_Yellow_800x600.webm`)), lg(_t2000 || (_t2000 = _$1`Weapon_Attacks/Melee/Spear01_03_Regular_Yellow_800x600.webm`)), lg(_t2001 || (_t2001 = _$1`Weapon_Attacks/Melee/Spear01_04_Regular_Yellow_800x600.webm`)), lg(_t2002 || (_t2002 = _$1`Weapon_Attacks/Melee/Spear01_05_Regular_Yellow_800x600.webm`)), lg(_t2003 || (_t2003 = _$1`Weapon_Attacks/Melee/Spear01_06_Regular_Yellow_800x600.webm`))],
          darkorangepurple: [lg(_t2004 || (_t2004 = _$1`Weapon_Attacks/Melee/Spear01_01_Dark_OrangePurple_800x600.webm`)), lg(_t2005 || (_t2005 = _$1`Weapon_Attacks/Melee/Spear01_02_Dark_OrangePurple_800x600.webm`)), lg(_t2006 || (_t2006 = _$1`Weapon_Attacks/Melee/Spear01_03_Dark_OrangePurple_800x600.webm`)), lg(_t2007 || (_t2007 = _$1`Weapon_Attacks/Melee/Spear01_04_Dark_OrangePurple_800x600.webm`)), lg(_t2008 || (_t2008 = _$1`Weapon_Attacks/Melee/Spear01_05_Dark_OrangePurple_800x600.webm`)), lg(_t2009 || (_t2009 = _$1`Weapon_Attacks/Melee/Spear01_06_Dark_OrangePurple_800x600.webm`))]
        }
      },
      sword: {
        fire: {
          white: [lg(_t2010 || (_t2010 = _$1`Weapon_Attacks/Melee/Legacy/Sword01_01_Regular_White_800x600.webm`))],
          black: [lg(_t2011 || (_t2011 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Black_800x600.webm`))],
          orange: [lg(_t2012 || (_t2012 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Orange_800x600.webm`))],
          pink: [lg(_t2013 || (_t2013 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Pink_800x600.webm`))],
          red: [lg(_t2014 || (_t2014 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Red_800x600.webm`))],
          yellow: [lg(_t2015 || (_t2015 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Yellow_800x600.webm`))],
          purple: [lg(_t2016 || (_t2016 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Dark_Purple_800x600.webm`))],
          blue: [lg(_t2017 || (_t2017 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Blue_800x600.webm`))],
          green: [lg(_t2018 || (_t2018 = _$1`Weapon_Attacks/Melee/Sword01_Fire_Regular_Green_800x600.webm`))]
        },
        '01': {
          darkorangepurple: [lg(_t2019 || (_t2019 = _$1`Weapon_Attacks/Melee/Sword01_01_Dark_OrangePurple_800x600.webm`)), lg(_t2020 || (_t2020 = _$1`Weapon_Attacks/Melee/Sword01_02_Dark_OrangePurple_800x600.webm`)), lg(_t2021 || (_t2021 = _$1`Weapon_Attacks/Melee/Sword01_03_Dark_OrangePurple_800x600.webm`)), lg(_t2022 || (_t2022 = _$1`Weapon_Attacks/Melee/Sword01_04_Dark_OrangePurple_800x600.webm`)), lg(_t2023 || (_t2023 = _$1`Weapon_Attacks/Melee/Sword01_05_Dark_OrangePurple_800x600.webm`)), lg(_t2024 || (_t2024 = _$1`Weapon_Attacks/Melee/Sword01_06_Dark_OrangePurple_800x600.webm`))],
          blue: [lg(_t2025 || (_t2025 = _$1`Weapon_Attacks/Melee/Sword01_01_Regular_Blue_800x600.webm`)), lg(_t2026 || (_t2026 = _$1`Weapon_Attacks/Melee/Sword01_02_Regular_Blue_800x600.webm`)), lg(_t2027 || (_t2027 = _$1`Weapon_Attacks/Melee/Sword01_03_Regular_Blue_800x600.webm`)), lg(_t2028 || (_t2028 = _$1`Weapon_Attacks/Melee/Sword01_04_Regular_Blue_800x600.webm`)), lg(_t2029 || (_t2029 = _$1`Weapon_Attacks/Melee/Sword01_05_Regular_Blue_800x600.webm`)), lg(_t2030 || (_t2030 = _$1`Weapon_Attacks/Melee/Sword01_06_Regular_Blue_800x600.webm`))],
          orange: [lg(_t2031 || (_t2031 = _$1`Weapon_Attacks/Melee/Sword01_01_Regular_Orange_800x600.webm`)), lg(_t2032 || (_t2032 = _$1`Weapon_Attacks/Melee/Sword01_02_Regular_Orange_800x600.webm`)), lg(_t2033 || (_t2033 = _$1`Weapon_Attacks/Melee/Sword01_03_Regular_Orange_800x600.webm`)), lg(_t2034 || (_t2034 = _$1`Weapon_Attacks/Melee/Sword01_04_Regular_Orange_800x600.webm`)), lg(_t2035 || (_t2035 = _$1`Weapon_Attacks/Melee/Sword01_05_Regular_Orange_800x600.webm`)), lg(_t2036 || (_t2036 = _$1`Weapon_Attacks/Melee/Sword01_06_Regular_Orange_800x600.webm`))],
          purple: [lg(_t2037 || (_t2037 = _$1`Weapon_Attacks/Melee/Sword01_01_Regular_Purple_800x600.webm`)), lg(_t2038 || (_t2038 = _$1`Weapon_Attacks/Melee/Sword01_02_Regular_Purple_800x600.webm`)), lg(_t2039 || (_t2039 = _$1`Weapon_Attacks/Melee/Sword01_03_Regular_Purple_800x600.webm`)), lg(_t2040 || (_t2040 = _$1`Weapon_Attacks/Melee/Sword01_04_Regular_Purple_800x600.webm`)), lg(_t2041 || (_t2041 = _$1`Weapon_Attacks/Melee/Sword01_05_Regular_Purple_800x600.webm`)), lg(_t2042 || (_t2042 = _$1`Weapon_Attacks/Melee/Sword01_06_Regular_Purple_800x600.webm`))],
          white: [lg(_t2043 || (_t2043 = _$1`Weapon_Attacks/Melee/Sword01_01_Regular_White_800x600.webm`)), lg(_t2044 || (_t2044 = _$1`Weapon_Attacks/Melee/Sword01_02_Regular_White_800x600.webm`)), lg(_t2045 || (_t2045 = _$1`Weapon_Attacks/Melee/Sword01_03_Regular_White_800x600.webm`)), lg(_t2046 || (_t2046 = _$1`Weapon_Attacks/Melee/Sword01_04_Regular_White_800x600.webm`)), lg(_t2047 || (_t2047 = _$1`Weapon_Attacks/Melee/Sword01_05_Regular_White_800x600.webm`)), lg(_t2048 || (_t2048 = _$1`Weapon_Attacks/Melee/Sword01_06_Regular_White_800x600.webm`))],
          yellow: [lg(_t2049 || (_t2049 = _$1`Weapon_Attacks/Melee/Sword01_01_Regular_Yellow_800x600.webm`)), lg(_t2050 || (_t2050 = _$1`Weapon_Attacks/Melee/Sword01_02_Regular_Yellow_800x600.webm`)), lg(_t2051 || (_t2051 = _$1`Weapon_Attacks/Melee/Sword01_03_Regular_Yellow_800x600.webm`)), lg(_t2052 || (_t2052 = _$1`Weapon_Attacks/Melee/Sword01_04_Regular_Yellow_800x600.webm`)), lg(_t2053 || (_t2053 = _$1`Weapon_Attacks/Melee/Sword01_05_Regular_Yellow_800x600.webm`)), lg(_t2054 || (_t2054 = _$1`Weapon_Attacks/Melee/Sword01_06_Regular_Yellow_800x600.webm`))]
        }
      },
      unarmedstrike: {
        'magical': {
          darkred: [lg(_t2055 || (_t2055 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Red_Magical01_800x600.webm`)), lg(_t2056 || (_t2056 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Red_Magical02_800x600.webm`))],
          darkpurple: [lg(_t2057 || (_t2057 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Purple_Magical01_800x600.webm`)), lg(_t2058 || (_t2058 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Purple_Magical02_800x600.webm`))],
          blue: [lg(_t2059 || (_t2059 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Magical01_800x600.webm`)), lg(_t2060 || (_t2060 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Magical02_800x600.webm`))],
          green: [lg(_t2061 || (_t2061 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Green_Magical01_800x600.webm`)), lg(_t2062 || (_t2062 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Green_Magical02_800x600.webm`))],
          orange: [lg(_t2063 || (_t2063 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Orange_Magical01_800x600.webm`)), lg(_t2064 || (_t2064 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Orange_Magical02_800x600.webm`))],
          purplepink: [lg(_t2065 || (_t2065 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_PinkPurple_Magical01_800x600.webm`)), lg(_t2066 || (_t2066 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_PinkPurple_Magical02_800x600.webm`))],
          yellow: [lg(_t2067 || (_t2067 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Yellow_Magical01_800x600.webm`)), lg(_t2068 || (_t2068 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Yellow_Magical02_800x600.webm`))]
        },
        'physical': {
          darkred: [lg(_t2069 || (_t2069 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Red_Physical01_800x600.webm`)), lg(_t2070 || (_t2070 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Red_Physical02_800x600.webm`))],
          darkpurple: [lg(_t2071 || (_t2071 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Purple_Physical01_800x600.webm`)), lg(_t2072 || (_t2072 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Dark_Purple_Physical02_800x600.webm`))],
          blue: [lg(_t2073 || (_t2073 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Physical01_800x600.webm`)), lg(_t2074 || (_t2074 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Physical02_800x600.webm`))],
          green: [lg(_t2075 || (_t2075 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Green_Physical01_800x600.webm`)), lg(_t2076 || (_t2076 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Green_Physical02_800x600.webm`))],
          orange: [lg(_t2077 || (_t2077 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Orange_Physical01_800x600.webm`)), lg(_t2078 || (_t2078 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Orange_Physical02_800x600.webm`))],
          purplepink: [lg(_t2079 || (_t2079 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_PinkPurple_Physical01_800x600.webm`)), lg(_t2080 || (_t2080 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_PinkPurple_Physical02_800x600.webm`))],
          yellow: [lg(_t2081 || (_t2081 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Yellow_Physical01_800x600.webm`)), lg(_t2082 || (_t2082 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Yellow_Physical02_800x600.webm`))]
        },
        'nohit': {
          blue: [lg(_t2083 || (_t2083 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrikeNoHit_01_Regular_Blue_800x600.webm`))],
          yellow: [lg(_t2084 || (_t2084 = _$1`Unarmed_Attacks/Unarmed_Strike/UnarmedStrikeNoHit_01_Regular_Yellow_800x600.webm`))]
        }
      },
      warhammer: {
        '01': {
          white: [[lg(_t2085 || (_t2085 = _$1`Weapon_Attacks/Melee/Warhammer01_01_Regular_White_800x600.webm`))], [lg(_t2086 || (_t2086 = _$1`Weapon_Attacks/Melee/Warhammer01_02_Regular_White_800x600.webm`))], [lg(_t2087 || (_t2087 = _$1`Weapon_Attacks/Melee/Warhammer01_03_Regular_White_800x600.webm`))], [lg(_t2088 || (_t2088 = _$1`Weapon_Attacks/Melee/Warhammer01_04_Regular_White_800x600.webm`))], [lg(_t2089 || (_t2089 = _$1`Weapon_Attacks/Melee/Warhammer01_05_Regular_White_800x600.webm`))], [lg(_t2090 || (_t2090 = _$1`Weapon_Attacks/Melee/Warhammer01_06_Regular_White_800x600.webm`))]],
          blue: [[lg(_t2091 || (_t2091 = _$1`Weapon_Attacks/Melee/Warhammer01_01_Regular_Blue_800x600.webm`))], [lg(_t2092 || (_t2092 = _$1`Weapon_Attacks/Melee/Warhammer01_02_Regular_Blue_800x600.webm`))], [lg(_t2093 || (_t2093 = _$1`Weapon_Attacks/Melee/Warhammer01_03_Regular_Blue_800x600.webm`))], [lg(_t2094 || (_t2094 = _$1`Weapon_Attacks/Melee/Warhammer01_04_Regular_Blue_800x600.webm`))], [lg(_t2095 || (_t2095 = _$1`Weapon_Attacks/Melee/Warhammer01_05_Regular_Blue_800x600.webm`))], [lg(_t2096 || (_t2096 = _$1`Weapon_Attacks/Melee/Warhammer01_06_Regular_Blue_800x600.webm`))]],
          orange: [[lg(_t2097 || (_t2097 = _$1`Weapon_Attacks/Melee/Warhammer01_01_Regular_Orange_800x600.webm`))], [lg(_t2098 || (_t2098 = _$1`Weapon_Attacks/Melee/Warhammer01_02_Regular_Orange_800x600.webm`))], [lg(_t2099 || (_t2099 = _$1`Weapon_Attacks/Melee/Warhammer01_03_Regular_Orange_800x600.webm`))], [lg(_t2100 || (_t2100 = _$1`Weapon_Attacks/Melee/Warhammer01_04_Regular_Orange_800x600.webm`))], [lg(_t2101 || (_t2101 = _$1`Weapon_Attacks/Melee/Warhammer01_05_Regular_Orange_800x600.webm`))], [lg(_t2102 || (_t2102 = _$1`Weapon_Attacks/Melee/Warhammer01_06_Regular_Orange_800x600.webm`))]],
          purple: [[lg(_t2103 || (_t2103 = _$1`Weapon_Attacks/Melee/Warhammer01_01_Regular_Purple_800x600.webm`))], [lg(_t2104 || (_t2104 = _$1`Weapon_Attacks/Melee/Warhammer01_02_Regular_Purple_800x600.webm`))], [lg(_t2105 || (_t2105 = _$1`Weapon_Attacks/Melee/Warhammer01_03_Regular_Purple_800x600.webm`))], [lg(_t2106 || (_t2106 = _$1`Weapon_Attacks/Melee/Warhammer01_04_Regular_Purple_800x600.webm`))], [lg(_t2107 || (_t2107 = _$1`Weapon_Attacks/Melee/Warhammer01_05_Regular_Purple_800x600.webm`))], [lg(_t2108 || (_t2108 = _$1`Weapon_Attacks/Melee/Warhammer01_06_Regular_Purple_800x600.webm`))]],
          darkorangepurple: [[lg(_t2109 || (_t2109 = _$1`Weapon_Attacks/Melee/Warhammer01_01_Dark_OrangePurple_800x600.webm`))], [lg(_t2110 || (_t2110 = _$1`Weapon_Attacks/Melee/Warhammer01_02_Dark_OrangePurple_800x600.webm`))], [lg(_t2111 || (_t2111 = _$1`Weapon_Attacks/Melee/Warhammer01_03_Dark_OrangePurple_800x600.webm`))], [lg(_t2112 || (_t2112 = _$1`Weapon_Attacks/Melee/Warhammer01_04_Dark_OrangePurple_800x600.webm`))], [lg(_t2113 || (_t2113 = _$1`Weapon_Attacks/Melee/Warhammer01_05_Dark_OrangePurple_800x600.webm`))], [lg(_t2114 || (_t2114 = _$1`Weapon_Attacks/Melee/Warhammer01_06_Dark_OrangePurple_800x600.webm`))]]
        }
      },
      wrench: {
        '01': {
          white: [[lg(_t2115 || (_t2115 = _$1`Weapon_Attacks/Melee/Wrench01_01_Regular_White_800x600.webm`))], [lg(_t2116 || (_t2116 = _$1`Weapon_Attacks/Melee/Wrench01_02_Regular_White_800x600.webm`))], [lg(_t2117 || (_t2117 = _$1`Weapon_Attacks/Melee/Wrench01_03_Regular_White_800x600.webm`))], [lg(_t2118 || (_t2118 = _$1`Weapon_Attacks/Melee/Wrench01_04_Regular_White_800x600.webm`))], [lg(_t2119 || (_t2119 = _$1`Weapon_Attacks/Melee/Wrench01_05_Regular_White_800x600.webm`))], [lg(_t2120 || (_t2120 = _$1`Weapon_Attacks/Melee/Wrench01_06_Regular_White_800x600.webm`))]],
          blue: [[lg(_t2121 || (_t2121 = _$1`Weapon_Attacks/Melee/Wrench01_01_Regular_Blue_800x600.webm`))], [lg(_t2122 || (_t2122 = _$1`Weapon_Attacks/Melee/Wrench01_02_Regular_Blue_800x600.webm`))], [lg(_t2123 || (_t2123 = _$1`Weapon_Attacks/Melee/Wrench01_03_Regular_Blue_800x600.webm`))], [lg(_t2124 || (_t2124 = _$1`Weapon_Attacks/Melee/Wrench01_04_Regular_Blue_800x600.webm`))], [lg(_t2125 || (_t2125 = _$1`Weapon_Attacks/Melee/Wrench01_05_Regular_Blue_800x600.webm`))], [lg(_t2126 || (_t2126 = _$1`Weapon_Attacks/Melee/Wrench01_06_Regular_Blue_800x600.webm`))]],
          orange: [[lg(_t2127 || (_t2127 = _$1`Weapon_Attacks/Melee/Wrench01_01_Regular_Orange_800x600.webm`))], [lg(_t2128 || (_t2128 = _$1`Weapon_Attacks/Melee/Wrench01_02_Regular_Orange_800x600.webm`))], [lg(_t2129 || (_t2129 = _$1`Weapon_Attacks/Melee/Wrench01_03_Regular_Orange_800x600.webm`))], [lg(_t2130 || (_t2130 = _$1`Weapon_Attacks/Melee/Wrench01_04_Regular_Orange_800x600.webm`))], [lg(_t2131 || (_t2131 = _$1`Weapon_Attacks/Melee/Wrench01_05_Regular_Orange_800x600.webm`))], [lg(_t2132 || (_t2132 = _$1`Weapon_Attacks/Melee/Wrench01_06_Regular_Orange_800x600.webm`))]],
          purple: [[lg(_t2133 || (_t2133 = _$1`Weapon_Attacks/Melee/Wrench01_01_Regular_Purple_800x600.webm`))], [lg(_t2134 || (_t2134 = _$1`Weapon_Attacks/Melee/Wrench01_02_Regular_Purple_800x600.webm`))], [lg(_t2135 || (_t2135 = _$1`Weapon_Attacks/Melee/Wrench01_03_Regular_Purple_800x600.webm`))], [lg(_t2136 || (_t2136 = _$1`Weapon_Attacks/Melee/Wrench01_04_Regular_Purple_800x600.webm`))], [lg(_t2137 || (_t2137 = _$1`Weapon_Attacks/Melee/Wrench01_05_Regular_Purple_800x600.webm`))], [lg(_t2138 || (_t2138 = _$1`Weapon_Attacks/Melee/Wrench01_06_Regular_Purple_800x600.webm`))]],
          darkorangepurple: [[lg(_t2139 || (_t2139 = _$1`Weapon_Attacks/Melee/Wrench01_01_Dark_OrangePurple_800x600.webm`))], [lg(_t2140 || (_t2140 = _$1`Weapon_Attacks/Melee/Wrench01_02_Dark_OrangePurple_800x600.webm`))], [lg(_t2141 || (_t2141 = _$1`Weapon_Attacks/Melee/Wrench01_03_Dark_OrangePurple_800x600.webm`))], [lg(_t2142 || (_t2142 = _$1`Weapon_Attacks/Melee/Wrench01_04_Dark_OrangePurple_800x600.webm`))], [lg(_t2143 || (_t2143 = _$1`Weapon_Attacks/Melee/Wrench01_05_Dark_OrangePurple_800x600.webm`))], [lg(_t2144 || (_t2144 = _$1`Weapon_Attacks/Melee/Wrench01_06_Dark_OrangePurple_800x600.webm`))]]
        }
      }
    }
  };
  /**
   * Template Types:
   * 
   * Cone
   * Square
   * Circle
   * Ray
   * 
   */

  JB2APATREONDB.templatefx = {
    circle: {
      armsofhadar: {
        '01': {
          darkgreen: [l1(_t2145 || (_t2145 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Green_500x500.webm`))],
          darkpurple: [l1(_t2146 || (_t2146 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))],
          darkred: [l1(_t2147 || (_t2147 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Red_500x500.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkgreen: [l4(_t2148 || (_t2148 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Green_600x600.webm`))],
          darkpurple: [l4(_t2149 || (_t2149 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))],
          darkred: [l4(_t2150 || (_t2150 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Red_600x600.webm`))]
        }
      },
      calllightning: {
        '01': {
          blue: [l3(_t2151 || (_t2151 = _$1`Call_Lightning/CallLightning_01_Blue_1000x1000.webm`))],
          blueorange: [l3(_t2152 || (_t2152 = _$1`Call_Lightning/CallLightning_01_BlueOrange_1000x1000.webm`))],
          green: [l3(_t2153 || (_t2153 = _$1`Call_Lightning/CallLightning_01_Green_1000x1000.webm`))],
          pinkyellow: [l3(_t2154 || (_t2154 = _$1`Call_Lightning/CallLightning_01_PinkYellow_1000x1000.webm`))],
          purple: [l3(_t2155 || (_t2155 = _$1`Call_Lightning/CallLightning_01_Purple_1000x1000.webm`))],
          red: [l3(_t2156 || (_t2156 = _$1`Call_Lightning/CallLightning_01_Red_1000x1000.webm`))],
          yellow: [l3(_t2157 || (_t2157 = _$1`Call_Lightning/CallLightning_01_Yellow_1000x1000.webm`))]
        }
      },
      cloudofdaggers: {
        '01': {
          darkpurple: [l2(_t2158 || (_t2158 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Dark_Purple_400x400.webm`))],
          darkred: [l2(_t2159 || (_t2159 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Dark_Red_400x400.webm`))],
          blue: [l2(_t2160 || (_t2160 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Blue_400x400.webm`))],
          green: [l2(_t2161 || (_t2161 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Green_400x400.webm`))],
          orange: [l2(_t2162 || (_t2162 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t2163 || (_t2163 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Purple_400x400.webm`))],
          red: [l2(_t2164 || (_t2164 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t2165 || (_t2165 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Yellow_400x400.webm`))]
        },
        kunai: {
          darkpurple: [l2(_t2166 || (_t2166 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Dark_Purple_400x400.webm`))],
          darkred: [l2(_t2167 || (_t2167 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Dark_Red_400x400.webm`))],
          blue: [l2(_t2168 || (_t2168 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Blue_400x400.webm`))],
          green: [l2(_t2169 || (_t2169 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Green_400x400.webm`))],
          orange: [l2(_t2170 || (_t2170 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t2171 || (_t2171 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Purple_400x400.webm`))],
          red: [l2(_t2172 || (_t2172 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t2173 || (_t2173 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Yellow_400x400.webm`))]
        }
      },
      crackedshield: {
        '01': {
          darkred: [lg(_t2174 || (_t2174 = _$1`Template/Circle/TemplateShieldCrackedCircle_01_Dark_Red_800x800.webm`))],
          darkpurple: [lg(_t2175 || (_t2175 = _$1`Template/Circle/TemplateShieldCrackedCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      darkness: {
        '01': {
          black: [l2(_t2176 || (_t2176 = _$1`Darkness/Darkness_01_Black_600x600.webm`))],
          green: [l2(_t2177 || (_t2177 = _$1`Darkness/Darkness_01_Green_600x600.webm`))]
        }
      },
      detectmagic: {
        '01': {
          blue: [l1(_t2178 || (_t2178 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Blue_1200x1200.webm`))],
          green: [l1(_t2179 || (_t2179 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Green_1200x1200.webm`))],
          greenorange: [l1(_t2180 || (_t2180 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_GreenOrange_1200x1200.webm`))],
          grey: [l1(_t2181 || (_t2181 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Grey_1200x1200.webm`))],
          purple: [l1(_t2182 || (_t2182 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Purple_1200x1200.webm`))]
        }
      },
      drop: {
        '01': {
          darkgreen: [lg(_t2183 || (_t2183 = _$1`Template/Circle/TemplateDropCircle_01_Dark_Green_800x800.webm`))],
          red: [lg(_t2184 || (_t2184 = _$1`Template/Circle/TemplateDropCircle_01_Regular_Red_800x800.webm`))]
        }
      },
      explosion: {
        '01': {
          darkpurple: [lg(_t2185 || (_t2185 = _$1`Explosion/Explosion_04_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2186 || (_t2186 = _$1`Explosion/Explosion_04_Dark_Red_400x400.webm`))],
          blue: [lg(_t2187 || (_t2187 = _$1`Explosion/Explosion_01_Blue_400x400.webm`)), lg(_t2188 || (_t2188 = _$1`Explosion/Explosion_02_Blue_400x400.webm`)), lg(_t2189 || (_t2189 = _$1`Explosion/Explosion_04_Regular_Blue_400x400.webm`))],
          green: [lg(_t2190 || (_t2190 = _$1`Explosion/Explosion_01_Green_400x400.webm`)), lg(_t2191 || (_t2191 = _$1`Explosion/Explosion_02_Green_400x400.webm`)), lg(_t2192 || (_t2192 = _$1`Explosion/Explosion_04_Regular_Green_400x400.webm`))],
          greenorange: [lg(_t2193 || (_t2193 = _$1`Explosion/Explosion_03_Regular_GreenOrange_400x400.webm`))],
          orange: [lg(_t2194 || (_t2194 = _$1`Explosion/Explosion_01_Orange_400x400.webm`)), lg(_t2195 || (_t2195 = _$1`Explosion/Explosion_02_Orange_400x400.webm`)), lg(_t2196 || (_t2196 = _$1`Explosion/Explosion_04_Regular_Orange_400x400.webm`))],
          pink: [lg(_t2197 || (_t2197 = _$1`Explosion/Explosion_03_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t2198 || (_t2198 = _$1`Explosion/Explosion_03_Regular_PurplePink_400x400.webm`))],
          purple: [lg(_t2199 || (_t2199 = _$1`Explosion/Explosion_01_Purple_400x400.webm`)), lg(_t2200 || (_t2200 = _$1`Explosion/Explosion_02_Purple_400x400.webm`))],
          red: [lg(_t2201 || (_t2201 = _$1`Explosion/Explosion_03_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2202 || (_t2202 = _$1`Explosion/Explosion_01_Yellow_400x400.webm`)), lg(_t2203 || (_t2203 = _$1`Explosion/Explosion_02_Yellow_400x400.webm`))],
          yellowblue: [lg(_t2204 || (_t2204 = _$1`Explosion/Explosion_03_Regular_BlueYellow_400x400.webm`))],
          whiteblue: [lg(_t2205 || (_t2205 = _$1`Explosion/Explosion_03_Dark_BlueWhite_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          darkorange: [lg(_t2206 || (_t2206 = _$1`Template/Circle/TemplateFearCircle_01_Dark_Orange_800x800.webm`))],
          darkpurple: [lg(_t2207 || (_t2207 = _$1`Template/Circle/TemplateFearCircle_01_Dark_Purple_800x800.webm`))],
          orange: [lg(_t2208 || (_t2208 = _$1`Template/Circle/TemplateFearCircle_01_Regular_Orange_800x800.webm`))]
        }
      },
      fireball: {
        loop: {
          blue: [l3(_t2209 || (_t2209 = _$1`Fireball/FireballLoop_01_Blue_800x800.webm`))],
          orange: [l3(_t2210 || (_t2210 = _$1`Fireball/FireballLoop_01_Orange_800x800.webm`))],
          purple: [l3(_t2211 || (_t2211 = _$1`Fireball/FireballLoop_01_Purple_800x800.webm`))]
        },
        explode: {
          blue: [l3(_t2212 || (_t2212 = _$1`Fireball/FireballExplosion_01_Blue_800x800.webm`))],
          orange: [l3(_t2213 || (_t2213 = _$1`Fireball/FireballExplosion_01_Orange_800x800.webm`))],
          purple: [l3(_t2214 || (_t2214 = _$1`Fireball/FireballExplosion_01_Purple_800x800.webm`))]
        },
        nodebris: {
          blue: [l3(_t2215 || (_t2215 = _$1`Fireball/FireballLoopNoDebris_01_Blue_800x800.webm`))],
          orange: [l3(_t2216 || (_t2216 = _$1`Fireball/FireballLoopNoDebris_01_Orange_800x800.webm`))],
          purple: [l3(_t2217 || (_t2217 = _$1`Fireball/FireballLoopNoDebris_01_Purple_800x800.webm`))]
        }
      },
      fogcloud: {
        '01': {
          white: [l1(_t2218 || (_t2218 = _$1`Fog_Cloud/FogCloud_01_White_800x800.webm`))]
        },
        '02': {
          white: [l1(_t2219 || (_t2219 = _$1`Fog_Cloud/FogCloud_02_Regular_White_800x800.webm`))],
          green: [l1(_t2220 || (_t2220 = _$1`Fog_Cloud/FogCloud_02_Regular_Green_800x800.webm`))]
        }
      },
      heart: {
        '01': {
          darkred: [lg(_t2221 || (_t2221 = _$1`Template/Circle/TemplateHeartCircle_01_Dark_Red_800x800.webm`))],
          pink: [lg(_t2222 || (_t2222 = _$1`Template/Circle/TemplateHeartCircle_01_Regular_Pink_800x800.webm`))],
          teal: [lg(_t2223 || (_t2223 = _$1`Template/Circle/TemplateHeartCircle_01_Regular_Teal_800x800.webm`))]
        }
      },
      horror: {
        '01': {
          darkteal: [lg(_t2224 || (_t2224 = _$1`Template/Circle/TemplateHorrorCircle_01_Dark_Teal_800x800.webm`))],
          purple: [lg(_t2225 || (_t2225 = _$1`Template/Circle/TemplateHorrorCircle_01_Regular_Purple_800x800.webm`))],
          teal: [lg(_t2226 || (_t2226 = _$1`Template/Circle/TemplateHorrorCircle_01_Regular_Teal_800x800.webm`))]
        }
      },
      magicsign: {
        abjuration: {
          blue: [lg(_t2227 || (_t2227 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2228 || (_t2228 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2229 || (_t2229 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2230 || (_t2230 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2231 || (_t2231 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2232 || (_t2232 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        conjuration: {
          blue: [lg(_t2233 || (_t2233 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2234 || (_t2234 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2235 || (_t2235 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2236 || (_t2236 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2237 || (_t2237 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2238 || (_t2238 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        divination: {
          blue: [lg(_t2239 || (_t2239 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2240 || (_t2240 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2241 || (_t2241 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2242 || (_t2242 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2243 || (_t2243 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2244 || (_t2244 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        enchantment: {
          blue: [lg(_t2245 || (_t2245 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2246 || (_t2246 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2247 || (_t2247 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2248 || (_t2248 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2249 || (_t2249 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2250 || (_t2250 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        evocation: {
          blue: [lg(_t2251 || (_t2251 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2252 || (_t2252 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2253 || (_t2253 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2254 || (_t2254 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2255 || (_t2255 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2256 || (_t2256 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        illusion: {
          blue: [lg(_t2257 || (_t2257 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2258 || (_t2258 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2259 || (_t2259 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2260 || (_t2260 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2261 || (_t2261 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2262 || (_t2262 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        necromancy: {
          blue: [lg(_t2263 || (_t2263 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2264 || (_t2264 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2265 || (_t2265 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2266 || (_t2266 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2267 || (_t2267 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2268 || (_t2268 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        transmutation: {
          blue: [lg(_t2269 || (_t2269 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2270 || (_t2270 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2271 || (_t2271 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2272 || (_t2272 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2273 || (_t2273 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2274 || (_t2274 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      moonbeam: {
        loop: {
          blue: [l2(_t2275 || (_t2275 = _$1`Moonbeam/Moonbeam_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t2276 || (_t2276 = _$1`Moonbeam/Moonbeam_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t2277 || (_t2277 = _$1`Moonbeam/Moonbeam_01_Regular_Rainbow_400x400.webm`))]
        },
        nopulse: {
          blue: [l2(_t2278 || (_t2278 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t2279 || (_t2279 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t2280 || (_t2280 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Rainbow_400x400.webm`))]
        },
        intro: {
          blue: [l2(_t2281 || (_t2281 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t2282 || (_t2282 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t2283 || (_t2283 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Rainbow_400x400.webm`))]
        },
        outro: {
          blue: [l2(_t2284 || (_t2284 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t2285 || (_t2285 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t2286 || (_t2286 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Rainbow_400x400.webm`))]
        }
      },
      musicnote: {
        '01': {
          blue: [lg(_t2287 || (_t2287 = _$1`Template/Circle/TemplateMusicNoteCircle_01_Regular_Blue_800x800.webm`))],
          darkred: [lg(_t2288 || (_t2288 = _$1`Template/Circle/TemplateMusicNoteCircle_01_Dark_Red_800x800.webm`))],
          purple: [lg(_t2289 || (_t2289 = _$1`Template/Circle/TemplateMusicNoteCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      outpulse: {
        '01': {
          whiteblue: [lg(_t2290 || (_t2290 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2291 || (_t2291 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2292 || (_t2292 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2293 || (_t2293 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_TealYellow_Burst_600x600.webm`))]
        },
        '02': {
          whiteblue: [lg(_t2294 || (_t2294 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2295 || (_t2295 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2296 || (_t2296 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2297 || (_t2297 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_TealYellow_Burst_600x600.webm`))]
        }
      },
      poison: {
        '01': {
          darkgreen: [lg(_t2298 || (_t2298 = _$1`Template/Circle/TemplatePoisonCircle_01_Dark_Green_800x800.webm`))],
          purple: [lg(_t2299 || (_t2299 = _$1`Template/Circle/TemplatePoisonCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      runes: {
        '01': {
          darkorange: [lg(_t2300 || (_t2300 = _$1`Template/Circle/TemplateRunesCircle_01_Dark_Orange_800x800.webm`))],
          darkred: [lg(_t2301 || (_t2301 = _$1`Template/Circle/TemplateRunesCircle_01_Dark_Red_800x800.webm`))],
          blue: [lg(_t2302 || (_t2302 = _$1`Template/Circle/TemplateRunesCircle_01_Regular_Blue_800x800.webm`))],
          green: [lg(_t2303 || (_t2303 = _$1`Template/Circle/TemplateRunesCircle_01_Regular_Green02_800x800.webm`))],
          orange: [lg(_t2304 || (_t2304 = _$1`Template/Circle/TemplateRunesCircle_01_Regular_Orange_800x800.webm`))]
        }
      },
      shatter: {
        '01': {
          purple: [l2(_t2305 || (_t2305 = _$1`Shatter/Shatter_01_Purple_400x400.webm`))],
          red: [l2(_t2306 || (_t2306 = _$1`Shatter/Shatter_01_Red_400x400.webm`))],
          blue: [l2(_t2307 || (_t2307 = _$1`Shatter/Shatter_01_Blue_400x400.webm`))],
          green: [l2(_t2308 || (_t2308 = _$1`Shatter/Shatter_01_Green_400x400.webm`))],
          orange: [l2(_t2309 || (_t2309 = _$1`Shatter/Shatter_01_Orange_400x400.webm`))]
        }
      },
      shields: {
        '01': {
          darkred: [lg(_t2310 || (_t2310 = _$1`Template/Circle/TemplateShieldCircle_01_Dark_Red_800x800.webm`))],
          green: [lg(_t2311 || (_t2311 = _$1`Template/Circle/TemplateShieldCircle_01_Regular_Green_800x800.webm`))]
        }
      },
      skull: {
        '01': {
          darkgreen: [lg(_t2312 || (_t2312 = _$1`Template/Circle/TemplateSkullCircle_01_Dark_Green_800x800.webm`))],
          darkorange: [lg(_t2313 || (_t2313 = _$1`Template/Circle/TemplateSkullCircle_01_Dark_Orange_800x800.webm`))],
          purple: [lg(_t2314 || (_t2314 = _$1`Template/Circle/TemplateSkullCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      sleetstorm: {
        '01': {
          blue: [l3(_t2315 || (_t2315 = _$1`Sleet_Storm/SleetStorm_01_Blue_800x800.webm`))],
          green: [l3(_t2316 || (_t2316 = _$1`Sleet_Storm/SleetStorm_01_Green_800x800.webm`))],
          purple: [l3(_t2317 || (_t2317 = _$1`Sleet_Storm/SleetStorm_01_Purple_800x800.webm`))],
          tealyellow: [l3(_t2318 || (_t2318 = _$1`Sleet_Storm/SleetStorm_01_TealYellow_800x800.webm`))]
        }
      },
      snowflakes: {
        '01': {
          darkblue: [lg(_t2319 || (_t2319 = _$1`Template/Circle/TemplateSnowflakeCircle_01_Dark_Blue_800x800.webm`))],
          blue: [lg(_t2320 || (_t2320 = _$1`Template/Circle/TemplateSnowflakeCircle_01_Regular_Blue_800x800.webm`))]
        }
      },
      stun: {
        '01': {
          darkteal: [lg(_t2321 || (_t2321 = _$1`Template/Circle/TemplateStunCircle_01_Dark_Teal_800x800.webm`))],
          purple: [lg(_t2322 || (_t2322 = _$1`Template/Circle/TemplateStunCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      snowflake: {
        '01': {
          whiteblue: [lg(_t2323 || (_t2323 = _$1`Ice/SnowflakeBurst_01_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2324 || (_t2324 = _$1`Ice/SnowflakeBurst_01_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2325 || (_t2325 = _$1`Ice/SnowflakeBurst_01_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2326 || (_t2326 = _$1`Ice/SnowflakeBurst_01_Regular_TealYellow_Burst_600x600.webm`))]
        }
      },
      vortex: {
        loop: {
          black: [lg(_t2327 || (_t2327 = _$1`Template/Circle/Vortex_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2328 || (_t2328 = _$1`Template/Circle/Vortex_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2329 || (_t2329 = _$1`Template/Circle/Vortex_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2330 || (_t2330 = _$1`Template/Circle/Vortex_01_Regular_Purple_600x600.webm`))]
        },
        intro: {
          black: [lg(_t2331 || (_t2331 = _$1`Template/Circle/VortexIntro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2332 || (_t2332 = _$1`Template/Circle/VortexIntro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2333 || (_t2333 = _$1`Template/Circle/VortexIntro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2334 || (_t2334 = _$1`Template/Circle/VortexIntro_01_Regular_Purple_600x600.webm`))]
        },
        outro: {
          black: [lg(_t2335 || (_t2335 = _$1`Template/Circle/VortexOutro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2336 || (_t2336 = _$1`Template/Circle/VortexOutro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2337 || (_t2337 = _$1`Template/Circle/VortexOutro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2338 || (_t2338 = _$1`Template/Circle/VortexOutro_01_Regular_Purple_600x600.webm`))]
        }
      },
      whirl: {
        loop: {
          black: [lg(_t2339 || (_t2339 = _$1`Template/Circle/Whirl_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2340 || (_t2340 = _$1`Template/Circle/Whirl_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2341 || (_t2341 = _$1`Template/Circle/Whirl_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2342 || (_t2342 = _$1`Template/Circle/Whirl_01_Regular_Purple_600x600.webm`))]
        },
        intro: {
          black: [lg(_t2343 || (_t2343 = _$1`Template/Circle/WhirlIntro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2344 || (_t2344 = _$1`Template/Circle/WhirlIntro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2345 || (_t2345 = _$1`Template/Circle/WhirlIntro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2346 || (_t2346 = _$1`Template/Circle/WhirlIntro_01_Regular_Purple_600x600.webm`))]
        },
        outro: {
          black: [lg(_t2347 || (_t2347 = _$1`Template/Circle/WhirlOutro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2348 || (_t2348 = _$1`Template/Circle/WhirlOutro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2349 || (_t2349 = _$1`Template/Circle/WhirlOutro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2350 || (_t2350 = _$1`Template/Circle/WhirlOutro_01_Regular_Purple_600x600.webm`))]
        }
      }
    },
    cone: {
      breathweapon: {
        'cold': {
          blue: [lg(_t2351 || (_t2351 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t2352 || (_t2352 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t2353 || (_t2353 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t2354 || (_t2354 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))]
        },
        'fire01': {
          blue: [lg(_t2355 || (_t2355 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t2356 || (_t2356 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t2357 || (_t2357 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t2358 || (_t2358 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))],
          yellow: [lg(_t2359 || (_t2359 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Yellow_30ft_Cone_Burst_600x600.webm`))]
        },
        'fire02': {
          blue: [lg(_t2360 || (_t2360 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire02_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t2361 || (_t2361 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire02_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t2362 || (_t2362 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire02_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t2363 || (_t2363 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire02_Regular_Purple_30ft_Cone_Burst_600x600.webm`))],
          yellow: [lg(_t2364 || (_t2364 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Fire02_Regular_Yellow_30ft_Cone_Burst_600x600.webm`))]
        },
        'poison': {
          black: [lg(_t2365 || (_t2365 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Dark_Black_30ft_Cone_Burst_600x600.webm`))],
          blue: [lg(_t2366 || (_t2366 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          darkred: [lg(_t2367 || (_t2367 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Dark_Red_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t2368 || (_t2368 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t2369 || (_t2369 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t2370 || (_t2370 = _$1`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))]
        }
      },
      breathweaponspray01: {
        burst: {
          green: [lg(_t2371 || (_t2371 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire01_Regular_Green_Cone_Burst_800x800.webm`))],
          orange: [lg(_t2372 || (_t2372 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire01_Regular_Orange_Cone_Burst_800x800.webm`))],
          yellow: [lg(_t2373 || (_t2373 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Holy01_Regular_Yellow_Cone_Burst_800x800.webm`))],
          purple: [lg(_t2374 || (_t2374 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Arcana01_Regular_Purple_Cone_Burst_800x800.webm`))]
        },
        loop: {
          green: [lg(_t2375 || (_t2375 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire01_Regular_Green_Cone_Loop_800x800.webm`))],
          orange: [lg(_t2376 || (_t2376 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire01_Regular_Orange_Cone_Loop_800x800.webm`))],
          yellow: [lg(_t2377 || (_t2377 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Holy01_Regular_Yellow_Cone_Loop_800x800.webm`))],
          purple: [lg(_t2378 || (_t2378 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Arcana01_Regular_Purple_Cone_Loop_800x800.webm`))]
        }
      },
      breathweaponspray02: {
        burst: {
          green: [lg(_t2379 || (_t2379 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire02_Regular_Green_Cone_Burst_800x800.webm`))],
          orange: [lg(_t2380 || (_t2380 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire02_Regular_Orange_Cone_Burst_800x800.webm`))],
          yellow: [lg(_t2381 || (_t2381 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Holy02_Regular_Yellow_Cone_Burst_800x800.webm`))],
          purple: [lg(_t2382 || (_t2382 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Arcana02_Regular_Purple_Cone_Burst_800x800.webm`))]
        },
        loop: {
          green: [lg(_t2383 || (_t2383 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire02_Regular_Green_Cone_Loop_800x800.webm`))],
          orange: [lg(_t2384 || (_t2384 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Fire02_Regular_Orange_Cone_Loop_800x800.webm`))],
          yellow: [lg(_t2385 || (_t2385 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Holy02_Regular_Yellow_Cone_Loop_800x800.webm`))],
          purple: [lg(_t2386 || (_t2386 = _$1`Template/Cone/Breath_Weapon/Breathweapon02_Arcana02_Regular_Purple_Cone_Loop_800x800.webm`))]
        }
      },
      coneofcold: {
        '01': {
          blue: [l5(_t2387 || (_t2387 = _$1`Cone_Of_Cold/ConeOfCold_01_Regular_Blue_600x600.webm`))],
          green: [l5(_t2388 || (_t2388 = _$1`Cone_Of_Cold/ConeOfCold_01_Regular_Green_600x600.webm`))],
          orange: [l5(_t2389 || (_t2389 = _$1`Cone_Of_Cold/ConeOfCold_01_Regular_Orange_600x600.webm`))],
          purple: [l5(_t2390 || (_t2390 = _$1`Cone_Of_Cold/ConeOfCold_01_Regular_Purple_600x600.webm`))]
        }
      },
      burninghands: {
        '01': {
          blue: [l1(_t2391 || (_t2391 = _$1`Burning_Hands/BurningHands_01_Regular_Blue_600x600.webm`))],
          green: [l1(_t2392 || (_t2392 = _$1`Burning_Hands/BurningHands_01_Regular_Green_600x600.webm`))],
          orange: [l1(_t2393 || (_t2393 = _$1`Burning_Hands/BurningHands_01_Regular_Orange_600x600.webm`))],
          purple: [l1(_t2394 || (_t2394 = _$1`Burning_Hands/BurningHands_01_Regular_Purple_600x600.webm`))]
        },
        '02': {
          blue: [l1(_t2395 || (_t2395 = _$1`Burning_Hands/BurningHands_02_Regular_Blue_600x600.webm`))],
          green: [l1(_t2396 || (_t2396 = _$1`Burning_Hands/BurningHands_02_Regular_Green_600x600.webm`))],
          orange: [l1(_t2397 || (_t2397 = _$1`Burning_Hands/BurningHands_02_Regular_Orange_600x600.webm`))],
          purple: [l1(_t2398 || (_t2398 = _$1`Burning_Hands/BurningHands_02_Regular_Purple_600x600.webm`))]
        }
      }
    },
    square: {
      armsofhadar: {
        '01': {
          darkgreen: [l1(_t2399 || (_t2399 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Green_500x500.webm`))],
          darkpurple: [l1(_t2400 || (_t2400 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))],
          darkred: [l1(_t2401 || (_t2401 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Red_500x500.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkgreen: [l4(_t2402 || (_t2402 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Green_600x600.webm`))],
          darkpurple: [l4(_t2403 || (_t2403 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))],
          darkred: [l4(_t2404 || (_t2404 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Red_600x600.webm`))]
        }
      },
      crackedshield: {
        '01': {
          darkred: [lg(_t2405 || (_t2405 = _$1`Template/Square/TemplateShieldCrackedSquare_01_Dark_Red_600x600.webm`))],
          darkpurple: [lg(_t2406 || (_t2406 = _$1`Template/Square/TemplateShieldCrackedSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      drop: {
        '01': {
          darkgreen: [lg(_t2407 || (_t2407 = _$1`Template/Square/TemplateDropSquare_01_Dark_Green_600x600.webm`))],
          red: [lg(_t2408 || (_t2408 = _$1`Template/Square/TemplateDropSquare_01_Regular_Red_600x600.webm`))]
        }
      },
      entangle: {
        '01': {
          brown: [l1(_t2409 || (_t2409 = _$1`Entangle/Entangle_01_Brown_400x400.webm`))],
          green: [l1(_t2410 || (_t2410 = _$1`Entangle/Entangle_01_Green_400x400.webm`))],
          yellow: [l1(_t2411 || (_t2411 = _$1`Entangle/Entangle_01_Yellow_400x400.webm`))],
          darkpurple: [l1(_t2412 || (_t2412 = _$1`Entangle/Entangle_01_Dark_Purple_400x400.webm`))],
          palegreen: [l1(_t2413 || (_t2413 = _$1`Entangle/Entangle_01_Regular_Green02_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          darkorange: [lg(_t2414 || (_t2414 = _$1`Template/Square/TemplateFearSquare_01_Dark_Orange_600x600.webm`))],
          darkpurple: [lg(_t2415 || (_t2415 = _$1`Template/Square/TemplateFearSquare_01_Dark_Purple_600x600.webm`))],
          orange: [lg(_t2416 || (_t2416 = _$1`Template/Square/TemplateFearSquare_01_Regular_Orange_600x600.webm`))]
        }
      },
      grease: {
        "01": {
          brown: [l1(_t2417 || (_t2417 = _$1`Grease/Grease_Dark_Brown_600x600.webm`))],
          green: [l1(_t2418 || (_t2418 = _$1`Grease/Grease_Dark_Green_600x600.webm`))],
          grey: [l1(_t2419 || (_t2419 = _$1`Grease/Grease_Dark_Grey_600x600.webm`))],
          purple: [l1(_t2420 || (_t2420 = _$1`Grease/Grease_Dark_Purple_600x600.webm`))]
        }
      },
      heart: {
        '01': {
          darkred: [lg(_t2421 || (_t2421 = _$1`Template/Square/TemplateHeartSquare_01_Dark_Red_600x600.webm`))],
          pink: [lg(_t2422 || (_t2422 = _$1`Template/Square/TemplateHeartSquare_01_Regular_Pink_600x600.webm`))],
          teal: [lg(_t2423 || (_t2423 = _$1`Template/Square/TemplateHeartSquare_01_Regular_Teal_600x600.webm`))]
        }
      },
      horror: {
        '01': {
          darkteal: [lg(_t2424 || (_t2424 = _$1`Template/Square/TemplateHorrorSquare_01_Dark_Teal_600x600.webm`))],
          purple: [lg(_t2425 || (_t2425 = _$1`Template/Square/TemplateHorrorSquare_01_Regular_Purple_600x600.webm`))],
          teal: [lg(_t2426 || (_t2426 = _$1`Template/Square/TemplateHorrorSquare_01_Regular_Teal_600x600.webm`))]
        }
      },
      musicnote: {
        '01': {
          blue: [lg(_t2427 || (_t2427 = _$1`Template/Square/TemplateMusicNoteSquare_01_Regular_Blue_600x600.webm`))],
          darkred: [lg(_t2428 || (_t2428 = _$1`Template/Square/TemplateMusicNoteSquare_01_Dark_Red_600x600.webm`))],
          purple: [lg(_t2429 || (_t2429 = _$1`Template/Square/TemplateMusicNoteSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      poison: {
        '01': {
          darkgreen: [lg(_t2430 || (_t2430 = _$1`Template/Square/TemplatePoisonSquare_01_Dark_Green_600x600.webm`))],
          purple: [lg(_t2431 || (_t2431 = _$1`Template/Square/TemplatePoisonSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      runes: {
        '01': {
          darkorange: [lg(_t2432 || (_t2432 = _$1`Template/Square/TemplateRunesSquare_01_Dark_Orange_600x600.webm`))],
          darkred: [lg(_t2433 || (_t2433 = _$1`Template/Square/TemplateRunesSquare_01_Dark_Red_600x600.webm`))],
          blue: [lg(_t2434 || (_t2434 = _$1`Template/Square/TemplateRunesSquare_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2435 || (_t2435 = _$1`Template/Square/TemplateRunesSquare_01_Regular_Green02_600x600.webm`))],
          orange: [lg(_t2436 || (_t2436 = _$1`Template/Square/TemplateRunesSquare_01_Regular_Orange_600x600.webm`))]
        }
      },
      shields: {
        '01': {
          darkred: [lg(_t2437 || (_t2437 = _$1`Template/Square/TemplateShieldSquare_01_Dark_Red_600x600.webm`))],
          green: [lg(_t2438 || (_t2438 = _$1`Template/Square/TemplateShieldSquare_01_Regular_Green_600x600.webm`))]
        }
      },
      snowflakes: {
        '01': {
          darkblue: [lg(_t2439 || (_t2439 = _$1`Template/Square/TemplateSnowflakeSquare_01_Dark_Blue_600x600.webm`))],
          blue: [lg(_t2440 || (_t2440 = _$1`Template/Square/TemplateSnowflakeSquare_01_Regular_Blue_600x600.webm`))]
        }
      },
      skull: {
        '01': {
          darkgreen: [lg(_t2441 || (_t2441 = _$1`Template/Square/TemplateSkullSquare_01_Dark_Green_600x600.webm`))],
          darkorange: [lg(_t2442 || (_t2442 = _$1`Template/Square/TemplateSkullSquare_01_Dark_Orange_600x600.webm`))],
          purple: [lg(_t2443 || (_t2443 = _$1`Template/Square/TemplateSkullSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      stun: {
        '01': {
          darkteal: [lg(_t2444 || (_t2444 = _$1`Template/Square/TemplateStunSquare_01_Dark_Teal_600x600.webm`))],
          purple: [lg(_t2445 || (_t2445 = _$1`Template/Square/TemplateStunSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      thunderwave: {
        left: {
          blue: [l1(_t2446 || (_t2446 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_BLeft_600x600.webm`))],
          green: [l1(_t2447 || (_t2447 = _$1`Thunderwave/Thunderwave_01_Bright_Green_BLeft_600x600.webm`))],
          orange: [l1(_t2448 || (_t2448 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_BLeft_600x600.webm`))],
          purple: [l1(_t2449 || (_t2449 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_BLeft_600x600.webm`))],
          red: [l1(_t2450 || (_t2450 = _$1`Thunderwave/Thunderwave_01_Dark_Red_BLeft_600x600.webm`))]
        },
        mid: {
          blue: [l1(_t2451 || (_t2451 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_BMid_600x600.webm`))],
          green: [l1(_t2452 || (_t2452 = _$1`Thunderwave/Thunderwave_01_Bright_Green_BMid_600x600.webm`))],
          orange: [l1(_t2453 || (_t2453 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_BMid_600x600.webm`))],
          purple: [l1(_t2454 || (_t2454 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_BMid_600x600.webm`))],
          red: [l1(_t2455 || (_t2455 = _$1`Thunderwave/Thunderwave_01_Dark_Red_BMid_600x600.webm`))]
        },
        center: {
          blue: [l1(_t2456 || (_t2456 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_Center_600x600.webm`))],
          green: [l1(_t2457 || (_t2457 = _$1`Thunderwave/Thunderwave_01_Bright_Green_Center_600x600.webm`))],
          orange: [l1(_t2458 || (_t2458 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_Center_600x600.webm`))],
          purple: [l1(_t2459 || (_t2459 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_Center_600x600.webm`))],
          red: [l1(_t2460 || (_t2460 = _$1`Thunderwave/Thunderwave_01_Dark_Red_Center_600x600.webm`))]
        }
      },
      web: {
        '01': {
          white: [l2(_t2461 || (_t2461 = _$1`Web/Web_01_White_01_400x400.webm`))]
        },
        '02': {
          white: [l2(_t2462 || (_t2462 = _$1`Web/Web_01_White_02_400x400.webm`))]
        }
      }
    },
    ray: {
      breathweapon: {
        acid: {
          blue: [lg(_t2463 || (_t2463 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Acid01_Regular_Blue_30ft_Line_Burst_1200x200.webm`))],
          green: [lg(_t2464 || (_t2464 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Acid01_Regular_Green_30ft_Line_Burst_1200x200.webm`))],
          orange: [lg(_t2465 || (_t2465 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Acid01_Regular_Orange_30ft_Line_Burst_1200x200.webm`))],
          purple: [lg(_t2466 || (_t2466 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Acid01_Regular_Purple_30ft_Line_Burst_1200x200.webm`))]
        },
        fire: {
          blue: [lg(_t2467 || (_t2467 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Fire01_Regular_Blue_30ft_Line_Burst_1200x200.webm`))],
          green: [lg(_t2468 || (_t2468 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Fire01_Regular_Green_30ft_Line_Burst_1200x200.webm`))],
          orange: [lg(_t2469 || (_t2469 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Fire01_Regular_Orange_30ft_Line_Burst_1200x200.webm`))],
          purple: [lg(_t2470 || (_t2470 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Fire01_Regular_Purple_30ft_Line_Burst_1200x200.webm`))]
        },
        lightning: {
          blue: [lg(_t2471 || (_t2471 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Lightning01_Regular_Blue_30ft_Line_Burst_1200x200.webm`))],
          green: [lg(_t2472 || (_t2472 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Lightning01_Regular_Green_30ft_Line_Burst_1200x200.webm`))],
          orange: [lg(_t2473 || (_t2473 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Lightning01_Regular_Orange_30ft_Line_Burst_1200x200.webm`))],
          purple: [lg(_t2474 || (_t2474 = _$1`Template/Line/Breath_Weapon/BreathWeapon_Lightning01_Regular_Purple_30ft_Line_Burst_1200x200.webm`))]
        }
      },
      breathweaponspray01: {
        burst: {
          green: [lg(_t2475 || (_t2475 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Fire01_Regular_Green_Line_Burst_1200x400.webm`))],
          orange: [lg(_t2476 || (_t2476 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Fire01_Regular_Orange_Line_Burst_1200x400.webm`))],
          yellow: [lg(_t2477 || (_t2477 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Holy01_Regular_Yellow_Line_Burst_1200x400.webm`))],
          purple: [lg(_t2478 || (_t2478 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Arcana01_Regular_Purple_Line_Burst_1200x400.webm`))]
        },
        loop: {
          green: [lg(_t2479 || (_t2479 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Fire01_Regular_Green_Line_Loop_1200x400.webm`))],
          orange: [lg(_t2480 || (_t2480 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Fire01_Regular_Orange_Line_Loop_1200x400.webm`))],
          yellow: [lg(_t2481 || (_t2481 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Holy01_Regular_Yellow_Line_Loop_1200x400.webm`))],
          purple: [lg(_t2482 || (_t2482 = _$1`Template/Line/Breath_Weapon/Breathweapon02_Arcana01_Regular_Purple_Line_Loop_1200x400.webm`))]
        }
      },
      lightningbolt: {
        '01': {
          darkblue: [l3(_t2483 || (_t2483 = _$1`Lightning_Bolt/LightningBolt_01_Dark_Blue_4000x200.webm`))],
          blue: [l3(_t2484 || (_t2484 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Blue_4000x200.webm`))],
          green: [l3(_t2485 || (_t2485 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Green_4000x200.webm`))],
          orange: [l3(_t2486 || (_t2486 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Orange_4000x200.webm`))],
          purple: [l3(_t2487 || (_t2487 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Purple_4000x200.webm`))]
        },
        '02': {
          darkblue: [l3(_t2488 || (_t2488 = _$1`Lightning_Bolt/LightningBolt_01_Dark_Blue_4000x400.webm`))],
          blue: [l3(_t2489 || (_t2489 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Blue_4000x400.webm`))],
          green: [l3(_t2490 || (_t2490 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Green_4000x400.webm`))],
          orange: [l3(_t2491 || (_t2491 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Orange_4000x400.webm`))],
          purple: [l3(_t2492 || (_t2492 = _$1`Lightning_Bolt/LightningBolt_01_Regular_Purple_4000x400.webm`))]
        }
      },
      gustofwind: {
        slow: {
          white: [l2(_t2493 || (_t2493 = _$1`Gust_Of_Wind/GustOfWind_01_White_1200x200.webm`))]
        },
        fast: {
          white: [l2(_t2494 || (_t2494 = _$1`Gust_Of_Wind/GustOfWind_01_White_VeryFast_1200x200.webm`))]
        }
      }
    }
  };
  /**
   * Static Types:
   * 
   * Conditions
   * Creature
   * Energy
   * Fire
   * Generic
   * Ice
   * Lightning
   * Liquid
   * Magic Signs
   * Marker
   * Music
   * Particles
   * Shield Effects
   * Spell
   * Token Border
   * 
   */

  JB2APATREONDB.static = {
    conditions: {
      drop: {
        '01': {
          green: [lg(_t2495 || (_t2495 = _$1`Marker/MarkerDrop_01_Dark_Green_400x400.webm`))],
          red: [lg(_t2496 || (_t2496 = _$1`Marker/MarkerDrop_01_Regular_Red_400x400.webm`))]
        },
        '02': {
          green: [lg(_t2497 || (_t2497 = _$1`Marker/MarkerDrop_02_Dark_Green_400x400.webm`))],
          red: [lg(_t2498 || (_t2498 = _$1`Marker/MarkerDrop_02_Regular_Red_400x400.webm`))]
        },
        '03': {
          green: [lg(_t2499 || (_t2499 = _$1`Marker/MarkerDrop_03_Dark_Green_400x400.webm`))],
          red: [lg(_t2500 || (_t2500 = _$1`Marker/MarkerDrop_03_Regular_Red_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          orange: [lg(_t2501 || (_t2501 = _$1`Marker/MarkerFear_01_Regular_Orange_400x400.webm`))],
          darkorange: [lg(_t2502 || (_t2502 = _$1`Marker/MarkerFear_01_Dark_Orange_400x400.webm`))],
          darkpurple: [lg(_t2503 || (_t2503 = _$1`Marker/MarkerFear_01_Dark_Purple_400x400.webm`))]
        },
        '02': {
          orange: [lg(_t2504 || (_t2504 = _$1`Marker/MarkerFear_02_Regular_Orange_400x400.webm`))],
          darkorange: [lg(_t2505 || (_t2505 = _$1`Marker/MarkerFear_02_Dark_Orange_400x400.webm`))],
          darkpurple: [lg(_t2506 || (_t2506 = _$1`Marker/MarkerFear_02_Dark_Purple_400x400.webm`))]
        },
        '03': {
          orange: [lg(_t2507 || (_t2507 = _$1`Marker/MarkerFear_03_Regular_Orange_400x400.webm`))],
          darkorange: [lg(_t2508 || (_t2508 = _$1`Marker/MarkerFear_03_Dark_Orange_400x400.webm`))],
          darkpurple: [lg(_t2509 || (_t2509 = _$1`Marker/MarkerFear_03_Dark_Purple_400x400.webm`))]
        }
      },
      heart: {
        '01': {
          darkred: [lg(_t2510 || (_t2510 = _$1`Marker/MarkerHeart_01_Dark_Red_400x400.webm`))],
          pink: [lg(_t2511 || (_t2511 = _$1`Marker/MarkerHeart_01_Regular_Pink_400x400.webm`))],
          teal: [lg(_t2512 || (_t2512 = _$1`Marker/MarkerHeart_01_Regular_Teal_400x400.webm`))]
        },
        '02': {
          darkred: [lg(_t2513 || (_t2513 = _$1`Marker/MarkerHeart_02_Dark_Red_400x400.webm`))],
          pink: [lg(_t2514 || (_t2514 = _$1`Marker/MarkerHeart_02_Regular_Pink_400x400.webm`))],
          teal: [lg(_t2515 || (_t2515 = _$1`Marker/MarkerHeart_02_Regular_Teal_400x400.webm`))]
        },
        '03': {
          darkred: [lg(_t2516 || (_t2516 = _$1`Marker/MarkerHeart_03_Dark_Red_400x400.webm`))],
          pink: [lg(_t2517 || (_t2517 = _$1`Marker/MarkerHeart_03_Regular_Pink_400x400.webm`))],
          teal: [lg(_t2518 || (_t2518 = _$1`Marker/MarkerHeart_03_Regular_Teal_400x400.webm`))]
        }
      },
      horror: {
        '01': {
          purple: [lg(_t2519 || (_t2519 = _$1`Marker/MarkerHorror_01_Regular_Purple_400x400.webm`))],
          teal: [lg(_t2520 || (_t2520 = _$1`Marker/MarkerHorror_01_Regular_Teal_400x400.webm`))],
          darkteal: [lg(_t2521 || (_t2521 = _$1`Marker/MarkerHorror_01_Dark_Teal_400x400.webm`))]
        },
        '02': {
          purple: [lg(_t2522 || (_t2522 = _$1`Marker/MarkerHorror_02_Regular_Purple_400x400.webm`))],
          teal: [lg(_t2523 || (_t2523 = _$1`Marker/MarkerHorror_02_Dark_Teal_400x400.webm`))],
          darkteal: [lg(_t2524 || (_t2524 = _$1`Marker/MarkerHorror_02_Dark_Teal_400x400.webm`))]
        },
        '03': {
          purple: [lg(_t2525 || (_t2525 = _$1`Marker/MarkerHorror_03_Regular_Purple_400x400.webm`))],
          teal: [lg(_t2526 || (_t2526 = _$1`Marker/MarkerHorror_02_Regular_Teal_400x400.webm`))],
          darkteal: [lg(_t2527 || (_t2527 = _$1`Marker/MarkerHorror_03_Dark_Teal_400x400.webm`))]
        }
      },
      light: {
        pulse: {
          blue: [lg(_t2528 || (_t2528 = _$1`Marker/MarkerLight_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2529 || (_t2529 = _$1`Marker/MarkerLight_01_Regular_Green_400x400.webm`))],
          yellow: [lg(_t2530 || (_t2530 = _$1`Marker/MarkerLight_01_Regular_Yellow_400x400.webm`))]
        },
        nopulse: {
          blue: [lg(_t2531 || (_t2531 = _$1`Marker/MarkerLightNoPulse_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2532 || (_t2532 = _$1`Marker/MarkerLightNoPulse_01_Regular_Green_400x400.webm`))],
          yellow: [lg(_t2533 || (_t2533 = _$1`Marker/MarkerLightNoPulse_01_Regular_Yellow_400x400.webm`))]
        }
      },
      poison: {
        '01': {
          darkgreen: [lg(_t2534 || (_t2534 = _$1`Marker/MarkerPoison_01_Dark_Green_400x400.webm`))],
          purple: [lg(_t2535 || (_t2535 = _$1`Marker/MarkerPoison_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          darkgreen: [lg(_t2536 || (_t2536 = _$1`Marker/MarkerPoison_02_Dark_Green_400x400.webm`))],
          purple: [lg(_t2537 || (_t2537 = _$1`Marker/MarkerPoison_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          darkgreen: [lg(_t2538 || (_t2538 = _$1`Marker/MarkerPoison_03_Dark_Green_400x400.webm`))],
          purple: [lg(_t2539 || (_t2539 = _$1`Marker/MarkerPoison_03_Regular_Purple_400x400.webm`))]
        }
      },
      runes: {
        '01': {
          black: [lg(_t2540 || (_t2540 = _$1`Marker/MarkerRunes_01_Dark_Black_400x400.webm`))],
          blue: [lg(_t2541 || (_t2541 = _$1`Marker/MarkerRunes_01_Regular_Blue_400x400.webm`))],
          darkorange: [lg(_t2542 || (_t2542 = _$1`Marker/MarkerRunes_01_Dark_Orange_400x400.webm`))],
          green: [lg(_t2543 || (_t2543 = _$1`Marker/MarkerRunes_01_Regular_Green02_400x400.webm`))],
          orange: [lg(_t2544 || (_t2544 = _$1`Marker/MarkerRunes_01_Regular_Orange_400x400.webm`))],
          darkred: [lg(_t2545 || (_t2545 = _$1`Marker/MarkerRunes_01_Dark_Red_400x400.webm`))],
          red: [lg(_t2546 || (_t2546 = _$1`Marker/MarkerRunes_01_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2547 || (_t2547 = _$1`Marker/MarkerRunes_01_Regular_Yellow_400x400.webm`))],
          white: [lg(_t2548 || (_t2548 = _$1`Marker/MarkerRunes_01_Regular_White_400x400.webm`))]
        },
        '02': {
          black: [lg(_t2549 || (_t2549 = _$1`Marker/MarkerRunes_02_Dark_Black_400x400.webm`))],
          blue: [lg(_t2550 || (_t2550 = _$1`Marker/MarkerRunes_02_Regular_Blue_400x400.webm`))],
          darkorange: [lg(_t2551 || (_t2551 = _$1`Marker/MarkerRunes_02_Dark_Orange_400x400.webm`))],
          green: [lg(_t2552 || (_t2552 = _$1`Marker/MarkerRunes_02_Regular_Green02_400x400.webm`))],
          orange: [lg(_t2553 || (_t2553 = _$1`Marker/MarkerRunes_02_Regular_Orange_400x400.webm`))],
          darkred: [lg(_t2554 || (_t2554 = _$1`Marker/MarkerRunes_02_Dark_Red_400x400.webm`))],
          red: [lg(_t2555 || (_t2555 = _$1`Marker/MarkerRunes_02_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2556 || (_t2556 = _$1`Marker/MarkerRunes_02_Regular_Yellow_400x400.webm`))],
          white: [lg(_t2557 || (_t2557 = _$1`Marker/MarkerRunes_02_Regular_White_400x400.webm`))]
        },
        '03': {
          black: [lg(_t2558 || (_t2558 = _$1`Marker/MarkerRunes_03_Dark_Black_400x400.webm`))],
          blue: [lg(_t2559 || (_t2559 = _$1`Marker/MarkerRunes_03_Regular_Blue_400x400.webm`))],
          darkorange: [lg(_t2560 || (_t2560 = _$1`Marker/MarkerRunes_03_Dark_Orange_400x400.webm`))],
          green: [lg(_t2561 || (_t2561 = _$1`Marker/MarkerRunes_03_Regular_Green02_400x400.webm`))],
          orange: [lg(_t2562 || (_t2562 = _$1`Marker/MarkerRunes_03_Regular_Orange_400x400.webm`))],
          darkred: [lg(_t2563 || (_t2563 = _$1`Marker/MarkerRunes_03_Dark_Red_400x400.webm`))],
          red: [lg(_t2564 || (_t2564 = _$1`Marker/MarkerRunes_02_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2565 || (_t2565 = _$1`Marker/MarkerRunes_03_Regular_Yellow_400x400.webm`))],
          white: [lg(_t2566 || (_t2566 = _$1`Marker/MarkerRunes_03_Regular_White_400x400.webm`))]
        }
      },
      shields: {
        '01': {
          darkred: [lg(_t2567 || (_t2567 = _$1`Marker/MarkerShield_01_Dark_Red_400x400.webm`))],
          green: [lg(_t2568 || (_t2568 = _$1`Marker/MarkerShield_01_Regular_Green_400x400.webm`))]
        },
        '02': {
          darkred: [lg(_t2569 || (_t2569 = _$1`Marker/MarkerShield_02_Dark_Red_400x400.webm`))],
          green: [lg(_t2570 || (_t2570 = _$1`Marker/MarkerShield_02_Regular_Green_400x400.webm`))]
        },
        '03': {
          darkred: [lg(_t2571 || (_t2571 = _$1`Marker/MarkerShield_03_Dark_Red_400x400.webm`))],
          green: [lg(_t2572 || (_t2572 = _$1`Marker/MarkerShield_03_Regular_Green_400x400.webm`))]
        }
      },
      crackedshield: {
        '01': {
          darkred: [lg(_t2573 || (_t2573 = _$1`Marker/MarkerShieldCracked_01_Dark_Red_400x400.webm`))],
          purple: [lg(_t2574 || (_t2574 = _$1`Marker/MarkerShieldCracked_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          darkred: [lg(_t2575 || (_t2575 = _$1`Marker/MarkerShieldCracked_02_Dark_Red_400x400.webm`))],
          purple: [lg(_t2576 || (_t2576 = _$1`Marker/MarkerShieldCracked_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          darkred: [lg(_t2577 || (_t2577 = _$1`Marker/MarkerShieldCracked_03_Dark_Red_400x400.webm`))],
          purple: [lg(_t2578 || (_t2578 = _$1`Marker/MarkerShieldCracked_03_Regular_Purple_400x400.webm`))]
        }
      },
      skull: {
        '01': {
          darkgreen: [lg(_t2579 || (_t2579 = _$1`Marker/MarkerSkull_01_Dark_Green_400x400.webm`))],
          darkorange: [lg(_t2580 || (_t2580 = _$1`Marker/MarkerSkull_01_Dark_Orange_400x400.webm`))],
          purple: [lg(_t2581 || (_t2581 = _$1`Marker/MarkerSkull_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          darkgreen: [lg(_t2582 || (_t2582 = _$1`Marker/MarkerSkull_02_Dark_Green_400x400.webm`))],
          darkorange: [lg(_t2583 || (_t2583 = _$1`Marker/MarkerSkull_02_Dark_Orange_400x400.webm`))],
          purple: [lg(_t2584 || (_t2584 = _$1`Marker/MarkerSkull_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          darkgreen: [lg(_t2585 || (_t2585 = _$1`Marker/MarkerSkull_03_Dark_Green_400x400.webm`))],
          darkorange: [lg(_t2586 || (_t2586 = _$1`Marker/MarkerSkull_03_Dark_Orange_400x400.webm`))],
          purple: [lg(_t2587 || (_t2587 = _$1`Marker/MarkerSkull_03_Regular_Purple_400x400.webm`))]
        }
      },
      snowflakes: {
        '01': {
          darkblue: [lg(_t2588 || (_t2588 = _$1`Marker/MarkerSnowflake_01_Dark_Blue_400x400.webm`))],
          blue: [lg(_t2589 || (_t2589 = _$1`Marker/MarkerSnowflake_01_Regular_Blue_400x400.webm`))]
        },
        '02': {
          darkblue: [lg(_t2590 || (_t2590 = _$1`Marker/MarkerSnowflake_02_Dark_Blue_400x400.webm`))],
          blue: [lg(_t2591 || (_t2591 = _$1`Marker/MarkerSnowflake_02_Regular_Blue_400x400.webm`))]
        },
        '03': {
          darkblue: [lg(_t2592 || (_t2592 = _$1`Marker/MarkerSnowflake_03_Dark_Blue_400x400.webm`))],
          blue: [lg(_t2593 || (_t2593 = _$1`Marker/MarkerSnowflake_03_Regular_Blue_400x400.webm`))]
        }
      },
      stun: {
        '01': {
          darkteal: [lg(_t2594 || (_t2594 = _$1`Marker/MarkerStun_01_Dark_Teal_400x400.webm`))],
          purple: [lg(_t2595 || (_t2595 = _$1`Marker/MarkerStun_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          darkteal: [lg(_t2596 || (_t2596 = _$1`Marker/MarkerStun_02_Dark_Teal_400x400.webm`))],
          purple: [lg(_t2597 || (_t2597 = _$1`Marker/MarkerStun_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          darkteal: [lg(_t2598 || (_t2598 = _$1`Marker/MarkerStun_03_Dark_Teal_400x400.webm`))],
          purple: [lg(_t2599 || (_t2599 = _$1`Marker/MarkerStun_03_Regular_Purple_400x400.webm`))]
        }
      },
      dizzystars: {
        '01': {
          black: [lg(_t2600 || (_t2600 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Black_400x400.webm`))],
          blueorange: [lg(_t2601 || (_t2601 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_BlueOrange_400x400.webm`))],
          green: [lg(_t2602 || (_t2602 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Green_400x400.webm`))],
          orange: [lg(_t2603 || (_t2603 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Orange_400x400.webm`))],
          pink: [lg(_t2604 || (_t2604 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Pink_400x400.webm`))],
          purple: [lg(_t2605 || (_t2605 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Purple_400x400.webm`))],
          red: [lg(_t2606 || (_t2606 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Red_400x400.webm`))],
          white: [lg(_t2607 || (_t2607 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_White_400x400.webm`))],
          yellow: [lg(_t2608 || (_t2608 = _$1`Conditions/Dizzy_Stars/DizzyStars_01_Yellow_400x400.webm`))]
        }
      }
    },
    creature: {
      bite: {
        '01': {
          red: [lg(_t2609 || (_t2609 = _$1`Creature/Bite_01_Regular_Red_400x400.webm`))],
          blue: [lg(_t2610 || (_t2610 = _$1`Creature/Bite_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2611 || (_t2611 = _$1`Creature/Bite_01_Regular_Green_400x400.webm`))],
          grey: [lg(_t2612 || (_t2612 = _$1`Creature/Bite_01_Regular_Grey_400x400.webm`))],
          orange: [lg(_t2613 || (_t2613 = _$1`Creature/Bite_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2614 || (_t2614 = _$1`Creature/Bite_01_Regular_Purple_400x400.webm`))],
          yellow: [lg(_t2615 || (_t2615 = _$1`Creature/Bite_01_Regular_Yellow_400x400.webm`))]
        }
      },
      claw: {
        '01': {
          blue: [lg(_t2616 || (_t2616 = _$1`Creature/Claws_01_Bright_Blue_400x400.webm`))],
          brown: [lg(_t2617 || (_t2617 = _$1`Creature/Claws_01_Regular_Brown_400x400.webm`))],
          darkred: [lg(_t2618 || (_t2618 = _$1`Creature/Claws_01_Dark_Red_400x400.webm`))],
          green: [lg(_t2619 || (_t2619 = _$1`Creature/Claws_01_Bright_Green_400x400.webm`))],
          orange: [lg(_t2620 || (_t2620 = _$1`Creature/Claws_01_Bright_Orange_400x400.webm`))],
          purple: [lg(_t2621 || (_t2621 = _$1`Creature/Claws_01_Bright_Purple_400x400.webm`))],
          red: [lg(_t2622 || (_t2622 = _$1`Creature/Claws_01_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2623 || (_t2623 = _$1`Creature/Claws_01_Bright_Yellow_400x400.webm`))]
        }
      }
    },
    energy: {
      energyfield: {
        '01': {
          blue: [lg(_t2624 || (_t2624 = _$1`Energy/EnergyField_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2625 || (_t2625 = _$1`Energy/EnergyField_01_Regular_Green_600x600.webm`))],
          rainbow: [lg(_t2626 || (_t2626 = _$1`Energy/EnergyField_01_Regular_Rainbow_600x600.webm`))]
        }
      },
      dodecahedron: {
        simple: {
          blue: [lg(_t2627 || (_t2627 = _$1`Energy/Dodecahedron_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2628 || (_t2628 = _$1`Energy/Dodecahedron_01_Regular_Green_600x600.webm`))]
        },
        rolled: {
          blue: [lg(_t2629 || (_t2629 = _$1`Energy/DodecahedronRoll_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2630 || (_t2630 = _$1`Energy/DodecahedronRoll_01_Regular_Green_600x600.webm`))]
        },
        runeabove: {
          yellowblue: [lg(_t2631 || (_t2631 = _$1`Energy/DodecahedronRuneAbove_01_Regular_BlueYellow_600x600.webm`))],
          darkgreenpurple: [lg(_t2632 || (_t2632 = _$1`Energy/DodecahedronRuneAbove_01_Dark_GreenPurple_600x600.webm`))]
        },
        runebelow: {
          yellowblue: [lg(_t2633 || (_t2633 = _$1`Energy/DodecahedronRuneBelow_01_Regular_BlueYellow_600x600.webm`))],
          darkgreenpurple: [lg(_t2634 || (_t2634 = _$1`Energy/DodecahedronRuneBelow_01_Dark_GreenPurple_600x600.webm`))]
        },
        skullabove: {
          darkgreenpurple: [lg(_t2635 || (_t2635 = _$1`Energy/DodecahedronSkullAbove_01_Dark_GreenPurple_600x600.webm`))]
        },
        skullbelow: {
          darkgreenpurple: [lg(_t2636 || (_t2636 = _$1`Energy/DodecahedronSkullBelow_01_Dark_GreenPurple_600x600.webm`))]
        },
        starabove: {
          yellowblue: [lg(_t2637 || (_t2637 = _$1`Energy/DodecahedronStarAbove_01_Regular_BlueYellow_600x600.webm`))]
        },
        starbelow: {
          yellowblue: [lg(_t2638 || (_t2638 = _$1`Energy/DodecahedronStarBelow_01_Regular_BlueYellow_600x600.webm`))]
        }
      },
      shimmer: {
        '01': {
          blue: [lg(_t2639 || (_t2639 = _$1`Energy/Shimmer01_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2640 || (_t2640 = _$1`Energy/Shimmer01_01_Regular_Green_400x400.webm`))],
          orange: [lg(_t2641 || (_t2641 = _$1`Energy/Shimmer01_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2642 || (_t2642 = _$1`Energy/Shimmer01_01_Regular_Purple_400x400.webm`))]
        }
      },
      sparkles: {
        '01': {
          blue: [lg(_t2643 || (_t2643 = _$1`Energy/SwirlingSparkles_01_Regular_Blue_400x400.webm`))],
          bluepink: [lg(_t2644 || (_t2644 = _$1`Energy/SwirlingSparkles_01_Regular_BluePink_400x400.webm`))],
          greenorange: [lg(_t2645 || (_t2645 = _$1`Energy/SwirlingSparkles_01_Regular_GreenOrange_400x400.webm`))],
          orangepurple: [lg(_t2646 || (_t2646 = _$1`Energy/SwirlingSparkles_01_Regular_OrangePurple_400x400.webm`))]
        }
      }
    },
    fire: {
      eruption: {
        '01': {
          blue: [lg(_t2647 || (_t2647 = _$1`Fire/Eruption_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2648 || (_t2648 = _$1`Fire/Eruption_01_Regular_Green_600x600.webm`))],
          orange: [lg(_t2649 || (_t2649 = _$1`Fire/Eruption_01_Regular_Orange_600x600.webm`))]
        }
      },
      groundcrack: {
        '01': {
          blue: [lg(_t2650 || (_t2650 = _$1`Fire/GroundCrackLoop_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2651 || (_t2651 = _$1`Fire/GroundCrackLoop_01_Regular_Green_600x600.webm`))],
          orange: [lg(_t2652 || (_t2652 = _$1`Fire/GroundCrackLoop_01_Regular_Orange_600x600.webm`))],
          purple: [lg(_t2653 || (_t2653 = _$1`Fire/GroundCrackLoop_01_Regular_Purple_600x600.webm`))]
        },
        '02': {
          blue: [lg(_t2654 || (_t2654 = _$1`Fire/GroundCrackLoop_02_Regular_Blue_600x600.webm`))],
          green: [lg(_t2655 || (_t2655 = _$1`Fire/GroundCrackLoop_02_Regular_Green_600x600.webm`))],
          orange: [lg(_t2656 || (_t2656 = _$1`Fire/GroundCrackLoop_02_Regular_Orange_600x600.webm`))],
          purple: [lg(_t2657 || (_t2657 = _$1`Fire/GroundCrackLoop_02_Regular_Purple_600x600.webm`))]
        },
        '03': {
          blue: [lg(_t2658 || (_t2658 = _$1`Fire/GroundCrackLoop_03_Regular_Blue_600x600.webm`))],
          green: [lg(_t2659 || (_t2659 = _$1`Fire/GroundCrackLoop_03_Regular_Green_600x600.webm`))],
          orange: [lg(_t2660 || (_t2660 = _$1`Fire/GroundCrackLoop_03_Regular_Orange_600x600.webm`))],
          purple: [lg(_t2661 || (_t2661 = _$1`Fire/GroundCrackLoop_03_Regular_Purple_600x600.webm`))]
        }
      },
      fireworks: {
        '01': {
          green: [lg(_t2662 || (_t2662 = _$1`Fireworks/Firework02_01_Regular_Green_600x600.webm`))],
          greenorange: [lg(_t2663 || (_t2663 = _$1`Fireworks/Firework01_01_Regular_GreenOrange_600x600.webm`))],
          greenred: [lg(_t2664 || (_t2664 = _$1`Fireworks/Firework01_01_Regular_GreenRed_600x600.webm`)), lg(_t2665 || (_t2665 = _$1`Fireworks/Firework03_01_Regular_GreenRed_600x600.webm`))],
          orange: [lg(_t2666 || (_t2666 = _$1`Fireworks/Firework02_01_Regular_Orange_600x600.webm`))],
          orangeyellow: [lg(_t2667 || (_t2667 = _$1`Fireworks/Firework01_01_Regular_OrangeYellow_600x600.webm`)), lg(_t2668 || (_t2668 = _$1`Fireworks/Firework03_01_Regular_OrangeYellow_600x600.webm`))],
          yellow: [lg(_t2669 || (_t2669 = _$1`Fireworks/Firework02_01_Regular_Yellow_600x600.webm`))],
          bluepink: [lg(_t2670 || (_t2670 = _$1`Fireworks/Firework03_01_Regular_BluePink_600x600.webm`))]
        },
        '02': {
          green: [lg(_t2671 || (_t2671 = _$1`Fireworks/Firework02_02_Regular_Green_600x600.webm`))],
          greenorange: [lg(_t2672 || (_t2672 = _$1`Fireworks/Firework01_02_Regular_GreenOrange_600x600.webm`))],
          greenred: [lg(_t2673 || (_t2673 = _$1`Fireworks/Firework03_02_Regular_GreenRed_600x600.webm`))],
          orange: [lg(_t2674 || (_t2674 = _$1`Fireworks/Firework02_02_Regular_Orange_600x600.webm`))],
          orangeyellow: [lg(_t2675 || (_t2675 = _$1`Fireworks/Firework01_02_Regular_OrangeYellow_600x600.webm`)), lg(_t2676 || (_t2676 = _$1`Fireworks/Firework03_02_Regular_OrangeYellow_600x600.webm`))],
          yellow: [lg(_t2677 || (_t2677 = _$1`Fireworks/Firework02_02_Regular_Yellow_600x600.webm`)), lg(_t2678 || (_t2678 = _$1`Fireworks/Firework03_02_Regular_OrangeYellow_600x600.webm`))],
          bluepink: [lg(_t2679 || (_t2679 = _$1`Fireworks/Firework03_02_Regular_BluePink_600x600.webm`))]
        }
      }
    },
    generic: {
      boulderimpact: {
        '01': {
          white: [lg(_t2680 || (_t2680 = _$1`Impact/BoulderImpact_01_Regular_White_500x500.webm`))]
        }
      },
      explosion: {
        '01': {
          darkpurple: [lg(_t2681 || (_t2681 = _$1`Explosion/Explosion_04_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2682 || (_t2682 = _$1`Explosion/Explosion_04_Dark_Red_400x400.webm`))],
          blue: [lg(_t2683 || (_t2683 = _$1`Explosion/Explosion_01_Blue_400x400.webm`)), lg(_t2684 || (_t2684 = _$1`Explosion/Explosion_02_Blue_400x400.webm`)), lg(_t2685 || (_t2685 = _$1`Explosion/Explosion_04_Regular_Blue_400x400.webm`))],
          green: [lg(_t2686 || (_t2686 = _$1`Explosion/Explosion_01_Green_400x400.webm`)), lg(_t2687 || (_t2687 = _$1`Explosion/Explosion_02_Green_400x400.webm`)), lg(_t2688 || (_t2688 = _$1`Explosion/Explosion_04_Regular_Green_400x400.webm`))],
          greenorange: [lg(_t2689 || (_t2689 = _$1`Explosion/Explosion_03_Regular_GreenOrange_400x400.webm`))],
          orange: [lg(_t2690 || (_t2690 = _$1`Explosion/Explosion_01_Orange_400x400.webm`)), lg(_t2691 || (_t2691 = _$1`Explosion/Explosion_02_Orange_400x400.webm`)), lg(_t2692 || (_t2692 = _$1`Explosion/Explosion_04_Regular_Orange_400x400.webm`))],
          pink: [lg(_t2693 || (_t2693 = _$1`Explosion/Explosion_03_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t2694 || (_t2694 = _$1`Explosion/Explosion_03_Regular_PurplePink_400x400.webm`))],
          purple: [lg(_t2695 || (_t2695 = _$1`Explosion/Explosion_01_Purple_400x400.webm`)), lg(_t2696 || (_t2696 = _$1`Explosion/Explosion_02_Purple_400x400.webm`))],
          red: [lg(_t2697 || (_t2697 = _$1`Explosion/Explosion_03_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2698 || (_t2698 = _$1`Explosion/Explosion_01_Yellow_400x400.webm`)), lg(_t2699 || (_t2699 = _$1`Explosion/Explosion_02_Yellow_400x400.webm`))],
          yellowblue: [lg(_t2700 || (_t2700 = _$1`Explosion/Explosion_03_Regular_BlueYellow_400x400.webm`))],
          whiteblue: [lg(_t2701 || (_t2701 = _$1`Explosion/Explosion_03_Dark_BlueWhite_400x400.webm`))]
        }
      },
      impact: {
        '01': {
          blue: [lg(_t2702 || (_t2702 = _$1`Impact/Impact_01_Regular_Blue_400x400.webm`)), lg(_t2703 || (_t2703 = _$1`Impact/Impact_02_Regular_Blue_400x400.webm`)), lg(_t2704 || (_t2704 = _$1`Impact/Impact_03_Regular_Blue_400x400.webm`)), lg(_t2705 || (_t2705 = _$1`Impact/Impact_04_Regular_Blue_400x400.webm`)), lg(_t2706 || (_t2706 = _$1`Impact/Impact_05_Regular_Blue_400x400.webm`)), lg(_t2707 || (_t2707 = _$1`Impact/Impact_07_Regular_Blue_400x400.webm`)), lg(_t2708 || (_t2708 = _$1`Impact/Impact_08_Regular_Blue_400x400.webm`)), lg(_t2709 || (_t2709 = _$1`Impact/Impact_09_Regular_Blue_400x400.webm`)), lg(_t2710 || (_t2710 = _$1`Impact/Impact_10_Regular_Blue_400x400.webm`)), lg(_t2711 || (_t2711 = _$1`Impact/Impact_11_Regular_Blue_400x400.webm`)), lg(_t2712 || (_t2712 = _$1`Impact/Impact_12_Regular_Blue_400x400.webm`))],
          darkpurple: [lg(_t2713 || (_t2713 = _$1`Impact/Impact_01_Dark_Purple_400x400.webm`)), lg(_t2714 || (_t2714 = _$1`Impact/Impact_02_Dark_Purple_400x400.webm`)), lg(_t2715 || (_t2715 = _$1`Impact/Impact_03_Dark_Purple_400x400.webm`)), lg(_t2716 || (_t2716 = _$1`Impact/Impact_04_Dark_Purple_400x400.webm`)), lg(_t2717 || (_t2717 = _$1`Impact/Impact_11_Dark_Purple_400x400.webm`)), lg(_t2718 || (_t2718 = _$1`Impact/Impact_12_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2719 || (_t2719 = _$1`Impact/Impact_01_Dark_Red_400x400.webm`)), lg(_t2720 || (_t2720 = _$1`Impact/Impact_02_Dark_Red_400x400.webm`)), lg(_t2721 || (_t2721 = _$1`Impact/Impact_03_Dark_Red_400x400.webm`)), lg(_t2722 || (_t2722 = _$1`Impact/Impact_04_Dark_Red_400x400.webm`)), lg(_t2723 || (_t2723 = _$1`Impact/Impact_11_Dark_Red_400x400.webm`)), lg(_t2724 || (_t2724 = _$1`Impact/Impact_12_Dark_Red_400x400.webm`))],
          green: [lg(_t2725 || (_t2725 = _$1`Impact/Impact_01_Regular_Green_400x400.webm`)), lg(_t2726 || (_t2726 = _$1`Impact/Impact_02_Regular_Green_400x400.webm`)), lg(_t2727 || (_t2727 = _$1`Impact/Impact_03_Regular_Green_400x400.webm`)), lg(_t2728 || (_t2728 = _$1`Impact/Impact_04_Regular_Green_400x400.webm`)), lg(_t2729 || (_t2729 = _$1`Impact/Impact_05_Regular_Green_400x400.webm`)), lg(_t2730 || (_t2730 = _$1`Impact/Impact_07_Regular_Green_400x400.webm`)), lg(_t2731 || (_t2731 = _$1`Impact/Impact_08_Regular_Green_400x400.webm`)), lg(_t2732 || (_t2732 = _$1`Impact/Impact_09_Regular_Green_400x400.webm`)), lg(_t2733 || (_t2733 = _$1`Impact/Impact_10_Regular_Green_400x400.webm`)), lg(_t2734 || (_t2734 = _$1`Impact/Impact_11_Regular_Blue_400x400.webm`)), lg(_t2735 || (_t2735 = _$1`Impact/Impact_12_Regular_Blue_400x400.webm`))],
          orange: [lg(_t2736 || (_t2736 = _$1`Impact/Impact_01_Regular_Orange_400x400.webm`)), lg(_t2737 || (_t2737 = _$1`Impact/Impact_02_Regular_Orange_400x400.webm`)), lg(_t2738 || (_t2738 = _$1`Impact/Impact_03_Regular_Orange_400x400.webm`)), lg(_t2739 || (_t2739 = _$1`Impact/Impact_04_Regular_Orange_400x400.webm`)), lg(_t2740 || (_t2740 = _$1`Impact/Impact_05_Regular_Orange_400x400.webm`)), lg(_t2741 || (_t2741 = _$1`Impact/Impact_07_Regular_Orange_400x400.webm`)), lg(_t2742 || (_t2742 = _$1`Impact/Impact_08_Regular_Orange_400x400.webm`)), lg(_t2743 || (_t2743 = _$1`Impact/Impact_09_Regular_Orange_400x400.webm`)), lg(_t2744 || (_t2744 = _$1`Impact/Impact_10_Regular_Orange_400x400.webm`))],
          pink: [lg(_t2745 || (_t2745 = _$1`Impact/Impact_07_Regular_Pink_400x400.webm`)), lg(_t2746 || (_t2746 = _$1`Impact/Impact_09_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t2747 || (_t2747 = _$1`Impact/Impact_01_Regular_PinkPurple_400x400.webm`)), lg(_t2748 || (_t2748 = _$1`Impact/Impact_02_Regular_PinkPurple_400x400.webm`)), lg(_t2749 || (_t2749 = _$1`Impact/Impact_03_Regular_PinkPurple_400x400.webm`)), lg(_t2750 || (_t2750 = _$1`Impact/Impact_04_Regular_PinkPurple_400x400.webm`))],
          purple: [lg(_t2751 || (_t2751 = _$1`Impact/Impact_05_Regular_Purple_400x400.webm`)), lg(_t2752 || (_t2752 = _$1`Impact/Impact_07_Regular_Purple_400x400.webm`)), lg(_t2753 || (_t2753 = _$1`Impact/Impact_09_Regular_Purple_400x400.webm`)), lg(_t2754 || (_t2754 = _$1`Impact/Impact_11_Regular_Purple_400x400.webm`)), lg(_t2755 || (_t2755 = _$1`Impact/Impact_12_Regular_Purple_400x400.webm`))],
          red: [lg(_t2756 || (_t2756 = _$1`Impact/Impact_05_Regular_Red_400x400.webm`)), lg(_t2757 || (_t2757 = _$1`Impact/Impact_07_Regular_Red_400x400.webm`)), lg(_t2758 || (_t2758 = _$1`Impact/Impact_08_Regular_Red_400x400.webm`)), lg(_t2759 || (_t2759 = _$1`Impact/Impact_10_Regular_Red_400x400.webm`)), lg(_t2760 || (_t2760 = _$1`Impact/Impact_11_Regular_Red_400x400.webm`)), lg(_t2761 || (_t2761 = _$1`Impact/Impact_12_Regular_Red_400x400.webm`))],
          white: [lg(_t2762 || (_t2762 = _$1`Impact/Impact_07_Regular_White_400x400.webm`)), lg(_t2763 || (_t2763 = _$1`Impact/Impact_09_Regular_White_400x400.webm`))],
          yellow: [lg(_t2764 || (_t2764 = _$1`Impact/Impact_01_Regular_Yellow_400x400.webm`)), lg(_t2765 || (_t2765 = _$1`Impact/Impact_02_Regular_Yellow_400x400.webm`)), lg(_t2766 || (_t2766 = _$1`Impact/Impact_03_Regular_Yellow_400x400.webm`)), lg(_t2767 || (_t2767 = _$1`Impact/Impact_04_Regular_Yellow_400x400.webm`)), lg(_t2768 || (_t2768 = _$1`Impact/Impact_05_Regular_Yellow_400x400.webm`)), lg(_t2769 || (_t2769 = _$1`Impact/Impact_06_Regular_Yellow_400x400.webm`)), lg(_t2770 || (_t2770 = _$1`Impact/Impact_07_Regular_Yellow_400x400.webm`)), lg(_t2771 || (_t2771 = _$1`Impact/Impact_11_Regular_Yellow_400x400.webm`)), lg(_t2772 || (_t2772 = _$1`Impact/Impact_12_Regular_Yellow_400x400.webm`))]
        }
      },
      indicator: {
        chevron: {
          green: [lg(_t2773 || (_t2773 = _$1`UI/3Chevrons_01_Regular_Green_200x200.webm`))],
          purple: [lg(_t2774 || (_t2774 = _$1`UI/3Chevrons_01_Regular_Purple_200x200.webm`))],
          red: [lg(_t2775 || (_t2775 = _$1`UI/3Chevrons_01_Regular_Red_200x200.webm`))],
          yellow: [lg(_t2776 || (_t2776 = _$1`UI/3Chevrons_01_Regular_Yellow_200x200.webm`))]
        },
        '01': {
          green: [lg(_t2777 || (_t2777 = _$1`UI/Indicator_01_Regular_Green_200x200.webm`))],
          purple: [lg(_t2778 || (_t2778 = _$1`UI/Indicator_01_Regular_Purple_200x200.webm`))],
          red: [lg(_t2779 || (_t2779 = _$1`UI/Indicator_01_Regular_Red_200x200.webm`))],
          yellow: [lg(_t2780 || (_t2780 = _$1`UI/Indicator_01_Regular_Yellow_200x200.webm`))]
        },
        '02': {
          green: [lg(_t2781 || (_t2781 = _$1`UI/Indicator01_02_Regular_BlueGreen_400x400.webm`))],
          red: [lg(_t2782 || (_t2782 = _$1`UI/Indicator01_02_Regular_RedYellow_400x400.webm`))]
        },
        '03': {
          green: [lg(_t2783 || (_t2783 = _$1`UI/Indicator01_03_Regular_BlueGreen_200x200.webm`))],
          red: [lg(_t2784 || (_t2784 = _$1`UI/Indicator01_03_Regular_RedYellow_200x200.webm`))]
        },
        '04': {
          green: [lg(_t2785 || (_t2785 = _$1`UI/Indicator02_02_Regular_BlueGreen_400x400.webm`))],
          red: [lg(_t2786 || (_t2786 = _$1`UI/Indicator02_02_Regular_RedYellow_400x400.webm`))]
        },
        '05': {
          green: [lg(_t2787 || (_t2787 = _$1`UI/Indicator02_03_Regular_BlueGreen_200x200.webm`))],
          red: [lg(_t2788 || (_t2788 = _$1`UI/Indicator02_03_Regular_RedYellow_200x200.webm`))]
        },
        '06': {
          green: [lg(_t2789 || (_t2789 = _$1`UI/Indicator03_02_Regular_BlueGreen_400x400.webm`))],
          red: [lg(_t2790 || (_t2790 = _$1`UI/Indicator03_02_Regular_RedYellow_400x400.webm`))]
        },
        '07': {
          green: [lg(_t2791 || (_t2791 = _$1`UI/Indicator03_03_Regular_BlueGreen_200x200.webm`))],
          red: [lg(_t2792 || (_t2792 = _$1`UI/Indicator03_03_Regular_RedYellow_200x200.webm`))]
        }
      },
      outpulse: {
        '01': {
          whiteblue: [lg(_t2793 || (_t2793 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2794 || (_t2794 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2795 || (_t2795 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2796 || (_t2796 = _$1`Template/Circle/OutPulse/OutPulse_01_Regular_TealYellow_Burst_600x600.webm`))]
        },
        '02': {
          whiteblue: [lg(_t2797 || (_t2797 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2798 || (_t2798 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2799 || (_t2799 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2800 || (_t2800 = _$1`Template/Circle/OutPulse/OutPulse_02_Regular_TealYellow_Burst_600x600.webm`))]
        }
      },
      smoke: {
        '01': {
          black: [lg(_t2801 || (_t2801 = _$1`Smoke/SmokePuff01_01_Dark_Black_400x400.webm`))],
          blue: [lg(_t2802 || (_t2802 = _$1`Smoke/SmokePuff01_01_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2803 || (_t2803 = _$1`Smoke/SmokePuff01_01_Dark_Green_400x400.webm`))],
          darkpurple: [lg(_t2804 || (_t2804 = _$1`Smoke/SmokePuff01_01_Dark_Purple_400x400.webm`))],
          grey: [lg(_t2805 || (_t2805 = _$1`Smoke/SmokePuff01_01_Regular_Grey_400x400.webm`))]
        },
        '02': {
          black: [lg(_t2806 || (_t2806 = _$1`Smoke/SmokePuff01_02_Dark_Black_400x400.webm`))],
          blue: [lg(_t2807 || (_t2807 = _$1`Smoke/SmokePuff01_02_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2808 || (_t2808 = _$1`Smoke/SmokePuff01_02_Dark_Green_400x400.webm`))],
          darkpurple: [lg(_t2809 || (_t2809 = _$1`Smoke/SmokePuff01_02_Dark_Purple_400x400.webm`))],
          grey: [lg(_t2810 || (_t2810 = _$1`Smoke/SmokePuff01_02_Regular_Grey_400x400.webm`))]
        },
        '03': {
          black: [lg(_t2811 || (_t2811 = _$1`Smoke/SmokePuff01_03_Dark_Black_400x400.webm`))],
          blue: [lg(_t2812 || (_t2812 = _$1`Smoke/SmokePuff01_03_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2813 || (_t2813 = _$1`Smoke/SmokePuff01_03_Dark_Green_400x400.webm`))],
          darkpurple: [lg(_t2814 || (_t2814 = _$1`Smoke/SmokePuff01_03_Dark_Purple_400x400.webm`))],
          grey: [lg(_t2815 || (_t2815 = _$1`Smoke/SmokePuff01_03_Regular_Grey_400x400.webm`))]
        }
      },
      ui: {
        drop: {
          green: [lg(_t2816 || (_t2816 = _$1`UI/IconDrop_01_Dark_Green_200x200.webm`))],
          red: [lg(_t2817 || (_t2817 = _$1`UI/IconDrop_01_Regular_Red_200x200.webm`))]
        },
        fear: {
          darkorange: [lg(_t2818 || (_t2818 = _$1`UI/IconFear_01_Dark_Orange_200x200.webm`))],
          orange: [lg(_t2819 || (_t2819 = _$1`UI/IconFear_01_Regular_Orange_200x200.webm`))],
          darkpurple: [lg(_t2820 || (_t2820 = _$1`UI/IconFear_01_Dark_Purple_200x200.webm`))]
        },
        heart: {
          darkred: [lg(_t2821 || (_t2821 = _$1`UI/IconHeart_01_Dark_Red_200x200.webm`))],
          pink: [lg(_t2822 || (_t2822 = _$1`UI/IconHeart_01_Regular_Pink_200x200.webm`))],
          teal: [lg(_t2823 || (_t2823 = _$1`UI/IconHeart_01_Regular_Teal_200x200.webm`))]
        },
        horror: {
          darkteal: [lg(_t2824 || (_t2824 = _$1`UI/IconHorror_01_Dark_Teal_200x200.webm`))],
          purple: [lg(_t2825 || (_t2825 = _$1`UI/IconHorror_01_Regular_Purple_200x200.webm`))],
          teal: [lg(_t2826 || (_t2826 = _$1`UI/IconHorror_01_Regular_Teal_200x200.webm`))]
        },
        music: {
          blue: [lg(_t2827 || (_t2827 = _$1`UI/IconMusicNote_01_Regular_Blue_200x200.webm`))],
          darkred: [lg(_t2828 || (_t2828 = _$1`UI/IconMusicNote_01_Dark_Red_200x200.webm`))],
          purple: [lg(_t2829 || (_t2829 = _$1`UI/IconMusicNote_01_Regular_Purple_200x200.webm`))]
        },
        poison: {
          darkgreen: [lg(_t2830 || (_t2830 = _$1`UI/IconPoison_01_Dark_Green_200x200.webm`))],
          purple: [lg(_t2831 || (_t2831 = _$1`UI/IconPoison_01_Regular_Purple_200x200.webm`))]
        },
        rune01: {
          black: [lg(_t2832 || (_t2832 = _$1`UI/IconRunes_01_Dark_Black_200x200.webm`))],
          blue: [lg(_t2833 || (_t2833 = _$1`UI/IconRunes_01_Regular_Blue_200x200.webm`))],
          darkorange: [lg(_t2834 || (_t2834 = _$1`UI/IconRunes_01_Dark_Orange_200x200.webm`))],
          darkred: [lg(_t2835 || (_t2835 = _$1`UI/IconRunes_01_Dark_Red_200x200.webm`))],
          green: [lg(_t2836 || (_t2836 = _$1`UI/IconRunes_01_Regular_Green02_200x200.webm`))],
          orange: [lg(_t2837 || (_t2837 = _$1`UI/IconRunes_01_Regular_Orange_200x200.webm`))],
          red: [lg(_t2838 || (_t2838 = _$1`UI/IconRunes_01_Regular_Red_200x200.webm`))],
          white: [lg(_t2839 || (_t2839 = _$1`UI/IconRunes_01_Regular_White_200x200.webm`))],
          yellow: [lg(_t2840 || (_t2840 = _$1`UI/IconRunes_01_Regular_Yellow_200x200.webm`))]
        },
        rune02: {
          black: [lg(_t2841 || (_t2841 = _$1`UI/IconRunes02_01_Dark_Black_200x200.webm`))],
          blue: [lg(_t2842 || (_t2842 = _$1`UI/IconRunes02_01_Regular_Blue_200x200.webm`))],
          darkorange: [lg(_t2843 || (_t2843 = _$1`UI/IconRunes02_01_Dark_Orange_200x200.webm`))],
          darkred: [lg(_t2844 || (_t2844 = _$1`UI/IconRunes02_01_Dark_Red_200x200.webm`))],
          green: [lg(_t2845 || (_t2845 = _$1`UI/IconRunes02_01_Regular_Green02_200x200.webm`))],
          orange: [lg(_t2846 || (_t2846 = _$1`UI/IconRunes02_01_Regular_Orange_200x200.webm`))],
          red: [lg(_t2847 || (_t2847 = _$1`UI/IconRunes02_01_Regular_Red_200x200.webm`))],
          white: [lg(_t2848 || (_t2848 = _$1`UI/IconRunes02_01_Regular_White_200x200.webm`))],
          yellow: [lg(_t2849 || (_t2849 = _$1`UI/IconRunes02_01_Regular_Yellow_200x200.webm`))]
        },
        rune03: {
          black: [lg(_t2850 || (_t2850 = _$1`UI/IconRunes03_01_Dark_Black_200x200.webm`))],
          blue: [lg(_t2851 || (_t2851 = _$1`UI/IconRunes03_01_Regular_Blue_200x200.webm`))],
          darkorange: [lg(_t2852 || (_t2852 = _$1`UI/IconRunes03_01_Dark_Orange_200x200.webm`))],
          darkred: [lg(_t2853 || (_t2853 = _$1`UI/IconRunes03_01_Dark_Red_200x200.webm`))],
          green: [lg(_t2854 || (_t2854 = _$1`UI/IconRunes03_01_Regular_Green02_200x200.webm`))],
          orange: [lg(_t2855 || (_t2855 = _$1`UI/IconRunes03_01_Regular_Orange_200x200.webm`))],
          red: [lg(_t2856 || (_t2856 = _$1`UI/IconRunes03_01_Regular_Red_200x200.webm`))],
          white: [lg(_t2857 || (_t2857 = _$1`UI/IconRunes03_01_Regular_White_200x200.webm`))],
          yellow: [lg(_t2858 || (_t2858 = _$1`UI/IconRunes03_01_Regular_Yellow_200x200.webm`))]
        },
        shields: {
          darkred: [lg(_t2859 || (_t2859 = _$1`UI/IconShield_01_Dark_Red_200x200.webm`))],
          green: [lg(_t2860 || (_t2860 = _$1`UI/IconShield_01_Regular_Green_200x200.webm`))]
        },
        crackedshield: {
          darkred: [lg(_t2861 || (_t2861 = _$1`UI/IconShieldCracked_01_Dark_Red_200x200.webm`))],
          purple: [lg(_t2862 || (_t2862 = _$1`UI/IconShieldCracked_01_Regular_Purple_200x200.webm`))]
        },
        skull: {
          darkgreen: [lg(_t2863 || (_t2863 = _$1`UI/IconSkull_01_Dark_Green_200x200.webm`))],
          darkorange: [lg(_t2864 || (_t2864 = _$1`UI/IconSkull_01_Dark_Orange_200x200.webm`))],
          purple: [lg(_t2865 || (_t2865 = _$1`UI/IconSkull_01_Regular_Purple_200x200.webm`))]
        },
        snowflake: {
          darkblue: [lg(_t2866 || (_t2866 = _$1`UI/IconSnowflake_01_Dark_Blue_200x200.webm`))],
          blue: [lg(_t2867 || (_t2867 = _$1`UI/IconSnowflake_01_Regular_Blue_200x200.webm`))]
        },
        stun: {
          darkteal: [lg(_t2868 || (_t2868 = _$1`UI/IconStun_01_Dark_Teal_200x200.webm`))],
          purple: [lg(_t2869 || (_t2869 = _$1`UI/IconStun_01_Regular_Purple_200x200.webm`))]
        }
      },
      vortex: {
        loop: {
          blue: [lg(_t2870 || (_t2870 = _$1`Template/Circle/Vortex_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2871 || (_t2871 = _$1`Template/Circle/Vortex_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2872 || (_t2872 = _$1`Template/Circle/Vortex_01_Regular_Purple_600x600.webm`))]
        },
        intro: {
          blue: [lg(_t2873 || (_t2873 = _$1`Template/Circle/VortexIntro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2874 || (_t2874 = _$1`Template/Circle/VortexIntro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2875 || (_t2875 = _$1`Template/Circle/VortexIntro_01_Regular_Purple_600x600.webm`))]
        },
        outro: {
          blue: [lg(_t2876 || (_t2876 = _$1`Template/Circle/VortexOutro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2877 || (_t2877 = _$1`Template/Circle/VortexOutro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2878 || (_t2878 = _$1`Template/Circle/VortexOutro_01_Regular_Purple_600x600.webm`))]
        }
      },
      whirl: {
        loop: {
          black: [lg(_t2879 || (_t2879 = _$1`Template/Circle/Whirl_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2880 || (_t2880 = _$1`Template/Circle/Whirl_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2881 || (_t2881 = _$1`Template/Circle/Whirl_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2882 || (_t2882 = _$1`Template/Circle/Whirl_01_Regular_Purple_600x600.webm`))]
        },
        intro: {
          black: [lg(_t2883 || (_t2883 = _$1`Template/Circle/WhirlIntro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2884 || (_t2884 = _$1`Template/Circle/WhirlIntro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2885 || (_t2885 = _$1`Template/Circle/WhirlIntro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2886 || (_t2886 = _$1`Template/Circle/WhirlIntro_01_Regular_Purple_600x600.webm`))]
        },
        outro: {
          black: [lg(_t2887 || (_t2887 = _$1`Template/Circle/WhirlOutro_01_Dark_Black_600x600.webm`))],
          blue: [lg(_t2888 || (_t2888 = _$1`Template/Circle/WhirlOutro_01_Regular_Blue_600x600.webm`))],
          green: [lg(_t2889 || (_t2889 = _$1`Template/Circle/WhirlOutro_01_Regular_Green_600x600.webm`))],
          purple: [lg(_t2890 || (_t2890 = _$1`Template/Circle/WhirlOutro_01_Regular_Purple_600x600.webm`))]
        }
      }
    },
    ice: {
      icespikes: {
        '01': {
          blue: [lg(_t2891 || (_t2891 = _$1`Ice/IceSpikesRadialBurst_01_Regular_Blue_1000x1000.webm`))],
          red: [lg(_t2892 || (_t2892 = _$1`Ice/IceSpikesRadialBurst_01_Regular_Red_1000x1000.webm`))],
          white: [lg(_t2893 || (_t2893 = _$1`Ice/IceSpikesRadialBurst_01_Regular_White_1000x1000.webm`))]
        }
      },
      snowflake: {
        '01': {
          whiteblue: [lg(_t2894 || (_t2894 = _$1`Ice/SnowflakeBurst_01_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t2895 || (_t2895 = _$1`Ice/SnowflakeBurst_01_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t2896 || (_t2896 = _$1`Ice/SnowflakeBurst_01_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t2897 || (_t2897 = _$1`Ice/SnowflakeBurst_01_Regular_TealYellow_Burst_600x600.webm`))]
        }
      }
    },
    lightning: {
      ball: {
        '01': {
          blue: [lg(_t2898 || (_t2898 = _$1`Lightning/LightningBall_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2899 || (_t2899 = _$1`Lightning/LightningBall_01_Regular_Green_400x400.webm`))],
          darkgreen: [lg(_t2900 || (_t2900 = _$1`Lightning/LightningBall_01_Regular_Green02_400x400.webm`))],
          darkpurple: [lg(_t2901 || (_t2901 = _$1`Lightning/LightningBall_01_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2902 || (_t2902 = _$1`Lightning/LightningBall_01_Dark_Red_400x400.webm`))],
          orange: [lg(_t2903 || (_t2903 = _$1`Lightning/LightningBall_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2904 || (_t2904 = _$1`Lightning/LightningBall_01_Regular_Purple_400x400.webm`))],
          red: [lg(_t2905 || (_t2905 = _$1`Lightning/LightningBall_01_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2906 || (_t2906 = _$1`Lightning/LightningBall_01_Regular_Yellow_400x400.webm`))]
        }
      },
      strike: {
        '01': {
          blue: [lg(_t2907 || (_t2907 = _$1`Lightning/LightningStrike01_01_Regular_Blue_800x800.webm`)), lg(_t2908 || (_t2908 = _$1`Lightning/LightningStrike01_02_Regular_Blue_800x800.webm`)), lg(_t2909 || (_t2909 = _$1`Lightning/LightningStrike01_03_Regular_Blue_800x800.webm`)), lg(_t2910 || (_t2910 = _$1`Lightning/LightningStrike01_04_Regular_Blue_800x800.webm`)), lg(_t2911 || (_t2911 = _$1`Lightning/LightningStrike01_05_Regular_Blue_800x800.webm`)), lg(_t2912 || (_t2912 = _$1`Lightning/LightningStrike01_06_Regular_Blue_800x800.webm`))],
          purple: [lg(_t2913 || (_t2913 = _$1`Lightning/LightningStrike01_01_Regular_Purple_800x800.webm`)), lg(_t2914 || (_t2914 = _$1`Lightning/LightningStrike01_02_Regular_Purple_800x800.webm`)), lg(_t2915 || (_t2915 = _$1`Lightning/LightningStrike01_03_Regular_Purple_800x800.webm`)), lg(_t2916 || (_t2916 = _$1`Lightning/LightningStrike01_04_Regular_Purple_800x800.webm`)), lg(_t2917 || (_t2917 = _$1`Lightning/LightningStrike01_05_Regular_Purple_800x800.webm`)), lg(_t2918 || (_t2918 = _$1`Lightning/LightningStrike01_06_Regular_Purple_800x800.webm`))],
          yellow: [lg(_t2919 || (_t2919 = _$1`Lightning/LightningStrike01_01_Regular_Yellow_800x800.webm`)), lg(_t2920 || (_t2920 = _$1`Lightning/LightningStrike01_02_Regular_Yellow_800x800.webm`)), lg(_t2921 || (_t2921 = _$1`Lightning/LightningStrike01_03_Regular_Yellow_800x800.webm`)), lg(_t2922 || (_t2922 = _$1`Lightning/LightningStrike01_04_Regular_Yellow_800x800.webm`)), lg(_t2923 || (_t2923 = _$1`Lightning/LightningStrike01_05_Regular_Yellow_800x800.webm`)), lg(_t2924 || (_t2924 = _$1`Lightning/LightningStrike01_06_Regular_Yellow_800x800.webm`))]
        }
      },
      staticelectricity: {
        '01': {
          blue: [lg(_t2925 || (_t2925 = _$1`Lightning/StaticElectricity_01_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2926 || (_t2926 = _$1`Lightning/StaticElectricity_01_Regular_Green02_400x400.webm`))],
          darkpurple: [lg(_t2927 || (_t2927 = _$1`Lightning/StaticElectricity_01_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2928 || (_t2928 = _$1`Lightning/StaticElectricity_01_Dark_Red_400x400.webm`))],
          green: [lg(_t2929 || (_t2929 = _$1`Lightning/StaticElectricity_01_Regular_Green_400x400.webm`))],
          orange: [lg(_t2930 || (_t2930 = _$1`Lightning/StaticElectricity_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2931 || (_t2931 = _$1`Lightning/StaticElectricity_01_Regular_Purple_400x400.webm`))],
          red: [lg(_t2932 || (_t2932 = _$1`Lightning/StaticElectricity_01_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2933 || (_t2933 = _$1`Lightning/StaticElectricity_01_Regular_Red_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t2934 || (_t2934 = _$1`Lightning/StaticElectricity_02_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2935 || (_t2935 = _$1`Lightning/StaticElectricity_02_Regular_Green02_400x400.webm`))],
          darkpurple: [lg(_t2936 || (_t2936 = _$1`Lightning/StaticElectricity_02_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2937 || (_t2937 = _$1`Lightning/StaticElectricity_02_Dark_Red_400x400.webm`))],
          green: [lg(_t2938 || (_t2938 = _$1`Lightning/StaticElectricity_02_Regular_Green_400x400.webm`))],
          orange: [lg(_t2939 || (_t2939 = _$1`Lightning/StaticElectricity_02_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2940 || (_t2940 = _$1`Lightning/StaticElectricity_02_Regular_Purple_400x400.webm`))],
          red: [lg(_t2941 || (_t2941 = _$1`Lightning/StaticElectricity_02_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2942 || (_t2942 = _$1`Lightning/StaticElectricity_02_Regular_Red_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t2943 || (_t2943 = _$1`Lightning/StaticElectricity_03_Regular_Blue_400x400.webm`))],
          darkgreen: [lg(_t2944 || (_t2944 = _$1`Lightning/StaticElectricity_03_Regular_Green02_400x400.webm`))],
          darkpurple: [lg(_t2945 || (_t2945 = _$1`Lightning/StaticElectricity_03_Dark_Purple_400x400.webm`))],
          darkred: [lg(_t2946 || (_t2946 = _$1`Lightning/StaticElectricity_03_Dark_Red_400x400.webm`))],
          green: [lg(_t2947 || (_t2947 = _$1`Lightning/StaticElectricity_03_Regular_Green_400x400.webm`))],
          orange: [lg(_t2948 || (_t2948 = _$1`Lightning/StaticElectricity_03_Regular_Orange_400x400.webm`))],
          purple: [lg(_t2949 || (_t2949 = _$1`Lightning/StaticElectricity_03_Regular_Purple_400x400.webm`))],
          red: [lg(_t2950 || (_t2950 = _$1`Lightning/StaticElectricity_03_Regular_Red_400x400.webm`))],
          yellow: [lg(_t2951 || (_t2951 = _$1`Lightning/StaticElectricity_03_Regular_Red_400x400.webm`))]
        }
      }
    },
    liquid: {
      splash: {
        '01': {
          blue: [lg(_t2952 || (_t2952 = _$1`Liquid/LiquidSplash01_Regular_Blue_400x400.webm`))],
          green: [lg(_t2953 || (_t2953 = _$1`Liquid/LiquidSplash01_Regular_Green_400x400.webm`))],
          brightgreen: [lg(_t2954 || (_t2954 = _$1`Liquid/LiquidSplash01_Bright_Green_400x400.webm`))],
          brightblue: [lg(_t2955 || (_t2955 = _$1`Liquid/LiquidSplash01_Bright_Blue_400x400.webm`))],
          purple: [lg(_t2956 || (_t2956 = _$1`Liquid/LiquidSplash01_Bright_Purple_400x400.webm`))],
          red: [lg(_t2957 || (_t2957 = _$1`Liquid/LiquidSplash01_Regular_Red_400x400.webm`))]
        }
      }
    },
    magicsign: {
      abjuration: {
        '01': {
          blue: [lg(_t2958 || (_t2958 = _$1`Magic_Signs/Abjuration_01_Blue_Circle_800x800.webm`))],
          green: [lg(_t2959 || (_t2959 = _$1`Magic_Signs/Abjuration_01_Green_Circle_800x800.webm`))],
          red: [lg(_t2960 || (_t2960 = _$1`Magic_Signs/Abjuration_01_Red_Circle_800x800.webm`))]
        },
        '02': {
          blue: [lg(_t2961 || (_t2961 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2962 || (_t2962 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2963 || (_t2963 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2964 || (_t2964 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2965 || (_t2965 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2966 || (_t2966 = _$1`Magic_Signs/AbjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      conjuration: {
        '01': {
          yellow: [lg(_t2967 || (_t2967 = _$1`Magic_Signs/Conjuration_01_Yellow_Circle_800x800.webm`))]
        },
        '02': {
          blue: [lg(_t2968 || (_t2968 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2969 || (_t2969 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2970 || (_t2970 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2971 || (_t2971 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2972 || (_t2972 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2973 || (_t2973 = _$1`Magic_Signs/ConjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      divination: {
        '01': {
          lightblue: [lg(_t2974 || (_t2974 = _$1`Magic_Signs/Divination_01_Light_Blue_Circle_800x800.webm`))]
        },
        '02': {
          blue: [lg(_t2975 || (_t2975 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2976 || (_t2976 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2977 || (_t2977 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2978 || (_t2978 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2979 || (_t2979 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2980 || (_t2980 = _$1`Magic_Signs/DivinationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      enchantment: {
        '02': {
          blue: [lg(_t2981 || (_t2981 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2982 || (_t2982 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2983 || (_t2983 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2984 || (_t2984 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2985 || (_t2985 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2986 || (_t2986 = _$1`Magic_Signs/EnchantmentCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      evocation: {
        '02': {
          blue: [lg(_t2987 || (_t2987 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2988 || (_t2988 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2989 || (_t2989 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2990 || (_t2990 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2991 || (_t2991 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2992 || (_t2992 = _$1`Magic_Signs/EvocationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      illusion: {
        '02': {
          blue: [lg(_t2993 || (_t2993 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t2994 || (_t2994 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t2995 || (_t2995 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t2996 || (_t2996 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t2997 || (_t2997 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t2998 || (_t2998 = _$1`Magic_Signs/IllusionCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      necromancy: {
        '02': {
          blue: [lg(_t2999 || (_t2999 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t3000 || (_t3000 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t3001 || (_t3001 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t3002 || (_t3002 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t3003 || (_t3003 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t3004 || (_t3004 = _$1`Magic_Signs/NecromancyCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      transmutation: {
        '02': {
          blue: [lg(_t3005 || (_t3005 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Blue_800x800.webm`))],
          green: [lg(_t3006 || (_t3006 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Green_800x800.webm`))],
          pink: [lg(_t3007 || (_t3007 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Pink_800x800.webm`))],
          purple: [lg(_t3008 || (_t3008 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Purple_800x800.webm`))],
          red: [lg(_t3009 || (_t3009 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Red_800x800.webm`))],
          yellow: [lg(_t3010 || (_t3010 = _$1`Magic_Signs/TransmutationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      }
    },
    marker: {
      bubble: {
        '01': {
          blue: [lg(_t3011 || (_t3011 = _$1`Marker/MarkerBubble_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t3012 || (_t3012 = _$1`Marker/MarkerBubble_01_Regular_Green_400x400.webm`))],
          rainbow: [lg(_t3013 || (_t3013 = _$1`Marker/MarkerBubble_01_Regular_Rainbow_400x400.webm`))]
        }
      },
      circleofstars: {
        '01': {
          blue: [lg(_t3014 || (_t3014 = _$1`Marker/MarkerCircleOfStars_Regular_Blue_400x400.webm`))],
          green: [lg(_t3015 || (_t3015 = _$1`Marker/MarkerCircleOfStars_Regular_Green_400x400.webm`))],
          greenorange: [lg(_t3016 || (_t3016 = _$1`Marker/MarkerCircleOfStars_Regular_GreenOrange_400x400.webm`))],
          orangepurple: [lg(_t3017 || (_t3017 = _$1`Marker/MarkerCircleOfStars_Regular_OrangePurple_400x400.webm`))],
          purplegreen: [lg(_t3018 || (_t3018 = _$1`Marker/MarkerCircleOfStars_Regular_PurpleGreen_400x400.webm`))],
          yellowblue: [lg(_t3019 || (_t3019 = _$1`Marker/MarkerCircleOfStars_Regular_YellowBlue_400x400.webm`))]
        }
      },
      energystrand: {
        '01': {
          blue: [lg(_t3020 || (_t3020 = _$1`Marker/EnergyStrands_01_Regular_Blue_600x600.webm`))],
          blueorange: [lg(_t3021 || (_t3021 = _$1`Marker/EnergyStrands_01_Regular_BlueOrange_600x600.webm`))],
          darkred: [lg(_t3022 || (_t3022 = _$1`Marker/EnergyStrands_01_Dark_Red_600x600.webm`))],
          orange: [lg(_t3023 || (_t3023 = _$1`Marker/EnergyStrands_01_Regular_Orange_600x600.webm`))],
          pinkyellow: [lg(_t3024 || (_t3024 = _$1`Marker/EnergyStrands_01_Regular_PinkYellow_600x600.webm`))],
          purple: [lg(_t3025 || (_t3025 = _$1`Marker/EnergyStrands_01_Regular_Purple_600x600.webm`))]
        }
      },
      music: {
        '01': {
          darkred: [lg(_t3026 || (_t3026 = _$1`Marker/MusicMarker_01_Dark_Red_400x400.webm`))],
          yellowblue: [lg(_t3027 || (_t3027 = _$1`Marker/MusicMarker_01_Regular_BlueYellow_400x400.webm`))],
          greenorange: [lg(_t3028 || (_t3028 = _$1`Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm`))],
          pink: [lg(_t3029 || (_t3029 = _$1`Marker/MusicMarker_01_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t3030 || (_t3030 = _$1`Marker/MusicMarker_01_Regular_PurplePink_400x400.webm`))]
        }
      },
      standard: {
        '01': {
          whiteblue: [lg(_t3031 || (_t3031 = _$1`Marker/Marker_01_Dark_BlueWhite_400x400.webm`))],
          yellowblue: [lg(_t3032 || (_t3032 = _$1`Marker/Marker_01_Regular_BlueYellow_400x400.webm`))],
          greenorange: [lg(_t3033 || (_t3033 = _$1`Marker/Marker_01_Regular_GreenOrange_400x400.webm`))],
          pink: [lg(_t3034 || (_t3034 = _$1`Marker/Marker_01_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t3035 || (_t3035 = _$1`Marker/Marker_01_Regular_PurplePink_400x400.webm`))],
          red: [lg(_t3036 || (_t3036 = _$1`Marker/Marker_01_Regular_Red_400x400.webm`))]
        },
        '02': {
          whiteblue: [lg(_t3037 || (_t3037 = _$1`Marker/Marker_02_Dark_BlueWhite_400x400.webm`))],
          yellowblue: [lg(_t3038 || (_t3038 = _$1`Marker/Marker_02_Regular_BlueYellow_400x400.webm`))],
          greenorange: [lg(_t3039 || (_t3039 = _$1`Marker/Marker_02_Regular_GreenOrange_400x400.webm`))],
          pink: [lg(_t3040 || (_t3040 = _$1`Marker/Marker_02_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t3041 || (_t3041 = _$1`Marker/Marker_02_Regular_PurplePink_400x400.webm`))],
          pink: [lg(_t3042 || (_t3042 = _$1`Marker/Marker_02_Regular_Red_400x400.webm`))]
        }
      }
    },
    music: {
      notes: {
        '01': {
          blue: [lg(_t3043 || (_t3043 = _$1`Music_Notation/BassClef_01_Regular_Blue_200x200.webm`)), lg(_t3044 || (_t3044 = _$1`Music_Notation/BeamedQuavers_01_Regular_Blue_200x200.webm`)), lg(_t3045 || (_t3045 = _$1`Music_Notation/Crotchet_01_Regular_Blue_200x200.webm`)), lg(_t3046 || (_t3046 = _$1`Music_Notation/Flat_01_Regular_Blue_200x200.webm`)), lg(_t3047 || (_t3047 = _$1`Music_Notation/Quaver_01_Regular_Blue_200x200.webm`)), lg(_t3048 || (_t3048 = _$1`Music_Notation/Sharp_01_Regular_Blue_200x200.webm`)), lg(_t3049 || (_t3049 = _$1`Music_Notation/TrebleClef_01_Regular_Blue_200x200.webm`))],
          green: [lg(_t3050 || (_t3050 = _$1`Music_Notation/BassClef_01_Regular_Green_200x200.webm`)), lg(_t3051 || (_t3051 = _$1`Music_Notation/BeamedQuavers_01_Regular_Green_200x200.webm`)), lg(_t3052 || (_t3052 = _$1`Music_Notation/Crotchet_01_Regular_Green_200x200.webm`)), lg(_t3053 || (_t3053 = _$1`Music_Notation/Flat_01_Regular_Green_200x200.webm`)), lg(_t3054 || (_t3054 = _$1`Music_Notation/Quaver_01_Regular_Green_200x200.webm`)), lg(_t3055 || (_t3055 = _$1`Music_Notation/Sharp_01_Regular_Green_200x200.webm`)), lg(_t3056 || (_t3056 = _$1`Music_Notation/TrebleClef_01_Regular_Green_200x200.webm`))],
          orange: [lg(_t3057 || (_t3057 = _$1`Music_Notation/BassClef_01_Regular_Orange_200x200.webm`)), lg(_t3058 || (_t3058 = _$1`Music_Notation/BeamedQuavers_01_Regular_Orange_200x200.webm`)), lg(_t3059 || (_t3059 = _$1`Music_Notation/Crotchet_01_Regular_Orange_200x200.webm`)), lg(_t3060 || (_t3060 = _$1`Music_Notation/Flat_01_Regular_Orange_200x200.webm`)), lg(_t3061 || (_t3061 = _$1`Music_Notation/Quaver_01_Regular_Orange_200x200.webm`)), lg(_t3062 || (_t3062 = _$1`Music_Notation/Sharp_01_Regular_Orange_200x200.webm`)), lg(_t3063 || (_t3063 = _$1`Music_Notation/TrebleClef_01_Regular_Orange_200x200.webm`))],
          purple: [lg(_t3064 || (_t3064 = _$1`Music_Notation/BassClef_01_Regular_Purple_200x200.webm`)), lg(_t3065 || (_t3065 = _$1`Music_Notation/BeamedQuavers_01_Regular_Purple_200x200.webm`)), lg(_t3066 || (_t3066 = _$1`Music_Notation/Crotchet_01_Regular_Purple_200x200.webm`)), lg(_t3067 || (_t3067 = _$1`Music_Notation/Flat_01_Regular_Purple_200x200.webm`)), lg(_t3068 || (_t3068 = _$1`Music_Notation/Quaver_01_Regular_Purple_200x200.webm`)), lg(_t3069 || (_t3069 = _$1`Music_Notation/Sharp_01_Regular_Purple_200x200.webm`)), lg(_t3070 || (_t3070 = _$1`Music_Notation/TrebleClef_01_Regular_Purple_200x200.webm`))]
        }
      }
    },
    particles: {
      dots: {
        '01': {
          blue: [lg(_t3071 || (_t3071 = _$1`Particles/ParticlesOutward01_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t3072 || (_t3072 = _$1`Particles/ParticlesOutward01_01_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3073 || (_t3073 = _$1`Particles/ParticlesOutward01_01_Regular_Orange_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t3074 || (_t3074 = _$1`Particles/ParticlesOutward01_02_Regular_Blue_400x400.webm`))],
          green: [lg(_t3075 || (_t3075 = _$1`Particles/ParticlesOutward01_02_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3076 || (_t3076 = _$1`Particles/ParticlesOutward01_02_Regular_Orange_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t3077 || (_t3077 = _$1`Particles/ParticlesOutward01_03_Regular_Blue_400x400.webm`))],
          green: [lg(_t3078 || (_t3078 = _$1`Particles/ParticlesOutward01_03_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3079 || (_t3079 = _$1`Particles/ParticlesOutward01_03_Regular_Orange_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t3080 || (_t3080 = _$1`Particles/ParticlesOutward01_04_Regular_Blue_400x400.webm`))],
          green: [lg(_t3081 || (_t3081 = _$1`Particles/ParticlesOutward01_04_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3082 || (_t3082 = _$1`Particles/ParticlesOutward01_04_Regular_Orange_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t3083 || (_t3083 = _$1`Particles/ParticlesOutward01_05_Regular_Blue_400x400.webm`))],
          green: [lg(_t3084 || (_t3084 = _$1`Particles/ParticlesOutward01_05_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3085 || (_t3085 = _$1`Particles/ParticlesOutward01_05_Regular_Orange_400x400.webm`))]
        }
      },
      stars: {
        '01': {
          blue: [lg(_t3086 || (_t3086 = _$1`Particles/ParticlesOutward02_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t3087 || (_t3087 = _$1`Particles/ParticlesOutward02_01_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3088 || (_t3088 = _$1`Particles/ParticlesOutward02_01_Regular_Orange_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t3089 || (_t3089 = _$1`Particles/ParticlesOutward02_02_Regular_Blue_400x400.webm`))],
          green: [lg(_t3090 || (_t3090 = _$1`Particles/ParticlesOutward02_02_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3091 || (_t3091 = _$1`Particles/ParticlesOutward02_02_Regular_Orange_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t3092 || (_t3092 = _$1`Particles/ParticlesOutward02_03_Regular_Blue_400x400.webm`))],
          green: [lg(_t3093 || (_t3093 = _$1`Particles/ParticlesOutward02_03_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3094 || (_t3094 = _$1`Particles/ParticlesOutward02_03_Regular_Orange_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t3095 || (_t3095 = _$1`Particles/ParticlesOutward02_04_Regular_Blue_400x400.webm`))],
          green: [lg(_t3096 || (_t3096 = _$1`Particles/ParticlesOutward02_04_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3097 || (_t3097 = _$1`Particles/ParticlesOutward02_04_Regular_Orange_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t3098 || (_t3098 = _$1`Particles/ParticlesOutward02_05_Regular_Blue_400x400.webm`))],
          green: [lg(_t3099 || (_t3099 = _$1`Particles/ParticlesOutward02_05_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3100 || (_t3100 = _$1`Particles/ParticlesOutward02_05_Regular_Orange_400x400.webm`))]
        }
      },
      swirl: {
        '01': {
          blue: [lg(_t3101 || (_t3101 = _$1`Particles/ParticlesSwirl01_01_Regular_Blue_400x400.webm`))],
          greenyellow: [lg(_t3102 || (_t3102 = _$1`Particles/ParticlesSwirl01_01_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3103 || (_t3103 = _$1`Particles/ParticlesSwirl01_01_Regular_Orange_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t3104 || (_t3104 = _$1`Particles/ParticlesSwirl02_01_Regular_Blue_400x400.webm`))],
          green: [lg(_t3105 || (_t3105 = _$1`Particles/ParticlesSwirl02_01_Regular_GreenYellow_400x400.webm`))],
          orange: [lg(_t3106 || (_t3106 = _$1`Particles/ParticlesSwirl02_01_Regular_Orange_400x400.webm`))]
        }
      }
    },
    shieldfx: {
      eldritchweb: {
        '01': {
          darkgreen: [lg(_t3107 || (_t3107 = _$1`Energy/ShieldEldritchWebAbove01_01_Dark_Green_400x400.webm`))],
          darkpurple: [lg(_t3108 || (_t3108 = _$1`Energy/ShieldEldritchWebAbove01_01_Dark_Purple_400x400.webm`))]
        },
        '03': {
          darkgreen: [lg(_t3109 || (_t3109 = _$1`Energy/ShieldEldritchWebAbove01_03_Dark_Green_400x400.webm`))],
          darkpurple: [lg(_t3110 || (_t3110 = _$1`Energy/ShieldEldritchWebAbove01_03_Dark_Purple_400x400.webm`))]
        }
      },

      /*
      shieldeldritchwebbottom: {
          '01': {
              darkgreen: [lg`Energy/ShieldEldritchWebBelow01_02_Dark_Green_400x400.webm`],
              darkpurple: [lg`Energy/ShieldEldritchWebBelow01_02_Dark_Purple_400x400.webm`],
          },
          '03': {
              darkgreen: [lg`Energy/ShieldEldritchWebBelow01_03_Dark_Green_400x400.webm`],
              darkpurple: [lg`Energy/ShieldEldritchWebBelow01_03_Dark_Purple_400x400.webm`],
          }
      },
      */
      fire: {
        '01': {
          darkgreen: [lg(_t3111 || (_t3111 = _$1`Fire/ShieldFireAbove01_01_Dark_Green_400x400.webm`))],
          orange: [lg(_t3112 || (_t3112 = _$1`Fire/ShieldFireAbove01_01_Regular_Orange_400x400.webm`))]
        },
        '03': {
          darkgreen: [lg(_t3113 || (_t3113 = _$1`Fire/ShieldFireAbove01_03_Dark_Green_400x400.webm`))],
          orange: [lg(_t3114 || (_t3114 = _$1`Fire/ShieldFireAbove01_03_Regular_Orange_400x400.webm`))]
        }
      },

      /*
      shieldfirebottom: {
          '01': {
              darkgreen: [lg`Fire/ShieldFireBelow01_02_Dark_Green_400x400.webm`],
              orange: [lg`Fire/ShieldFireBelow01_02_Regular_Orange_400x400.webm`],
          },
          '03': {
              darkgreen: [lg`Fire/ShieldFireBelow01_03_Dark_Green_400x400.webm`],
              orange: [lg`Fire/ShieldFireBelow01_03_Regular_Orange_400x400.webm`],
          },
      },
      */
      earth: {
        '01': {
          darkorange: [lg(_t3115 || (_t3115 = _$1`Fire/ShieldMoltenEarthAbove01_01_Dark_Orange_400x400.webm`))],
          orange: [lg(_t3116 || (_t3116 = _$1`Fire/ShieldMoltenEarthAbove01_01_Regular_Orange_400x400.webm`))]
        },
        '03': {
          darkorange: [lg(_t3117 || (_t3117 = _$1`Fire/ShieldMoltenEarthAbove01_03_Dark_Orange_400x400.webm`))],
          orange: [lg(_t3118 || (_t3118 = _$1`Fire/ShieldMoltenEarthAbove01_03_Regular_Orange_400x400.webm`))]
        }
      },

      /*
      shieldearthbottom: {
          '01': {
              darkorange: [lg`Fire/ShieldMoltenEarthBelow01_02_Dark_Orange_400x400.webm`],
              orange: [lg`Fire/ShieldMoltenEarthBelow01_02_Regular_Orange_400x400.webm`],
          },
          '03': {
              darkorange: [lg`Fire/ShieldMoltenEarthBelow01_03_Dark_Orange_400x400.webm`],
              orange: [lg`Fire/ShieldMoltenEarthBelow01_03_Regular_Orange_400x400.webm`],
          },
      },
      */
      ice: {
        '01': {
          blue: [lg(_t3119 || (_t3119 = _$1`Ice/ShieldIceAbove01_01_Regular_Blue_400x400.webm`))],
          purple: [lg(_t3120 || (_t3120 = _$1`Ice/ShieldIceAbove01_01_Regular_Purple_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t3121 || (_t3121 = _$1`Ice/ShieldIceAbove01_03_Regular_Blue_400x400.webm`))],
          purple: [lg(_t3122 || (_t3122 = _$1`Ice/ShieldIceAbove01_03_Regular_Purple_400x400.webm`))]
        }
      },

      /*
      shieldicebottom: {
          '01': {
              blue: [lg`Ice/ShieldIceBelow01_02_Regular_Blue_400x400.webm`],
              purple: [lg`Ice/ShieldIceBelow01_02_Regular_Purple_400x400.webm`],
          },
          '03': {
              blue: [lg`Ice/ShieldIceBelow01_03_Regular_Blue_400x400.webm`],
              purple: [lg`Ice/ShieldIceBelow01_03_Regular_Purple_400x400.webm`],
          },
      },
      energyfieldbottom: {
          '01': {
              blue: [lg`Energy/EnergyFieldBot_02_Regular_Blue_400x400.webm`],
              green: [lg`Energy/EnergyFieldBot_02_Regular_Green_400x400.webm`],
              purple: [lg`Energy/EnergyFieldBot_02_Regular_Purple_400x400.webm`],
          }
      },
      */
      energyfield: {
        '01': {
          blue: [lg(_t3123 || (_t3123 = _$1`Energy/EnergyFieldTop_02_Regular_Blue_400x400.webm`))],
          green: [lg(_t3124 || (_t3124 = _$1`Energy/EnergyFieldTop_02_Regular_Green_400x400.webm`))],
          purple: [lg(_t3125 || (_t3125 = _$1`Energy/EnergyFieldTop_02_Regular_Purple_400x400.webm`))]
        }
      }
    },
    spell: {
      antilifeshell: {
        '01': {
          blue: [l5(_t3126 || (_t3126 = _$1`Antilife_Shell/AntilifeShell_01_Blue_NoCircle_400x400.webm`))]
        }
      },
      armsofhadar: {
        '01': {
          darkgreen: [l1(_t3127 || (_t3127 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Green_500x500.webm`))],
          darkpurple: [l1(_t3128 || (_t3128 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))],
          darkred: [l1(_t3129 || (_t3129 = _$1`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Red_500x500.webm`))]
        }
      },
      bardicinspiration: {
        inspire: {
          yellowblue: [l1(_t3130 || (_t3130 = _$1`Bardic_Inspiration/BardicInspiration_01_Regular_BlueYellow_400x400.webm`))],
          greenorange: [l1(_t3131 || (_t3131 = _$1`Bardic_Inspiration/BardicInspiration_01_Regular_GreenOrange_400x400.webm`))],
          purplepink: [l1(_t3132 || (_t3132 = _$1`Bardic_Inspiration/BardicInspiration_01_Regular_PurplePink_400x400.webm`))],
          darkred: [l1(_t3133 || (_t3133 = _$1`Bardic_Inspiration/BardicInspiration_01_Dark_Red_400x400.webm`))],
          pink: [l1(_t3134 || (_t3134 = _$1`Bardic_Inspiration/BardicInspiration_01_Regular_Pink_400x400.webm`))]
        },
        marker: {
          yellowblue: [lg(_t3135 || (_t3135 = _$1`Marker/MusicMarker_01_Regular_BlueYellow_400x400.webm`))],
          greenorange: [lg(_t3136 || (_t3136 = _$1`Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm`))],
          pink: [lg(_t3137 || (_t3137 = _$1`Marker/MusicMarker_01_Regular_Pink_400x400.webm`))],
          purplepink: [lg(_t3138 || (_t3138 = _$1`Marker/MusicMarker_01_Regular_PurplePink_400x400.webm`))],
          darkred: [lg(_t3139 || (_t3139 = _$1`Marker/MusicMarker_01_Dark_Red_400x400.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkgreen: [l4(_t3140 || (_t3140 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Green_600x600.webm`))],
          darkpurple: [l4(_t3141 || (_t3141 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))],
          darkred: [l4(_t3142 || (_t3142 = _$1`Black_Tentacles/BlackTentacles_01_Dark_Red_600x600.webm`))]
        }
      },
      bless: {
        '01': {
          blue: {
            'intro': l1(_t3143 || (_t3143 = _$1`Bless/Bless_01_Regular_Blue_Intro_400x400.webm`)),
            'loop': l1(_t3144 || (_t3144 = _$1`Bless/Bless_01_Regular_Blue_Loop_400x400.webm`))
          },
          green: {
            'intro': l1(_t3145 || (_t3145 = _$1`Bless/Bless_01_Regular_Green_Intro_400x400.webm`)),
            'loop': l1(_t3146 || (_t3146 = _$1`Bless/Bless_01_Regular_Green_Loop_400x400.webm`))
          },
          purple: {
            'intro': l1(_t3147 || (_t3147 = _$1`Bless/Bless_01_Regular_Purple_Intro_400x400.webm`)),
            'loop': l1(_t3148 || (_t3148 = _$1`Bless/Bless_01_Regular_Purple_Loop_400x400.webm`))
          },
          yellow: {
            'intro': l1(_t3149 || (_t3149 = _$1`Bless/Bless_01_Regular_Yellow_Intro_400x400.webm`)),
            'loop': l1(_t3150 || (_t3150 = _$1`Bless/Bless_01_Regular_Yellow_Loop_400x400.webm`))
          }
        }
      },
      calllightning: {
        '01': {
          blue: [l3(_t3151 || (_t3151 = _$1`Call_Lightning/CallLightning_01_Blue_1000x1000.webm`))],
          blueorange: [l3(_t3152 || (_t3152 = _$1`Call_Lightning/CallLightning_01_BlueOrange_1000x1000.webm`))],
          green: [l3(_t3153 || (_t3153 = _$1`Call_Lightning/CallLightning_01_Green_1000x1000.webm`))],
          pinkyellow: [l3(_t3154 || (_t3154 = _$1`Call_Lightning/CallLightning_01_PinkYellow_1000x1000.webm`))],
          purple: [l3(_t3155 || (_t3155 = _$1`Call_Lightning/CallLightning_01_Purple_1000x1000.webm`))],
          red: [l3(_t3156 || (_t3156 = _$1`Call_Lightning/CallLightning_01_Red_1000x1000.webm`))],
          yellow: [l3(_t3157 || (_t3157 = _$1`Call_Lightning/CallLightning_01_Yellow_1000x1000.webm`))]
        }
      },
      cloudofdaggers: {
        '01': {
          darkpurple: [l2(_t3158 || (_t3158 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Dark_Purple_400x400.webm`))],
          darkred: [l2(_t3159 || (_t3159 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Dark_Red_400x400.webm`))],
          blue: [l2(_t3160 || (_t3160 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Blue_400x400.webm`))],
          green: [l2(_t3161 || (_t3161 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Green_400x400.webm`))],
          orange: [l2(_t3162 || (_t3162 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t3163 || (_t3163 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Purple_400x400.webm`))],
          red: [l2(_t3164 || (_t3164 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t3165 || (_t3165 = _$1`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Yellow_400x400.webm`))]
        },
        kunai: {
          darkpurple: [l2(_t3166 || (_t3166 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Dark_Purple_400x400.webm`))],
          darkred: [l2(_t3167 || (_t3167 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Dark_Red_400x400.webm`))],
          blue: [l2(_t3168 || (_t3168 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Blue_400x400.webm`))],
          green: [l2(_t3169 || (_t3169 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Green_400x400.webm`))],
          orange: [l2(_t3170 || (_t3170 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t3171 || (_t3171 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Purple_400x400.webm`))],
          red: [l2(_t3172 || (_t3172 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t3173 || (_t3173 = _$1`Cloud_Of_Daggers/CloudOfDaggers_Kunai_01_Light_Yellow_400x400.webm`))]
        }
      },
      curewounds: {
        '01': {
          blue: [l1(_t3174 || (_t3174 = _$1`Cure_Wounds/CureWounds_01_Blue_400x400.webm`))],
          green: [l1(_t3175 || (_t3175 = _$1`Cure_Wounds/CureWounds_01_Green_400x400.webm`))],
          pink: [l1(_t3176 || (_t3176 = _$1`Cure_Wounds/CureWounds_01_Pink_400x400.webm`))],
          purple: [l1(_t3177 || (_t3177 = _$1`Cure_Wounds/CureWounds_01_Purple_400x400.webm`))],
          red: [l1(_t3178 || (_t3178 = _$1`Cure_Wounds/CureWounds_01_Red_400x400.webm`))]
        }
      },
      darkness: {
        '01': {
          black: [l2(_t3179 || (_t3179 = _$1`Darkness/Darkness_01_Black_600x600.webm`))],
          green: [l2(_t3180 || (_t3180 = _$1`Darkness/Darkness_01_Green_600x600.webm`))]
        }
      },
      detectmagic: {
        '01': {
          blue: [l1(_t3181 || (_t3181 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Blue_1200x1200.webm`))],
          green: [l1(_t3182 || (_t3182 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Green_1200x1200.webm`))],
          greenorange: [l1(_t3183 || (_t3183 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_GreenOrange_1200x1200.webm`))],
          grey: [l1(_t3184 || (_t3184 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Grey_1200x1200.webm`))],
          purple: [l1(_t3185 || (_t3185 = _$1`Detect_Magic/DetectMagicCircle_01_Regular_Purple_1200x1200.webm`))]
        }
      },
      divinesmite: {
        'source': {
          yellowblue: [l2(_t3186 || (_t3186 = _$1`Divine_Smite/DivineSmite_01_Regular_BlueYellow_Caster_400x400.webm`))],
          greenyellow: [l2(_t3187 || (_t3187 = _$1`Divine_Smite/DivineSmite_01_Regular_GreenYellow_Caster_400x400.webm`))],
          orange: [l2(_t3188 || (_t3188 = _$1`Divine_Smite/DivineSmite_01_Regular_Orange_Caster_400x400.webm`))],
          purplepink: [l2(_t3189 || (_t3189 = _$1`Divine_Smite/DivineSmite_01_Regular_PurplePink_Caster_400x400.webm`))],
          darkpurple: [l2(_t3190 || (_t3190 = _$1`Divine_Smite/DivineSmite_01_Dark_Purple_Caster_400x400.webm`))],
          yellowwhite: [l2(_t3191 || (_t3191 = _$1`Divine_Smite/DivineSmite_01_Regular_YellowWhite_Caster_400x400.webm`))],
          darkred: [l2(_t3192 || (_t3192 = _$1`Divine_Smite/DivineSmite_01_Dark_Red_Caster_400x400.webm`))]
        },
        'target': {
          yellowblue: [l2(_t3193 || (_t3193 = _$1`Divine_Smite/DivineSmite_01_Regular_BlueYellow_Target_400x400.webm`))],
          greenyellow: [l2(_t3194 || (_t3194 = _$1`Divine_Smite/DivineSmite_01_Regular_GreenYellow_Target_400x400.webm`))],
          orange: [l2(_t3195 || (_t3195 = _$1`Divine_Smite/DivineSmite_01_Regular_Orange_Target_400x400.webm`))],
          purplepink: [l2(_t3196 || (_t3196 = _$1`Divine_Smite/DivineSmite_01_Regular_PurplePink_Target_400x400.webm`))],
          darkpurple: [l2(_t3197 || (_t3197 = _$1`Divine_Smite/DivineSmite_01_Dark_Purple_Target_400x400.webm`))],
          yellowwhite: [l2(_t3198 || (_t3198 = _$1`Divine_Smite/DivineSmite_01_Regular_YellowWhite_Target_400x400.webm`))],
          darkred: [l2(_t3199 || (_t3199 = _$1`Divine_Smite/DivineSmite_01_Dark_Red_Target_400x400.webm`))]
        }
      },
      entangle: {
        '01': {
          brown: [l1(_t3200 || (_t3200 = _$1`Entangle/Entangle_01_Brown_400x400.webm`))],
          green: [l1(_t3201 || (_t3201 = _$1`Entangle/Entangle_01_Green_400x400.webm`))],
          yellow: [l1(_t3202 || (_t3202 = _$1`Entangle/Entangle_01_Yellow_400x400.webm`))],
          darkpurple: [l1(_t3203 || (_t3203 = _$1`Entangle/Entangle_01_Dark_Purple_400x400.webm`))],
          palegreen: [l1(_t3204 || (_t3204 = _$1`Entangle/Entangle_01_Regular_Green02_400x400.webm`))]
        }
      },
      fireball: {
        loop: {
          blue: [l3(_t3205 || (_t3205 = _$1`Fireball/FireballLoop_01_Blue_800x800.webm`))],
          orange: [l3(_t3206 || (_t3206 = _$1`Fireball/FireballLoop_01_Orange_800x800.webm`))],
          purple: [l3(_t3207 || (_t3207 = _$1`Fireball/FireballLoop_01_Purple_800x800.webm`))]
        },
        explode: {
          blue: [l3(_t3208 || (_t3208 = _$1`Fireball/FireballExplosion_01_Blue_800x800.webm`))],
          orange: [l3(_t3209 || (_t3209 = _$1`Fireball/FireballExplosion_01_Orange_800x800.webm`))],
          purple: [l3(_t3210 || (_t3210 = _$1`Fireball/FireballExplosion_01_Purple_800x800.webm`))]
        },
        nodebris: {
          blue: [l3(_t3211 || (_t3211 = _$1`Fireball/FireballLoopNoDebris_01_Blue_800x800.webm`))],
          orange: [l3(_t3212 || (_t3212 = _$1`Fireball/FireballLoopNoDebris_01_Orange_800x800.webm`))],
          purple: [l3(_t3213 || (_t3213 = _$1`Fireball/FireballLoopNoDebris_01_Purple_800x800.webm`))]
        }
      },
      fogcloud: {
        '01': {
          white: [l1(_t3214 || (_t3214 = _$1`Fog_Cloud/FogCloud_01_White_800x800.webm`))]
        },
        '02': {
          white: [l1(_t3215 || (_t3215 = _$1`Fog_Cloud/FogCloud_02_Regular_White_800x800.webm`))],
          green: [l1(_t3216 || (_t3216 = _$1`Fog_Cloud/FogCloud_02_Regular_Green_800x800.webm`))]
        }
      },
      generichealing: {
        '01': {
          blue: [lg(_t3217 || (_t3217 = _$1`Healing/HealingAbility_01_Blue_400x400.webm`))],
          green: [lg(_t3218 || (_t3218 = _$1`Healing/HealingAbility_01_Green_400x400.webm`))],
          purple: [lg(_t3219 || (_t3219 = _$1`Healing/HealingAbility_01_Purple_400x400.webm`))],
          red: [lg(_t3220 || (_t3220 = _$1`Healing/HealingAbility_01_Red_400x400.webm`))],
          yellow: [lg(_t3221 || (_t3221 = _$1`Healing/HealingAbility_01_Yellow_400x400.webm`))]
        },
        '02': {
          whiteblue: [lg(_t3222 || (_t3222 = _$1`Healing/HealingAbility_02_Regular_BlueWhite_Burst_600x600.webm`))],
          greenorange: [lg(_t3223 || (_t3223 = _$1`Healing/HealingAbility_02_Regular_GreenOrange_Burst_600x600.webm`))],
          purplepink: [lg(_t3224 || (_t3224 = _$1`Healing/HealingAbility_02_Regular_PurplePink_Burst_600x600.webm`))],
          tealyellow: [lg(_t3225 || (_t3225 = _$1`Healing/HealingAbility_02_Regular_TealYellow_Burst_600x600.webm`))]
        }
      },
      grease: {
        "01": {
          brown: [l1(_t3226 || (_t3226 = _$1`Grease/Grease_Dark_Brown_600x600.webm`))],
          green: [l1(_t3227 || (_t3227 = _$1`Grease/Grease_Dark_Green_600x600.webm`))],
          grey: [l1(_t3228 || (_t3228 = _$1`Grease/Grease_Dark_Grey_600x600.webm`))],
          purple: [l1(_t3229 || (_t3229 = _$1`Grease/Grease_Dark_Purple_600x600.webm`))]
        }
      },
      huntersmark: {
        'eye': {
          blue: [l1(_t3230 || (_t3230 = _$1`Hunters_Mark/HuntersMark_01_Regular_Blue_Pulse_200x200.webm`))],
          green: [l1(_t3231 || (_t3231 = _$1`Hunters_Mark/HuntersMark_01_Regular_Green_Pulse_200x200.webm`))],
          purple: [l1(_t3232 || (_t3232 = _$1`Hunters_Mark/HuntersMark_01_Regular_Purple_Pulse_200x200.webm`))]
        },
        'eyeloop': {
          blue: [l1(_t3233 || (_t3233 = _$1`Hunters_Mark/HuntersMark_01_Regular_Blue_Loop_200x200.webm`))],
          green: [l1(_t3234 || (_t3234 = _$1`Hunters_Mark/HuntersMark_01_Regular_Green_Loop_200x200.webm`))],
          purple: [l1(_t3235 || (_t3235 = _$1`Hunters_Mark/HuntersMark_01_Regular_Purple_Loop_200x200.webm`))]
        },
        'paw': {
          blue: [l1(_t3236 || (_t3236 = _$1`Hunters_Mark/HuntersMark_02_Regular_Blue_Pulse_200x200.webm`))],
          green: [l1(_t3237 || (_t3237 = _$1`Hunters_Mark/HuntersMark_02_Regular_Green_Pulse_200x200.webm`))],
          purple: [l1(_t3238 || (_t3238 = _$1`Hunters_Mark/HuntersMark_02_Regular_Purple_Pulse_200x200.webm`))]
        },
        'pawloop': {
          blue: [l1(_t3239 || (_t3239 = _$1`Hunters_Mark/HuntersMark_02_Regular_Blue_Loop_200x200.webm`))],
          green: [l1(_t3240 || (_t3240 = _$1`Hunters_Mark/HuntersMark_02_Regular_Green_Loop_200x200.webm`))],
          purple: [l1(_t3241 || (_t3241 = _$1`Hunters_Mark/HuntersMark_02_Regular_Purple_Loop_200x200.webm`))]
        }
      },
      mistystep: {
        '01': {
          black: [l2(_t3242 || (_t3242 = _$1`Misty_Step/MistyStep_01_Dark_Black_400x400.webm`))],
          blue: [l2(_t3243 || (_t3243 = _$1`Misty_Step/MistyStep_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t3244 || (_t3244 = _$1`Misty_Step/MistyStep_01_Regular_Green_400x400.webm`))],
          orange: [l2(_t3245 || (_t3245 = _$1`Misty_Step/MistyStep_01_Regular_Orange_400x400.webm`))],
          purple: [l2(_t3246 || (_t3246 = _$1`Misty_Step/MistyStep_01_Regular_Purple_400x400.webm`))],
          darkgreen: [l2(_t3247 || (_t3247 = _$1`Misty_Step/MistyStep_01_Dark_Green_400x400.webm`))],
          darkred: [l2(_t3248 || (_t3248 = _$1`Misty_Step/MistyStep_01_Dark_Red_400x400.webm`))],
          grey: [l2(_t3249 || (_t3249 = _$1`Misty_Step/MistyStep_01_Regular_Grey_400x400.webm`))]
        },
        '02': {
          black: [l2(_t3250 || (_t3250 = _$1`Misty_Step/MistyStep_02_Dark_Black_400x400.webm`))],
          blue: [l2(_t3251 || (_t3251 = _$1`Misty_Step/MistyStep_02_Regular_Blue_400x400.webm`))],
          green: [l2(_t3252 || (_t3252 = _$1`Misty_Step/MistyStep_02_Regular_Green_400x400.webm`))],
          orange: [l2(_t3253 || (_t3253 = _$1`Misty_Step/MistyStep_02_Regular_Orange_400x400.webm`))],
          purple: [l2(_t3254 || (_t3254 = _$1`Misty_Step/MistyStep_02_Regular_Purple_400x400.webm`))],
          darkgreen: [l2(_t3255 || (_t3255 = _$1`Misty_Step/MistyStep_02_Dark_Green_400x400.webm`))],
          darkred: [l2(_t3256 || (_t3256 = _$1`Misty_Step/MistyStep_02_Dark_Red_400x400.webm`))],
          grey: [l2(_t3257 || (_t3257 = _$1`Misty_Step/MistyStep_02_Regular_Grey_400x400.webm`))]
        }
      },
      moonbeam: {
        loop: {
          blue: [l2(_t3258 || (_t3258 = _$1`Moonbeam/Moonbeam_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t3259 || (_t3259 = _$1`Moonbeam/Moonbeam_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t3260 || (_t3260 = _$1`Moonbeam/Moonbeam_01_Regular_Rainbow_400x400.webm`))]
        },
        nopulse: {
          blue: [l2(_t3261 || (_t3261 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t3262 || (_t3262 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t3263 || (_t3263 = _$1`Moonbeam/MoonbeamNoPulse_01_Regular_Rainbow_400x400.webm`))]
        },
        intro: {
          blue: [l2(_t3264 || (_t3264 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t3265 || (_t3265 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t3266 || (_t3266 = _$1`Moonbeam/MoonbeamIntro_01_Regular_Rainbow_400x400.webm`))]
        },
        outro: {
          blue: [l2(_t3267 || (_t3267 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Blue_400x400.webm`))],
          green: [l2(_t3268 || (_t3268 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Green_400x400.webm`))],
          rainbow: [l2(_t3269 || (_t3269 = _$1`Moonbeam/MoonbeamOutro_01_Regular_Rainbow_400x400.webm`))]
        }
      },
      sneakattack: {
        '01': {
          darkgreen: [l1(_t3270 || (_t3270 = _$1`Sneak_Attack/Sneak_Attack_Dark_Green_300x300.webm`))],
          darkpurple: [l1(_t3271 || (_t3271 = _$1`Sneak_Attack/Sneak_Attack_Dark_Purple_300x300.webm`))],
          darkred: [l1(_t3272 || (_t3272 = _$1`Sneak_Attack/Sneak_Attack_Dark_Red_300x300.webm`))],
          blue: [l1(_t3273 || (_t3273 = _$1`Sneak_Attack/Sneak_Attack_Regular_Blue_300x300.webm`))],
          orange: [l1(_t3274 || (_t3274 = _$1`Sneak_Attack/Sneak_Attack_Regular_Orange_300x300.webm`))],
          pink: [l1(_t3275 || (_t3275 = _$1`Sneak_Attack/Sneak_Attack_Regular_Pink_300x300.webm`))],
          yellow: [l1(_t3276 || (_t3276 = _$1`Sneak_Attack/Sneak_Attack_Regular_Yellow_300x300.webm`))]
        }
      },
      thunderwave: {
        left: {
          blue: [l1(_t3277 || (_t3277 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_BLeft_600x600.webm`))],
          green: [l1(_t3278 || (_t3278 = _$1`Thunderwave/Thunderwave_01_Bright_Green_BLeft_600x600.webm`))],
          orange: [l1(_t3279 || (_t3279 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_BLeft_600x600.webm`))],
          purple: [l1(_t3280 || (_t3280 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_BLeft_600x600.webm`))],
          red: [l1(_t3281 || (_t3281 = _$1`Thunderwave/Thunderwave_01_Dark_Red_BLeft_600x600.webm`))]
        },
        mid: {
          blue: [l1(_t3282 || (_t3282 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_BMid_600x600.webm`))],
          green: [l1(_t3283 || (_t3283 = _$1`Thunderwave/Thunderwave_01_Bright_Green_BMid_600x600.webm`))],
          orange: [l1(_t3284 || (_t3284 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_BMid_600x600.webm`))],
          purple: [l1(_t3285 || (_t3285 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_BMid_600x600.webm`))],
          red: [l1(_t3286 || (_t3286 = _$1`Thunderwave/Thunderwave_01_Dark_Red_BMid_600x600.webm`))]
        },
        center: {
          blue: [l1(_t3287 || (_t3287 = _$1`Thunderwave/Thunderwave_01_Bright_Blue_Center_600x600.webm`))],
          green: [l1(_t3288 || (_t3288 = _$1`Thunderwave/Thunderwave_01_Bright_Green_Center_600x600.webm`))],
          orange: [l1(_t3289 || (_t3289 = _$1`Thunderwave/Thunderwave_01_Bright_Orange_Center_600x600.webm`))],
          purple: [l1(_t3290 || (_t3290 = _$1`Thunderwave/Thunderwave_01_Dark_Purple_Center_600x600.webm`))],
          red: [l1(_t3291 || (_t3291 = _$1`Thunderwave/Thunderwave_01_Dark_Red_Center_600x600.webm`))]
        }
      },
      shatter: {
        '01': {
          purple: [l2(_t3292 || (_t3292 = _$1`Shatter/Shatter_01_Purple_400x400.webm`))],
          red: [l2(_t3293 || (_t3293 = _$1`Shatter/Shatter_01_Red_400x400.webm`))],
          blue: [l2(_t3294 || (_t3294 = _$1`Shatter/Shatter_01_Blue_400x400.webm`))],
          green: [l2(_t3295 || (_t3295 = _$1`Shatter/Shatter_01_Green_400x400.webm`))],
          orange: [l2(_t3296 || (_t3296 = _$1`Shatter/Shatter_01_Orange_400x400.webm`))]
        }
      },
      shieldspell: {
        '01': {
          blue: {
            'intro': l1(_t3297 || (_t3297 = _$1`Shield/Shield_01_Regular_Blue_Intro_400x400.webm`)),
            'loop': l1(_t3298 || (_t3298 = _$1`Shield/Shield_01_Regular_Blue_Loop_400x400.webm`)),
            'outro_explode': l1(_t3299 || (_t3299 = _$1`Shield/Shield_01_Regular_Blue_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3300 || (_t3300 = _$1`Shield/Shield_01_Regular_Blue_OutroFade_400x400.webm`))
          },
          green: {
            'intro': l1(_t3301 || (_t3301 = _$1`Shield/Shield_01_Regular_Green_Intro_400x400.webm`)),
            'loop': l1(_t3302 || (_t3302 = _$1`Shield/Shield_01_Regular_Green_Loop_400x400.webm`)),
            'outro_explode': l1(_t3303 || (_t3303 = _$1`Shield/Shield_01_Regular_Green_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3304 || (_t3304 = _$1`Shield/Shield_01_Regular_Green_OutroFade_400x400.webm`))
          },
          purple: {
            'intro': l1(_t3305 || (_t3305 = _$1`Shield/Shield_01_Regular_Purple_Intro_400x400.webm`)),
            'loop': l1(_t3306 || (_t3306 = _$1`Shield/Shield_01_Regular_Purple_Loop_400x400.webm`)),
            'outro_explode': l1(_t3307 || (_t3307 = _$1`Shield/Shield_01_Regular_Purple_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3308 || (_t3308 = _$1`Shield/Shield_01_Regular_Purple_OutroFade_400x400.webm`))
          },
          red: {
            'intro': l1(_t3309 || (_t3309 = _$1`Shield/Shield_01_Regular_Red_Intro_400x400.webm`)),
            'loop': l1(_t3310 || (_t3310 = _$1`Shield/Shield_01_Regular_Red_Loop_400x400.webm`)),
            'outro_explode': l1(_t3311 || (_t3311 = _$1`Shield/Shield_01_Regular_Red_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3312 || (_t3312 = _$1`Shield/Shield_01_Regular_Red_OutroFade_400x400.webm`))
          },
          yellow: {
            'intro': l1(_t3313 || (_t3313 = _$1`Shield/Shield_01_Regular_Yellow_Intro_400x400.webm`)),
            'loop': l1(_t3314 || (_t3314 = _$1`Shield/Shield_01_Regular_Yellow_Loop_400x400.webm`)),
            'outro_explode': l1(_t3315 || (_t3315 = _$1`Shield/Shield_01_Regular_Yellow_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3316 || (_t3316 = _$1`Shield/Shield_01_Regular_Yellow_OutroFade_400x400.webm`))
          }
        },
        '02': {
          blue: {
            'intro': l1(_t3317 || (_t3317 = _$1`Shield/Shield_02_Regular_Blue_Intro_400x400.webm`)),
            'loop': l1(_t3318 || (_t3318 = _$1`Shield/Shield_02_Regular_Blue_Loop_400x400.webm`)),
            'outro_explode': l1(_t3319 || (_t3319 = _$1`Shield/Shield_02_Regular_Blue_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3320 || (_t3320 = _$1`Shield/Shield_02_Regular_Blue_OutroFade_400x400.webm`))
          },
          green: {
            'intro': l1(_t3321 || (_t3321 = _$1`Shield/Shield_02_Regular_Green_Intro_400x400.webm`)),
            'loop': l1(_t3322 || (_t3322 = _$1`Shield/Shield_02_Regular_Green_Loop_400x400.webm`)),
            'outro_explode': l1(_t3323 || (_t3323 = _$1`Shield/Shield_02_Regular_Green_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3324 || (_t3324 = _$1`Shield/Shield_02_Regular_Green_OutroFade_400x400.webm`))
          },
          purple: {
            'intro': l1(_t3325 || (_t3325 = _$1`Shield/Shield_02_Regular_Purple_Intro_400x400.webm`)),
            'loop': l1(_t3326 || (_t3326 = _$1`Shield/Shield_02_Regular_Purple_Loop_400x400.webm`)),
            'outro_explode': l1(_t3327 || (_t3327 = _$1`Shield/Shield_02_Regular_Purple_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3328 || (_t3328 = _$1`Shield/Shield_02_Regular_Purple_OutroFade_400x400.webm`))
          },
          red: {
            'intro': l1(_t3329 || (_t3329 = _$1`Shield/Shield_02_Regular_Red_Intro_400x400.webm`)),
            'loop': l1(_t3330 || (_t3330 = _$1`Shield/Shield_02_Regular_Red_Loop_400x400.webm`)),
            'outro_explode': l1(_t3331 || (_t3331 = _$1`Shield/Shield_02_Regular_Red_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3332 || (_t3332 = _$1`Shield/Shield_02_Regular_Red_OutroFade_400x400.webm`))
          },
          yellow: {
            'intro': l1(_t3333 || (_t3333 = _$1`Shield/Shield_02_Regular_Yellow_Intro_400x400.webm`)),
            'loop': l1(_t3334 || (_t3334 = _$1`Shield/Shield_02_Regular_Yellow_Loop_400x400.webm`)),
            'outro_explode': l1(_t3335 || (_t3335 = _$1`Shield/Shield_02_Regular_Yellow_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3336 || (_t3336 = _$1`Shield/Shield_02_Regular_Yellow_OutroFade_400x400.webm`))
          }
        },
        '03': {
          blue: {
            'intro': l1(_t3337 || (_t3337 = _$1`Shield/Shield_03_Regular_Blue_Intro_400x400.webm`)),
            'loop': l1(_t3338 || (_t3338 = _$1`Shield/Shield_03_Regular_Blue_Loop_400x400.webm`)),
            'outro_explode': l1(_t3339 || (_t3339 = _$1`Shield/Shield_03_Regular_Blue_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3340 || (_t3340 = _$1`Shield/Shield_03_Regular_Blue_OutroFade_400x400.webm`))
          },
          green: {
            'intro': l1(_t3341 || (_t3341 = _$1`Shield/Shield_03_Regular_Green_Intro_400x400.webm`)),
            'loop': l1(_t3342 || (_t3342 = _$1`Shield/Shield_03_Regular_Green_Loop_400x400.webm`)),
            'outro_explode': l1(_t3343 || (_t3343 = _$1`Shield/Shield_03_Regular_Green_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3344 || (_t3344 = _$1`Shield/Shield_03_Regular_Green_OutroFade_400x400.webm`))
          },
          purple: {
            'intro': l1(_t3345 || (_t3345 = _$1`Shield/Shield_03_Regular_Purple_Intro_400x400.webm`)),
            'loop': l1(_t3346 || (_t3346 = _$1`Shield/Shield_03_Regular_Purple_Loop_400x400.webm`)),
            'outro_explode': l1(_t3347 || (_t3347 = _$1`Shield/Shield_03_Regular_Purple_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3348 || (_t3348 = _$1`Shield/Shield_03_Regular_Purple_OutroFade_400x400.webm`))
          },
          red: {
            'intro': l1(_t3349 || (_t3349 = _$1`Shield/Shield_03_Regular_Red_Intro_400x400.webm`)),
            'loop': l1(_t3350 || (_t3350 = _$1`Shield/Shield_03_Regular_Red_Loop_400x400.webm`)),
            'outro_explode': l1(_t3351 || (_t3351 = _$1`Shield/Shield_03_Regular_Red_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3352 || (_t3352 = _$1`Shield/Shield_03_Regular_Red_OutroFade_400x400.webm`))
          },
          yellow: {
            'intro': l1(_t3353 || (_t3353 = _$1`Shield/Shield_03_Regular_Yellow_Intro_400x400.webm`)),
            'loop': l1(_t3354 || (_t3354 = _$1`Shield/Shield_03_Regular_Yellow_Loop_400x400.webm`)),
            'outro_explode': l1(_t3355 || (_t3355 = _$1`Shield/Shield_03_Regular_Yellow_OutroExplode_400x400.webm`)),
            'outro_fade': l1(_t3356 || (_t3356 = _$1`Shield/Shield_03_Regular_Yellow_OutroFade_400x400.webm`))
          }
        }
      },
      sleep: {
        '01': {
          darkpurple: [l1(_t3357 || (_t3357 = _$1`Sleep/Cloud01_01_Dark_Purple_400x400.webm`))],
          blue: [l1(_t3358 || (_t3358 = _$1`Sleep/Cloud01_01_Regular_Blue_400x400.webm`))],
          green: [l1(_t3359 || (_t3359 = _$1`Sleep/Cloud01_01_Regular_Green_400x400.webm`))],
          orangepurple: [l1(_t3360 || (_t3360 = _$1`Sleep/Cloud01_01_Dark_OrangePurple_400x400.webm`))],
          pink: [l1(_t3361 || (_t3361 = _$1`Sleep/Cloud01_01_Regular_Pink_400x400.webm`))],
          yellow: [l1(_t3362 || (_t3362 = _$1`Sleep/Cloud01_01_Regular_Yellow_400x400.webm`))]
        },
        '02': {
          darkpurple: [l1(_t3363 || (_t3363 = _$1`Sleep/Cloud01_02_Dark_Purple_400x400.webm`))],
          blue: [l1(_t3364 || (_t3364 = _$1`Sleep/Cloud01_02_Regular_Blue_400x400.webm`))],
          green: [l1(_t3365 || (_t3365 = _$1`Sleep/Cloud01_02_Regular_Green_400x400.webm`))],
          orangepurple: [l1(_t3366 || (_t3366 = _$1`Sleep/Cloud01_02_Dark_OrangePurple_400x400.webm`))],
          pink: [l1(_t3367 || (_t3367 = _$1`Sleep/Cloud01_02_Regular_Pink_400x400.webm`))],
          yellow: [l1(_t3368 || (_t3368 = _$1`Sleep/Cloud01_02_Regular_Yellow_400x400.webm`))]
        },
        marker: {
          darkpurple: [l1(_t3369 || (_t3369 = _$1`Sleep/SleepMarker01_01_Dark_Purple_400x400.webm`))],
          blue: [l1(_t3370 || (_t3370 = _$1`Sleep/SleepMarker01_01_Regular_Blue_400x400.webm`))],
          green: [l1(_t3371 || (_t3371 = _$1`Sleep/SleepMarker01_01_Regular_Green_400x400.webm`))],
          orangepurple: [l1(_t3372 || (_t3372 = _$1`Sleep/SleepMarker01_01_Dark_OrangePurple_400x400.webm`))],
          pink: [l1(_t3373 || (_t3373 = _$1`Sleep/SleepMarker01_01_Regular_Pink_400x400.webm`))],
          yellow: [l1(_t3374 || (_t3374 = _$1`Sleep/SleepMarker01_01_Regular_Yellow_400x400.webm`))]
        },
        symbol: {
          darkpurple: [l1(_t3375 || (_t3375 = _$1`Sleep/SleepSymbol01_01_Dark_Purple_400x400.webm`))],
          blue: [l1(_t3376 || (_t3376 = _$1`Sleep/SleepSymbol01_01_Regular_Blue_400x400.webm`))],
          green: [l1(_t3377 || (_t3377 = _$1`Sleep/SleepSymbol01_01_Regular_Green_400x400.webm`))],
          orangepurple: [l1(_t3378 || (_t3378 = _$1`Sleep/SleepSymbol01_01_Dark_OrangePurple_400x400.webm`))],
          pink: [l1(_t3379 || (_t3379 = _$1`Sleep/SleepSymbol01_01_Regular_Pink_400x400.webm`))],
          yellow: [l1(_t3380 || (_t3380 = _$1`Sleep/SleepSymbol01_01_Regular_Yellow_400x400.webm`))]
        }
      },
      sleetstorm: {
        '01': {
          blue: [l3(_t3381 || (_t3381 = _$1`Sleet_Storm/SleetStorm_01_Blue_800x800.webm`))],
          green: [l3(_t3382 || (_t3382 = _$1`Sleet_Storm/SleetStorm_01_Green_800x800.webm`))],
          purple: [l3(_t3383 || (_t3383 = _$1`Sleet_Storm/SleetStorm_01_Purple_800x800.webm`))],
          tealyellow: [l3(_t3384 || (_t3384 = _$1`Sleet_Storm/SleetStorm_01_TealYellow_800x800.webm`))]
        }
      },
      spiritguardians: {
        '01': {
          black: [l3(_t3385 || (_t3385 = _$1`Spirit_Guardians/SpiritGuardians_01_Dark_Black_600x600.webm`))],
          darkblue: [l3(_t3386 || (_t3386 = _$1`Spirit_Guardians/SpiritGuardians_01_Dark_Blue_600x600.webm`))],
          darkpurple: [l3(_t3387 || (_t3387 = _$1`Spirit_Guardians/SpiritGuardians_01_Dark_Purple_600x600.webm`))],
          darkred: [l3(_t3388 || (_t3388 = _$1`Spirit_Guardians/SpiritGuardians_01_Dark_Red_600x600.webm`))],
          darkwhiteblue: [l3(_t3389 || (_t3389 = _$1`Spirit_Guardians/SpiritGuardians_01_Dark_WhiteBlue_600x600.webm`))],
          greenorange: [l3(_t3390 || (_t3390 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_GreenOrange_600x600.webm`))],
          lightblue: [l3(_t3391 || (_t3391 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_Blue_600x600.webm`))],
          lightgreen: [l3(_t3392 || (_t3392 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_Green_600x600.webm`))],
          lightorange: [l3(_t3393 || (_t3393 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_Orange_600x600.webm`))],
          yellowblue: [l3(_t3394 || (_t3394 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_BlueYellow_600x600.webm`))],
          purplepink: [l3(_t3395 || (_t3395 = _$1`Spirit_Guardians/SpiritGuardians_01_Light_PinkPurple_600x600.webm`))]
        },
        '02': {
          black: [l3(_t3396 || (_t3396 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Dark_Black_600x600.webm`))],
          darkblue: [l3(_t3397 || (_t3397 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Dark_Blue_600x600.webm`))],
          darkpurple: [l3(_t3398 || (_t3398 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Dark_Purple_600x600.webm`))],
          darkred: [l3(_t3399 || (_t3399 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Dark_Red_600x600.webm`))],
          darkwhiteblue: [l3(_t3400 || (_t3400 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Dark_WhiteBlue_600x600.webm`))],
          greenorange: [l3(_t3401 || (_t3401 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_GreenOrange_600x600.webm`))],
          lightblue: [l3(_t3402 || (_t3402 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_Blue_600x600.webm`))],
          lightgreen: [l3(_t3403 || (_t3403 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_Green_600x600.webm`))],
          lightorange: [l3(_t3404 || (_t3404 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_Orange_600x600.webm`))],
          yellowblue: [l3(_t3405 || (_t3405 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_BlueYellow_600x600.webm`))],
          purplepink: [l3(_t3406 || (_t3406 = _$1`Spirit_Guardians/SpiritGuardiansParticles_01_Light_PinkPurple_600x600.webm`))]
        },
        '03': {
          black: [l3(_t3407 || (_t3407 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Dark_Black_600x600.webm`))],
          darkblue: [l3(_t3408 || (_t3408 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Dark_Blue_600x600.webm`))],
          darkpurple: [l3(_t3409 || (_t3409 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Dark_Purple_600x600.webm`))],
          darkred: [l3(_t3410 || (_t3410 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Dark_Red_600x600.webm`))],
          darkwhiteblue: [l3(_t3411 || (_t3411 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Dark_WhiteBlue_600x600.webm`))],
          greenorange: [l3(_t3412 || (_t3412 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_GreenOrange_600x600.webm`))],
          lightblue: [l3(_t3413 || (_t3413 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_Blue_600x600.webm`))],
          lightgreen: [l3(_t3414 || (_t3414 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_Green_600x600.webm`))],
          lightorange: [l3(_t3415 || (_t3415 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_Orange_600x600.webm`))],
          yellowblue: [l3(_t3416 || (_t3416 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_BlueYellow_600x600.webm`))],
          purplepink: [l3(_t3417 || (_t3417 = _$1`Spirit_Guardians/SpiritGuardiansSpirits_01_Light_PinkPurple_600x600.webm`))]
        },
        noring: {
          black: [l3(_t3418 || (_t3418 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Dark_Black_600x600.webm`))],
          darkblue: [l3(_t3419 || (_t3419 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Dark_Blue_600x600.webm`))],
          darkpurple: [l3(_t3420 || (_t3420 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Dark_Purple_600x600.webm`))],
          darkred: [l3(_t3421 || (_t3421 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Dark_Red_600x600.webm`))],
          darkwhiteblue: [l3(_t3422 || (_t3422 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Dark_WhiteBlue_600x600.webm`))],
          greenorange: [l3(_t3423 || (_t3423 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_GreenOrange_600x600.webm`))],
          lightblue: [l3(_t3424 || (_t3424 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_Blue_600x600.webm`))],
          lightgreen: [l3(_t3425 || (_t3425 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_Green_600x600.webm`))],
          lightorange: [l3(_t3426 || (_t3426 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_Orange_600x600.webm`))],
          yellowblue: [l3(_t3427 || (_t3427 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_BlueYellow_600x600.webm`))],
          purplepink: [l3(_t3428 || (_t3428 = _$1`Spirit_Guardians/SpiritGuardiansNoRing_01_Light_PinkPurple_600x600.webm`))]
        }
      },
      tollthedead: {
        bell: {
          blue: [l0(_t3429 || (_t3429 = _$1`Toll_The_Dead/TollTheDeadBell_01_Regular_Blue_400x400.webm`))],
          green: [l0(_t3430 || (_t3430 = _$1`Toll_The_Dead/TollTheDeadBell_01_Regular_Green_400x400.webm`))],
          purple: [l0(_t3431 || (_t3431 = _$1`Toll_The_Dead/TollTheDeadBell_01_Regular_Purple_400x400.webm`))],
          red: [l0(_t3432 || (_t3432 = _$1`Toll_The_Dead/TollTheDeadBell_01_Regular_Red_400x400.webm`))]
        },
        complete: {
          blue: [l0(_t3433 || (_t3433 = _$1`Toll_The_Dead/TollTheDead_01_Regular_Blue_400x400.webm`))],
          green: [l0(_t3434 || (_t3434 = _$1`Toll_The_Dead/TollTheDead_01_Regular_Green_400x400.webm`))],
          purple: [l0(_t3435 || (_t3435 = _$1`Toll_The_Dead/TollTheDead_01_Regular_Purple_400x400.webm`))],
          red: [l0(_t3436 || (_t3436 = _$1`Toll_The_Dead/TollTheDead_01_Regular_Red_400x400.webm`))]
        },
        shockwave: {
          blue: [l0(_t3437 || (_t3437 = _$1`Toll_The_Dead/TollTheDeadShockwave_01_Regular_Blue_400x400.webm`))],
          green: [l0(_t3438 || (_t3438 = _$1`Toll_The_Dead/TollTheDeadShockwave_01_Regular_Green_400x400.webm`))],
          purple: [l0(_t3439 || (_t3439 = _$1`Toll_The_Dead/TollTheDeadShockwave_01_Regular_Purple_400x400.webm`))],
          red: [l0(_t3440 || (_t3440 = _$1`Toll_The_Dead/TollTheDeadShockwave_01_Regular_Red_400x400.webm`))]
        },
        skull: {
          blue: [l0(_t3441 || (_t3441 = _$1`Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_Blue_400x400.webm`))],
          green: [l0(_t3442 || (_t3442 = _$1`Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_Green_400x400.webm`))],
          purple: [l0(_t3443 || (_t3443 = _$1`Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_Purple_400x400.webm`))],
          red: [l0(_t3444 || (_t3444 = _$1`Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_Red_400x400.webm`))]
        }
      },
      wallofforce: {
        '01': {
          blue: [l5(_t3445 || (_t3445 = _$1`Wall_Of_Force/WallOfForce_01_Blue_Sphere_400x400.webm`))],
          green: [l5(_t3446 || (_t3446 = _$1`Wall_Of_Force/WallOfForce_01_Green_Sphere_400x400.webm`))],
          grey: [l5(_t3447 || (_t3447 = _$1`Wall_Of_Force/WallOfForce_01_Grey_Sphere_400x400.webm`))],
          orange: [l5(_t3448 || (_t3448 = _$1`Wall_Of_Force/WallOfForce_01_Orange_Sphere_400x400.webm`))],
          purple: [l5(_t3449 || (_t3449 = _$1`Wall_Of_Force/WallOfForce_01_Purple_Sphere_400x400.webm`))],
          red: [l5(_t3450 || (_t3450 = _$1`Wall_Of_Force/WallOfForce_01_Red_Sphere_400x400.webm`))],
          yellow: [l5(_t3451 || (_t3451 = _$1`Wall_Of_Force/WallOfForce_01_Yellow_Sphere_400x400.webm`))]
        }
      },
      web: {
        '01': {
          white: [l2(_t3452 || (_t3452 = _$1`Web/Web_01_White_01_400x400.webm`))]
        },
        '02': {
          white: [l2(_t3453 || (_t3453 = _$1`Web/Web_01_White_02_400x400.webm`))]
        }
      },
      whirlwind: {
        '01': {
          blue: [l7(_t3454 || (_t3454 = _$1`Whirlwind/Whirlwind_01_Blue_400x400.webm`))],
          bluegrey: [l7(_t3455 || (_t3455 = _$1`Whirlwind/Whirlwind_01_BlueGrey_01_400x400.webm`))],
          green: [l7(_t3456 || (_t3456 = _$1`Whirlwind/Whirlwind_01_Green_400x400.webm`))],
          purple: [l7(_t3457 || (_t3457 = _$1`Whirlwind/Whirlwind_01_Purple_400x400.webm`))],
          red: [l7(_t3458 || (_t3458 = _$1`Whirlwind/Whirlwind_01_Red_400x400.webm`))]
        }
      }
    },
    tokenborder: {
      static: {
        '01': {
          blue: [lg(_t3459 || (_t3459 = _$1`Token_Border/TokenBorderCircle_01_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3460 || (_t3460 = _$1`Token_Border/TokenBorderCircle_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3461 || (_t3461 = _$1`Token_Border/TokenBorderCircle_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t3462 || (_t3462 = _$1`Token_Border/TokenBorderCircle_02_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3463 || (_t3463 = _$1`Token_Border/TokenBorderCircle_02_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3464 || (_t3464 = _$1`Token_Border/TokenBorderCircle_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t3465 || (_t3465 = _$1`Token_Border/TokenBorderCircle_03_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3466 || (_t3466 = _$1`Token_Border/TokenBorderCircle_03_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3467 || (_t3467 = _$1`Token_Border/TokenBorderCircle_03_Regular_Purple_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t3468 || (_t3468 = _$1`Token_Border/TokenBorderCircle_04_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3469 || (_t3469 = _$1`Token_Border/TokenBorderCircle_04_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3470 || (_t3470 = _$1`Token_Border/TokenBorderCircle_04_Regular_Purple_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t3471 || (_t3471 = _$1`Token_Border/TokenBorderCircle_05_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3472 || (_t3472 = _$1`Token_Border/TokenBorderCircle_05_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3473 || (_t3473 = _$1`Token_Border/TokenBorderCircle_05_Regular_Purple_400x400.webm`))]
        },
        '06': {
          blue: [lg(_t3474 || (_t3474 = _$1`Token_Border/TokenBorderCircle_06_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3475 || (_t3475 = _$1`Token_Border/TokenBorderCircle_06_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3476 || (_t3476 = _$1`Token_Border/TokenBorderCircle_06_Regular_Purple_400x400.webm`))]
        },
        '07': {
          blue: [lg(_t3477 || (_t3477 = _$1`Token_Border/TokenBorderCircle_07_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3478 || (_t3478 = _$1`Token_Border/TokenBorderCircle_07_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3479 || (_t3479 = _$1`Token_Border/TokenBorderCircle_07_Regular_Purple_400x400.webm`))]
        },
        '08': {
          blue: [lg(_t3480 || (_t3480 = _$1`Token_Border/TokenBorderCircle_08_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3481 || (_t3481 = _$1`Token_Border/TokenBorderCircle_08_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3482 || (_t3482 = _$1`Token_Border/TokenBorderCircle_08_Regular_Purple_400x400.webm`))]
        },
        '09': {
          blue: [lg(_t3483 || (_t3483 = _$1`Token_Border/TokenBorderCircle_09_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3484 || (_t3484 = _$1`Token_Border/TokenBorderCircle_09_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3485 || (_t3485 = _$1`Token_Border/TokenBorderCircle_09_Regular_Purple_400x400.webm`))]
        },
        '10': {
          blue: [lg(_t3486 || (_t3486 = _$1`Token_Border/TokenBorderCircle_10_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3487 || (_t3487 = _$1`Token_Border/TokenBorderCircle_10_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3488 || (_t3488 = _$1`Token_Border/TokenBorderCircle_10_Regular_Purple_400x400.webm`))]
        },
        '11': {
          blue: [lg(_t3489 || (_t3489 = _$1`Token_Border/TokenBorderCircle_11_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3490 || (_t3490 = _$1`Token_Border/TokenBorderCircle_11_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3491 || (_t3491 = _$1`Token_Border/TokenBorderCircle_11_Regular_Purple_400x400.webm`))]
        },
        '12': {
          blue: [lg(_t3492 || (_t3492 = _$1`Token_Border/TokenBorderCircle_12_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3493 || (_t3493 = _$1`Token_Border/TokenBorderCircle_12_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3494 || (_t3494 = _$1`Token_Border/TokenBorderCircle_12_Regular_Purple_400x400.webm`))]
        },
        '13': {
          blue: [lg(_t3495 || (_t3495 = _$1`Token_Border/TokenBorderCircle_13_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3496 || (_t3496 = _$1`Token_Border/TokenBorderCircle_13_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3497 || (_t3497 = _$1`Token_Border/TokenBorderCircle_13_Regular_Purple_400x400.webm`))]
        }
      },
      spinning: {
        '01': {
          blue: [lg(_t3498 || (_t3498 = _$1`Token_Border/TokenBorderCircleSpin_01_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3499 || (_t3499 = _$1`Token_Border/TokenBorderCircleSpin_01_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3500 || (_t3500 = _$1`Token_Border/TokenBorderCircleSpin_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t3501 || (_t3501 = _$1`Token_Border/TokenBorderCircleSpin_02_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3502 || (_t3502 = _$1`Token_Border/TokenBorderCircleSpin_02_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3503 || (_t3503 = _$1`Token_Border/TokenBorderCircleSpin_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t3504 || (_t3504 = _$1`Token_Border/TokenBorderCircleSpin_03_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3505 || (_t3505 = _$1`Token_Border/TokenBorderCircleSpin_03_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3506 || (_t3506 = _$1`Token_Border/TokenBorderCircleSpin_03_Regular_Purple_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t3507 || (_t3507 = _$1`Token_Border/TokenBorderCircleSpin_04_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3508 || (_t3508 = _$1`Token_Border/TokenBorderCircleSpin_04_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3509 || (_t3509 = _$1`Token_Border/TokenBorderCircleSpin_04_Regular_Purple_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t3510 || (_t3510 = _$1`Token_Border/TokenBorderCircleSpin_05_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3511 || (_t3511 = _$1`Token_Border/TokenBorderCircleSpin_05_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3512 || (_t3512 = _$1`Token_Border/TokenBorderCircleSpin_05_Regular_Purple_400x400.webm`))]
        },
        '06': {
          blue: [lg(_t3513 || (_t3513 = _$1`Token_Border/TokenBorderCircleSpin_06_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3514 || (_t3514 = _$1`Token_Border/TokenBorderCircleSpin_06_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3515 || (_t3515 = _$1`Token_Border/TokenBorderCircleSpin_06_Regular_Purple_400x400.webm`))]
        },
        '07': {
          blue: [lg(_t3516 || (_t3516 = _$1`Token_Border/TokenBorderCircleSpin_07_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3517 || (_t3517 = _$1`Token_Border/TokenBorderCircleSpin_07_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3518 || (_t3518 = _$1`Token_Border/TokenBorderCircleSpin_07_Regular_Purple_400x400.webm`))]
        },
        '08': {
          blue: [lg(_t3519 || (_t3519 = _$1`Token_Border/TokenBorderCircleSpin_08_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3520 || (_t3520 = _$1`Token_Border/TokenBorderCircleSpin_08_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3521 || (_t3521 = _$1`Token_Border/TokenBorderCircleSpin_08_Regular_Purple_400x400.webm`))]
        },
        '09': {
          blue: [lg(_t3522 || (_t3522 = _$1`Token_Border/TokenBorderCircleSpin_09_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3523 || (_t3523 = _$1`Token_Border/TokenBorderCircleSpin_09_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3524 || (_t3524 = _$1`Token_Border/TokenBorderCircleSpin_09_Regular_Purple_400x400.webm`))]
        },
        '10': {
          blue: [lg(_t3525 || (_t3525 = _$1`Token_Border/TokenBorderCircleSpin_10_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3526 || (_t3526 = _$1`Token_Border/TokenBorderCircleSpin_10_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3527 || (_t3527 = _$1`Token_Border/TokenBorderCircleSpin_10_Regular_Purple_400x400.webm`))]
        },
        '11': {
          blue: [lg(_t3528 || (_t3528 = _$1`Token_Border/TokenBorderCircleSpin_11_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3529 || (_t3529 = _$1`Token_Border/TokenBorderCircleSpin_11_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3530 || (_t3530 = _$1`Token_Border/TokenBorderCircleSpin_11_Regular_Purple_400x400.webm`))]
        },
        '12': {
          blue: [lg(_t3531 || (_t3531 = _$1`Token_Border/TokenBorderCircleSpin_12_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3532 || (_t3532 = _$1`Token_Border/TokenBorderCircleSpin_12_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3533 || (_t3533 = _$1`Token_Border/TokenBorderCircleSpin_12_Regular_Purple_400x400.webm`))]
        },
        '13': {
          blue: [lg(_t3534 || (_t3534 = _$1`Token_Border/TokenBorderCircleSpin_13_Regular_Blue_400x400.webm`))],
          orange: [lg(_t3535 || (_t3535 = _$1`Token_Border/TokenBorderCircleSpin_13_Regular_Orange_400x400.webm`))],
          purple: [lg(_t3536 || (_t3536 = _$1`Token_Border/TokenBorderCircleSpin_13_Regular_Purple_400x400.webm`))]
        }
      }
    },
    trap: {
      fire: {
        single: {
          orange: [lg(_t3537 || (_t3537 = _$1`Traps/FireTrap02_01_Regular_Orange_1400x1400.webm`))],
          green: [lg(_t3538 || (_t3538 = _$1`Traps/FireTrap02_01_Regular_Green_1400x1400.webm`))]
        },
        double: {
          orange: [lg(_t3539 || (_t3539 = _$1`Traps/FireTrapDual02_01_Regular_Orange_1400x1400.webm`))],
          green: [lg(_t3540 || (_t3540 = _$1`Traps/FireTrapDual02_01_Regular_Green_1400x1400.webm`))]
        }
      }
    }
  };
  /**
   * Return Types:
   * 
   * Weapon
   * 
   */

  JB2APATREONDB.return = {
    _template: 'ranged',
    weapon: {
      chakram: {
        '01': {
          white: {
            '15ft': [lg(_t3541 || (_t3541 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3542 || (_t3542 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3543 || (_t3543 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3544 || (_t3544 = _$1`Weapon_Attacks/Ranged/Chakram01_01_Regular_White_Return_90ft_4000x400.webm`))]
          }
        }
      },
      dagger: {
        '01': {
          blue: {
            '15ft': [lg(_t3545 || (_t3545 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3546 || (_t3546 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3547 || (_t3547 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3548 || (_t3548 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_Blue_Return_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '15ft': [lg(_t3549 || (_t3549 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3550 || (_t3550 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3551 || (_t3551 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3552 || (_t3552 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Dark_Purple_Return_90ft_4000x400.webm`))]
          },
          white: {
            '15ft': [lg(_t3553 || (_t3553 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3554 || (_t3554 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3555 || (_t3555 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3556 || (_t3556 = _$1`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_90ft_4000x400.webm`))]
          },
          pink: {
            '15ft': [lg(_t3557 || (_t3557 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3558 || (_t3558 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3559 || (_t3559 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3560 || (_t3560 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_90ft_4000x400.webm`))]
          },
          red: {
            '15ft': [lg(_t3561 || (_t3561 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3562 || (_t3562 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3563 || (_t3563 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3564 || (_t3564 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_Return_90ft_4000x400.webm`))]
          }
        },
        '02': {
          blue: {
            '15ft': [lg(_t3565 || (_t3565 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3566 || (_t3566 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3567 || (_t3567 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3568 || (_t3568 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Blue_Return_90ft_4000x400.webm`))]
          },
          darkpurple: {
            '15ft': [lg(_t3569 || (_t3569 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3570 || (_t3570 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3571 || (_t3571 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3572 || (_t3572 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Dark_Purple_Return_90ft_4000x400.webm`))]
          },
          white: {
            '15ft': [lg(_t3573 || (_t3573 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3574 || (_t3574 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3575 || (_t3575 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3576 || (_t3576 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_White_Return_90ft_4000x400.webm`))]
          },
          pink: {
            '15ft': [lg(_t3577 || (_t3577 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3578 || (_t3578 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3579 || (_t3579 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3580 || (_t3580 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Pink_Return_90ft_4000x400.webm`))]
          },
          red: {
            '15ft': [lg(_t3581 || (_t3581 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t3582 || (_t3582 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t3583 || (_t3583 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t3584 || (_t3584 = _$1`Weapon_Attacks/Ranged/Dagger02_01_Regular_Red_90ft_4000x400.webm`))]
          }
        }
      },
      greatsword: {
        '01': {
          white: {
            '15ft': [lg(_t3585 || (_t3585 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_Return_15ft_1000x600.webm`))],
            '30ft': [lg(_t3586 || (_t3586 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_Return_30ft_1600x600.webm`))],
            '60ft': [lg(_t3587 || (_t3587 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_Return_60ft_2800x600.webm`))],
            '90ft': [lg(_t3588 || (_t3588 = _$1`Weapon_Attacks/Ranged/GreatSword01_01_Regular_White_Return_90ft_4000x600.webm`))]
          }
        }
      },
      hammer: {
        '01': {
          white: {
            '15ft': [lg(_t3589 || (_t3589 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_Return_15ft_1000x400.webm`))],
            '30ft': [lg(_t3590 || (_t3590 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_Return_30ft_1600x400.webm`))],
            '60ft': [lg(_t3591 || (_t3591 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_Return_60ft_2800x400.webm`))],
            '90ft': [lg(_t3592 || (_t3592 = _$1`Weapon_Attacks/Ranged/Hammer01_01_Regular_White_Return_90ft_4000x400.webm`))]
          }
        }
      },
      javelin: {
        '01': {
          white: {
            '15ft': [lg(_t3593 || (_t3593 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_Return_15ft_1000x600.webm`))],
            '30ft': [lg(_t3594 || (_t3594 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_Return_30ft_1600x600.webm`))],
            '60ft': [lg(_t3595 || (_t3595 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_Return_60ft_2800x600.webm`))],
            '90ft': [lg(_t3596 || (_t3596 = _$1`Weapon_Attacks/Ranged/Javelin01_01_Regular_White_Return_90ft_4000x600.webm`))]
          }
        }
      },
      spear: {
        '01': {
          white: {
            '15ft': [lg(_t3597 || (_t3597 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_Return_15ft_1000x600.webm`))],
            '30ft': [lg(_t3598 || (_t3598 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_Return_30ft_1600x600.webm`))],
            '60ft': [lg(_t3599 || (_t3599 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_Return_60ft_2800x600.webm`))],
            '90ft': [lg(_t3600 || (_t3600 = _$1`Weapon_Attacks/Ranged/Spear01_01_Regular_White_Return_90ft_4000x600.webm`))]
          }
        }
      }
    }
  };
}

let _ = t => t,
    _t,
    _t2,
    _t3,
    _t4,
    _t5,
    _t6,
    _t7,
    _t8,
    _t9,
    _t10,
    _t11,
    _t12,
    _t13,
    _t14,
    _t15,
    _t16,
    _t17,
    _t18,
    _t19,
    _t20,
    _t21,
    _t22,
    _t23,
    _t24,
    _t25,
    _t26,
    _t27,
    _t28,
    _t29,
    _t30,
    _t31,
    _t32,
    _t33,
    _t34,
    _t35,
    _t36,
    _t37,
    _t38,
    _t39,
    _t40,
    _t41,
    _t42,
    _t43,
    _t44,
    _t45,
    _t46,
    _t47,
    _t48,
    _t49,
    _t50,
    _t51,
    _t52,
    _t53,
    _t54,
    _t55,
    _t56,
    _t57,
    _t58,
    _t59,
    _t60,
    _t61,
    _t62,
    _t63,
    _t64,
    _t65,
    _t66,
    _t67,
    _t68,
    _t69,
    _t70,
    _t71,
    _t72,
    _t73,
    _t74,
    _t75,
    _t76,
    _t77,
    _t78,
    _t79,
    _t80,
    _t81,
    _t82,
    _t83,
    _t84,
    _t85,
    _t86,
    _t87,
    _t88,
    _t89,
    _t90,
    _t91,
    _t92,
    _t93,
    _t94,
    _t95,
    _t96,
    _t97,
    _t98,
    _t99,
    _t100,
    _t101,
    _t102,
    _t103,
    _t104,
    _t105,
    _t106,
    _t107,
    _t108,
    _t109,
    _t110,
    _t111,
    _t112,
    _t113,
    _t114,
    _t115,
    _t116,
    _t117,
    _t118,
    _t119,
    _t120,
    _t121,
    _t122,
    _t123,
    _t124,
    _t125,
    _t126,
    _t127,
    _t128,
    _t129,
    _t130,
    _t131,
    _t132,
    _t133,
    _t134,
    _t135,
    _t136,
    _t137,
    _t138,
    _t139,
    _t140,
    _t141,
    _t142,
    _t143,
    _t144,
    _t145,
    _t146,
    _t147,
    _t148,
    _t149,
    _t150,
    _t151,
    _t152,
    _t153,
    _t154,
    _t155,
    _t156,
    _t157,
    _t158,
    _t159,
    _t160,
    _t161,
    _t162,
    _t163,
    _t164,
    _t165,
    _t166,
    _t167,
    _t168,
    _t169,
    _t170,
    _t171,
    _t172,
    _t173,
    _t174,
    _t175,
    _t176,
    _t177,
    _t178,
    _t179,
    _t180,
    _t181,
    _t182,
    _t183,
    _t184,
    _t185,
    _t186,
    _t187,
    _t188,
    _t189,
    _t190,
    _t191,
    _t192,
    _t193,
    _t194,
    _t195,
    _t196,
    _t197,
    _t198,
    _t199,
    _t200,
    _t201,
    _t202,
    _t203,
    _t204,
    _t205,
    _t206,
    _t207,
    _t208,
    _t209,
    _t210,
    _t211,
    _t212,
    _t213,
    _t214,
    _t215,
    _t216,
    _t217,
    _t218,
    _t219,
    _t220,
    _t221,
    _t222,
    _t223,
    _t224,
    _t225,
    _t226,
    _t227,
    _t228,
    _t229,
    _t230,
    _t231,
    _t232,
    _t233,
    _t234,
    _t235,
    _t236,
    _t237,
    _t238,
    _t239,
    _t240,
    _t241,
    _t242,
    _t243,
    _t244,
    _t245,
    _t246,
    _t247,
    _t248,
    _t249,
    _t250,
    _t251,
    _t252,
    _t253,
    _t254,
    _t255,
    _t256,
    _t257,
    _t258,
    _t259,
    _t260,
    _t261,
    _t262,
    _t263,
    _t264,
    _t265,
    _t266,
    _t267,
    _t268,
    _t269,
    _t270,
    _t271,
    _t272,
    _t273,
    _t274,
    _t275,
    _t276,
    _t277,
    _t278,
    _t279,
    _t280,
    _t281,
    _t282,
    _t283,
    _t284,
    _t285,
    _t286,
    _t287,
    _t288,
    _t289,
    _t290,
    _t291,
    _t292,
    _t293,
    _t294,
    _t295,
    _t296,
    _t297,
    _t298,
    _t299,
    _t300,
    _t301,
    _t302,
    _t303,
    _t304,
    _t305,
    _t306,
    _t307,
    _t308,
    _t309,
    _t310,
    _t311,
    _t312,
    _t313,
    _t314,
    _t315,
    _t316,
    _t317,
    _t318,
    _t319,
    _t320,
    _t321,
    _t322,
    _t323,
    _t324,
    _t325,
    _t326,
    _t327,
    _t328,
    _t329,
    _t330,
    _t331,
    _t332,
    _t333,
    _t334,
    _t335,
    _t336,
    _t337,
    _t338,
    _t339,
    _t340,
    _t341,
    _t342,
    _t343,
    _t344,
    _t345,
    _t346,
    _t347,
    _t348,
    _t349,
    _t350,
    _t351,
    _t352,
    _t353,
    _t354,
    _t355,
    _t356,
    _t357,
    _t358,
    _t359,
    _t360,
    _t361,
    _t362,
    _t363,
    _t364,
    _t365,
    _t366,
    _t367,
    _t368,
    _t369,
    _t370,
    _t371,
    _t372,
    _t373,
    _t374,
    _t375,
    _t376,
    _t377,
    _t378,
    _t379,
    _t380,
    _t381,
    _t382,
    _t383,
    _t384,
    _t385,
    _t386,
    _t387,
    _t388,
    _t389,
    _t390,
    _t391,
    _t392,
    _t393,
    _t394,
    _t395,
    _t396,
    _t397,
    _t398,
    _t399,
    _t400,
    _t401,
    _t402,
    _t403,
    _t404,
    _t405,
    _t406,
    _t407,
    _t408,
    _t409,
    _t410,
    _t411,
    _t412,
    _t413,
    _t414,
    _t415,
    _t416,
    _t417,
    _t418,
    _t419,
    _t420,
    _t421,
    _t422,
    _t423,
    _t424,
    _t425,
    _t426,
    _t427,
    _t428,
    _t429,
    _t430,
    _t431,
    _t432,
    _t433,
    _t434,
    _t435,
    _t436,
    _t437,
    _t438,
    _t439,
    _t440,
    _t441,
    _t442,
    _t443,
    _t444,
    _t445,
    _t446,
    _t447,
    _t448,
    _t449,
    _t450,
    _t451,
    _t452,
    _t453,
    _t454,
    _t455,
    _t456,
    _t457,
    _t458,
    _t459,
    _t460,
    _t461,
    _t462,
    _t463,
    _t464,
    _t465,
    _t466,
    _t467,
    _t468,
    _t469,
    _t470,
    _t471,
    _t472,
    _t473,
    _t474,
    _t475,
    _t476,
    _t477,
    _t478,
    _t479,
    _t480,
    _t481,
    _t482,
    _t483,
    _t484,
    _t485,
    _t486,
    _t487,
    _t488,
    _t489,
    _t490,
    _t491,
    _t492,
    _t493,
    _t494,
    _t495,
    _t496,
    _t497,
    _t498,
    _t499,
    _t500,
    _t501,
    _t502,
    _t503,
    _t504,
    _t505,
    _t506,
    _t507,
    _t508,
    _t509,
    _t510,
    _t511,
    _t512,
    _t513,
    _t514,
    _t515,
    _t516,
    _t517,
    _t518,
    _t519,
    _t520,
    _t521,
    _t522,
    _t523,
    _t524,
    _t525,
    _t526,
    _t527,
    _t528,
    _t529,
    _t530,
    _t531,
    _t532,
    _t533,
    _t534,
    _t535,
    _t536,
    _t537,
    _t538,
    _t539,
    _t540,
    _t541,
    _t542,
    _t543,
    _t544,
    _t545,
    _t546,
    _t547,
    _t548,
    _t549,
    _t550,
    _t551,
    _t552,
    _t553,
    _t554,
    _t555,
    _t556,
    _t557,
    _t558,
    _t559,
    _t560,
    _t561,
    _t562,
    _t563,
    _t564,
    _t565,
    _t566,
    _t567,
    _t568,
    _t569,
    _t570,
    _t571,
    _t572,
    _t573,
    _t574,
    _t575,
    _t576,
    _t577,
    _t578,
    _t579,
    _t580,
    _t581,
    _t582,
    _t583,
    _t584,
    _t585,
    _t586,
    _t587,
    _t588,
    _t589,
    _t590,
    _t591,
    _t592,
    _t593,
    _t594,
    _t595,
    _t596,
    _t597,
    _t598,
    _t599,
    _t600,
    _t601,
    _t602,
    _t603,
    _t604,
    _t605,
    _t606,
    _t607,
    _t608,
    _t609,
    _t610,
    _t611,
    _t612,
    _t613,
    _t614,
    _t615,
    _t616,
    _t617,
    _t618,
    _t619,
    _t620,
    _t621,
    _t622,
    _t623,
    _t624,
    _t625,
    _t626,
    _t627,
    _t628,
    _t629,
    _t630,
    _t631,
    _t632,
    _t633,
    _t634,
    _t635,
    _t636,
    _t637,
    _t638,
    _t639,
    _t640,
    _t641,
    _t642,
    _t643,
    _t644,
    _t645,
    _t646;

const JB2AFREEDB = {};
async function jb2aAAFreeDatabase(path) {
  JB2AFREEDB._templates = {
    ranged: [200, 200, 200]
  };
  const BASE = `${path}/Library/`;

  const prefix = str => (strs, ...exprs) => `${BASE}${str}/${strs.reduce((a, c, i) => a + exprs[i - 1] + c)}`;

  const l0 = prefix('Cantrip');
  const l1 = prefix('1st_Level');
  const l2 = prefix('2nd_Level');
  const l3 = prefix('3rd_Level');
  const l4 = prefix('4th_Level');
  const l5 = prefix('5th_Level');
  const l6 = prefix('6th_Level');
  const l7 = prefix('7th_Level');
  const lg = prefix('Generic');
  /**
   * Range Types:
   * 
   * Weapon
   * Spell
   * Generic
   * 
   */

  JB2AFREEDB.range = {
    _template: 'ranged',
    weapon: {
      arrow: {
        "regular": {
          regular: {
            '05ft': [lg(_t || (_t = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_05ft_600x400.webm`))],
            '15ft': [lg(_t2 || (_t2 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t3 || (_t3 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t4 || (_t4 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t5 || (_t5 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_White_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t6 || (_t6 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t7 || (_t7 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t8 || (_t8 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t9 || (_t9 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t10 || (_t10 = _`Weapon_Attacks/Ranged/Arrow01_01_Regular_Green_90ft_4000x400.webm`))]
          }
        },
        'physical': {
          blue: {
            '05ft': [lg(_t11 || (_t11 = _`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t12 || (_t12 = _`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t13 || (_t13 = _`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t14 || (_t14 = _`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t15 || (_t15 = _`Weapon_Attacks/Ranged/Arrow02_01_Regular_Blue_Physical_90ft_4000x400.webm`))]
          }
        }
      },
      bolt: {
        'physical': {
          orange: {
            '05ft': [lg(_t16 || (_t16 = _`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_05ft_600x400.webm`))],
            '15ft': [lg(_t17 || (_t17 = _`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_15ft_1000x400.webm`))],
            '30ft': [lg(_t18 || (_t18 = _`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_30ft_1600x400.webm`))],
            '60ft': [lg(_t19 || (_t19 = _`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_60ft_2800x400.webm`))],
            '90ft': [lg(_t20 || (_t20 = _`Weapon_Attacks/Ranged/Bolt01_01_Regular_Orange_Physical_90ft_4000x400.webm`))]
          }
        }
      },
      bullet: {
        '1': {
          orange: {
            '05ft': [lg(_t21 || (_t21 = _`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t22 || (_t22 = _`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t23 || (_t23 = _`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t24 || (_t24 = _`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t25 || (_t25 = _`Weapon_Attacks/Ranged/Bullet_01_Regular_Orange_90ft_4000x400.webm`))]
          }
        },
        '2': {
          orange: {
            '05ft': [lg(_t26 || (_t26 = _`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t27 || (_t27 = _`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t28 || (_t28 = _`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t29 || (_t29 = _`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t30 || (_t30 = _`Weapon_Attacks/Ranged/Bullet_02_Regular_Orange_90ft_4000x400.webm`))]
          }
        },
        '3': {
          blue: {
            '05ft': [lg(_t31 || (_t31 = _`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t32 || (_t32 = _`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t33 || (_t33 = _`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t34 || (_t34 = _`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t35 || (_t35 = _`Weapon_Attacks/Ranged/Bullet_03_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      },
      dagger: {
        '01': {
          white: {
            '15ft': [lg(_t36 || (_t36 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_15ft_1000x400.webm`))],
            '30ft': [lg(_t37 || (_t37 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_30ft_1600x400.webm`))],
            '60ft': [lg(_t38 || (_t38 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_60ft_2800x400.webm`))],
            '90ft': [lg(_t39 || (_t39 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_90ft_4000x400.webm`))]
          }
        }
      },
      lasershot: {
        '01': {
          blue: {
            '05ft': [lg(_t40 || (_t40 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t41 || (_t41 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t42 || (_t42 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t43 || (_t43 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t44 || (_t44 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_90ft_4000x400.webm`))]
          },
          green: {
            '05ft': [lg(_t45 || (_t45 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_05ft_600x400.webm`))],
            '15ft': [lg(_t46 || (_t46 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_15ft_1000x400.webm`))],
            '30ft': [lg(_t47 || (_t47 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_30ft_1600x400.webm`))],
            '60ft': [lg(_t48 || (_t48 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_60ft_2800x400.webm`))],
            '90ft': [lg(_t49 || (_t49 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Green_90ft_4000x400.webm`))]
          },
          orange: {
            '05ft': [lg(_t50 || (_t50 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [lg(_t51 || (_t51 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [lg(_t52 || (_t52 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [lg(_t53 || (_t53 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [lg(_t54 || (_t54 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Orange_90ft_4000x400.webm`))]
          },
          red: {
            '05ft': [lg(_t55 || (_t55 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_05ft_600x400.webm`))],
            '15ft': [lg(_t56 || (_t56 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_15ft_1000x400.webm`))],
            '30ft': [lg(_t57 || (_t57 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_30ft_1600x400.webm`))],
            '60ft': [lg(_t58 || (_t58 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_60ft_2800x400.webm`))],
            '90ft': [lg(_t59 || (_t59 = _`Weapon_Attacks/Ranged/LaserShot_01_Regular_Red_90ft_4000x400.webm`))]
          }
        }
      },
      lasersword: {
        '01': {
          blue: {
            '15ft': [lg(_t60 || (_t60 = _`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_15ft_1000x600.webm`))],
            '30ft': [lg(_t61 || (_t61 = _`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_30ft_1600x600.webm`))],
            '60ft': [lg(_t62 || (_t62 = _`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_60ft_2800x600.webm`))],
            '90ft': [lg(_t63 || (_t63 = _`Weapon_Attacks/Ranged/LaserSword01_01_Regular_Blue_90ft_4000x600.webm`))]
          }
        },
        '02': {
          red: {
            '15ft': [lg(_t64 || (_t64 = _`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_15ft_1000x600.webm`))],
            '30ft': [lg(_t65 || (_t65 = _`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_30ft_1600x600.webm`))],
            '60ft': [lg(_t66 || (_t66 = _`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_60ft_2800x600.webm`))],
            '90ft': [lg(_t67 || (_t67 = _`Weapon_Attacks/Ranged/LaserSwordDB01_01_Regular_Red_90ft_4000x600.webm`))]
          }
        }
      },
      snipe: {
        blue: {
          '05ft': [lg(_t68 || (_t68 = _`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_05ft_600x400.webm`))],
          '15ft': [lg(_t69 || (_t69 = _`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_15ft_1000x400.webm`))],
          '30ft': [lg(_t70 || (_t70 = _`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_30ft_1600x400.webm`))],
          '60ft': [lg(_t71 || (_t71 = _`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_60ft_2800x400.webm`))],
          '90ft': [lg(_t72 || (_t72 = _`Weapon_Attacks/Ranged/Snipe_01_Regular_Blue_90ft_4000x400.webm`))]
        }
      },
      snowball: {
        '01': {
          white: {
            '05ft': [lg(_t73 || (_t73 = _`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_05ft_600x500.webm`))],
            '15ft': [lg(_t74 || (_t74 = _`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_15ft_1000x500.webm`))],
            '30ft': [lg(_t75 || (_t75 = _`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_30ft_1600x500.webm`))],
            '60ft': [lg(_t76 || (_t76 = _`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_60ft_2800x500.webm`))],
            '90ft': [lg(_t77 || (_t77 = _`Weapon_Attacks/Ranged/SnowballToss_01_Regular_White_90ft_4000x500.webm`))]
          }
        }
      }
    },
    spell: {
      chainlightning: {
        primary: {
          blue: {
            '05ft': [l6(_t78 || (_t78 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_05ft_Primary_600x400.webm`))],
            '15ft': [l6(_t79 || (_t79 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_15ft_Primary_1000x400.webm`))],
            '30ft': [l6(_t80 || (_t80 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_30ft_Primary_1600x400.webm`))],
            '60ft': [l6(_t81 || (_t81 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_60ft_Primary_2800x400.webm`))],
            '90ft': [l6(_t82 || (_t82 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_90ft_Primary_4000x400.webm`))]
          }
        },
        secondary: {
          blue: {
            '05ft': [l6(_t83 || (_t83 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_05ft_Secondary_600x400.webm`))],
            '15ft': [l6(_t84 || (_t84 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_15ft_Secondary_1000x400.webm`))],
            '30ft': [l6(_t85 || (_t85 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_30ft_Secondary_1600x400.webm`))],
            '60ft': [l6(_t86 || (_t86 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_60ft_Secondary_2800x400.webm`))],
            '90ft': [l6(_t87 || (_t87 = _`Chain_Lightning/ChainLightning_01_Regular_Blue_90ft_Secondary_4000x400.webm`))]
          }
        }
      },
      disintegrate: {
        '01': {
          green: {
            '05ft': [l6(_t88 || (_t88 = _`Disintegrate/Disintegrate_01_Regular_Green01_05ft_600x400.webm`))],
            '15ft': [l6(_t89 || (_t89 = _`Disintegrate/Disintegrate_01_Regular_Green01_15ft_1000x400.webm`))],
            '30ft': [l6(_t90 || (_t90 = _`Disintegrate/Disintegrate_01_Regular_Green01_30ft_1600x400.webm`))],
            '60ft': [l6(_t91 || (_t91 = _`Disintegrate/Disintegrate_01_Regular_Green01_60ft_2800x400.webm`))],
            '90ft': [l6(_t92 || (_t92 = _`Disintegrate/Disintegrate_01_Regular_Green01_90ft_4000x400.webm`))]
          }
        }
      },
      eldritchblast: {
        '01': {
          purple: {
            '05ft': [l0(_t93 || (_t93 = _`Eldritch_Blast/EldritchBlast_01_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [l0(_t94 || (_t94 = _`Eldritch_Blast/EldritchBlast_01_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [l0(_t95 || (_t95 = _`Eldritch_Blast/EldritchBlast_01_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [l0(_t96 || (_t96 = _`Eldritch_Blast/EldritchBlast_01_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [l0(_t97 || (_t97 = _`Eldritch_Blast/EldritchBlast_01_Regular_Purple_90ft_4000x400.webm`))]
          }
        }
      },
      fireballbeam: {
        '01': {
          orange: {
            '05ft': [l3(_t98 || (_t98 = _`Fireball/FireballBeam_01_Orange_05ft_600x400.webm`))],
            '15ft': [l3(_t99 || (_t99 = _`Fireball/FireballBeam_01_Orange_15ft_1000x400.webm`))],
            '30ft': [l3(_t100 || (_t100 = _`Fireball/FireballBeam_01_Orange_30ft_1600x400.webm`))],
            '60ft': [l3(_t101 || (_t101 = _`Fireball/FireballBeam_01_Orange_60ft_2800x400.webm`))],
            '90ft': [l3(_t102 || (_t102 = _`Fireball/FireballBeam_01_Orange_90ft_4000x400.webm`))]
          }
        }
      },
      firebolt: {
        '01': {
          orange: {
            '05ft': [l0(_t103 || (_t103 = _`Fire_Bolt/FireBolt_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [l0(_t104 || (_t104 = _`Fire_Bolt/FireBolt_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [l0(_t105 || (_t105 = _`Fire_Bolt/FireBolt_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [l0(_t106 || (_t106 = _`Fire_Bolt/FireBolt_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [l0(_t107 || (_t107 = _`Fire_Bolt/FireBolt_01_Regular_Orange_90ft_4000x400.webm`))]
          }
        }
      },
      guidingbolt: {
        '01': {
          blueyellow: {
            '05ft': [l1(_t108 || (_t108 = _`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_05ft_600x400.webm`))],
            '15ft': [l1(_t109 || (_t109 = _`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_15ft_1000x400.webm`))],
            '30ft': [l1(_t110 || (_t110 = _`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_30ft_1600x400.webm`))],
            '60ft': [l1(_t111 || (_t111 = _`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_60ft_2800x400.webm`))],
            '90ft': [l1(_t112 || (_t112 = _`Guiding_Bolt/GuidingBolt_01_Regular_BlueYellow_90ft_4000x400.webm`))]
          }
        }
      },
      magicmissile: {
        '01': {
          purple: {
            '05ft': [l1(_t113 || (_t113 = _`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_01_600x400.webm`)), l1(_t114 || (_t114 = _`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_02_600x400.webm`)), l1(_t115 || (_t115 = _`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_03_600x400.webm`)), l1(_t116 || (_t116 = _`Magic_Missile/MagicMissile_01_Regular_Purple_05ft_04_600x400.webm`))],
            '15ft': [l1(_t117 || (_t117 = _`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_01_1000x400.webm`)), l1(_t118 || (_t118 = _`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_02_1000x400.webm`)), l1(_t119 || (_t119 = _`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_03_1000x400.webm`)), l1(_t120 || (_t120 = _`Magic_Missile/MagicMissile_01_Regular_Purple_15ft_04_1000x400.webm`))],
            '30ft': [l1(_t121 || (_t121 = _`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_01_1600x400.webm`)), l1(_t122 || (_t122 = _`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_02_1600x400.webm`)), l1(_t123 || (_t123 = _`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_03_1600x400.webm`)), l1(_t124 || (_t124 = _`Magic_Missile/MagicMissile_01_Regular_Purple_30ft_04_1600x400.webm`))],
            '60ft': [l1(_t125 || (_t125 = _`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_01_2800x400.webm`)), l1(_t126 || (_t126 = _`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_02_2800x400.webm`)), l1(_t127 || (_t127 = _`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_03_2800x400.webm`)), l1(_t128 || (_t128 = _`Magic_Missile/MagicMissile_01_Regular_Purple_60ft_04_2800x400.webm`))],
            '90ft': [l1(_t129 || (_t129 = _`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_01_4000x400.webm`)), l1(_t130 || (_t130 = _`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_02_4000x400.webm`)), l1(_t131 || (_t131 = _`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_03_4000x400.webm`)), l1(_t132 || (_t132 = _`Magic_Missile/MagicMissile_01_Regular_Purple_90ft_04_4000x400.webm`))]
          }
        }
      },
      rayoffrost: {
        '01': {
          blue: {
            '05ft': [l0(_t133 || (_t133 = _`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l0(_t134 || (_t134 = _`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l0(_t135 || (_t135 = _`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l0(_t136 || (_t136 = _`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l0(_t137 || (_t137 = _`Ray_Of_Frost/RayOfFrost_01_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      },
      scorchingray: {
        '01': {
          orange: {
            '05ft': [l2(_t138 || (_t138 = _`Scorching_Ray/ScorchingRay_01_Regular_Orange_05ft_600x400.webm`))],
            '15ft': [l2(_t139 || (_t139 = _`Scorching_Ray/ScorchingRay_01_Regular_Orange_15ft_1000x400.webm`))],
            '30ft': [l2(_t140 || (_t140 = _`Scorching_Ray/ScorchingRay_01_Regular_Orange_30ft_1600x400.webm`))],
            '60ft': [l2(_t141 || (_t141 = _`Scorching_Ray/ScorchingRay_01_Regular_Orange_60ft_2800x400.webm`))],
            '90ft': [l2(_t142 || (_t142 = _`Scorching_Ray/ScorchingRay_01_Regular_Orange_90ft_4000x400.webm`))]
          }
        }
      },
      witchbolt: {
        '01': {
          blue: {
            '05ft': [l1(_t143 || (_t143 = _`Witch_Bolt/WitchBolt_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [l1(_t144 || (_t144 = _`Witch_Bolt/WitchBolt_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [l1(_t145 || (_t145 = _`Witch_Bolt/WitchBolt_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [l1(_t146 || (_t146 = _`Witch_Bolt/WitchBolt_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [l1(_t147 || (_t147 = _`Witch_Bolt/WitchBolt_01_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      }
    },
    generic: {
      conduit: {
        circle: {
          purpleblue: {
            '05ft': [lg(_t148 || (_t148 = _`Energy/EnergyConduitCircle_01_Regular_BluePurple_05ft_600x400.webm`))],
            '15ft': [lg(_t149 || (_t149 = _`Energy/EnergyConduitCircle_01_Regular_BluePurple_15ft_1000x400.webm`))],
            '30ft': [lg(_t150 || (_t150 = _`Energy/EnergyConduitCircle_01_Regular_BluePurple_30ft_1600x400.webm`))],
            '60ft': [lg(_t151 || (_t151 = _`Energy/EnergyConduitCircle_01_Regular_BluePurple_60ft_2800x400.webm`))],
            '90ft': [lg(_t152 || (_t152 = _`Energy/EnergyConduitCircle_01_Regular_BluePurple_90ft_4000x400.webm`))]
          }
        }
      },
      energybeam: {
        '01': {
          blue: {
            '15ft': [lg(_t153 || (_t153 = _`Energy/EnergyBeam_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t154 || (_t154 = _`Energy/EnergyBeam_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t155 || (_t155 = _`Energy/EnergyBeam_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t156 || (_t156 = _`Energy/EnergyBeam_01_Regular_Blue_90ft_4000x400.webm`))]
          }
        },
        '02': {
          blue: {
            '15ft': [lg(_t157 || (_t157 = _`Energy/EnergyBeam_02_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t158 || (_t158 = _`Energy/EnergyBeam_02_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t159 || (_t159 = _`Energy/EnergyBeam_02_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t160 || (_t160 = _`Energy/EnergyBeam_02_Regular_Blue_90ft_4000x400.webm`))]
          }
        },
        '03': {
          blue: {
            '15ft': [lg(_t161 || (_t161 = _`Energy/EnergyBeam_03_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t162 || (_t162 = _`Energy/EnergyBeam_03_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t163 || (_t163 = _`Energy/EnergyBeam_03_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t164 || (_t164 = _`Energy/EnergyBeam_03_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      },
      energystrand: {
        '01': {
          purple: {
            '05ft': [lg(_t165 || (_t165 = _`Energy/EnergyStrand_01_Regular_Purple_05ft_600x400.webm`)), lg(_t166 || (_t166 = _`Energy/EnergyStrand_02_Regular_Purple_05ft_600x400.webm`)), lg(_t167 || (_t167 = _`Energy/EnergyStrand_03_Regular_Purple_05ft_600x400.webm`)), lg(_t168 || (_t168 = _`Energy/EnergyStrand_04_Regular_Purple_05ft_600x400.webm`))],
            '15ft': [lg(_t169 || (_t169 = _`Energy/EnergyStrand_01_Regular_Purple_15ft_1000x400.webm`)), lg(_t170 || (_t170 = _`Energy/EnergyStrand_02_Regular_Purple_15ft_1000x400.webm`)), lg(_t171 || (_t171 = _`Energy/EnergyStrand_03_Regular_Purple_15ft_1000x400.webm`)), lg(_t172 || (_t172 = _`Energy/EnergyStrand_04_Regular_Purple_15ft_1000x400.webm`))],
            '30ft': [lg(_t173 || (_t173 = _`Energy/EnergyStrand_01_Regular_Purple_30ft_1600x400.webm`)), lg(_t174 || (_t174 = _`Energy/EnergyStrand_02_Regular_Purple_30ft_1600x400.webm`)), lg(_t175 || (_t175 = _`Energy/EnergyStrand_03_Regular_Purple_30ft_1600x400.webm`)), lg(_t176 || (_t176 = _`Energy/EnergyStrand_04_Regular_Purple_30ft_1600x400.webm`))],
            '60ft': [lg(_t177 || (_t177 = _`Energy/EnergyStrand_01_Regular_Purple_60ft_2800x400.webm`)), lg(_t178 || (_t178 = _`Energy/EnergyStrand_02_Regular_Purple_60ft_2800x400.webm`)), lg(_t179 || (_t179 = _`Energy/EnergyStrand_03_Regular_Purple_60ft_2800x400.webm`)), lg(_t180 || (_t180 = _`Energy/EnergyStrand_04_Regular_Purple_60ft_2800x400.webm`))],
            '90ft': [lg(_t181 || (_t181 = _`Energy/EnergyStrand_01_Regular_Purple_90ft_4000x400.webm`)), lg(_t182 || (_t182 = _`Energy/EnergyStrand_02_Regular_Purple_90ft_4000x400.webm`)), lg(_t183 || (_t183 = _`Energy/EnergyStrand_03_Regular_Purple_90ft_4000x400.webm`)), lg(_t184 || (_t184 = _`Energy/EnergyStrand_04_Regular_Purple_90ft_4000x400.webm`))]
          }
        }
      },
      iceshard: {
        '01': {
          blue: {
            '05ft': [lg(_t185 || (_t185 = _`RangedSpell/ProjectileIceShard01_01_Regular_Blue_05ft_600x400.webm`))],
            '15ft': [lg(_t186 || (_t186 = _`RangedSpell/ProjectileIceShard01_01_Regular_Blue_15ft_1000x400.webm`))],
            '30ft': [lg(_t187 || (_t187 = _`RangedSpell/ProjectileIceShard01_01_Regular_Blue_30ft_1600x400.webm`))],
            '60ft': [lg(_t188 || (_t188 = _`RangedSpell/ProjectileIceShard01_01_Regular_Blue_60ft_2800x400.webm`))],
            '90ft': [lg(_t189 || (_t189 = _`RangedSpell/ProjectileIceShard01_01_Regular_Blue_90ft_4000x400.webm`))]
          }
        }
      }
    }
  };
  /**
   * Melee Types:
   *
   * Weapon 
   * Creature
   * 
   */

  JB2AFREEDB.melee = {
    creature: {
      bite: {
        '01': {
          red: [lg(_t190 || (_t190 = _`Creature/Bite_01_Regular_Red_400x400.webm`))]
        }
      },
      claw: {
        '01': {
          red: [lg(_t191 || (_t191 = _`Creature/Claws_01_Regular_Red_400x400.webm`))]
        }
      }
    },
    weapon: {
      club: {
        '01': {
          white: [[lg(_t192 || (_t192 = _`Weapon_Attacks/Melee/Club01_01_Regular_White_800x600.webm`))], [lg(_t193 || (_t193 = _`Weapon_Attacks/Melee/Club01_02_Regular_White_800x600.webm`))], [lg(_t194 || (_t194 = _`Weapon_Attacks/Melee/Club01_03_Regular_White_800x600.webm`))], [lg(_t195 || (_t195 = _`Weapon_Attacks/Melee/Club01_04_Regular_White_800x600.webm`))], [lg(_t196 || (_t196 = _`Weapon_Attacks/Melee/Club01_05_Regular_White_800x600.webm`))], [lg(_t197 || (_t197 = _`Weapon_Attacks/Melee/Club01_06_Regular_White_800x600.webm`))]]
        }
      },
      dagger: {
        '01': {
          white: [lg(_t198 || (_t198 = _`Weapon_Attacks/Melee/Dagger02_01_Regular_White_800x600.webm`))]
        }
      },
      falchion: {
        '01': {
          white: [lg(_t199 || (_t199 = _`Weapon_Attacks/Melee/Falchion01_01_Regular_White_800x600.webm`)), lg(_t200 || (_t200 = _`Weapon_Attacks/Melee/Falchion01_02_Regular_White_800x600.webm`)), lg(_t201 || (_t201 = _`Weapon_Attacks/Melee/Falchion01_03_Regular_White_800x600.webm`)), lg(_t202 || (_t202 = _`Weapon_Attacks/Melee/Falchion01_04_Regular_White_800x600.webm`)), lg(_t203 || (_t203 = _`Weapon_Attacks/Melee/Falchion01_05_Regular_White_800x600.webm`)), lg(_t204 || (_t204 = _`Weapon_Attacks/Melee/Falchion01_06_Regular_White_800x600.webm`))]
        }
      },
      flurryofblows: {
        'magical': {
          blue: {
            '1': [lg(_t205 || (_t205 = _`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Magical01_800x600.webm`))],
            '2': [lg(_t206 || (_t206 = _`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Magical02_800x600.webm`))]
          }
        },
        'physical': {
          blue: {
            '1': [lg(_t207 || (_t207 = _`Unarmed_Attacks/Flurry_Of_Blows/FlurryOfBlows_01_Regular_Blue_Physical01_800x600.webm`))]
          }
        }
      },
      glaive: {
        '01': {
          white: [lg(_t208 || (_t208 = _`Weapon_Attacks/Melee/Glaive01_01_Regular_White_800x600.webm`)), lg(_t209 || (_t209 = _`Weapon_Attacks/Melee/Glaive01_02_Regular_White_800x600.webm`)), lg(_t210 || (_t210 = _`Weapon_Attacks/Melee/Glaive01_03_Regular_White_800x600.webm`)), lg(_t211 || (_t211 = _`Weapon_Attacks/Melee/Glaive01_04_Regular_White_800x600.webm`)), lg(_t212 || (_t212 = _`Weapon_Attacks/Melee/Glaive01_05_Regular_White_800x600.webm`)), lg(_t213 || (_t213 = _`Weapon_Attacks/Melee/Glaive01_06_Regular_White_800x600.webm`))]
        }
      },
      greataxe: {
        '01': {
          white: [lg(_t214 || (_t214 = _`Weapon_Attacks/Melee/GreatAxe01_01_Regular_White_800x600.webm`))]
        }
      },
      greatclub: {
        '01': {
          white: [lg(_t215 || (_t215 = _`Weapon_Attacks/Melee/GreatClub01_01_Regular_White_800x600.webm`))]
        }
      },
      greatsword: {
        '01': {
          white: [lg(_t216 || (_t216 = _`Weapon_Attacks/Melee/GreatSword01_01_Regular_White_800x600.webm`))]
        }
      },
      halberd: {
        '01': {
          white: [lg(_t217 || (_t217 = _`Weapon_Attacks/Melee/Halberd01_01_Regular_White_800x600.webm`)), lg(_t218 || (_t218 = _`Weapon_Attacks/Melee/Halberd01_02_Regular_White_800x600.webm`)), lg(_t219 || (_t219 = _`Weapon_Attacks/Melee/Halberd01_03_Regular_White_800x600.webm`)), lg(_t220 || (_t220 = _`Weapon_Attacks/Melee/Halberd01_04_Regular_White_800x600.webm`)), lg(_t221 || (_t221 = _`Weapon_Attacks/Melee/Halberd01_05_Regular_White_800x600.webm`)), lg(_t222 || (_t222 = _`Weapon_Attacks/Melee/Halberd01_06_Regular_White_800x600.webm`))]
        }
      },
      hammer: {
        '01': {
          white: [[lg(_t223 || (_t223 = _`Weapon_Attacks/Melee/Hammer01_01_Regular_White_800x600.webm`))], [lg(_t224 || (_t224 = _`Weapon_Attacks/Melee/Hammer01_02_Regular_White_800x600.webm`))], [lg(_t225 || (_t225 = _`Weapon_Attacks/Melee/Hammer01_03_Regular_White_800x600.webm`))], [lg(_t226 || (_t226 = _`Weapon_Attacks/Melee/Hammer01_04_Regular_White_800x600.webm`))], [lg(_t227 || (_t227 = _`Weapon_Attacks/Melee/Hammer01_05_Regular_White_800x600.webm`))], [lg(_t228 || (_t228 = _`Weapon_Attacks/Melee/Hammer01_06_Regular_White_800x600.webm`))]]
        }
      },
      handaxe: {
        '01': {
          white: [lg(_t229 || (_t229 = _`Weapon_Attacks/Melee/HandAxe02_01_Regular_White_800x600.webm`))]
        }
      },
      lasersword: {
        '01': {
          blue: [lg(_t230 || (_t230 = _`Weapon_Attacks/Melee/LaserSword01_01_Regular_Blue_800x600.webm`))]
        }
      },
      mace: {
        '01': {
          white: [lg(_t231 || (_t231 = _`Weapon_Attacks/Melee/Mace01_01_Regular_White_800x600.webm`))]
        },
        '02': {
          white: [[lg(_t232 || (_t232 = _`Weapon_Attacks/Melee/Mace01_01_Regular_White_800x600.webm`))], [lg(_t233 || (_t233 = _`Weapon_Attacks/Melee/Mace01_02_Regular_White_800x600.webm`))], [lg(_t234 || (_t234 = _`Weapon_Attacks/Melee/Mace01_03_Regular_White_800x600.webm`))], [lg(_t235 || (_t235 = _`Weapon_Attacks/Melee/Mace01_04_Regular_White_800x600.webm`))], [lg(_t236 || (_t236 = _`Weapon_Attacks/Melee/Mace01_05_Regular_White_800x600.webm`))], [lg(_t237 || (_t237 = _`Weapon_Attacks/Melee/Mace01_06_Regular_White_800x600.webm`))]]
        }
      },
      maul: {
        '01': {
          white: [lg(_t238 || (_t238 = _`Weapon_Attacks/Melee/Maul01_01_Regular_White_800x600.webm`))]
        }
      },
      quarterstaff: {
        white: [lg(_t239 || (_t239 = _`Weapon_Attacks/Melee/Quarterstaff01_01_Regular_White_800x600.webm`)), lg(_t240 || (_t240 = _`Weapon_Attacks/Melee/Quarterstaff01_02_Regular_White_800x600.webm`)), lg(_t241 || (_t241 = _`Weapon_Attacks/Melee/Quarterstaff01_03_Regular_White_800x600.webm`)), lg(_t242 || (_t242 = _`Weapon_Attacks/Melee/Quarterstaff01_04_Regular_White_800x600.webm`)), lg(_t243 || (_t243 = _`Weapon_Attacks/Melee/Quarterstaff01_05_Regular_White_800x600.webm`)), lg(_t244 || (_t244 = _`Weapon_Attacks/Melee/Quarterstaff01_06_Regular_White_800x600.webm`))]
      },
      rapier: {
        '01': {
          white: [lg(_t245 || (_t245 = _`Weapon_Attacks/Melee/Rapier01_01_Regular_White_800x600.webm`)), lg(_t246 || (_t246 = _`Weapon_Attacks/Melee/Rapier01_02_Regular_White_800x600.webm`)), lg(_t247 || (_t247 = _`Weapon_Attacks/Melee/Rapier01_03_Regular_White_800x600.webm`)), lg(_t248 || (_t248 = _`Weapon_Attacks/Melee/Rapier01_04_Regular_White_800x600.webm`)), lg(_t249 || (_t249 = _`Weapon_Attacks/Melee/Rapier01_05_Regular_White_800x600.webm`)), lg(_t250 || (_t250 = _`Weapon_Attacks/Melee/Rapier01_06_Regular_White_800x600.webm`))]
        }
      },
      scimitar: {
        '01': {
          white: [lg(_t251 || (_t251 = _`Weapon_Attacks/Melee/Scimitar01_01_Regular_White_800x600.webm`)), lg(_t252 || (_t252 = _`Weapon_Attacks/Melee/Scimitar01_02_Regular_White_800x600.webm`)), lg(_t253 || (_t253 = _`Weapon_Attacks/Melee/Scimitar01_03_Regular_White_800x600.webm`)), lg(_t254 || (_t254 = _`Weapon_Attacks/Melee/Scimitar01_04_Regular_White_800x600.webm`)), lg(_t255 || (_t255 = _`Weapon_Attacks/Melee/Scimitar01_05_Regular_White_800x600.webm`)), lg(_t256 || (_t256 = _`Weapon_Attacks/Melee/Scimitar01_06_Regular_White_800x600.webm`))]
        }
      },
      shortsword: {
        '01': {
          white: [lg(_t257 || (_t257 = _`Weapon_Attacks/Melee/Shortsword01_01_Regular_White_800x600.webm`)), lg(_t258 || (_t258 = _`Weapon_Attacks/Melee/Shortsword01_02_Regular_White_800x600.webm`)), lg(_t259 || (_t259 = _`Weapon_Attacks/Melee/Shortsword01_03_Regular_White_800x600.webm`)), lg(_t260 || (_t260 = _`Weapon_Attacks/Melee/Shortsword01_04_Regular_White_800x600.webm`)), lg(_t261 || (_t261 = _`Weapon_Attacks/Melee/Shortsword01_05_Regular_White_800x600.webm`)), lg(_t262 || (_t262 = _`Weapon_Attacks/Melee/Shortsword01_06_Regular_White_800x600.webm`))]
        }
      },
      spear: {
        'fire': {
          white: [lg(_t263 || (_t263 = _`Weapon_Attacks/Melee/Spear01_01_Regular_White_800x600.webm`))]
        },
        '01': {
          white: [lg(_t264 || (_t264 = _`Weapon_Attacks/Melee/Spear01_01_Regular_White_800x600.webm`)), lg(_t265 || (_t265 = _`Weapon_Attacks/Melee/Spear01_02_Regular_White_800x600.webm`)), lg(_t266 || (_t266 = _`Weapon_Attacks/Melee/Spear01_03_Regular_White_800x600.webm`)), lg(_t267 || (_t267 = _`Weapon_Attacks/Melee/Spear01_04_Regular_White_800x600.webm`)), lg(_t268 || (_t268 = _`Weapon_Attacks/Melee/Spear01_05_Regular_White_800x600.webm`)), lg(_t269 || (_t269 = _`Weapon_Attacks/Melee/Spear01_06_Regular_White_800x600.webm`))]
        }
      },
      sword: {
        '01': {
          white: [lg(_t270 || (_t270 = _`Weapon_Attacks/Melee/Sword01_01_Regular_White_800x600.webm`)), lg(_t271 || (_t271 = _`Weapon_Attacks/Melee/Sword01_02_Regular_White_800x600.webm`)), lg(_t272 || (_t272 = _`Weapon_Attacks/Melee/Sword01_03_Regular_White_800x600.webm`)), lg(_t273 || (_t273 = _`Weapon_Attacks/Melee/Sword01_04_Regular_White_800x600.webm`)), lg(_t274 || (_t274 = _`Weapon_Attacks/Melee/Sword01_05_Regular_White_800x600.webm`)), lg(_t275 || (_t275 = _`Weapon_Attacks/Melee/Sword01_06_Regular_White_800x600.webm`))]
        }
      },
      unarmedstrike: {
        'magical': {
          blue: {
            '1': [lg(_t276 || (_t276 = _`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Magical01_800x600.webm`))],
            '2': [lg(_t277 || (_t277 = _`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Magical02_800x600.webm`))]
          }
        },
        'physical': {
          blue: {
            '1': [lg(_t278 || (_t278 = _`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Physical01_800x600.webm`))],
            '2': [lg(_t279 || (_t279 = _`Unarmed_Attacks/Unarmed_Strike/UnarmedStrike_01_Regular_Blue_Physical02_800x600.webm`))]
          }
        }
      },
      warhammer: {
        '01': {
          white: [[lg(_t280 || (_t280 = _`Weapon_Attacks/Melee/Warhammer01_01_Regular_White_800x600.webm`))], [lg(_t281 || (_t281 = _`Weapon_Attacks/Melee/Warhammer01_02_Regular_White_800x600.webm`))], [lg(_t282 || (_t282 = _`Weapon_Attacks/Melee/Warhammer01_03_Regular_White_800x600.webm`))], [lg(_t283 || (_t283 = _`Weapon_Attacks/Melee/Warhammer01_04_Regular_White_800x600.webm`))], [lg(_t284 || (_t284 = _`Weapon_Attacks/Melee/Warhammer01_05_Regular_White_800x600.webm`))], [lg(_t285 || (_t285 = _`Weapon_Attacks/Melee/Warhammer01_06_Regular_White_800x600.webm`))]]
        }
      },
      wrench: {
        '01': {
          white: [[lg(_t286 || (_t286 = _`Weapon_Attacks/Melee/Wrench01_01_Regular_White_800x600.webm`))], [lg(_t287 || (_t287 = _`Weapon_Attacks/Melee/Wrench01_02_Regular_White_800x600.webm`))], [lg(_t288 || (_t288 = _`Weapon_Attacks/Melee/Wrench01_03_Regular_White_800x600.webm`))], [lg(_t289 || (_t289 = _`Weapon_Attacks/Melee/Wrench01_04_Regular_White_800x600.webm`))], [lg(_t290 || (_t290 = _`Weapon_Attacks/Melee/Wrench01_05_Regular_White_800x600.webm`))], [lg(_t291 || (_t291 = _`Weapon_Attacks/Melee/Wrench01_06_Regular_White_800x600.webm`))]]
        }
      }
    }
  };
  /**
   * Template Types:
   * 
   * Cone
   * Square
   * Circle
   * Ray
   * 
   */

  JB2AFREEDB.templatefx = {
    circle: {
      armsofhadar: {
        '01': {
          darkpurple: [l1(_t292 || (_t292 = _`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkpurple: [l4(_t293 || (_t293 = _`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))]
        }
      },
      calllightning: {
        '01': {
          blue: [l3(_t294 || (_t294 = _`Call_Lightning/CallLightning_01_Blue_1000x1000.webm`))],
          blueorange: [l3(_t295 || (_t295 = _`Call_Lightning/CallLightning_01_BlueOrange_1000x1000.webm`))],
          green: [l3(_t296 || (_t296 = _`Call_Lightning/CallLightning_01_Green_1000x1000.webm`))],
          pinkyellow: [l3(_t297 || (_t297 = _`Call_Lightning/CallLightning_01_PinkYellow_1000x1000.webm`))],
          purple: [l3(_t298 || (_t298 = _`Call_Lightning/CallLightning_01_Purple_1000x1000.webm`))],
          red: [l3(_t299 || (_t299 = _`Call_Lightning/CallLightning_01_Red_1000x1000.webm`))],
          yellow: [l3(_t300 || (_t300 = _`Call_Lightning/CallLightning_01_Yellow_1000x1000.webm`))]
        }
      },
      cloudofdaggers: {
        '01': {
          blue: [l2(_t301 || (_t301 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Blue_400x400.webm`))],
          green: [l2(_t302 || (_t302 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Green_400x400.webm`))],
          orange: [l2(_t303 || (_t303 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t304 || (_t304 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Purple_400x400.webm`))],
          red: [l2(_t305 || (_t305 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t306 || (_t306 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Yellow_400x400.webm`))]
        }
      },
      crackedshield: {
        '01': {
          darkpurple: [lg(_t307 || (_t307 = _`Template/Circle/TemplateShieldCrackedCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      darkness: {
        '01': {
          black: [l2(_t308 || (_t308 = _`Darkness/Darkness_01_Black_600x600.webm`))],
          green: [l2(_t309 || (_t309 = _`Darkness/Darkness_01_Green_600x600.webm`))]
        }
      },
      detectmagic: {
        '01': {
          blue: [l1(_t310 || (_t310 = _`Detect_Magic/DetectMagicCircle_01_Regular_Blue_1200x1200.webm`))]
        }
      },
      drop: {
        '01': {
          red: [lg(_t311 || (_t311 = _`Template/Circle/TemplateDropCircle_01_Regular_Red_800x800.webm`))]
        }
      },
      explosion: {
        '01': {
          blue: [lg(_t312 || (_t312 = _`Explosion/Explosion_02_Blue_400x400.webm`)), lg(_t313 || (_t313 = _`Explosion/Explosion_04_Regular_Blue_400x400.webm`))],
          orange: [lg(_t314 || (_t314 = _`Explosion/Explosion_01_Orange_400x400.webm`))],
          yellowblue: [lg(_t315 || (_t315 = _`Explosion/Explosion_03_Regular_BlueYellow_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          darkpurple: [lg(_t316 || (_t316 = _`Template/Circle/TemplateFearCircle_01_Dark_Purple_800x800.webm`))]
        }
      },
      fireball: {
        explode: {
          '01': {
            orange: [l3(_t317 || (_t317 = _`Fireball/FireballExplosion_01_Orange_800x800.webm`))]
          }
        },
        loop: {
          orange: [l3(_t318 || (_t318 = _`Fireball/FireballLoop_01_Orange_800x800.webm`))]
        },
        nodebris: {
          orange: [l3(_t319 || (_t319 = _`Fireball/FireballLoopNoDebris_01_Orange_800x800.webm`))]
        }
      },
      fogcloud: {
        '01': {
          white: [l1(_t320 || (_t320 = _`Fog_Cloud/FogCloud_01_White_800x800.webm`))]
        }
      },
      heart: {
        '01': {
          pink: [lg(_t321 || (_t321 = _`Template/Circle/TemplateHeartCircle_01_Regular_Pink_800x800.webm`))]
        }
      },
      horror: {
        '01': {
          purple: [lg(_t322 || (_t322 = _`Template/Circle/TemplateHorrorCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      magicsign: {
        abjuration: {
          blue: [lg(_t323 || (_t323 = _`Magic_Signs/AbjurationCircleLoop_02_Regular_Blue_800x800.webm`))]
        },
        conjuration: {
          yellow: [lg(_t324 || (_t324 = _`Magic_Signs/ConjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        },
        divination: {
          blue: [lg(_t325 || (_t325 = _`Magic_Signs/DivinationCircleLoop_02_Regular_Blue_800x800.webm`))]
        },
        enchantment: {
          pink: [lg(_t326 || (_t326 = _`Magic_Signs/EnchantmentCircleLoop_02_Regular_Pink_800x800.webm`))]
        },
        evocation: {
          red: [lg(_t327 || (_t327 = _`Magic_Signs/EvocationCircleLoop_02_Regular_Red_800x800.webm`))]
        },
        illusion: {
          purple: [lg(_t328 || (_t328 = _`Magic_Signs/IllusionCircleLoop_02_Regular_Purple_800x800.webm`))]
        },
        necromancy: {
          green: [lg(_t329 || (_t329 = _`Magic_Signs/NecromancyCircleLoop_02_Regular_Green_800x800.webm`))]
        },
        transmutation: {
          yellow: [lg(_t330 || (_t330 = _`Magic_Signs/TransmutationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      moonbeam: {
        loop: {
          blue: [l2(_t331 || (_t331 = _`Moonbeam/Moonbeam_01_Regular_Blue_400x400.webm`))]
        },
        nopulse: {
          blue: [l2(_t332 || (_t332 = _`Moonbeam/MoonbeamNoPulse_01_Regular_Blue_400x400.webm`))]
        },
        intro: {
          blue: [l2(_t333 || (_t333 = _`Moonbeam/MoonbeamIntro_01_Regular_Blue_400x400.webm`))]
        },
        outro: {
          blue: [l2(_t334 || (_t334 = _`Moonbeam/MoonbeamOutro_01_Regular_Blue_400x400.webm`))]
        }
      },
      musicnote: {
        '01': {
          blue: [lg(_t335 || (_t335 = _`Template/Circle/TemplateMusicNoteCircle_01_Regular_Blue_800x800.webm`))]
        }
      },
      outpulse: {
        "01": {
          whiteblue: [lg(_t336 || (_t336 = _`Template/Circle/OutPulse/OutPulse_01_Regular_BlueWhite_Burst_600x600.webm`))]
        },
        "02": {
          whiteblue: [lg(_t337 || (_t337 = _`Template/Circle/OutPulse/OutPulse_02_Regular_BlueWhite_Burst_600x600.webm`))]
        }
      },
      poison: {
        '01': {
          darkgreen: [lg(_t338 || (_t338 = _`Template/Circle/TemplatePoisonCircle_01_Dark_Green_800x800.webm`))]
        }
      },
      runes: {
        '01': {
          orange: [lg(_t339 || (_t339 = _`Template/Circle/TemplateRunesCircle_01_Regular_Orange_800x800.webm`))]
        }
      },
      shatter: {
        '01': {
          blue: [l2(_t340 || (_t340 = _`Shatter/Shatter_01_Blue_400x400.webm`))]
        }
      },
      shields: {
        '01': {
          green: [lg(_t341 || (_t341 = _`Template/Circle/TemplateShieldCircle_01_Regular_Green_800x800.webm`))]
        }
      },
      skull: {
        '01': {
          purple: [lg(_t342 || (_t342 = _`Template/Circle/TemplateSkullCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      sleetstorm: {
        '01': {
          blue: [l3(_t343 || (_t343 = _`Sleet_Storm/SleetStorm_01_Blue_800x800.webm`))]
        }
      },
      snowflakes: {
        '01': {
          blue: [lg(_t344 || (_t344 = _`Template/Circle/TemplateSnowflakeCircle_01_Regular_Blue_800x800.webm`))]
        }
      },
      stun: {
        '01': {
          purple: [lg(_t345 || (_t345 = _`Template/Circle/TemplateStunCircle_01_Regular_Purple_800x800.webm`))]
        }
      },
      snowflake: {
        "01": {
          whiteblue: [lg(_t346 || (_t346 = _`Ice/SnowflakeBurst_01_Regular_BlueWhite_Burst_600x600.webm`))]
        }
      },
      vortex: {
        loop: {
          blue: [lg(_t347 || (_t347 = _`Template/Circle/Vortex_01_Regular_Blue_600x600.webm`))]
        },
        intro: {
          blue: [lg(_t348 || (_t348 = _`Template/Circle/VortexIntro_01_Regular_Blue_600x600.webm`))]
        },
        outro: {
          blue: [lg(_t349 || (_t349 = _`Template/Circle/VortexOutro_01_Regular_Blue_600x600.webm`))]
        }
      },
      whirl: {
        loop: {
          blue: [lg(_t350 || (_t350 = _`Template/Circle/Whirl_01_Regular_Blue_600x600.webm`))]
        },
        intro: {
          blue: [lg(_t351 || (_t351 = _`Template/Circle/WhirlIntro_01_Regular_Blue_600x600.webm`))]
        },
        outro: {
          blue: [lg(_t352 || (_t352 = _`Template/Circle/WhirlOutro_01_Regular_Blue_600x600.webm`))]
        }
      }
    },
    cone: {
      breathweapon: {
        'cold': {
          blue: [lg(_t353 || (_t353 = _`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t354 || (_t354 = _`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t355 || (_t355 = _`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t356 || (_t356 = _`Template/Cone/Breath_Weapon/BreathWeapon_Cold01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))]
        },
        'fire01': {
          blue: [lg(_t357 || (_t357 = _`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t358 || (_t358 = _`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t359 || (_t359 = _`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t360 || (_t360 = _`Template/Cone/Breath_Weapon/BreathWeapon_Fire01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))]
        },
        'poison': {
          blue: [lg(_t361 || (_t361 = _`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Blue_30ft_Cone_Burst_600x600.webm`))],
          green: [lg(_t362 || (_t362 = _`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Green_30ft_Cone_Burst_600x600.webm`))],
          orange: [lg(_t363 || (_t363 = _`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Orange_30ft_Cone_Burst_600x600.webm`))],
          purple: [lg(_t364 || (_t364 = _`Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Purple_30ft_Cone_Burst_600x600.webm`))]
        }
      },
      coneofcold: {
        '01': {
          blue: [l5(_t365 || (_t365 = _`Cone_Of_Cold/ConeOfCold_01_Regular_Blue_600x600.webm`))],
          green: [l5(_t366 || (_t366 = _`Cone_Of_Cold/ConeOfCold_01_Regular_Green_600x600.webm`))],
          orange: [l5(_t367 || (_t367 = _`Cone_Of_Cold/ConeOfCold_01_Regular_Orange_600x600.webm`))],
          purple: [l5(_t368 || (_t368 = _`Cone_Of_Cold/ConeOfCold_01_Regular_Purple_600x600.webm`))]
        }
      },
      burninghands: {
        '01': {
          orange: [l1(_t369 || (_t369 = _`Burning_Hands/BurningHands_01_Regular_Orange_600x600.webm`))]
        },
        '02': {
          orange: [l1(_t370 || (_t370 = _`Burning_Hands/BurningHands_02_Regular_Orange_600x600.webm`))]
        }
      }
    },
    ray: {
      breathweapon: {
        acid: {
          green: [lg(_t371 || (_t371 = _`Template/Line/Breath_Weapon/BreathWeapon_Acid01_Regular_Green_30ft_Line_Burst_1200x200.webm`))]
        },
        fire: {
          orange: [lg(_t372 || (_t372 = _`Template/Line/Breath_Weapon/BreathWeapon_Fire01_Regular_Orange_30ft_Line_Burst_1200x200.webm`))]
        },
        lightning: {
          blue: [lg(_t373 || (_t373 = _`Template/Line/Breath_Weapon/BreathWeapon_Lightning01_Regular_Blue_30ft_Line_Burst_1200x200.webm`))]
        }
      },
      lightningbolt: {
        '01': {
          blue: [l3(_t374 || (_t374 = _`Lightning_Bolt/LightningBolt_01_Regular_Blue_4000x200.webm`))]
        },
        '02': {
          blue: [l3(_t375 || (_t375 = _`Lightning_Bolt/LightningBolt_01_Regular_Blue_4000x400.webm`))]
        }
      },
      gustofwind: {
        slow: {
          white: [l2(_t376 || (_t376 = _`Gust_Of_Wind/GustOfWind_01_White_1200x200.webm`))]
        },
        fast: {
          white: [l2(_t377 || (_t377 = _`Gust_Of_Wind/GustOfWind_01_White_VeryFast_1200x200.webm`))]
        }
      }
    },
    square: {
      armsofhadar: {
        '01': {
          darkpurple: [l1(_t378 || (_t378 = _`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkpurple: [l4(_t379 || (_t379 = _`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))]
        }
      },
      crackedshield: {
        '01': {
          darkpurple: [lg(_t380 || (_t380 = _`Template/Square/TemplateShieldCrackedSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      drop: {
        '01': {
          red: [lg(_t381 || (_t381 = _`Template/Square/TemplateDropSquare_01_Regular_Red_600x600.webm`))]
        }
      },
      entangle: {
        '01': {
          brown: [l1(_t382 || (_t382 = _`Entangle/Entangle_01_Brown_400x400.webm`))],
          green: [l1(_t383 || (_t383 = _`Entangle/Entangle_01_Green_400x400.webm`))],
          yellow: [l1(_t384 || (_t384 = _`Entangle/Entangle_01_Yellow_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          darkpurple: [lg(_t385 || (_t385 = _`Template/Square/TemplateFearSquare_01_Dark_Purple_600x600.webm`))]
        }
      },
      grease: {
        "01": {
          brown: [l1(_t386 || (_t386 = _`Grease/Grease_Dark_Brown_600x600.webm`))]
        }
      },
      heart: {
        '01': {
          pink: [lg(_t387 || (_t387 = _`Template/Square/TemplateHeartSquare_01_Regular_Pink_600x600.webm`))]
        }
      },
      horror: {
        '01': {
          purple: [lg(_t388 || (_t388 = _`Template/Square/TemplateHorrorSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      musicnote: {
        '01': {
          blue: [lg(_t389 || (_t389 = _`Template/Circle/TemplateMusicNoteCircle_01_Regular_Blue_800x800.webm`))]
        }
      },
      poison: {
        '01': {
          darkgreen: [lg(_t390 || (_t390 = _`Template/Square/TemplatePoisonSquare_01_Dark_Green_600x600.webm`))]
        }
      },
      runes: {
        '01': {
          orange: [lg(_t391 || (_t391 = _`Template/Square/TemplateRunesSquare_01_Regular_Orange_600x600.webm`))]
        }
      },
      shields: {
        '01': {
          green: [lg(_t392 || (_t392 = _`Template/Square/TemplateShieldSquare_01_Regular_Green_600x600.webm`))]
        }
      },
      snowflakes: {
        '01': {
          blue: [lg(_t393 || (_t393 = _`Template/Square/TemplateSnowflakeSquare_01_Regular_Blue_600x600.webm`))]
        }
      },
      skull: {
        '01': {
          purple: [lg(_t394 || (_t394 = _`Template/Square/TemplateSkullSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      stun: {
        '01': {
          purple: [lg(_t395 || (_t395 = _`Template/Square/TemplateStunSquare_01_Regular_Purple_600x600.webm`))]
        }
      },
      thunderwave: {
        left: {
          blue: [l1(_t396 || (_t396 = _`Thunderwave/Thunderwave_01_Bright_Blue_BLeft_600x600.webm`))]
        },
        mid: {
          blue: [l1(_t397 || (_t397 = _`Thunderwave/Thunderwave_01_Bright_Blue_BMid_600x600.webm`))]
        },
        center: {
          blue: [l1(_t398 || (_t398 = _`Thunderwave/Thunderwave_01_Bright_Blue_Center_600x600.webm`))]
        }
      },
      web: {
        '01': {
          white: [l2(_t399 || (_t399 = _`Web/Web_01_White_01_400x400.webm`))]
        }
      }
    }
  };
  /**
   * Static Types:
   * 
   * Conditions
   * Creature
   * Energy
   * Fire
   * Generic
   * Ice
   * Lightning
   * Liquid
   * Magic Signs
   * Marker
   * Music
   * Particles
   * Shield Effects
   * Spell
   * Token Border
   * 
   */

  JB2AFREEDB.static = {
    conditions: {
      drop: {
        '02': {
          red: [lg(_t400 || (_t400 = _`Marker/MarkerDrop_02_Regular_Red_400x400.webm`))]
        },
        '03': {
          red: [lg(_t401 || (_t401 = _`Marker/MarkerDrop_03_Regular_Red_400x400.webm`))]
        }
      },
      fear: {
        '01': {
          darkpurple: [lg(_t402 || (_t402 = _`Marker/MarkerFear_01_Dark_Purple_400x400.webm`))]
        },
        '02': {
          darkpurple: [lg(_t403 || (_t403 = _`Marker/MarkerFear_02_Dark_Purple_400x400.webm`))]
        },
        '03': {
          darkpurple: [lg(_t404 || (_t404 = _`Marker/MarkerFear_03_Dark_Purple_400x400.webm`))]
        }
      },
      heart: {
        '01': {
          pink: [lg(_t405 || (_t405 = _`Marker/MarkerHeart_01_Regular_Pink_400x400.webm`))]
        },
        '02': {
          pink: [lg(_t406 || (_t406 = _`Marker/MarkerHeart_02_Regular_Pink_400x400.webm`))]
        },
        '03': {
          pink: [lg(_t407 || (_t407 = _`Marker/MarkerHeart_03_Regular_Pink_400x400.webm`))]
        }
      },
      horror: {
        '01': {
          purple: [lg(_t408 || (_t408 = _`Marker/MarkerHorror_01_Regular_Purple_400x400.webm`))]
        },
        '02': {
          purple: [lg(_t409 || (_t409 = _`Marker/MarkerHorror_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          purple: [lg(_t410 || (_t410 = _`Marker/MarkerHorror_03_Dark_Teal_400x400.webm`))]
        }
      },
      light: {
        pulse: {
          blue: [lg(_t411 || (_t411 = _`Marker/MarkerLight_01_Regular_Blue_400x400.webm`))]
        },
        nopulse: {
          blue: [lg(_t412 || (_t412 = _`Marker/MarkerLightNoPulse_01_Regular_Blue_400x400.webm`))]
        }
      },
      poison: {
        '02': {
          darkgreen: [lg(_t413 || (_t413 = _`Marker/MarkerPoison_02_Dark_Green_400x400.webm`))]
        },
        '03': {
          darkgreen: [lg(_t414 || (_t414 = _`Marker/MarkerPoison_03_Dark_Green_400x400.webm`))]
        }
      },
      runes: {
        '01': {
          darkorange: [lg(_t415 || (_t415 = _`Marker/MarkerRunes_01_Dark_Orange_400x400.webm`))]
        },
        '02': {
          orange: [lg(_t416 || (_t416 = _`Marker/MarkerRunes_02_Regular_Orange_400x400.webm`))]
        },
        '03': {
          orange: [lg(_t417 || (_t417 = _`Marker/MarkerRunes_03_Regular_Orange_400x400.webm`))]
        }
      },
      shields: {
        '02': {
          green: [lg(_t418 || (_t418 = _`Marker/MarkerShield_02_Regular_Green_400x400.webm`))]
        },
        '03': {
          green: [lg(_t419 || (_t419 = _`Marker/MarkerShield_03_Regular_Green_400x400.webm`))]
        }
      },
      crackedshield: {
        '02': {
          purple: [lg(_t420 || (_t420 = _`Marker/MarkerShieldCracked_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          purple: [lg(_t421 || (_t421 = _`Marker/MarkerShieldCracked_03_Regular_Purple_400x400.webm`))]
        }
      },
      skull: {
        '01': {
          darkorange: [lg(_t422 || (_t422 = _`Marker/MarkerSkull_01_Dark_Orange_400x400.webm`))]
        },
        '02': {
          purple: [lg(_t423 || (_t423 = _`Marker/MarkerSkull_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          purple: [lg(_t424 || (_t424 = _`Marker/MarkerSkull_03_Regular_Purple_400x400.webm`))]
        }
      },
      snowflakes: {
        '02': {
          blue: [lg(_t425 || (_t425 = _`Marker/MarkerSnowflake_02_Regular_Blue_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t426 || (_t426 = _`Marker/MarkerSnowflake_03_Regular_Blue_400x400.webm`))]
        }
      },
      stun: {
        '02': {
          purple: [lg(_t427 || (_t427 = _`Marker/MarkerStun_02_Regular_Purple_400x400.webm`))]
        },
        '03': {
          purple: [lg(_t428 || (_t428 = _`Marker/MarkerStun_03_Regular_Purple_400x400.webm`))]
        }
      },
      dizzystars: {
        '01': {
          blueorange: [lg(_t429 || (_t429 = _`Conditions/Dizzy_Stars/DizzyStars_01_BlueOrange_400x400.webm`))]
        }
      }
    },
    creature: {
      bite: {
        '01': {
          red: [lg(_t430 || (_t430 = _`Creature/Bite_01_Regular_Red_400x400.webm`))]
        }
      },
      claw: {
        '01': {
          red: [lg(_t431 || (_t431 = _`Creature/Claws_01_Regular_Red_400x400.webm`))]
        }
      }
    },
    energy: {
      energyfield: {
        '01': {
          blue: [lg(_t432 || (_t432 = _`Energy/EnergyField_01_Regular_Blue_600x600.webm`))]
        }
      },
      dodecahedron: {
        simple: {
          blue: [lg(_t433 || (_t433 = _`Energy/Dodecahedron_01_Regular_Blue_600x600.webm`))]
        },
        rolled: {
          blue: [lg(_t434 || (_t434 = _`Energy/DodecahedronRoll_01_Regular_Blue_600x600.webm`))]
        },
        runeabove: {
          yellowblue: [lg(_t435 || (_t435 = _`Energy/DodecahedronRuneAbove_01_Regular_BlueYellow_600x600.webm`))]
        },
        runebelow: {
          yellowblue: [lg(_t436 || (_t436 = _`Energy/DodecahedronRuneBelow_01_Regular_BlueYellow_600x600.webm`))]
        },
        starabove: {
          yellowblue: [lg(_t437 || (_t437 = _`Energy/DodecahedronStarAbove_01_Regular_BlueYellow_600x600.webm`))]
        },
        starbelow: {
          yellowblue: [lg(_t438 || (_t438 = _`Energy/DodecahedronStarBelow_01_Regular_BlueYellow_600x600.webm`))]
        }
      },
      shimmer: {
        '01': {
          blue: [lg(_t439 || (_t439 = _`Energy/Shimmer01_01_Regular_Blue_400x400.webm`))]
        }
      },
      sparkles: {
        '01': {
          blue: [lg(_t440 || (_t440 = _`Energy/SwirlingSparkles_01_Regular_Blue_400x400.webm`))]
        }
      }
    },
    fire: {
      eruption: {
        '01': {
          orange: [lg(_t441 || (_t441 = _`Fire/Eruption_01_Regular_Orange_600x600.webm`))]
        }
      },
      groundcrack: {
        '01': {
          orange: [lg(_t442 || (_t442 = _`Fire/GroundCrackLoop_01_Regular_Orange_600x600.webm`))]
        },
        '02': {
          orange: [lg(_t443 || (_t443 = _`Fire/GroundCrackLoop_02_Regular_Orange_600x600.webm`))]
        },
        '03': {
          orange: [lg(_t444 || (_t444 = _`Fire/GroundCrackLoop_03_Regular_Orange_600x600.webm`))]
        }
      },
      fireworks: {
        '01': {
          orangeyellow: [lg(_t445 || (_t445 = _`Fireworks/Firework01_01_Regular_OrangeYellow_600x600.webm`)), lg(_t446 || (_t446 = _`Fireworks/Firework03_01_Regular_OrangeYellow_600x600.webm`))],
          yellow: [lg(_t447 || (_t447 = _`Fireworks/Firework02_01_Regular_Yellow_600x600.webm`))]
        },
        '02': {
          orangeyellow: [lg(_t448 || (_t448 = _`Fireworks/Firework01_02_Regular_OrangeYellow_600x600.webm`)), lg(_t449 || (_t449 = _`Fireworks/Firework03_02_Regular_OrangeYellow_600x600.webm`))],
          yellow: [lg(_t450 || (_t450 = _`Fireworks/Firework02_02_Regular_Yellow_600x600.webm`))]
        }
      }
    },
    generic: {
      explosion: {
        '01': {
          blue: [lg(_t451 || (_t451 = _`Explosion/Explosion_02_Blue_400x400.webm`)), lg(_t452 || (_t452 = _`Explosion/Explosion_04_Regular_Blue_400x400.webm`))],
          orange: [lg(_t453 || (_t453 = _`Explosion/Explosion_01_Orange_400x400.webm`))],
          yellowblue: [lg(_t454 || (_t454 = _`Explosion/Explosion_03_Regular_BlueYellow_400x400.webm`))]
        }
      },
      impact: {
        "01": {
          blue: [lg(_t455 || (_t455 = _`Impact/Impact_01_Regular_Blue_400x400.webm`)), lg(_t456 || (_t456 = _`Impact/Impact_02_Regular_Blue_400x400.webm`)), lg(_t457 || (_t457 = _`Impact/Impact_03_Regular_Blue_400x400.webm`)), lg(_t458 || (_t458 = _`Impact/Impact_04_Regular_Blue_400x400.webm`)), lg(_t459 || (_t459 = _`Impact/Impact_11_Regular_Blue_400x400.webm`)), lg(_t460 || (_t460 = _`Impact/Impact_12_Regular_Blue_400x400.webm`))],
          orange: [lg(_t461 || (_t461 = _`Impact/Impact_05_Regular_Orange_400x400.webm`)), lg(_t462 || (_t462 = _`Impact/Impact_07_Regular_Orange_400x400.webm`)), lg(_t463 || (_t463 = _`Impact/Impact_08_Regular_Orange_400x400.webm`)), lg(_t464 || (_t464 = _`Impact/Impact_09_Regular_Orange_400x400.webm`)), lg(_t465 || (_t465 = _`Impact/Impact_10_Regular_Orange_400x400.webm`))],
          yellow: [lg(_t466 || (_t466 = _`Impact/Impact_06_Regular_Yellow_400x400.webm`)), lg(_t467 || (_t467 = _`Impact/Impact_07_Regular_Yellow_400x400.webm`))]
        }
      },
      indicator: {
        chevron: {
          yellow: [lg(_t468 || (_t468 = _`UI/3Chevrons_01_Regular_Yellow_200x200.webm`))]
        },
        '01': {
          yellow: [lg(_t469 || (_t469 = _`UI/Indicator_01_Regular_Yellow_200x200.webm`))]
        },
        '02': {
          green: [lg(_t470 || (_t470 = _`UI/Indicator01_02_Regular_BlueGreen_400x400.webm`))]
        },
        '03': {
          green: [lg(_t471 || (_t471 = _`UI/Indicator01_03_Regular_BlueGreen_200x200.webm`))]
        },
        '04': {
          green: [lg(_t472 || (_t472 = _`UI/Indicator02_02_Regular_BlueGreen_400x400.webm`))]
        },
        '05': {
          green: [lg(_t473 || (_t473 = _`UI/Indicator02_03_Regular_BlueGreen_200x200.webm`))]
        }
      },
      outpulse: {
        "01": {
          whiteblue: [lg(_t474 || (_t474 = _`Template/Circle/OutPulse/OutPulse_01_Regular_BlueWhite_Burst_600x600.webm`))]
        },
        "02": {
          whiteblue: [lg(_t475 || (_t475 = _`Template/Circle/OutPulse/OutPulse_02_Regular_BlueWhite_Burst_600x600.webm`))]
        }
      },
      smoke: {
        '01': {
          grey: [lg(_t476 || (_t476 = _`Smoke/SmokePuff01_01_Regular_Grey_400x400.webm`))]
        },
        '02': {
          grey: [lg(_t477 || (_t477 = _`Smoke/SmokePuff01_02_Regular_Grey_400x400.webm`))]
        },
        '03': {
          grey: [lg(_t478 || (_t478 = _`Smoke/SmokePuff01_03_Regular_Grey_400x400.webm`))]
        }
      },
      ui: {
        drop: {
          red: [lg(_t479 || (_t479 = _`UI/IconDrop_01_Regular_Red_200x200.webm`))]
        },
        fear: {
          darkpurple: [lg(_t480 || (_t480 = _`UI/IconFear_01_Dark_Purple_200x200.webm`))]
        },
        heart: {
          pink: [lg(_t481 || (_t481 = _`UI/IconHeart_01_Regular_Pink_200x200.webm`))]
        },
        horror: {
          purple: [lg(_t482 || (_t482 = _`UI/IconHorror_01_Regular_Purple_200x200.webm`))]
        },
        music: {
          blue: [lg(_t483 || (_t483 = _`UI/IconMusicNote_01_Regular_Blue_200x200.webm`))]
        },
        poison: {
          darkgreen: [lg(_t484 || (_t484 = _`UI/IconPoison_01_Dark_Green_200x200.webm`))]
        },
        rune01: {
          orange: [lg(_t485 || (_t485 = _`UI/IconRunes_01_Regular_Orange_200x200.webm`))]
        },
        rune02: {
          orange: [lg(_t486 || (_t486 = _`UI/IconRunes02_01_Regular_Orange_200x200.webm`))]
        },
        rune03: {
          orange: [lg(_t487 || (_t487 = _`UI/IconRunes03_01_Regular_Orange_200x200.webm`))]
        },
        shields: {
          green: [lg(_t488 || (_t488 = _`UI/IconShield_01_Regular_Green_200x200.webm`))]
        },
        crackedshield: {
          purple: [lg(_t489 || (_t489 = _`UI/IconShieldCracked_01_Regular_Purple_200x200.webm`))]
        },
        skull: {
          purple: [lg(_t490 || (_t490 = _`UI/IconSkull_01_Regular_Purple_200x200.webm`))]
        },
        snowflake: {
          blue: [lg(_t491 || (_t491 = _`UI/IconSnowflake_01_Regular_Blue_200x200.webm`))]
        },
        stun: {
          purple: [lg(_t492 || (_t492 = _`UI/IconStun_01_Regular_Purple_200x200.webm`))]
        }
      },
      vortex: {
        loop: {
          blue: [lg(_t493 || (_t493 = _`Template/Circle/Vortex_01_Regular_Blue_600x600.webm`))]
        },
        intro: {
          blue: [lg(_t494 || (_t494 = _`Template/Circle/VortexIntro_01_Regular_Blue_600x600.webm`))]
        },
        outro: {
          blue: [lg(_t495 || (_t495 = _`Template/Circle/VortexOutro_01_Regular_Blue_600x600.webm`))]
        }
      },
      whirl: {
        loop: {
          blue: [lg(_t496 || (_t496 = _`Template/Circle/Whirl_01_Regular_Blue_600x600.webm`))]
        },
        intro: {
          blue: [lg(_t497 || (_t497 = _`Template/Circle/WhirlIntro_01_Regular_Blue_600x600.webm`))]
        },
        outro: {
          blue: [lg(_t498 || (_t498 = _`Template/Circle/WhirlOutro_01_Regular_Blue_600x600.webm`))]
        }
      }
    },
    ice: {
      icespikes: {
        '01': {
          white: [lg(_t499 || (_t499 = _`Ice/IceSpikesRadialBurst_01_Regular_White_1000x1000.webm`))]
        }
      },
      snowflake: {
        "01": {
          whiteblue: [lg(_t500 || (_t500 = _`Ice/SnowflakeBurst_01_Regular_BlueWhite_Burst_600x600.webm`))]
        }
      }
    },
    lightning: {
      ball: {
        '01': {
          blue: [lg(_t501 || (_t501 = _`Lightning/LightningBall_01_Regular_Blue_400x400.webm`))]
        }
      },
      staticelectricity: {
        '01': {
          blue: [lg(_t502 || (_t502 = _`Lightning/StaticElectricity_01_Regular_Blue_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t503 || (_t503 = _`Lightning/StaticElectricity_02_Regular_Blue_400x400.webm`))]
        }
      }
    },
    liquid: {
      splash: {
        '01': {
          blue: [lg(_t504 || (_t504 = _`Liquid/LiquidSplash01_Regular_Blue_400x400.webm`))]
        }
      }
    },
    magicsign: {
      abjuration: {
        '01': {
          blue: [lg(_t505 || (_t505 = _`Magic_Signs/Abjuration_01_Blue_Circle_800x800.webm`))]
        },
        '02': {
          blue: [lg(_t506 || (_t506 = _`Magic_Signs/AbjurationCircleLoop_02_Regular_Blue_800x800.webm`))]
        }
      },
      conjuration: {
        '01': {
          yellow: [lg(_t507 || (_t507 = _`Magic_Signs/Conjuration_01_Yellow_Circle_800x800.webm`))]
        },
        '02': {
          yellow: [lg(_t508 || (_t508 = _`Magic_Signs/ConjurationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      },
      divination: {
        '01': {
          lightblue: [lg(_t509 || (_t509 = _`Magic_Signs/Divination_01_Light_Blue_Circle_800x800.webm`))]
        },
        '02': {
          blue: [lg(_t510 || (_t510 = _`Magic_Signs/DivinationCircleLoop_02_Regular_Blue_800x800.webm`))]
        }
      },
      enchantment: {
        '02': {
          pink: [lg(_t511 || (_t511 = _`Magic_Signs/EnchantmentCircleLoop_02_Regular_Pink_800x800.webm`))]
        }
      },
      evocation: {
        '02': {
          red: [lg(_t512 || (_t512 = _`Magic_Signs/EvocationCircleLoop_02_Regular_Red_800x800.webm`))]
        }
      },
      illusion: {
        '02': {
          purple: [lg(_t513 || (_t513 = _`Magic_Signs/IllusionCircleLoop_02_Regular_Purple_800x800.webm`))]
        }
      },
      necromancy: {
        '02': {
          green: [lg(_t514 || (_t514 = _`Magic_Signs/NecromancyCircleLoop_02_Regular_Green_800x800.webm`))]
        }
      },
      transmutation: {
        '02': {
          yellow: [lg(_t515 || (_t515 = _`Magic_Signs/TransmutationCircleLoop_02_Regular_Yellow_800x800.webm`))]
        }
      }
    },
    marker: {
      bubble: {
        '01': {
          blue: [lg(_t516 || (_t516 = _`Marker/MarkerBubble_01_Regular_Blue_400x400.webm`))]
        }
      },
      circleofstars: {
        '01': {
          blue: [lg(_t517 || (_t517 = _`Marker/MarkerCircleOfStars_Regular_Blue_400x400.webm`))]
        }
      },
      energystrands: {
        '01': {
          blue: [lg(_t518 || (_t518 = _`Marker/EnergyStrands_01_Regular_Blue_600x600.webm`))]
        }
      },
      music: {
        '01': {
          greenorange: [lg(_t519 || (_t519 = _`Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm`))]
        }
      },
      standard: {
        '01': {
          marker01: {
            "blueyellow": [lg(_t520 || (_t520 = _`Marker/Marker_01_Regular_BlueYellow_400x400.webm`))]
          },
          musicMarker: {
            "greenorange": [lg(_t521 || (_t521 = _`Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm`))]
          }
        }
      }
    },
    music: {
      notes: {
        '01': {
          blue: [lg(_t522 || (_t522 = _`Music_Notation/BassClef_01_Regular_Blue_200x200.webm`)), lg(_t523 || (_t523 = _`Music_Notation/BeamedQuavers_01_Regular_Blue_200x200.webm`)), lg(_t524 || (_t524 = _`Music_Notation/Crotchet_01_Regular_Blue_200x200.webm`)), lg(_t525 || (_t525 = _`Music_Notation/Flat_01_Regular_Blue_200x200.webm`)), lg(_t526 || (_t526 = _`Music_Notation/Quaver_01_Regular_Blue_200x200.webm`)), lg(_t527 || (_t527 = _`Music_Notation/Sharp_01_Regular_Blue_200x200.webm`)), lg(_t528 || (_t528 = _`Music_Notation/TrebleClef_01_Regular_Blue_200x200.webm`))]
        }
      }
    },
    particles: {
      dots: {
        '01': {
          green: [lg(_t529 || (_t529 = _`Particles/ParticlesOutward01_01_Regular_GreenYellow_400x400.webm`))]
        },
        '02': {
          green: [lg(_t530 || (_t530 = _`Particles/ParticlesOutward01_02_Regular_GreenYellow_400x400.webm`))]
        },
        '03': {
          green: [lg(_t531 || (_t531 = _`Particles/ParticlesOutward01_03_Regular_GreenYellow_400x400.webm`))]
        },
        '04': {
          green: [lg(_t532 || (_t532 = _`Particles/ParticlesOutward01_04_Regular_GreenYellow_400x400.webm`))]
        },
        '05': {
          green: [lg(_t533 || (_t533 = _`Particles/ParticlesOutward01_05_Regular_GreenYellow_400x400.webm`))]
        }
      },
      stars: {
        '01': {
          green: [lg(_t534 || (_t534 = _`Particles/ParticlesOutward02_01_Regular_GreenYellow_400x400.webm`))]
        },
        '02': {
          green: [lg(_t535 || (_t535 = _`Particles/ParticlesOutward02_02_Regular_GreenYellow_400x400.webm`))]
        },
        '03': {
          green: [lg(_t536 || (_t536 = _`Particles/ParticlesOutward02_03_Regular_GreenYellow_400x400.webm`))]
        },
        '04': {
          green: [lg(_t537 || (_t537 = _`Particles/ParticlesOutward02_04_Regular_GreenYellow_400x400.webm`))]
        },
        '05': {
          green: [lg(_t538 || (_t538 = _`Particles/ParticlesOutward02_05_Regular_GreenYellow_400x400.webm`))]
        }
      },
      swirl: {
        '01': {
          greenyellow: [lg(_t539 || (_t539 = _`Particles/ParticlesSwirl01_01_Regular_GreenYellow_400x400.webm`))]
        },
        '02': {
          greenyellow: [lg(_t540 || (_t540 = _`Particles/ParticlesSwirl02_01_Regular_GreenYellow_400x400.webm`))]
        }
      }
    },
    shieldfx: {
      eldritchweb: {
        '01': {
          darkpurple: [lg(_t541 || (_t541 = _`Energy/ShieldEldritchWebAbove01_01_Dark_Purple_400x400.webm`))]
        }
      },

      /*
      shieldeldritchwebbottom: {
          '01': {
              darkpurple: [lg`Energy/ShieldEldritchWebBelow01_01_Dark_Purple_400x400.webm`],
          },
      },
      */
      fire: {
        '01': {
          orange: [lg(_t542 || (_t542 = _`Fire/ShieldFireAbove01_01_Regular_Orange_400x400.webm`))]
        }
      },

      /*
      shieldfirebottom: {
          '01': {
              orange: [lg`Fire/ShieldFireBelow01_01_Regular_Orange_400x400.webm`],
          },
      },
      */
      earth: {
        '01': {
          orange: [lg(_t543 || (_t543 = _`Fire/ShieldMoltenEarthAbove01_01_Regular_Orange_400x400.webm`))]
        }
      },

      /*
      shieldearthbottom: {
          '01': {
              orange: [lg`Fire/ShieldMoltenEarthBelow01_01_Regular_Orange_400x400.webm`],
          },
      },
      */
      energyfield: {
        '01': {
          blue: [lg(_t544 || (_t544 = _`Energy/EnergyFieldTop_02_Regular_Blue_400x400.webm`))]
        }
      },

      /*
      energyfieldbottom: {
          '01': {
              blue: [lg`Energy/EnergyFieldBot_02_Regular_Blue_400x400.webm`],
          }
      },
      */
      ice: {
        '01': {
          blue: [lg(_t545 || (_t545 = _`Ice/ShieldIceAbove01_01_Regular_Blue_400x400.webm`))]
        }
      }
      /*
      shieldicebottom: {
          '01': {
              blue: [lg`Ice/ShieldIceBelow01_01_Regular_Blue_400x400.webm`],
          }
      },
      */

    },
    spell: {
      antilifeshell: {
        '01': {
          blue: [l5(_t546 || (_t546 = _`Antilife_Shell/AntilifeShell_01_Blue_NoCircle_400x400.webm`))]
        }
      },
      armsofhadar: {
        '01': {
          darkpurple: [l1(_t547 || (_t547 = _`Arms_Of_Hadar/ArmsOfHadar_01_Dark_Purple_500x500.webm`))]
        }
      },
      bardicinspiration: {
        'inspire': {
          greenorange: [l1(_t548 || (_t548 = _`Bardic_Inspiration/BardicInspiration_01_Regular_GreenOrange_400x400.webm`))]
        },
        'marker': {
          greenorange: [lg(_t549 || (_t549 = _`Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm`))]
        }
      },
      blacktentacles: {
        '01': {
          darkpurple: [l4(_t550 || (_t550 = _`Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm`))]
        }
      },
      bless: {
        '01': {
          yellow: {
            'intro': l1(_t551 || (_t551 = _`Bless/Bless_01_Regular_Yellow_Intro_400x400.webm`)),
            'loop': l1(_t552 || (_t552 = _`Bless/Bless_01_Regular_Yellow_Loop_400x400.webm`))
          }
        }
      },
      calllightning: {
        '01': {
          blue: [l3(_t553 || (_t553 = _`Call_Lightning/CallLightning_01_Blue_1000x1000.webm`))],
          blueorange: [l3(_t554 || (_t554 = _`Call_Lightning/CallLightning_01_BlueOrange_1000x1000.webm`))],
          green: [l3(_t555 || (_t555 = _`Call_Lightning/CallLightning_01_Green_1000x1000.webm`))],
          pinkyellow: [l3(_t556 || (_t556 = _`Call_Lightning/CallLightning_01_PinkYellow_1000x1000.webm`))],
          purple: [l3(_t557 || (_t557 = _`Call_Lightning/CallLightning_01_Purple_1000x1000.webm`))],
          red: [l3(_t558 || (_t558 = _`Call_Lightning/CallLightning_01_Red_1000x1000.webm`))],
          yellow: [l3(_t559 || (_t559 = _`Call_Lightning/CallLightning_01_Yellow_1000x1000.webm`))]
        }
      },
      cloudofdaggers: {
        '01': {
          blue: [l2(_t560 || (_t560 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Blue_400x400.webm`))],
          green: [l2(_t561 || (_t561 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Green_400x400.webm`))],
          orange: [l2(_t562 || (_t562 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Orange_400x400.webm`))],
          purple: [l2(_t563 || (_t563 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Purple_400x400.webm`))],
          red: [l2(_t564 || (_t564 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Red_400x400.webm`))],
          yellow: [l2(_t565 || (_t565 = _`Cloud_Of_Daggers/CloudOfDaggers_01_Light_Yellow_400x400.webm`))]
        }
      },
      curewounds: {
        '01': {
          blue: [l1(_t566 || (_t566 = _`Cure_Wounds/CureWounds_01_Blue_400x400.webm`))]
        }
      },
      darkness: {
        '01': {
          black: [l2(_t567 || (_t567 = _`Darkness/Darkness_01_Black_600x600.webm`))],
          green: [l2(_t568 || (_t568 = _`Darkness/Darkness_01_Green_600x600.webm`))]
        }
      },
      detectmagic: {
        '01': {
          blue: [l1(_t569 || (_t569 = _`Detect_Magic/DetectMagicCircle_01_Regular_Blue_1200x1200.webm`))]
        }
      },
      divinesmite: {
        'source': {
          yellowblue: [l2(_t570 || (_t570 = _`Divine_Smite/DivineSmite_01_Regular_BlueYellow_Caster_400x400.webm`))]
        },
        'target': {
          yellowblue: [l2(_t571 || (_t571 = _`Divine_Smite/DivineSmite_01_Regular_BlueYellow_Target_400x400.webm`))]
        }
      },
      entangle: {
        '01': {
          brown: [l1(_t572 || (_t572 = _`Entangle/Entangle_01_Brown_400x400.webm`))],
          green: [l1(_t573 || (_t573 = _`Entangle/Entangle_01_Green_400x400.webm`))],
          yellow: [l1(_t574 || (_t574 = _`Entangle/Entangle_01_Yellow_400x400.webm`))]
        }
      },
      fireball: {
        loop: {
          orange: [l3(_t575 || (_t575 = _`Fireball/FireballLoop_01_Orange_800x800.webm`))]
        },
        explode: {
          orange: [l3(_t576 || (_t576 = _`Fireball/FireballExplosion_01_Orange_800x800.webm`))]
        },
        nodebris: {
          orange: [l3(_t577 || (_t577 = _`Fireball/FireballLoopNoDebris_01_Orange_800x800.webm`))]
        }
      },
      fogcloud: {
        '01': {
          white: [l1(_t578 || (_t578 = _`Fog_Cloud/FogCloud_01_White_800x800.webm`))]
        }
      },
      generichealing: {
        '01': {
          blue: [lg(_t579 || (_t579 = _`Healing/HealingAbility_01_Blue_400x400.webm`))],
          green: [lg(_t580 || (_t580 = _`Healing/HealingAbility_01_Green_400x400.webm`))],
          purple: [lg(_t581 || (_t581 = _`Healing/HealingAbility_01_Purple_400x400.webm`))],
          yellow: [lg(_t582 || (_t582 = _`Healing/HealingAbility_01_Yellow_400x400.webm`))]
        },
        '02': {
          greenorange: [lg(_t583 || (_t583 = _`Healing/HealingAbility_02_Regular_GreenOrange_Burst_600x600.webm`))]
        }
      },
      grease: {
        "01": {
          brown: [l1(_t584 || (_t584 = _`Grease/Grease_Dark_Brown_600x600.webm`))]
        }
      },
      huntersmark: {
        'eye': {
          green: [l1(_t585 || (_t585 = _`Hunters_Mark/HuntersMark_01_Regular_Green_Pulse_200x200.webm`))]
        },
        'eyeloop': {
          green: [l1(_t586 || (_t586 = _`Hunters_Mark/HuntersMark_01_Regular_Green_Loop_200x200.webm`))]
        }
      },
      mistystep: {
        "01": {
          blue: [l2(_t587 || (_t587 = _`Misty_Step/MistyStep_01_Regular_Blue_400x400.webm`))]
        },
        "02": {
          blue: [l2(_t588 || (_t588 = _`Misty_Step/MistyStep_02_Regular_Blue_400x400.webm`))]
        }
      },
      moonbeam: {
        loop: {
          blue: [l2(_t589 || (_t589 = _`Moonbeam/Moonbeam_01_Regular_Blue_400x400.webm`))]
        },
        nopulse: {
          blue: [l2(_t590 || (_t590 = _`Moonbeam/MoonbeamNoPulse_01_Regular_Blue_400x400.webm`))]
        },
        intro: {
          blue: [l2(_t591 || (_t591 = _`Moonbeam/MoonbeamIntro_01_Regular_Blue_400x400.webm`))]
        },
        outro: {
          blue: [l2(_t592 || (_t592 = _`Moonbeam/MoonbeamOutro_01_Regular_Blue_400x400.webm`))]
        }
      },
      shatter: {
        '01': {
          blue: [l2(_t593 || (_t593 = _`Shatter/Shatter_01_Blue_400x400.webm`))]
        }
      },
      shieldspell: {
        '01': {
          blue: {
            'intro': [l1(_t594 || (_t594 = _`Shield/Shield_01_Regular_Blue_Intro_400x400.webm`))],
            'loop': [l1(_t595 || (_t595 = _`Shield/Shield_01_Regular_Blue_Loop_400x400.webm`))],
            'outro_explode': [l1(_t596 || (_t596 = _`Shield/Shield_01_Regular_Blue_OutroExplode_400x400.webm`))],
            'outro_fade': [l1(_t597 || (_t597 = _`Shield/Shield_01_Regular_Blue_OutroFade_400x400.webm`))]
          }
        }
      },
      sleep: {
        '01': {
          pink: [l1(_t598 || (_t598 = _`Sleep/Cloud01_01_Regular_Pink_400x400.webm`))]
        },
        '02': {
          pink: [l1(_t599 || (_t599 = _`Sleep/Cloud01_02_Regular_Pink_400x400.webm`))]
        },
        marker: {
          pink: [l1(_t600 || (_t600 = _`Sleep/SleepMarker01_01_Regular_Pink_400x400.webm`))]
        },
        symbol: {
          pink: [l1(_t601 || (_t601 = _`Sleep/SleepSymbol01_01_Regular_Pink_400x400.webm`))]
        }
      },
      sleetstorm: {
        '01': {
          blue: [l3(_t602 || (_t602 = _`Sleet_Storm/SleetStorm_01_Blue_800x800.webm`))]
        }
      },
      spiritguardians: {
        '01': {
          yellowblue: [l3(_t603 || (_t603 = _`Spirit_Guardians/SpiritGuardians_01_Light_BlueYellow_600x600.webm`))]
        }
      },
      sneakattack: {
        '01': {
          'dark green': [l1(_t604 || (_t604 = _`Sneak_Attack/Sneak_Attack_Dark_Green_300x300.webm`))]
        }
      },
      thunderwave: {
        left: {
          blue: [l1(_t605 || (_t605 = _`Thunderwave/Thunderwave_01_Bright_Blue_BLeft_600x600.webm`))]
        },
        mid: {
          blue: [l1(_t606 || (_t606 = _`Thunderwave/Thunderwave_01_Bright_Blue_BMid_600x600.webm`))]
        },
        center: {
          blue: [l1(_t607 || (_t607 = _`Thunderwave/Thunderwave_01_Bright_Blue_Center_600x600.webm`))]
        }
      },
      tollthedead: {
        bell: {
          green: [l0(_t608 || (_t608 = _`Toll_The_Dead/TollTheDeadBell_01_Regular_Green_400x400.webm`))]
        },
        complete: {
          green: [l0(_t609 || (_t609 = _`Toll_The_Dead/TollTheDead_01_Regular_Green_400x400.webm`))]
        },
        shockwave: {
          green: [l0(_t610 || (_t610 = _`Toll_The_Dead/TollTheDeadShockwave_01_Regular_Green_400x400.webm`))]
        },
        skull: {
          green: [l0(_t611 || (_t611 = _`Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_Green_400x400.webm`))]
        }
      },
      wallofforce: {
        '01': {
          grey: [l5(_t612 || (_t612 = _`Wall_Of_Force/WallOfForce_01_Grey_Sphere_400x400.webm`))]
        }
      },
      web: {
        '01': {
          white: [l2(_t613 || (_t613 = _`Web/Web_01_White_01_400x400.webm`))]
        }
      },
      whirlwind: {
        '01': {
          bluegrey: [l7(_t614 || (_t614 = _`Whirlwind/Whirlwind_01_BlueGrey_400x400.webm`))]
        }
      }
    },
    tokenborder: {
      static: {
        '01': {
          blue: [lg(_t615 || (_t615 = _`Token_Border/TokenBorderCircle_01_Regular_Blue_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t616 || (_t616 = _`Token_Border/TokenBorderCircle_02_Regular_Blue_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t617 || (_t617 = _`Token_Border/TokenBorderCircle_03_Regular_Blue_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t618 || (_t618 = _`Token_Border/TokenBorderCircle_04_Regular_Blue_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t619 || (_t619 = _`Token_Border/TokenBorderCircle_05_Regular_Blue_400x400.webm`))]
        },
        '06': {
          blue: [lg(_t620 || (_t620 = _`Token_Border/TokenBorderCircle_06_Regular_Blue_400x400.webm`))]
        },
        '07': {
          blue: [lg(_t621 || (_t621 = _`Token_Border/TokenBorderCircle_07_Regular_Blue_400x400.webm`))]
        },
        '08': {
          blue: [lg(_t622 || (_t622 = _`Token_Border/TokenBorderCircle_08_Regular_Blue_400x400.webm`))]
        },
        '09': {
          blue: [lg(_t623 || (_t623 = _`Token_Border/TokenBorderCircle_09_Regular_Blue_400x400.webm`))]
        },
        '10': {
          blue: [lg(_t624 || (_t624 = _`Token_Border/TokenBorderCircle_10_Regular_Blue_400x400.webm`))]
        },
        '11': {
          blue: [lg(_t625 || (_t625 = _`Token_Border/TokenBorderCircle_11_Regular_Blue_400x400.webm`))]
        },
        '12': {
          blue: [lg(_t626 || (_t626 = _`Token_Border/TokenBorderCircle_12_Regular_Blue_400x400.webm`))]
        },
        '13': {
          blue: [lg(_t627 || (_t627 = _`Token_Border/TokenBorderCircle_13_Regular_Blue_400x400.webm`))]
        }
      },
      spinning: {
        '01': {
          blue: [lg(_t628 || (_t628 = _`Token_Border/TokenBorderCircleSpin_01_Regular_Blue_400x400.webm`))]
        },
        '02': {
          blue: [lg(_t629 || (_t629 = _`Token_Border/TokenBorderCircleSpin_02_Regular_Blue_400x400.webm`))]
        },
        '03': {
          blue: [lg(_t630 || (_t630 = _`Token_Border/TokenBorderCircleSpin_03_Regular_Blue_400x400.webm`))]
        },
        '04': {
          blue: [lg(_t631 || (_t631 = _`Token_Border/TokenBorderCircleSpin_04_Regular_Blue_400x400.webm`))]
        },
        '05': {
          blue: [lg(_t632 || (_t632 = _`Token_Border/TokenBorderCircleSpin_05_Regular_Blue_400x400.webm`))]
        },
        '06': {
          blue: [lg(_t633 || (_t633 = _`Token_Border/TokenBorderCircleSpin_06_Regular_Blue_400x400.webm`))]
        },
        '07': {
          blue: [lg(_t634 || (_t634 = _`Token_Border/TokenBorderCircleSpin_07_Regular_Blue_400x400.webm`))]
        },
        '08': {
          blue: [lg(_t635 || (_t635 = _`Token_Border/TokenBorderCircleSpin_08_Regular_Blue_400x400.webm`))]
        },
        '09': {
          blue: [lg(_t636 || (_t636 = _`Token_Border/TokenBorderCircleSpin_09_Regular_Blue_400x400.webm`))]
        },
        '10': {
          blue: [lg(_t637 || (_t637 = _`Token_Border/TokenBorderCircleSpin_10_Regular_Blue_400x400.webm`))]
        },
        '11': {
          blue: [lg(_t638 || (_t638 = _`Token_Border/TokenBorderCircleSpin_11_Regular_Blue_400x400.webm`))]
        },
        '12': {
          blue: [lg(_t639 || (_t639 = _`Token_Border/TokenBorderCircleSpin_12_Regular_Blue_400x400.webm`))]
        },
        '13': {
          blue: [lg(_t640 || (_t640 = _`Token_Border/TokenBorderCircleSpin_13_Regular_Blue_400x400.webm`))]
        }
      }
    },
    trap: {
      fire: {
        single: {
          orange: [lg(_t641 || (_t641 = _`Traps/FireTrap02_01_Regular_Orange_1400x1400.webm`))]
        },
        double: {
          orange: [lg(_t642 || (_t642 = _`Traps/FireTrapDual02_01_Regular_Orange_1400x1400.webm`))]
        }
      }
    }
  };
  JB2AFREEDB.return = {
    dagger: {
      '01': {
        white: {
          '15ft': [lg(_t643 || (_t643 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_15ft_1000x400.webm`))],
          '30ft': [lg(_t644 || (_t644 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_30ft_1600x400.webm`))],
          '60ft': [lg(_t645 || (_t645 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_60ft_2800x400.webm`))],
          '90ft': [lg(_t646 || (_t646 = _`Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_90ft_4000x400.webm`))]
        }
      }
    }
  };
}

async function buildFile(getMeta, dbType, name, animationType, animationVariant, animationColor, customPath) {
  function moduleIncludes(test) {
    return !!game.modules.get(test);
  }

  if (!dbType && !customPath) {
    return false;
  }

  let file; //let msFile;

  let color;
  let returnFile;
  let fileData;
  let metadata;

  if (customPath) {
    file = customPath; //msFile = customPath;

    if (getMeta) {
      fileData = customPath;
      metadata = await getVideoDimensionsOf$2(fileData);
    }
  } else {
    const jb2a = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
    const path = name.replace(/melee|range|double/gi, function (x) {
      return "";
    });
    color = animationColor.replace(/\s+/g, '');
    const menuType = dbType;
    const type = animationType;

    if (!jb2a[type][menuType][path]) {
      return {};
    }

    const variantArray = Object.keys(jb2a[type][menuType][path]);
    const variant = variantArray.some(el => animationVariant === el) ? animationVariant : variantArray[0];
    const colorArray = Object.keys(jb2a[type][menuType][path][variant]);

    if (animationColor === "random") {
      color = animationColor;
    } else {
      color = colorArray.some(el => color === el) ? color : colorArray[0];
    }

    file = color === "random" ? `autoanimations.${type}.${[menuType]}.${path}.${variant}` : `autoanimations.${type}.${[menuType]}.${path}.${variant}.${color}`; //msFile = color === "random" ? `autoanimations.${type}.${[menuType]}.${path}.02` : `autoanimations.${type}.${[menuType]}.${path}.02.${color}`;
    //let file = color === "random" ? `autoanimations.${type}.${path}.${variant}` : `autoanimations.${type}.${path}.${variant}.${color}`;
    //let msFile = color === "random" ? `autoanimations.${type}.${path}.02` : `autoanimations.${type}.${path}.02.${color}`;

    const returnArray = Object.keys(jb2a.return);
    returnFile = returnArray.some(el => path === el) ? `autoanimations.return.weapon.${path}.${variant}.${color}` : "";

    if (getMeta) {
      fileData = color === "random" ? jb2a[type][menuType][path][variant][Object.keys(jb2a[type][menuType][path][variant])[0]][0] : jb2a[type][menuType][path][variant][color][0];
      metadata = await getVideoDimensionsOf$2(fileData);
    }
  }

  return {
    file,
    metadata,
    returnFile,
    fileData
  };
}

function getVideoDimensionsOf$2(url) {
  return new Promise(resolve => {
    // create the video element
    const video = document.createElement('video');
    video.preload = "metadata"; // place a listener on it

    video.addEventListener("loadedmetadata", function () {
      // retrieve dimensions
      const height = this.videoHeight;
      const width = this.videoWidth;
      const duration = this.duration; // send back result

      resolve({
        height,
        width,
        duration
      });
    }, false);
    video.src = url;
  });
}

const particleDefaultValues = {
  explosion: {
    type: "explosion",
    speed: 0,
    repeat: 1,
    delay: 500,
    scale: 2,
    color01: "#FFFFFF",
    color02: "#FFFFFF",
    sprite: "modules/levels-3d-preview/assets/particles/dust.png",
    life: 500,
    emittersize: 1,
    alpha: 0.2,
    mass: 400,
    gravity: 2,
    rate: 10,
    explosion: {}
  },
  projectile: {
    type: "projectile",
    speed: 5,
    repeat: 1,
    arc: 2,
    delay: 500,
    scale: 0.7,
    color01: "#FFFFFF",
    color02: "#FFFFFF",
    sprite: "modules/levels-3d-preview/assets/particles/emberssmall.png",
    life: 500,
    emittersize: .0001,
    alpha: 0.5,
    mass: 100,
    gravity: 0,
    rate: 10,
    explosion: {
      color01: "#FFFFFF",
      color02: "#FFFFFF",
      speed: 1,
      gravity: 2,
      life: 500,
      rate: 10,
      emittersize: 1,
      alpha: 0.5,
      mass: 100,
      sprite: "modules/levels-3d-preview/assets/particles/dust.png",
      scale: 1
    }
  },
  ray: {
    type: "ray",
    speed: 5,
    repeat: 1,
    arc: 2,
    delay: 500,
    scale: 0.7,
    color01: "#FFFFFF",
    color02: "#FFFFFF",
    sprite: "modules/levels-3d-preview/assets/particles/emberssmall.png",
    life: 500,
    emittersize: .0001,
    alpha: 0.5,
    mass: 100,
    gravity: 0,
    rate: 10,
    explosion: {
      color01: "#FFFFFF",
      color02: "#FFFFFF",
      speed: 1,
      gravity: 2,
      life: 500,
      rate: 10,
      emittersize: 1,
      alpha: 0.5,
      mass: 100,
      sprite: "modules/levels-3d-preview/assets/particles/dust.png",
      scale: 1
    }
  },
  sprite: {
    type: "sprite",
    speed: 5,
    repeat: 1,
    delay: 0,
    scale: 0.7,
    color01: "#FFFFFF",
    sprite: "modules/levels-3d-preview/assets/particles/emberssmall.png",
    alpha: 0.7,
    explosion: {
      color01: "#FFFFFF",
      color02: "#FFFFFF",
      speed: 1,
      gravity: 2,
      life: 500,
      rate: 10,
      emittersize: 1,
      alpha: 0.5,
      mass: 100,
      sprite: "modules/levels-3d-preview/assets/particles/dust.png",
      scale: 1
    }
  }
};

class AAanimationData {
  static async _getAnimationData(handler, autoObject) {
    const data = {
      primary: autoObject ? await this._primaryData(handler, autoObject) : await this._primaryData(handler),
      sourceFX: await this._sourceFX(handler),
      targetFX: await this._targetFX(handler)
    };
    return data;
  }

  static async _sounds(soundSettings) {
    const data = soundSettings.animationData.primary; //const sourceFX = flagData.sourceFX;

    const targetFX = soundSettings.animationData.targetFX;
    let soundSeq = new Sequence();

    if (data.playSound || data.playSwitchSound && soundSettings.switchSound) {
      if (!soundSettings.switchSound) {
        soundSeq.sound().file(data.itemAudio.file, true).volume(data.itemAudio.volume).delay(data.itemAudio.delay).repeats(data.itemAudio.repeat, data.delay).startTime(data.itemAudio.startTime);
      } else {
        soundSeq.sound().file(data.switchAudio.file, true).volume(data.switchAudio.volume).delay(data.switchAudio.delay).repeats(data.switchAudio.repeat, data.delay).startTime(data.switchAudio.startTime);
      }
    }

    if (data.explosion.playSound && soundSettings.explosionSound) {
      var _data$explosion, _data$explosion$audio, _data$explosion2, _data$explosion3, _data$explosion3$audi, _data$explosion4, _data$explosion5, _data$explosion5$audi, _data$explosion6, _data$explosion6$audi, _data$explosion7, _data$explosion7$audi;

      soundSeq.sound().file((_data$explosion = data.explosion) === null || _data$explosion === void 0 ? void 0 : (_data$explosion$audio = _data$explosion.audio) === null || _data$explosion$audio === void 0 ? void 0 : _data$explosion$audio.file, true).playIf((_data$explosion2 = data.explosion) === null || _data$explosion2 === void 0 ? void 0 : _data$explosion2.playSound).delay(((_data$explosion3 = data.explosion) === null || _data$explosion3 === void 0 ? void 0 : (_data$explosion3$audi = _data$explosion3.audio) === null || _data$explosion3$audi === void 0 ? void 0 : _data$explosion3$audi.delay) + ((_data$explosion4 = data.explosion) === null || _data$explosion4 === void 0 ? void 0 : _data$explosion4.delay)).volume((_data$explosion5 = data.explosion) === null || _data$explosion5 === void 0 ? void 0 : (_data$explosion5$audi = _data$explosion5.audio) === null || _data$explosion5$audi === void 0 ? void 0 : _data$explosion5$audi.volume).repeats((_data$explosion6 = data.explosion) === null || _data$explosion6 === void 0 ? void 0 : (_data$explosion6$audi = _data$explosion6.audio) === null || _data$explosion6$audi === void 0 ? void 0 : _data$explosion6$audi.repeat, data.delay).startTime((_data$explosion7 = data.explosion) === null || _data$explosion7 === void 0 ? void 0 : (_data$explosion7$audi = _data$explosion7.audio) === null || _data$explosion7$audi === void 0 ? void 0 : _data$explosion7$audi.startTime);
    }

    if (targetFX.playSound && soundSettings.targetSound) {
      var _targetFX$itemAudio, _targetFX$itemAudio2, _targetFX$itemAudio3, _targetFX$itemAudio4, _targetFX$itemAudio5, _targetFX$itemAudio6;

      soundSeq.sound().file((_targetFX$itemAudio = targetFX.itemAudio) === null || _targetFX$itemAudio === void 0 ? void 0 : _targetFX$itemAudio.file, true).volume((_targetFX$itemAudio2 = targetFX.itemAudio) === null || _targetFX$itemAudio2 === void 0 ? void 0 : _targetFX$itemAudio2.volume).delay(((_targetFX$itemAudio3 = targetFX.itemAudio) === null || _targetFX$itemAudio3 === void 0 ? void 0 : _targetFX$itemAudio3.delay) + targetFX.startDelay).repeats((_targetFX$itemAudio4 = targetFX.itemAudio) === null || _targetFX$itemAudio4 === void 0 ? void 0 : _targetFX$itemAudio4.repeat, (_targetFX$itemAudio5 = targetFX.itemAudio) === null || _targetFX$itemAudio5 === void 0 ? void 0 : _targetFX$itemAudio5.soundDelay).startTime((_targetFX$itemAudio6 = targetFX.itemAudio) === null || _targetFX$itemAudio6 === void 0 ? void 0 : _targetFX$itemAudio6.startTime);
    }

    return soundSeq;
  }

  static async _primaryData(handler, autoObject) {
    if (autoObject) {
      var _handler$autorecOverr, _handler$autorecOverr2, _handler$autorecOverr3, _handler$autorecOverr4, _handler$autorecOverr5, _handler$autorecOverr6, _handler$autorecOverr7, _handler$autorecOverr8, _handler$autorecOverr9, _handler$autorecOverr10, _handler$autorecOverr11, _handler$autorecOverr12, _data$below, _data$measureType, _data$onlyX, _handler$autorecOverr13, _handler$autorecOverr14, _handler$autorecOverr15, _data$audio, _data$audio$a, _data$audio$a01$file, _data$audio2, _data$audio2$a, _data$audio3, _data$audio3$a, _data$audio4, _data$audio4$a, _data$audio5, _data$audio5$a, _data$soundOnly$enabl, _data$soundOnly, _data$soundOnly$file, _data$soundOnly2, _data$soundOnly$volum, _data$soundOnly3, _data$soundOnly$delay, _data$soundOnly4, _data$soundOnly$start, _data$soundOnly5, _data$switchVariant, _data$detect, _data$range, _data$audio6, _data$audio6$a, _data$audio$a02$file, _data$audio7, _data$audio7$a, _data$audio8, _data$audio8$a, _data$audio9, _data$audio9$a, _data$audio10, _data$audio10$a, _data$occlusionMode, _data$occlusionAlpha, _data$macro$enable, _data$macro, _data$macro$name, _data$macro2, _data$macro3, _data$macro$playWhen, _data$macro4, _data$itemAudio, _data$itemAudio2;

      const data = {};
      const autoOverridden = (_handler$autorecOverr = handler.autorecOverrides) === null || _handler$autorecOverr === void 0 ? void 0 : _handler$autorecOverr.enable;
      Object.assign(data, autoObject);
      data.isAuto = true;
      data.animation = data.animation || "";
      data.enableCustom = data.custom || false;
      data.enableCustom02 = data.custom02 || false;
      data.customPath = data.custom ? data.customPath : false;
      data.customPath02 = data.custom02 ? data.customPath02 : false;
      data.aeDelay = data.aeDelay || 250;

      if (handler.isActiveEffect) ;

      data.staticType = data.type || "targetDefault";
      data.color = autoOverridden ? (_handler$autorecOverr2 = handler.autorecOverrides) === null || _handler$autorecOverr2 === void 0 ? void 0 : _handler$autorecOverr2.color : data.color;
      data.color02 = autoOverridden ? (_handler$autorecOverr3 = handler.autorecOverrides) === null || _handler$autorecOverr3 === void 0 ? void 0 : _handler$autorecOverr3.color02 : data.color02;
      data.repeat = autoOverridden ? ((_handler$autorecOverr4 = handler.autorecOverrides) === null || _handler$autorecOverr4 === void 0 ? void 0 : _handler$autorecOverr4.repeat) || 1 : data.repeat || 1;
      data.delay = autoOverridden ? ((_handler$autorecOverr5 = handler.autorecOverrides) === null || _handler$autorecOverr5 === void 0 ? void 0 : _handler$autorecOverr5.delay) || 0 : data.delay || 0;
      data.scale = autoOverridden ? ((_handler$autorecOverr6 = handler.autorecOverrides) === null || _handler$autorecOverr6 === void 0 ? void 0 : _handler$autorecOverr6.scale) || 1 : data.scale || 1;
      data.scale02 = autoOverridden ? ((_handler$autorecOverr7 = handler.autorecOverrides) === null || _handler$autorecOverr7 === void 0 ? void 0 : _handler$autorecOverr7.scale02) || 1 : data.scale02 || 1;
      data.scaleX = autoOverridden ? ((_handler$autorecOverr8 = handler.autorecOverrides) === null || _handler$autorecOverr8 === void 0 ? void 0 : _handler$autorecOverr8.scaleX) || 1 : data.scaleX || 1;
      data.scaleY = autoOverridden ? ((_handler$autorecOverr9 = handler.autorecOverrides) === null || _handler$autorecOverr9 === void 0 ? void 0 : _handler$autorecOverr9.scaleY) || 1 : data.scaleY || 1;
      data.opacity = data.opacity || 1;
      data.variant = autoOverridden ? (_handler$autorecOverr10 = handler.autorecOverrides) === null || _handler$autorecOverr10 === void 0 ? void 0 : _handler$autorecOverr10.variant : data.variant;
      data.variant02 = autoOverridden ? ((_handler$autorecOverr11 = handler.autorecOverrides) === null || _handler$autorecOverr11 === void 0 ? void 0 : _handler$autorecOverr11.variant02) || "01" : data.variant02 || "01";
      data.persistent = autoOverridden ? ((_handler$autorecOverr12 = handler.autorecOverrides) === null || _handler$autorecOverr12 === void 0 ? void 0 : _handler$autorecOverr12.persistent) || false : data.persistent || false;
      data.menuType = data.menuType || false, data.menuType02 = data.menuType02 || false, data.isShieldFX = data.menuType === 'shieldfx' ? true : false, data.below = (_data$below = data.below) !== null && _data$below !== void 0 ? _data$below : false;
      data.measureType = (_data$measureType = data.measureType) !== null && _data$measureType !== void 0 ? _data$measureType : 'alternating';
      data.hideFromPlayers = false;
      data.playbackRate = data.playbackRate || 1;
      data.onlyX = (_data$onlyX = data.onlyX) !== null && _data$onlyX !== void 0 ? _data$onlyX : false;
      data.anchorX = autoOverridden ? ((_handler$autorecOverr13 = handler.autorecOverrides) === null || _handler$autorecOverr13 === void 0 ? void 0 : _handler$autorecOverr13.anchorX) || 0.5 : data.anchorX || 0.5;
      data.anchorY = autoOverridden ? ((_handler$autorecOverr14 = handler.autorecOverrides) === null || _handler$autorecOverr14 === void 0 ? void 0 : _handler$autorecOverr14.anchorY) || 0.7 : data.anchorY || 0.7;
      data.teleDist = autoOverridden ? ((_handler$autorecOverr15 = handler.autorecOverrides) === null || _handler$autorecOverr15 === void 0 ? void 0 : _handler$autorecOverr15.range) || 30 : data.range || 30;
      data.unbindAlpha = data.unbindAlpha ? false : true, data.unbindVisibility = data.unbindVisibility ? false : true, data.itemAudio = {
        enable: ((_data$audio = data.audio) === null || _data$audio === void 0 ? void 0 : (_data$audio$a = _data$audio.a01) === null || _data$audio$a === void 0 ? void 0 : _data$audio$a.enable) || false,
        file: (_data$audio$a01$file = (_data$audio2 = data.audio) === null || _data$audio2 === void 0 ? void 0 : (_data$audio2$a = _data$audio2.a01) === null || _data$audio2$a === void 0 ? void 0 : _data$audio2$a.file) !== null && _data$audio$a01$file !== void 0 ? _data$audio$a01$file : "",
        volume: ((_data$audio3 = data.audio) === null || _data$audio3 === void 0 ? void 0 : (_data$audio3$a = _data$audio3.a01) === null || _data$audio3$a === void 0 ? void 0 : _data$audio3$a.volume) || 0.25,
        delay: ((_data$audio4 = data.audio) === null || _data$audio4 === void 0 ? void 0 : (_data$audio4$a = _data$audio4.a01) === null || _data$audio4$a === void 0 ? void 0 : _data$audio4$a.delay) || 0,
        repeat: handler.decoupleSound ? 1 : data.repeat || 1,
        startTime: ((_data$audio5 = data.audio) === null || _data$audio5 === void 0 ? void 0 : (_data$audio5$a = _data$audio5.a01) === null || _data$audio5$a === void 0 ? void 0 : _data$audio5$a.startTime) || 0
      };
      data.soundOnly = {
        enable: (_data$soundOnly$enabl = (_data$soundOnly = data.soundOnly) === null || _data$soundOnly === void 0 ? void 0 : _data$soundOnly.enable) !== null && _data$soundOnly$enabl !== void 0 ? _data$soundOnly$enabl : false,
        file: (_data$soundOnly$file = (_data$soundOnly2 = data.soundOnly) === null || _data$soundOnly2 === void 0 ? void 0 : _data$soundOnly2.file) !== null && _data$soundOnly$file !== void 0 ? _data$soundOnly$file : "",
        volume: (_data$soundOnly$volum = (_data$soundOnly3 = data.soundOnly) === null || _data$soundOnly3 === void 0 ? void 0 : _data$soundOnly3.volume) !== null && _data$soundOnly$volum !== void 0 ? _data$soundOnly$volum : 0.25,
        delay: (_data$soundOnly$delay = (_data$soundOnly4 = data.soundOnly) === null || _data$soundOnly4 === void 0 ? void 0 : _data$soundOnly4.delay) !== null && _data$soundOnly$delay !== void 0 ? _data$soundOnly$delay : 0,
        startTime: (_data$soundOnly$start = (_data$soundOnly5 = data.soundOnly) === null || _data$soundOnly5 === void 0 ? void 0 : _data$soundOnly5.startTime) !== null && _data$soundOnly$start !== void 0 ? _data$soundOnly$start : 0
      };
      data.switchAnimation = data.switchType === "custom" ? data.switchAnimation || "" : data.animation || "";
      data.switchType = data.switchType || "on";
      data.switchVariant = (_data$switchVariant = data.switchVariant) !== null && _data$switchVariant !== void 0 ? _data$switchVariant : "01";
      data.switchColor = data.switchColor || "white";
      data.detect = (_data$detect = data.detect) !== null && _data$detect !== void 0 ? _data$detect : "auto";
      data.return = data.returning || false;
      data.range = (_data$range = data.range) !== null && _data$range !== void 0 ? _data$range : 2;
      data.switchAudio = {
        enable: ((_data$audio6 = data.audio) === null || _data$audio6 === void 0 ? void 0 : (_data$audio6$a = _data$audio6.a02) === null || _data$audio6$a === void 0 ? void 0 : _data$audio6$a.enable) || false,
        file: (_data$audio$a02$file = (_data$audio7 = data.audio) === null || _data$audio7 === void 0 ? void 0 : (_data$audio7$a = _data$audio7.a02) === null || _data$audio7$a === void 0 ? void 0 : _data$audio7$a.file) !== null && _data$audio$a02$file !== void 0 ? _data$audio$a02$file : "",
        volume: ((_data$audio8 = data.audio) === null || _data$audio8 === void 0 ? void 0 : (_data$audio8$a = _data$audio8.a02) === null || _data$audio8$a === void 0 ? void 0 : _data$audio8$a.volume) || 0.25,
        delay: ((_data$audio9 = data.audio) === null || _data$audio9 === void 0 ? void 0 : (_data$audio9$a = _data$audio9.a02) === null || _data$audio9$a === void 0 ? void 0 : _data$audio9$a.delay) || 0,
        repeat: handler.decoupleSound ? 1 : data.repeat || 1,
        startTime: ((_data$audio10 = data.audio) === null || _data$audio10 === void 0 ? void 0 : (_data$audio10$a = _data$audio10.a02) === null || _data$audio10$a === void 0 ? void 0 : _data$audio10$a.startTime) || 0
      };
      data.removeTemplate = data.removeTemplate || false;
      data.occlusionMode = parseInt((_data$occlusionMode = data.occlusionMode) !== null && _data$occlusionMode !== void 0 ? _data$occlusionMode : "3");
      data.occlusionAlpha = (_data$occlusionAlpha = data.occlusionAlpha) !== null && _data$occlusionAlpha !== void 0 ? _data$occlusionAlpha : "0";
      data.persistType = data.persistType || "sequencerground";
      data.ignoreTargets = data.ignoretargets || false;
      data.playSound = data.itemAudio.enable && data.itemAudio.file ? true : false;
      data.explosion = await this._explosionData(handler, data);
      data.macro = {
        enabled: (_data$macro$enable = (_data$macro = data.macro) === null || _data$macro === void 0 ? void 0 : _data$macro.enable) !== null && _data$macro$enable !== void 0 ? _data$macro$enable : false,
        name: (_data$macro$name = (_data$macro2 = data.macro) === null || _data$macro2 === void 0 ? void 0 : _data$macro2.name) !== null && _data$macro$name !== void 0 ? _data$macro$name : "",
        args: (_data$macro3 = data.macro) !== null && _data$macro3 !== void 0 && _data$macro3.args ? data.macro.args.split(',').map(s => s.trim()) : "",
        playWhen: (_data$macro$playWhen = (_data$macro4 = data.macro) === null || _data$macro4 === void 0 ? void 0 : _data$macro4.playWhen) !== null && _data$macro$playWhen !== void 0 ? _data$macro$playWhen : "0"
      };
      data.playMacro = data.macro.enabled && data.macro.name ? true : false;
      data.playSound = (_data$itemAudio = data.itemAudio) !== null && _data$itemAudio !== void 0 && _data$itemAudio.enable && (_data$itemAudio2 = data.itemAudio) !== null && _data$itemAudio2 !== void 0 && _data$itemAudio2.file ? true : false;
      data.playSwitchSound = data.switchAudio.enable && data.switchAudio.file && data.switchType !== "off" ? true : false;
      return data;
    } else {
      var _flags$animation, _flags$color$toLowerC, _flags$color, _flags$color02$toLowe, _flags$color2, _options$removeTempla, _options$occlusionMod, _options$occlusionAlp, _options$onlyX, _flags$audio, _flags$audio$a, _flags$audio2, _flags$audio2$a, _flags$audio3, _flags$audio3$a, _flags$audio4, _flags$audio4$a, _flags$audio5, _flags$audio5$a, _meleeSwitch$detect, _meleeSwitch$variant, _meleeSwitch$range, _flags$audio6, _flags$audio6$a, _flags$audio7, _flags$audio7$a, _flags$audio8, _flags$audio8$a, _flags$audio9, _flags$audio9$a, _flags$audio10, _flags$audio10$a, _flags$macro$enable, _flags$macro, _flags$macro$name, _flags$macro2, _flags$macro3, _flags$macro$playWhen, _flags$macro4, _data$itemAudio3, _data$itemAudio4;

      const flags = handler.flags;
      const meleeSwitch = flags.meleeSwitch || {};
      const options = flags.options || {};
      const data = {
        isAuto: false,
        animation: (_flags$animation = flags.animation) === null || _flags$animation === void 0 ? void 0 : _flags$animation.toLowerCase(),
        color: (_flags$color$toLowerC = (_flags$color = flags.color) === null || _flags$color === void 0 ? void 0 : _flags$color.toLowerCase()) !== null && _flags$color$toLowerC !== void 0 ? _flags$color$toLowerC : "",
        color02: (_flags$color02$toLowe = (_flags$color2 = flags.color02) === null || _flags$color2 === void 0 ? void 0 : _flags$color2.toLowerCase()) !== null && _flags$color02$toLowe !== void 0 ? _flags$color02$toLowe : "",
        below: flags.animLevel || false,
        options: options,
        aeDelay: options.aeDelay || 250,
        variant: options.variant || "01",
        variant02: options.variant02 || "01",
        repeat: options.repeat || 1,
        delay: options.delay || 250,
        scale: options.scale || 1,
        scaleX: options.scaleX || 1,
        scaleY: options.scaleY || 1,
        scale02: options.scale02 || 1,
        opacity: options.opacity || 1,
        persistent: options.persistent || false,
        enableCustom: options.enableCustom || false,
        enableCustom02: options.enableCustom02 || false,
        customPath: options.enableCustom ? options.customPath : false,
        customPath02: options.enableCustom02 ? options.customPath02 : false,
        staticType: options.staticType || "targetDefault",
        menuType: options.menuType || false,
        menuType02: options.menuType02 || false,
        isShieldFX: options.menuType === 'shieldfx' ? true : false,
        anchorX: options.anchorX || 0.5,
        anchorY: options.anchorY || 0.5,
        auraRadius: options.auraRadius || 3.5,
        teleDist: options.teleDist || 30,
        ignoreTargets: options.ignoreTarget || false,
        tempType: options.tempType || "circle",
        hideTemplate: options.hideTemplate || false,
        removeTemplate: (_options$removeTempla = options.removeTemplate) !== null && _options$removeTempla !== void 0 ? _options$removeTempla : false,
        occlusionMode: parseInt((_options$occlusionMod = options.occlusionMode) !== null && _options$occlusionMod !== void 0 ? _options$occlusionMod : "3"),
        occlusionAlpha: (_options$occlusionAlp = options.occlusionAlpha) !== null && _options$occlusionAlp !== void 0 ? _options$occlusionAlp : "0",
        persistType: options.persistType || "sequencerground",
        measureType: options.measureType || "alternating",
        hideFromPlayers: options.hideFromPlayers || false,
        playbackRate: options.playbackRate || 1,
        onlyX: (_options$onlyX = options.onlyX) !== null && _options$onlyX !== void 0 ? _options$onlyX : false,
        unbindAlpha: options.unbindAlpha ? false : true,
        unbindVisibility: options.unbindVisibility ? false : true,
        itemAudio: {
          enable: ((_flags$audio = flags.audio) === null || _flags$audio === void 0 ? void 0 : (_flags$audio$a = _flags$audio.a01) === null || _flags$audio$a === void 0 ? void 0 : _flags$audio$a.enable) || false,
          file: (_flags$audio2 = flags.audio) === null || _flags$audio2 === void 0 ? void 0 : (_flags$audio2$a = _flags$audio2.a01) === null || _flags$audio2$a === void 0 ? void 0 : _flags$audio2$a.file,
          volume: ((_flags$audio3 = flags.audio) === null || _flags$audio3 === void 0 ? void 0 : (_flags$audio3$a = _flags$audio3.a01) === null || _flags$audio3$a === void 0 ? void 0 : _flags$audio3$a.volume) || 0.25,
          delay: ((_flags$audio4 = flags.audio) === null || _flags$audio4 === void 0 ? void 0 : (_flags$audio4$a = _flags$audio4.a01) === null || _flags$audio4$a === void 0 ? void 0 : _flags$audio4$a.delay) || 0,
          repeat: handler.decoupleSound ? 1 : options.repeat || 1,
          startTime: ((_flags$audio5 = flags.audio) === null || _flags$audio5 === void 0 ? void 0 : (_flags$audio5$a = _flags$audio5.a01) === null || _flags$audio5$a === void 0 ? void 0 : _flags$audio5$a.startTime) || 0
        },
        switchAnimation: meleeSwitch.switchType === 'custom' ? meleeSwitch.animation || "" : flags.animation || "",
        switchType: meleeSwitch.switchType || "on",
        switchColor: meleeSwitch.color || "white",
        detect: (_meleeSwitch$detect = meleeSwitch.detect) !== null && _meleeSwitch$detect !== void 0 ? _meleeSwitch$detect : "auto",
        return: meleeSwitch.returning || false,
        switchVariant: (_meleeSwitch$variant = meleeSwitch.variant) !== null && _meleeSwitch$variant !== void 0 ? _meleeSwitch$variant : "01",
        switchMenuType: meleeSwitch.menuType || "weapon",
        range: (_meleeSwitch$range = meleeSwitch.range) !== null && _meleeSwitch$range !== void 0 ? _meleeSwitch$range : 2,
        switchAudio: {
          enable: ((_flags$audio6 = flags.audio) === null || _flags$audio6 === void 0 ? void 0 : (_flags$audio6$a = _flags$audio6.a02) === null || _flags$audio6$a === void 0 ? void 0 : _flags$audio6$a.enable) || false,
          file: (_flags$audio7 = flags.audio) === null || _flags$audio7 === void 0 ? void 0 : (_flags$audio7$a = _flags$audio7.a02) === null || _flags$audio7$a === void 0 ? void 0 : _flags$audio7$a.file,
          volume: ((_flags$audio8 = flags.audio) === null || _flags$audio8 === void 0 ? void 0 : (_flags$audio8$a = _flags$audio8.a02) === null || _flags$audio8$a === void 0 ? void 0 : _flags$audio8$a.volume) || 0.25,
          delay: ((_flags$audio9 = flags.audio) === null || _flags$audio9 === void 0 ? void 0 : (_flags$audio9$a = _flags$audio9.a02) === null || _flags$audio9$a === void 0 ? void 0 : _flags$audio9$a.delay) || 0,
          repeat: handler.decoupleSound ? 1 : options.repeat || 1,
          startTime: ((_flags$audio10 = flags.audio) === null || _flags$audio10 === void 0 ? void 0 : (_flags$audio10$a = _flags$audio10.a02) === null || _flags$audio10$a === void 0 ? void 0 : _flags$audio10$a.startTime) || 0
        },
        explosion: await this._explosionData(handler, false),
        macro: {
          enabled: (_flags$macro$enable = (_flags$macro = flags.macro) === null || _flags$macro === void 0 ? void 0 : _flags$macro.enable) !== null && _flags$macro$enable !== void 0 ? _flags$macro$enable : false,
          name: (_flags$macro$name = (_flags$macro2 = flags.macro) === null || _flags$macro2 === void 0 ? void 0 : _flags$macro2.name) !== null && _flags$macro$name !== void 0 ? _flags$macro$name : "",
          args: (_flags$macro3 = flags.macro) !== null && _flags$macro3 !== void 0 && _flags$macro3.args ? flags.macro.args.split(',').map(s => s.trim()) : "",
          playWhen: (_flags$macro$playWhen = (_flags$macro4 = flags.macro) === null || _flags$macro4 === void 0 ? void 0 : _flags$macro4.playWhen) !== null && _flags$macro$playWhen !== void 0 ? _flags$macro$playWhen : "0"
        }
      }; //data.macro.args = data.macro.preArgs.split(',').map(s => s.trim());

      data.playMacro = data.macro.enabled && data.macro.name ? true : false;
      data.playSound = (_data$itemAudio3 = data.itemAudio) !== null && _data$itemAudio3 !== void 0 && _data$itemAudio3.enable && (_data$itemAudio4 = data.itemAudio) !== null && _data$itemAudio4 !== void 0 && _data$itemAudio4.file ? true : false;
      data.playSwitchSound = data.switchAudio.enable && data.switchAudio.file && data.switchType !== "off" ? true : false;

      if (data.switchAnimation === 'shortsword') {
        data.switchAnimation = 'sword';
      }
      return data;
    }
  }

  static async _explosionData(handler, autorec) {
    if (autorec) {
      var _autorec$explosion, _explosions$variant, _autorec$audio, _autorec$audio$e, _autorec$audio$e01$fi, _autorec$audio2, _autorec$audio2$e, _autorec$audio3, _autorec$audio3$e, _autorec$audio4, _autorec$audio4$e, _autorec$audio5, _autorec$audio5$e, _explosion$audio, _explosion$audio2, _ref, _explosion$data, _explosion$data$metad;

      const explosions = (_autorec$explosion = autorec.explosion) !== null && _autorec$explosion !== void 0 ? _autorec$explosion : {};
      const explosion = {
        menuType: explosions.menuType || false,
        enabled: explosions.enable || false,
        animation: explosions.animation || "",
        variant: (_explosions$variant = explosions.variant) !== null && _explosions$variant !== void 0 ? _explosions$variant : "",
        color: explosions.color || "",
        delay: (explosions.delay || 1) + 500,
        radius: explosions.radius || 1.5,
        enableCustom: explosions.custom || false,
        customPath: explosions.custom ? explosions.customPath : false,
        below: explosions.below || false,
        audio: {
          enable: ((_autorec$audio = autorec.audio) === null || _autorec$audio === void 0 ? void 0 : (_autorec$audio$e = _autorec$audio.e01) === null || _autorec$audio$e === void 0 ? void 0 : _autorec$audio$e.enable) || false,
          file: (_autorec$audio$e01$fi = (_autorec$audio2 = autorec.audio) === null || _autorec$audio2 === void 0 ? void 0 : (_autorec$audio2$e = _autorec$audio2.e01) === null || _autorec$audio2$e === void 0 ? void 0 : _autorec$audio2$e.file) !== null && _autorec$audio$e01$fi !== void 0 ? _autorec$audio$e01$fi : "",
          volume: ((_autorec$audio3 = autorec.audio) === null || _autorec$audio3 === void 0 ? void 0 : (_autorec$audio3$e = _autorec$audio3.e01) === null || _autorec$audio3$e === void 0 ? void 0 : _autorec$audio3$e.volume) || 0.75,
          delay: ((_autorec$audio4 = autorec.audio) === null || _autorec$audio4 === void 0 ? void 0 : (_autorec$audio4$e = _autorec$audio4.e01) === null || _autorec$audio4$e === void 0 ? void 0 : _autorec$audio4$e.delay) || 0,
          repeat: handler.decoupleSound ? 1 : autorec.repeat || 1,
          startTime: ((_autorec$audio5 = autorec.audio) === null || _autorec$audio5 === void 0 ? void 0 : (_autorec$audio5$e = _autorec$audio5.e01) === null || _autorec$audio5$e === void 0 ? void 0 : _autorec$audio5$e.startTime) || 0
        }
      };
      explosion.playSound = explosion.enabled && ((_explosion$audio = explosion.audio) === null || _explosion$audio === void 0 ? void 0 : _explosion$audio.enable) && ((_explosion$audio2 = explosion.audio) === null || _explosion$audio2 === void 0 ? void 0 : _explosion$audio2.file) !== "";
      explosion.data = explosion.enabled ? await buildFile(true, explosion.menuType, explosion.animation, "static", explosion.variant, explosion.color, explosion.customPath) : "";
      explosion.scale = (_ref = 200 * explosion.radius / ((_explosion$data = explosion.data) === null || _explosion$data === void 0 ? void 0 : (_explosion$data$metad = _explosion$data.metadata) === null || _explosion$data$metad === void 0 ? void 0 : _explosion$data$metad.width)) !== null && _ref !== void 0 ? _ref : 1;
      return explosion;
    } else {
      var _explosions$variant2, _handler$flags$audio, _handler$flags$audio$, _handler$flags$audio2, _handler$flags$audio3, _handler$flags$audio4, _handler$flags$audio5, _handler$flags$audio6, _handler$flags$audio7, _handler$flags, _handler$flags$option, _handler$flags$audio8, _handler$flags$audio9, _explosion$audio3, _explosion$audio4, _ref2, _explosion$data2, _explosion$data2$meta;

      const explosions = handler.flags.explosions || {};
      const explosion = {
        menuType: explosions.menuType || false,
        enabled: explosions.enable || false,
        animation: explosions.animation || "",
        variant: (_explosions$variant2 = explosions.variant) !== null && _explosions$variant2 !== void 0 ? _explosions$variant2 : "",
        color: explosions.color || "",
        delay: (explosions.delay || 1) + 500,
        radius: explosions.radius || 1.5,
        enableCustom: explosions.enableCustom || false,
        customPath: explosions.enableCustom ? explosions.customPath : false,
        below: explosions.below || false,
        audio: {
          enabled: ((_handler$flags$audio = handler.flags.audio) === null || _handler$flags$audio === void 0 ? void 0 : (_handler$flags$audio$ = _handler$flags$audio.e01) === null || _handler$flags$audio$ === void 0 ? void 0 : _handler$flags$audio$.enable) || false,
          file: (_handler$flags$audio2 = handler.flags.audio) === null || _handler$flags$audio2 === void 0 ? void 0 : (_handler$flags$audio3 = _handler$flags$audio2.e01) === null || _handler$flags$audio3 === void 0 ? void 0 : _handler$flags$audio3.file,
          volume: ((_handler$flags$audio4 = handler.flags.audio) === null || _handler$flags$audio4 === void 0 ? void 0 : (_handler$flags$audio5 = _handler$flags$audio4.e01) === null || _handler$flags$audio5 === void 0 ? void 0 : _handler$flags$audio5.volume) || 0.25,
          delay: ((_handler$flags$audio6 = handler.flags.audio) === null || _handler$flags$audio6 === void 0 ? void 0 : (_handler$flags$audio7 = _handler$flags$audio6.e01) === null || _handler$flags$audio7 === void 0 ? void 0 : _handler$flags$audio7.delay) || 0,
          repeat: handler.decoupleSound ? 1 : ((_handler$flags = handler.flags) === null || _handler$flags === void 0 ? void 0 : (_handler$flags$option = _handler$flags.options) === null || _handler$flags$option === void 0 ? void 0 : _handler$flags$option.repeat) || 1,
          startTime: ((_handler$flags$audio8 = handler.flags.audio) === null || _handler$flags$audio8 === void 0 ? void 0 : (_handler$flags$audio9 = _handler$flags$audio8.e01) === null || _handler$flags$audio9 === void 0 ? void 0 : _handler$flags$audio9.startTime) || 0
        }
      };
      explosion.playSound = explosion.enabled && ((_explosion$audio3 = explosion.audio) === null || _explosion$audio3 === void 0 ? void 0 : _explosion$audio3.enabled) && ((_explosion$audio4 = explosion.audio) === null || _explosion$audio4 === void 0 ? void 0 : _explosion$audio4.file) !== "";
      explosion.data = explosion.enabled ? await buildFile(true, explosion.menuType, explosion.animation, "static", explosion.variant, explosion.color, explosion.customPath) : "";
      explosion.scale = (_ref2 = 200 * explosion.radius / ((_explosion$data2 = explosion.data) === null || _explosion$data2 === void 0 ? void 0 : (_explosion$data2$meta = _explosion$data2.metadata) === null || _explosion$data2$meta === void 0 ? void 0 : _explosion$data2$meta.width)) !== null && _ref2 !== void 0 ? _ref2 : 1;
      return explosion;
    }
  }

  static async _sourceFX(handler) {
    var _handler$flags$audio10, _handler$flags$audio11, _handler$flags$audio12, _handler$flags$audio13, _handler$flags$audio14, _handler$flags$audio15, _handler$flags$audio16, _handler$flags$audio17, _handler$flags$audio18, _handler$flags$audio19;

    const source = handler.flags.sourceToken || {};
    const enableCustom = source.enableCustom || false;
    const sourceFX = {
      menuType: source.menuType,
      enabled: source.enable || false,
      customSourcePath: enableCustom ? source.customPath : false,
      repeat: source.loops || 1,
      delay: source.loopDelay || 250,
      below: source.animLevel || false,
      startDelay: source.delayAfter || 500,
      scale: source.scale || 1,
      animation: source.name || "",
      color: source.color,
      variant: source.variant,
      opacity: source.opacity || 1,
      itemAudio: {
        enable: ((_handler$flags$audio10 = handler.flags.audio) === null || _handler$flags$audio10 === void 0 ? void 0 : (_handler$flags$audio11 = _handler$flags$audio10.s01) === null || _handler$flags$audio11 === void 0 ? void 0 : _handler$flags$audio11.enable) || false,
        file: (_handler$flags$audio12 = handler.flags.audio) === null || _handler$flags$audio12 === void 0 ? void 0 : (_handler$flags$audio13 = _handler$flags$audio12.s01) === null || _handler$flags$audio13 === void 0 ? void 0 : _handler$flags$audio13.file,
        volume: ((_handler$flags$audio14 = handler.flags.audio) === null || _handler$flags$audio14 === void 0 ? void 0 : (_handler$flags$audio15 = _handler$flags$audio14.s01) === null || _handler$flags$audio15 === void 0 ? void 0 : _handler$flags$audio15.volume) || 0.25,
        delay: ((_handler$flags$audio16 = handler.flags.audio) === null || _handler$flags$audio16 === void 0 ? void 0 : (_handler$flags$audio17 = _handler$flags$audio16.s01) === null || _handler$flags$audio17 === void 0 ? void 0 : _handler$flags$audio17.delay) || 0,
        repeat: handler.decoupleSound ? 1 : source.loops || 1,
        startTime: ((_handler$flags$audio18 = handler.flags.audio) === null || _handler$flags$audio18 === void 0 ? void 0 : (_handler$flags$audio19 = _handler$flags$audio18.s01) === null || _handler$flags$audio19 === void 0 ? void 0 : _handler$flags$audio19.startTime) || 0
      }
    };

    if (source.enable && (source.name === "a1" || !source.name) && !source.enableCustom) {
      sourceFX.enabled = false;
      console.warn("AUTOMATED ANIMATIONS || Target Animation is enabled on this item but NO Animation is chosen!");
    }

    const sourceTokenGS = handler.sourceToken.width / canvas.grid.size; //const sourceScale = handler.sourceToken.w;

    sourceFX.data = sourceFX.enabled ? await buildFile(true, sourceFX.menuType, sourceFX.animation, "static", sourceFX.variant, sourceFX.color, sourceFX.customSourcePath) : ""; //sourceFX.sFXScale = sourceFX.enabled ? 2 * sourceScale / sourceFX.data?.metadata?.width : 1;

    sourceFX.sourceSeq = new Sequence();

    if (sourceFX.itemAudio.enable && sourceFX.itemAudio.file && sourceFX.enabled) {
      sourceFX.sourceSeq.sound().file(sourceFX.itemAudio.file, true).volume(sourceFX.itemAudio.volume).delay(sourceFX.itemAudio.delay).startTime(sourceFX.itemAudio.startTime);
    }

    if (sourceFX.enabled) {
      sourceFX.sourceSeq.effect().file(sourceFX.data.file, true).atLocation(handler.sourceToken) //.scale(sourceFX.sFXScale * sourceFX.scale)
      .size(sourceTokenGS * 1.5 * sourceFX.scale, {
        gridUnits: true
      }).repeats(sourceFX.repeat, sourceFX.delay).belowTokens(sourceFX.below).opacity(sourceFX.opacity).waitUntilFinished(sourceFX.startDelay); //.playIf(sourceFX.enabled)
    }

    return sourceFX;
  }

  static async _targetFX(handler) {
    var _handler$flags2, _handler$flags$audio20, _handler$flags$audio21, _handler$flags$audio22, _handler$flags$audio23, _handler$flags$audio24, _handler$flags$audio25, _handler$flags$audio26, _handler$flags$audio27, _handler$flags$audio28, _handler$flags$audio29;

    const target = ((_handler$flags2 = handler.flags) === null || _handler$flags2 === void 0 ? void 0 : _handler$flags2.targetToken) || {};
    const enableCustom = target.enableCustom || false;
    const targetFX = {
      menuType: target.menuType,
      enabled: target.enable || false,
      customTargetPath: enableCustom ? target.customPath : false,
      repeat: target.loops || 1,
      delay: target.loopDelay || 250,
      below: target.animLevel || false,
      startDelay: target.delayStart || 500,
      scale: target.scale || 1,
      animation: target.name || "",
      color: target.color,
      variant: target.variant,
      persistent: target.persistent || false,
      opacity: target.opacity || 1,
      itemAudio: {
        enable: ((_handler$flags$audio20 = handler.flags.audio) === null || _handler$flags$audio20 === void 0 ? void 0 : (_handler$flags$audio21 = _handler$flags$audio20.t01) === null || _handler$flags$audio21 === void 0 ? void 0 : _handler$flags$audio21.enable) || false,
        file: (_handler$flags$audio22 = handler.flags.audio) === null || _handler$flags$audio22 === void 0 ? void 0 : (_handler$flags$audio23 = _handler$flags$audio22.t01) === null || _handler$flags$audio23 === void 0 ? void 0 : _handler$flags$audio23.file,
        volume: ((_handler$flags$audio24 = handler.flags.audio) === null || _handler$flags$audio24 === void 0 ? void 0 : (_handler$flags$audio25 = _handler$flags$audio24.t01) === null || _handler$flags$audio25 === void 0 ? void 0 : _handler$flags$audio25.volume) || 0.25,
        delay: ((_handler$flags$audio26 = handler.flags.audio) === null || _handler$flags$audio26 === void 0 ? void 0 : (_handler$flags$audio27 = _handler$flags$audio26.t01) === null || _handler$flags$audio27 === void 0 ? void 0 : _handler$flags$audio27.delay) || 0,
        repeat: handler.decoupleSound ? 1 : target.loops || 1,
        soundDelay: handler.decoupleSound ? 1 : target.loopDelay || 250,
        startTime: ((_handler$flags$audio28 = handler.flags.audio) === null || _handler$flags$audio28 === void 0 ? void 0 : (_handler$flags$audio29 = _handler$flags$audio28.t01) === null || _handler$flags$audio29 === void 0 ? void 0 : _handler$flags$audio29.startTime) || 0
      }
    };

    if (target.enable && (target.name === "a1" || !target.name) && !target.enableCustom) {
      targetFX.enabled = false;
      console.warn("AUTOMATED ANIMATIONS || Target Animation is enabled on this item but NO Animation is chosen!");
    }

    targetFX.playSound = targetFX.itemAudio.enable && targetFX.enabled && targetFX.itemAudio.file ? true : false;
    targetFX.data = targetFX.enabled ? await buildFile(true, targetFX.menuType, targetFX.animation, "static", targetFX.variant, targetFX.color, targetFX.customTargetPath) : {};
    return targetFX;
  }

  static _targetSequence(targetFX, target, handler) {
    var _targetFX$data;

    if (handler.playOnMiss) {
      handler.hitTargetsId.includes(target.id) ? true : false;
    } //const playNow = (targetFX.enabled && hit) ? true : false;


    let targetTokenGS = target.width / canvas.grid.size; //targetFX.tFXScale = targetFX.enable ? 2 * target.w / targetFX.data.metadata?.width : 1;

    targetFX.targetSeq = new Sequence();
    /*
    targetFX.targetSeq.sound()
        .file(targetFX.itemAudio?.file, true)
        .volume(targetFX.itemAudio?.volume)
        .delay(targetFX.itemAudio?.delay + targetFX.startDelay)
        .repeats(targetFX.repeat, targetFX.delay)
        .playIf(() => {
            return targetFX.itemAudio?.enable && targetFX.itemAudio?.file && targetFX.enabled;
        })
    */

    targetFX.targetSeq.effect().delay(targetFX.startDelay).file((_targetFX$data = targetFX.data) === null || _targetFX$data === void 0 ? void 0 : _targetFX$data.file, true).atLocation(target) //.scale(targetFX.tFXScale * targetFX.scale)
    .size(targetTokenGS * 1.5 * targetFX.scale, {
      gridUnits: true
    }).repeats(targetFX.repeat, targetFX.delay).belowTokens(targetFX.below).persist(targetFX.persistent).opacity(targetFX.opacity); //.playIf(playNow)

    return targetFX;
  }

  static removePersistentEffect(token, effectName, sceneID) {
    let clsd = false;
    const tokenName = token.name;
    let d = new Dialog({
      title: tokenName,
      buttons: {
        yes: {
          label: "Remove " + effectName,
          callback: html => {
            clsd = true;
          }
        }
      },
      default: 'yes',
      close: () => {
        if (clsd === false) console.log('This was closed without using a button');
        if (clsd === true) Sequencer.EffectManager.endEffects({
          object: token,
          name: effectName,
          sceneId: sceneID
        });
      }
    }, {
      width: 100,
      height: 75
    });
    d.options.resizable = true;
    d.render(true);
  }

  static howToDelete(type) {
    if (game.settings.get("autoanimations", "noTips")) {
      return;
    }

    switch (type) {
      case 'overheadtile':
        ui.notifications.info("This is an OVERHEAD Tile. Use the Tile Foreground Layer to remove the Animation");
        break;

      case 'groundtile':
        ui.notifications.info("This is an GROUND Tile. Use the Tile Layer to remove the Animation");
        break;

      case 'sequencerground':
        ui.notifications.info("This is SEQUENCER Persistent Effect. Use the Sequencer Effect Manager to remove the Animation");
        break;
    }
  }

  static async compileParticleData(autoObject, options3d) {
    const type = options3d.type;

    if (autoObject) {
      var _options3d$speed, _options3d$repeat, _options3d$delay, _options3d$arc, _options3d$scale, _options3d$color, _options3d$color2, _options3d$sprite, _options3d$life, _options3d$emittersiz, _options3d$alpha, _options3d$mass, _options3d$gravity, _options3d$rate, _explode3d$color, _explode3d$color2, _explode3d$speed, _explode3d$gravity, _explode3d$life, _explode3d$rate, _explode3d$emittersiz, _explode3d$alpha, _explode3d$mass, _explode3d$sprite, _explode3d$scale;

      const explode3d = options3d.addexplosion || {};
      const data = {
        type: type,
        speed: (_options3d$speed = options3d.speed) !== null && _options3d$speed !== void 0 ? _options3d$speed : particleDefaultValues[type].speed,
        repeat: (_options3d$repeat = options3d.repeat) !== null && _options3d$repeat !== void 0 ? _options3d$repeat : particleDefaultValues[type].repeat,
        delay: (_options3d$delay = options3d.delay) !== null && _options3d$delay !== void 0 ? _options3d$delay : particleDefaultValues[type].delay,
        arc: (_options3d$arc = options3d.arc) !== null && _options3d$arc !== void 0 ? _options3d$arc : particleDefaultValues[type].arc,
        scale: (_options3d$scale = options3d.scale) !== null && _options3d$scale !== void 0 ? _options3d$scale : particleDefaultValues[type].scale,
        color01: (_options3d$color = options3d.color01) !== null && _options3d$color !== void 0 ? _options3d$color : particleDefaultValues[type].color01,
        color02: (_options3d$color2 = options3d.color02) !== null && _options3d$color2 !== void 0 ? _options3d$color2 : particleDefaultValues[type].color02,
        sprite: (_options3d$sprite = options3d.sprite) !== null && _options3d$sprite !== void 0 ? _options3d$sprite : particleDefaultValues[type].sprite,
        life: (_options3d$life = options3d.life) !== null && _options3d$life !== void 0 ? _options3d$life : particleDefaultValues[type].life,
        emittersize: (_options3d$emittersiz = options3d.emittersize) !== null && _options3d$emittersiz !== void 0 ? _options3d$emittersiz : particleDefaultValues[type].emittersize,
        alpha: (_options3d$alpha = options3d.alpha) !== null && _options3d$alpha !== void 0 ? _options3d$alpha : particleDefaultValues[type].alpha,
        mass: (_options3d$mass = options3d.mass) !== null && _options3d$mass !== void 0 ? _options3d$mass : particleDefaultValues[type].mass,
        gravity: (_options3d$gravity = options3d.gravity) !== null && _options3d$gravity !== void 0 ? _options3d$gravity : particleDefaultValues[type].gravity,
        rate: (_options3d$rate = options3d.rate) !== null && _options3d$rate !== void 0 ? _options3d$rate : particleDefaultValues[type].rate,
        explosion: {
          enable: explode3d.enable || false,
          color01: (_explode3d$color = explode3d.color01) !== null && _explode3d$color !== void 0 ? _explode3d$color : particleDefaultValues[type].explosion.color01,
          color02: (_explode3d$color2 = explode3d.color02) !== null && _explode3d$color2 !== void 0 ? _explode3d$color2 : particleDefaultValues[type].explosion.color02,
          speed: (_explode3d$speed = explode3d.speed) !== null && _explode3d$speed !== void 0 ? _explode3d$speed : particleDefaultValues[type].explosion.speed,
          gravity: (_explode3d$gravity = explode3d.gravity) !== null && _explode3d$gravity !== void 0 ? _explode3d$gravity : particleDefaultValues[type].explosion.gravity,
          life: (_explode3d$life = explode3d.life) !== null && _explode3d$life !== void 0 ? _explode3d$life : particleDefaultValues[type].explosion.life,
          rate: (_explode3d$rate = explode3d.rate) !== null && _explode3d$rate !== void 0 ? _explode3d$rate : particleDefaultValues[type].explosion.rate,
          emittersize: (_explode3d$emittersiz = explode3d.emittersize) !== null && _explode3d$emittersiz !== void 0 ? _explode3d$emittersiz : particleDefaultValues[type].explosion.emittersize,
          alpha: (_explode3d$alpha = explode3d.alpha) !== null && _explode3d$alpha !== void 0 ? _explode3d$alpha : particleDefaultValues[type].explosion.alpha,
          mass: (_explode3d$mass = explode3d.mass) !== null && _explode3d$mass !== void 0 ? _explode3d$mass : particleDefaultValues[type].explosion.mass,
          sprite: (_explode3d$sprite = explode3d.sprite) !== null && _explode3d$sprite !== void 0 ? _explode3d$sprite : particleDefaultValues[type].explosion.sprite,
          scale: (_explode3d$scale = explode3d.scale) !== null && _explode3d$scale !== void 0 ? _explode3d$scale : particleDefaultValues[type].explosion.scale
        }
      };
      return data;
    } else {
      var _options3d$type$speed, _options3d$type$repea, _options3d$type$delay, _options3d$type$arc, _options3d$type$scale, _options3d$type$color, _options3d$type$color2, _options3d$type$sprit, _options3d$type$life, _options3d$type$emitt, _options3d$type$alpha, _options3d$type$mass, _options3d$type$gravi, _options3d$type$rate, _explode3d$color3, _explode3d$color4, _explode3d$speed2, _explode3d$gravity2, _explode3d$life2, _explode3d$rate2, _explode3d$emittersiz2, _explode3d$alpha2, _explode3d$mass2, _explode3d$sprite2, _explode3d$scale2;

      const explode3d = options3d[type].addexplosion || {};
      const data = {
        type: type,
        speed: (_options3d$type$speed = options3d[type].speed) !== null && _options3d$type$speed !== void 0 ? _options3d$type$speed : particleDefaultValues[type].speed,
        repeat: (_options3d$type$repea = options3d[type].repeat) !== null && _options3d$type$repea !== void 0 ? _options3d$type$repea : particleDefaultValues[type].repeat,
        delay: (_options3d$type$delay = options3d[type].delay) !== null && _options3d$type$delay !== void 0 ? _options3d$type$delay : particleDefaultValues[type].delay,
        arc: (_options3d$type$arc = options3d[type].arc) !== null && _options3d$type$arc !== void 0 ? _options3d$type$arc : particleDefaultValues[type].arc,
        scale: (_options3d$type$scale = options3d[type].scale) !== null && _options3d$type$scale !== void 0 ? _options3d$type$scale : particleDefaultValues[type].scale,
        color01: (_options3d$type$color = options3d[type].color01) !== null && _options3d$type$color !== void 0 ? _options3d$type$color : particleDefaultValues[type].color01,
        color02: (_options3d$type$color2 = options3d[type].color02) !== null && _options3d$type$color2 !== void 0 ? _options3d$type$color2 : particleDefaultValues[type].color02,
        sprite: (_options3d$type$sprit = options3d[type].sprite) !== null && _options3d$type$sprit !== void 0 ? _options3d$type$sprit : particleDefaultValues[type].sprite,
        life: (_options3d$type$life = options3d[type].life) !== null && _options3d$type$life !== void 0 ? _options3d$type$life : particleDefaultValues[type].life,
        emittersize: (_options3d$type$emitt = options3d[type].emittersize) !== null && _options3d$type$emitt !== void 0 ? _options3d$type$emitt : particleDefaultValues[type].emittersize,
        alpha: (_options3d$type$alpha = options3d[type].alpha) !== null && _options3d$type$alpha !== void 0 ? _options3d$type$alpha : particleDefaultValues[type].alpha,
        mass: (_options3d$type$mass = options3d[type].mass) !== null && _options3d$type$mass !== void 0 ? _options3d$type$mass : particleDefaultValues[type].mass,
        gravity: (_options3d$type$gravi = options3d[type].gravity) !== null && _options3d$type$gravi !== void 0 ? _options3d$type$gravi : particleDefaultValues[type].gravity,
        rate: (_options3d$type$rate = options3d[type].rate) !== null && _options3d$type$rate !== void 0 ? _options3d$type$rate : particleDefaultValues[type].rate,
        explosion: {
          enable: explode3d.enable || false,
          color01: (_explode3d$color3 = explode3d.color01) !== null && _explode3d$color3 !== void 0 ? _explode3d$color3 : particleDefaultValues[type].explosion.color01,
          color02: (_explode3d$color4 = explode3d.color02) !== null && _explode3d$color4 !== void 0 ? _explode3d$color4 : particleDefaultValues[type].explosion.color02,
          speed: (_explode3d$speed2 = explode3d.speed) !== null && _explode3d$speed2 !== void 0 ? _explode3d$speed2 : particleDefaultValues[type].explosion.speed,
          gravity: (_explode3d$gravity2 = explode3d.gravity) !== null && _explode3d$gravity2 !== void 0 ? _explode3d$gravity2 : particleDefaultValues[type].explosion.gravity,
          life: (_explode3d$life2 = explode3d.life) !== null && _explode3d$life2 !== void 0 ? _explode3d$life2 : particleDefaultValues[type].explosion.life,
          rate: (_explode3d$rate2 = explode3d.rate) !== null && _explode3d$rate2 !== void 0 ? _explode3d$rate2 : particleDefaultValues[type].explosion.rate,
          emittersize: (_explode3d$emittersiz2 = explode3d.emittersize) !== null && _explode3d$emittersiz2 !== void 0 ? _explode3d$emittersiz2 : particleDefaultValues[type].explosion.emittersize,
          alpha: (_explode3d$alpha2 = explode3d.alpha) !== null && _explode3d$alpha2 !== void 0 ? _explode3d$alpha2 : particleDefaultValues[type].explosion.alpha,
          mass: (_explode3d$mass2 = explode3d.mass) !== null && _explode3d$mass2 !== void 0 ? _explode3d$mass2 : particleDefaultValues[type].explosion.mass,
          sprite: (_explode3d$sprite2 = explode3d.sprite) !== null && _explode3d$sprite2 !== void 0 ? _explode3d$sprite2 : particleDefaultValues[type].explosion.sprite,
          scale: (_explode3d$scale2 = explode3d.scale) !== null && _explode3d$scale2 !== void 0 ? _explode3d$scale2 : particleDefaultValues[type].explosion.scale
        }
      };
      return data;
    }
  }

}

function aaDebugger(...args) {
  console.log(`DEBUG | Automated Animations |`, ...args);
}

async function huntersMark(handler, animationData) {

  const data = animationData.primary;

  if (data.isAuto) {
    var _handler$autorecOverr, _handler$autorecOverr2, _handler$autorecOverr3;

    const autoOverridden = (_handler$autorecOverr = handler.autorecOverrides) === null || _handler$autorecOverr === void 0 ? void 0 : _handler$autorecOverr.enable;
    data.anchorX = autoOverridden ? (_handler$autorecOverr2 = handler.autorecOverrides) === null || _handler$autorecOverr2 === void 0 ? void 0 : _handler$autorecOverr2.anchorX : data.anchorX || 0.5;
    data.anchorY = autoOverridden ? (_handler$autorecOverr3 = handler.autorecOverrides) === null || _handler$autorecOverr3 === void 0 ? void 0 : _handler$autorecOverr3.anchorY : data.anchorY || 0.7;
  }

  const sourceToken = handler.sourceToken;
  const sourceFX = animationData.sourceFX;
  const targetFX = animationData.targetFX; //let target = handler.allTargets[0] || null;

  const animLoop = data.variant + "loop";
  let hmPulse = data.color === 'random' ? `autoanimations.static.spell.huntersmark.${data.variant}` : `autoanimations.static.spell.huntersmark.${data.variant}.${data.color}`;
  let hmLoop = data.color === 'random' ? `autoanimations.static.spell.huntersmark.${animLoop}` : `autoanimations.static.spell.huntersmark.${animLoop}.${data.color}`; //const checkAnim = Sequencer.EffectManager.getEffects({ object: target, name: "huntersmark" }).length > 0

  data.scale || 1;
  const sourceTokenGS = sourceToken.width / canvas.grid.size;

  if (handler.debug) {
    aaDebugger("Aura Animation Start", data);
  } //const playPersist = (!checkAnim && data.persistent) ? true : false;


  let aaSeq = await new Sequence(); // Play Macro if Awaiting

  if (data.playMacro && data.macro.playWhen === "1") {
    let userData = data.macro.args;
    aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
  } // Extra Effects => Source Token if active


  if (sourceFX.enabled) {
    aaSeq.addSequence(sourceFX.sourceSeq);
  }

  if (data.playSound) {
    aaSeq.addSequence(await AAanimationData._sounds({
      animationData
    }));
  } // Animation Start Hook


  aaSeq.thenDo(function () {
    Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
  });
  aaSeq.effect().file(hmPulse).atLocation(sourceToken).size(sourceTokenGS * data.scale, {
    gridUnits: true
  });

  for (let target of handler.allTargets) {
    let targetTokenGS = target.width / canvas.grid.size;
    let checkAnim = Sequencer.EffectManager.getEffects({
      object: target,
      origin: handler.itemUuid
    }).length > 0;
    aaSeq.effect().file(hmPulse).atLocation(target).size(targetTokenGS * data.scale, {
      gridUnits: true
    }); //.playIf(target)

    if (!checkAnim && data.persistent) {
      aaSeq.effect().file(hmLoop).attachTo(target).anchor({
        x: data.anchorX,
        y: data.anchorY
      }).delay(1500).size(targetTokenGS * .25, {
        gridUnits: true
      }).belowTokens(false).name("huntersmark").persist().origin(handler.itemUuid).loopProperty("sprite", "width", {
        from: targetTokenGS * .5 * 0.7,
        to: targetTokenGS * .5,
        duration: 4000,
        pingPong: true,
        gridUnits: true
      }).loopProperty("sprite", "height", {
        from: targetTokenGS * .5 * 0.7,
        to: targetTokenGS * .5,
        duration: 4000,
        pingPong: true,
        gridUnits: true
      }).loopProperty("sprite", "alpha", {
        from: 0.25,
        to: 1,
        duration: 4000,
        pingPong: true
      });
    }

    if (targetFX.enabled) {
      let targetSequence = AAanimationData._targetSequence(targetFX, target, handler);

      aaSeq.addSequence(targetSequence.targetSeq);
    }
  }

  if (data.playMacro && data.macro.playWhen === "0") {
    let userData = data.macro.args;
    new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
  }

  aaSeq.play();
  Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
}

async function bardicInspiration(handler, animationData) {
  const sourceToken = handler.sourceToken;
  const flags = handler.flags;
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const targetFX = animationData.targetFX;

  if (data.isAuto) ; else {
    var _flags$bards;

    const bards = (_flags$bards = flags.bards) !== null && _flags$bards !== void 0 ? _flags$bards : {};
    data.selfColor = bards.bardSelfColor;
    data.targetColor = bards.bardTargetColor;
    data.selfMarkerColor = bards.markerColor;
    data.targetMarkerColor = bards.markerColorTarget;
    data.animateSelf = bards.bardSelf;
    data.animateTarget = bards.bardTarget;
    data.marker = bards.marker;
    data.selfAnimation = bards.bardAnim;
    data.targetAnimation = bards.bardTargetAnim;
  }

  if (handler.debug) {
    aaDebugger("Bardic Inspiration Animation Start", data);
  }

  const selfMarkerPath = data.selfMarkerColor === "random" ? `autoanimations.static.spell.bardicinspiration.marker` : `autoanimations.static.spell.bardicinspiration.marker.${data.selfMarkerColor}`;
  const targetMarkerPath = data.targetMarkerColor === "random" ? `autoanimations.static.spell.bardicinspiration.marker` : `autoanimations.static.spell.bardicinspiration.marker.${data.targetMarkerColor}`;
  const selfMusicPath = data.selfColor === "random" ? `autoanimations.static.music.notes.01` : `autoanimations.static.music.notes.01.${data.selfColor}`;
  const targetMusicPath = data.targetColor === "random" ? `autoanimations.static.music.notes.01` : `autoanimations.static.music.notes.01.${data.targetColor}`;
  const selfBIPath = data.selfColor === "random" ? `autoanimations.static.spell.bardicinspiration.inspire` : `autoanimations.static.spell.bardicinspiration.inspire.${data.selfColor}`;
  const targetBIPath = data.targetColor === "random" ? `autoanimations.static.spell.bardicinspiration.inspire` : `autoanimations.static.spell.bardicinspiration.inspire.${data.targetColor}`;
  let aaSeq = await new Sequence("Automated Animations"); // Play Macro if Awaiting

  if (data.playMacro && data.macro.playWhen === "1") {
    let userData = data.macro.args;
    aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
  } // Extra Effects => Source Token if active


  if (sourceFX.enabled) {
    aaSeq.addSequence(sourceFX.sourceSeq);
  } // Animation Start Hook


  aaSeq.thenDo(function () {
    Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
  });

  if (data.animateSelf) {
    const sourceTokenGS = sourceToken.width / canvas.grid.size * 1.75 * data.scale;
    let selfEffect = aaSeq.effect();
    selfEffect.atLocation(sourceToken);

    if (data.selfAnimation === 'music') {
      selfEffect.file(selfMusicPath);
      selfEffect.size(sourceToken.width / canvas.grid.size, {
        gridUnits: true
      });
      selfEffect.repeats(10, 350);
      selfEffect.randomOffset();
    } else {
      selfEffect.file(selfBIPath);
      selfEffect.size(sourceTokenGS, {
        gridUnits: true
      });
    }

    if (data.marker) {
      aaSeq.effect().file(selfMarkerPath).atLocation(sourceToken).size(sourceTokenGS, {
        gridUnits: true
      }).belowTokens(true);
    }
  }

  let targetSound = false;

  if (data.animateTarget && handler.allTargets.length > 0) {
    for (let target of handler.allTargets) {
      let targetTokenGS = target.width / canvas.grid.size * 1.75 * data.scale;
      let targetEffect = aaSeq.effect();
      targetEffect.atLocation(target);

      if (data.targetAnimation === 'music') {
        targetEffect.file(targetMusicPath);
        targetEffect.size(target.width / canvas.grid.size, {
          gridUnits: true
        });
        targetEffect.repeats(10, 350);
        targetEffect.randomOffset();
      } else {
        targetEffect.file(targetBIPath);
        targetEffect.size(targetTokenGS, {
          gridUnits: true
        });
      }

      if (data.marker) {
        aaSeq.effect().file(targetMarkerPath).atLocation(target).size(targetTokenGS, {
          gridUnits: true
        }).belowTokens(true);
      }

      if (targetFX.enabled) {
        let targetSequence = AAanimationData._targetSequence(targetFX, target, handler);

        aaSeq.addSequence(targetSequence.targetSeq);
        targetSound = true;
      }
    }
  }

  aaSeq.addSequence(await AAanimationData._sounds({
    animationData,
    targetSound
  })); // Macro if Concurrent

  if (data.playMacro && data.macro.playWhen === "0") {
    let userData = data.macro.args;
    new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
  }

  aaSeq.play(); // Animation End Hook

  Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
}

const wait$9 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function rangedAnimations(handler, animationData) {
  // Sets JB2A database and Global Delay
  //let jb2a = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$9(globalDelay);
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const targetFX = animationData.targetFX;
  const attack = await buildFile(false, data.menuType, data.animation, "range", data.variant, data.color, data.customPath);

  if (handler.debug) {
    aaDebugger("Ranged Animation Start", animationData, attack);
  }

  const sourceToken = handler.sourceToken;
  const onlyX = data.enableCustom ? data.onlyX : false;

  async function cast() {
    let aaSeq = await new Sequence("Automated Animations"); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });
    let targetSound = false; // Target Effect sections

    for (let target of handler.allTargets) {
      let hit;

      if (handler.playOnMiss) {
        hit = handler.hitTargetsId.includes(target.id) ? true : false;
      } else {
        hit = true;
      }

      if (hit) {
        targetSound = true;
      }

      aaSeq.effect().file(attack.file).atLocation(sourceToken).stretchTo(target, {
        onlyX: onlyX
      }).randomizeMirrorY().repeats(data.repeat, data.delay).missed(!hit).name("spot" + ` ${target.id}`).belowTokens(data.below);

      if (data.explosion.enabled) {
        var _data$explosion, _data$explosion$data, _data$explosion2, _data$explosion3, _data$explosion4;

        aaSeq.effect().atLocation("spot" + ` ${target.id}`).file((_data$explosion = data.explosion) === null || _data$explosion === void 0 ? void 0 : (_data$explosion$data = _data$explosion.data) === null || _data$explosion$data === void 0 ? void 0 : _data$explosion$data.file, true) //.scale({ x: data.explosion?.scale, y: data.explosion?.scale })
        .size(((_data$explosion2 = data.explosion) === null || _data$explosion2 === void 0 ? void 0 : _data$explosion2.radius) * 2, {
          gridUnits: true
        }).delay((_data$explosion3 = data.explosion) === null || _data$explosion3 === void 0 ? void 0 : _data$explosion3.delay).repeats(data.repeat, data.delay).belowTokens((_data$explosion4 = data.explosion) === null || _data$explosion4 === void 0 ? void 0 : _data$explosion4.below);
      }

      if (targetFX.enabled && hit) {
        let targetSequence = AAanimationData._targetSequence(targetFX, target, handler);

        aaSeq.addSequence(targetSequence.targetSeq);
      }
    }

    aaSeq.addSequence(await AAanimationData._sounds({
      animationData,
      targetSound,
      explosionSound: true
    })); // Macro if Concurrent

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    await wait$9(handler.animEnd); // Animation End Hook

    Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
  }

  cast();
}

//import { animationDefault } from "./file-builder/options.js";

const wait$8 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function meleeAnimation(handler, animationData) {
  function moduleIncludes(test) {
    return !!game.modules.get(test);
  }

  let rangeSwitch;

  if (moduleIncludes("jb2a_patreon")) {
    rangeSwitch = ['sword', 'greatsword', 'mace', 'dagger', 'spear', 'greataxe', 'handaxe', 'lasersword', 'hammer', 'chakram'];
  } else {
    rangeSwitch = ['dagger', 'lasersword'];
  } // Sets JB2A database and Global Delay


  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$8(globalDelay);
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const targetFX = animationData.targetFX;
  const returnWeapons = ['dagger', 'hammer', 'greatsword', 'chakram'];
  const switchReturn = returnWeapons.some(el => data.switchAnimation.includes(el)) ? data.return : false;
  let returnDelay;

  switch (true) {
    case data.switchAnimation.includes('dagger'):
    case data.switchAnimation.includes('hammer'):
      returnDelay = 1000;
      break;

    default:
      returnDelay = 1500;
  }

  const attack = await buildFile(false, data.menuType, data.animation, "melee", data.variant, data.color, data.customPath);
  const range = await buildFile(false, data.switchMenuType, data.switchAnimation, "range", data.switchVariant, data.switchColor);

  if (handler.debug) {
    aaDebugger("Melee Animation Start", animationData, attack);
  }

  const sourceToken = handler.sourceToken; //const sourceScale = data.animation === "unarmedstrike" || data.animation === "flurryofblows" ? sourceToken.w / canvas.grid.size * 0.85 : sourceToken.w / canvas.grid.size * 0.5;

  const sourceTokenGS = sourceToken.width / canvas.grid.size * 4;

  async function cast() {
    const rangeSwitchActive = game.settings.get("autoanimations", "rangeSwitch");
    let aaSeq = await new Sequence("Automated Animations"); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });
    let targetSound = false;
    let switchSound = true; // Target Effect sections

    for (let target of handler.allTargets) {
      let distanceTo = handler.getDistanceTo(target);
      let switchDistance = 5;

      if (handler.gameSystem === "swade") {
        switchDistance = 1;
      }

      if (handler.gameSystem === "alienrpg") {
        switchDistance = canvas.grid.distance * 1.5;
      }

      let moveTo = distanceTo > switchDistance ? true : false;
      let hit;

      if (handler.playOnMiss) {
        hit = handler.hitTargetsId.includes(target.id) ? true : false;
      } else {
        hit = true;
      }

      if (hit) {
        targetSound = true;
      } // check if this target gets a melee or range animation


      let noMelee = false;

      if (!rangeSwitchActive) {
        switch (data.switchType) {
          case "on":
            if (rangeSwitch.some(el => data.animation.includes(el)) && range.file) {
              if (distanceTo > switchDistance + handler.reachCheck) {
                noMelee = true;
              }
            }

            break;

          case "custom":
            if (data.detect === "manual") {
              if (distanceTo / canvas.dimensions.distance > data.switchRange) {
                noMelee = true;
              }
            } else if (distanceTo > switchDistance + handler.reachCheck) {
              noMelee = true;
            }

            break;
        }
      }

      if (!noMelee) {
        switchSound = false;
      }

      if (noMelee) {
        aaSeq.effect().file(range.file).atLocation(sourceToken).stretchTo(target).randomizeMirrorY().repeats(data.repeat, data.delay).missed(!hit).name("spot" + ` ${target.id}`).belowTokens(data.below);

        if (switchReturn) {
          aaSeq.effect().file(range.returnFile, true).delay(returnDelay).atLocation(sourceToken).repeats(data.repeat, data.delay).stretchTo("spot" + ` ${target.id}`);
        }
      } else {
        // Standard Melee Animation effect sections
        if (moveTo) {
          aaSeq.effect().file(attack.file).atLocation(sourceToken).moveTowards(target).size(sourceTokenGS * data.scale, {
            gridUnits: true
          }).repeats(data.repeat, data.delay).randomizeMirrorY().missed(!hit).name("spot" + ` ${target.id}`).belowTokens(data.below);
        } else {
          aaSeq.effect().file(attack.file).atLocation(sourceToken).rotateTowards(target).size(sourceTokenGS * data.scale, {
            gridUnits: true
          }).repeats(data.repeat, data.delay).randomizeMirrorY().missed(!hit).name("spot" + ` ${target.id}`).belowTokens(data.below).anchor({
            x: 0.4,
            y: 0.5
          });
        }
      } // add-on Explosion Animation effect sections


      if (data.explosion.enabled) {
        var _data$explosion, _data$explosion$data, _data$explosion2, _data$explosion3, _data$explosion4;

        aaSeq.effect().atLocation("spot" + ` ${target.id}`).file((_data$explosion = data.explosion) === null || _data$explosion === void 0 ? void 0 : (_data$explosion$data = _data$explosion.data) === null || _data$explosion$data === void 0 ? void 0 : _data$explosion$data.file, true) //.scale({ x: data.explosion?.scale, y: data.explosion?.scale })
        .size(((_data$explosion2 = data.explosion) === null || _data$explosion2 === void 0 ? void 0 : _data$explosion2.radius) * 2, {
          gridUnits: true
        }).delay((_data$explosion3 = data.explosion) === null || _data$explosion3 === void 0 ? void 0 : _data$explosion3.delay).repeats(data.repeat, data.delay).belowTokens((_data$explosion4 = data.explosion) === null || _data$explosion4 === void 0 ? void 0 : _data$explosion4.below);
      } // Extra Effects => Target effect section


      if (targetFX.enabled && hit) {
        let targetSequence = AAanimationData._targetSequence(targetFX, target, handler);

        aaSeq.addSequence(targetSequence.targetSeq);
      }
    }

    aaSeq.addSequence(await AAanimationData._sounds({
      animationData,
      switchSound,
      targetSound,
      explosionSound: true
    })); // Macro if Concurrent

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    await wait$8(handler.animEnd); // Animation End Hook

    Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
  }

  cast();
}

async function teleportation(handler, animationData) {
  var _sourceToken$data, _game$user, _game$user$data;

  const sourceToken = handler.sourceToken;
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;

  if (data.isAuto) {
    data.itemName01 = data.subAnimation || "";
    data.itemName02 = data.subAnimation02 || "";
    data.teleDist = data.range || 30;
  } else {
    var _data$options, _data$options2;

    data.itemName01 = ((_data$options = data.options) === null || _data$options === void 0 ? void 0 : _data$options.name) || "";
    data.itemName02 = ((_data$options2 = data.options) === null || _data$options2 === void 0 ? void 0 : _data$options2.name02) || "";
  }

  const onToken = await buildFile(true, data.menuType, data.itemName01, "static", data.variant, data.color, data.customPath);
  const onToken02 = await buildFile(true, data.menuType02, data.itemName02, "static", data.variant02, data.color02, data.customPath02);

  if (handler.debug) {
    aaDebugger("Teleportation Animation Start", animationData, onToken, onToken02);
  }

  const sourceScale = sourceToken.w;
  let Scale = sourceScale / onToken.metadata.width * data.scale * 1.75;
  let Scale02 = sourceScale / onToken02.metadata.width * data.scale02 * 1.75;
  const drawingSize = ((_sourceToken$data = sourceToken.data) === null || _sourceToken$data === void 0 ? void 0 : _sourceToken$data.width) * canvas.grid.size + 2 * (data.teleDist / canvas.dimensions.distance * canvas.grid.size);
  let userIDs = Array.from(game.users).map(user => user.id);
  let gmIDs = Array.from(game.users).filter(i => i.isGM).map(user => user.id);
  const hideBorder = data.hideFromPlayers ? gmIDs : userIDs;
  const userColor = (_game$user = game.user) !== null && _game$user !== void 0 && (_game$user$data = _game$user.data) !== null && _game$user$data !== void 0 && _game$user$data.color ? "0x" + game.user.data.color.replace(/^#/, '') : 0x0D26FF;
  const filePath = data.measureType === 'equidistant' ? "modules/autoanimations/src/images/teleportSquare.png" : "modules/autoanimations/src/images/teleportCircle.png";
  let aaSeq01 = new Sequence();
  aaSeq01.effect().file(filePath).atLocation(sourceToken).size({
    width: drawingSize,
    height: drawingSize
  }).fadeIn(500).scaleIn(0, 500).fadeOut(500).name("teleportation").belowTokens(true).persist(true).opacity(0.5).filter("Glow", {
    distance: 10,
    outerStrength: 5,
    innerStrength: 5,
    color: userColor,
    quality: 0.2
  }).forUsers(hideBorder);
  aaSeq01.play();
  let pos;
  canvas.app.stage.addListener('pointerdown', event => {
    if (event.data.button !== 0) {
      return;
    }

    pos = event.data.getLocalPosition(canvas.app.stage);
    let topLeft = canvas.grid.getTopLeft(pos.x, pos.y);

    if (checkDistance(sourceToken, {
      x: topLeft[0],
      y: topLeft[1]
    }) <= data.teleDist) {
      deleteTemplatesAndMove();
      canvas.app.stage.removeListener('pointerdown');
    } else {
      ui.notifications.error(game.i18n.format("AUTOANIM.teleport"));
    }
  });

  async function deleteTemplatesAndMove() {
    let gridPos = canvas.grid.getTopLeft(pos.x, pos.y);
    let centerPos;

    if (canvas.scene.gridType === 0) {
      centerPos = [gridPos[0] + sourceToken.w, gridPos[1] + sourceToken.w];
    } else {
      centerPos = canvas.grid.getCenter(pos.x, pos.y);
    } //let centerPos = canvas.grid.getCenter(pos.x, pos.y);


    Sequencer.EffectManager.endEffects({
      name: "teleportation"
    });
    let aaSeq = new Sequence();

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    }

    aaSeq.addSequence(sourceFX.sourceSeq);

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    aaSeq.effect().file(onToken.file).atLocation(sourceToken).scale(Scale).randomRotation();
    aaSeq.wait(250);
    aaSeq.animation().on(sourceToken).opacity(0).teleportTo({
      x: gridPos[0],
      y: gridPos[1]
    });
    aaSeq.effect().file(onToken02.file).atLocation({
      x: centerPos[0],
      y: centerPos[1]
    }).scale(Scale02).randomRotation();
    aaSeq.wait(1250 + data.delay);
    aaSeq.animation().on(sourceToken).opacity(1);

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    /*
    new Sequence("Automated Animations")
        .addSequence(sourceFX.sourceSeq)
        .sound()
            .file(data.itemAudio.file, true)
            .volume(data.itemAudio.volume)
            .delay(data.itemAudio.delay)
            .playIf(data.playSound)
        .effect()
            .file(onToken.file)
            .atLocation(sourceToken)
            .scale(Scale)
            .randomRotation()
        .wait(250)
        .animation()
            .on(sourceToken)
            .opacity(0)
            .teleportTo({x: gridPos[0], y: gridPos[1]})
        .effect()
            .file(onToken02.file)
            .atLocation({x: centerPos[0], y: centerPos[1]})
            .scale(Scale02)
            .randomRotation()
        .wait(1250 + data.delay)
        .animation()
            .on(sourceToken)
            .opacity(1)
        .play();
    */
  }

  function checkDistance(source, target) {
    var x,
        x1,
        y,
        y1,
        segments = [],
        rdistance,
        distance;

    for (x = 0; x < source.data.width; x++) {
      for (y = 0; y < source.data.height; y++) {
        const origin = new PIXI.Point(...canvas.grid.getCenter(source.data.x + canvas.dimensions.size * x, source.data.y + canvas.dimensions.size * y));

        for (x1 = 0; x1 < 1; x1++) {
          for (y1 = 0; y1 < 1; y1++) {
            const dest = new PIXI.Point(...canvas.grid.getCenter(target.x + canvas.dimensions.size * x1, target.y + canvas.dimensions.size * y1));

            const _r = new Ray(origin, dest);

            segments.push({
              ray: _r
            });
          }
        }
      }
    }

    if (segments.length === 0) {
      return -1;
    }

    rdistance = canvas.grid.measureDistances(segments, {
      gridSpaces: true
    });
    distance = rdistance[0];
    rdistance.forEach(d => {
      if (d < distance) distance = d;
    });
    return distance;
  } // Converting hex colors to HSL format

  /*
  function hexToHSL(H) {
      // Convert hex to RGB first
      let r = 0, g = 0, b = 0;
      if (H.length == 4) {
        r = "0x" + H[1] + H[1];
        g = "0x" + H[2] + H[2];
        b = "0x" + H[3] + H[3];
      } else if (H.length == 7) {
        r = "0x" + H[1] + H[2];
        g = "0x" + H[3] + H[4];
        b = "0x" + H[5] + H[6];
      }
      // Then to HSL
      r /= 255;
      g /= 255;
      b /= 255;
      let cmin = Math.min(r,g,b),
          cmax = Math.max(r,g,b),
          delta = cmax - cmin,
          h = 0,
          s = 0,
          l = 0;
    
      if (delta == 0)
        h = 0;
      else if (cmax == r)
        h = ((g - b) / delta) % 6;
      else if (cmax == g)
        h = (b - r) / delta + 2;
      else
        h = (r - g) / delta + 4;
    
      h = Math.round(h * 60);
    
      if (h < 0)
        h += 360;
    
      l = (cmax + cmin) / 2;
      s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
      s = +(s * 100).toFixed(1);
      l = +(l * 100).toFixed(1);
    
      //return "hsl(" + h + "," + s + "%," + l + "%)";
      return [h, s * 0.01, l * 0.01]
    }
    */

}

var socketlibSocket = undefined;
let setupSocket = () => {
  var _game$modules$get;

  //@ts-ignore
  if ((_game$modules$get = game.modules.get("socketlib")) !== null && _game$modules$get !== void 0 && _game$modules$get.active) {
    socketlibSocket = window.socketlib.registerModule("autoanimations");
    socketlibSocket.register("placeTile", placeTile);
    socketlibSocket.register("placeDrawing", placeDrawing);
    socketlibSocket.register("deleteDrawing", deleteDrawing);
    socketlibSocket.register("removeTile", removeTile);
  }
};
async function placeTile(data) {
  await canvas.scene.createEmbeddedDocuments("Tile", [data]);
}
async function placeDrawing(data) {
  await canvas.scene.createEmbeddedDocuments("Drawing", [data]);
}
async function deleteDrawing(data) {
  await canvas.scene.deleteEmbeddedDocuments("Drawing", data);
}
async function removeTile(data) {
  await canvas.scene.deleteEmbeddedDocuments("Tile", data);
}

const wait$7 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function templateAnimation(handler, animationData, config) {
  const sourceToken = handler.sourceToken;
  const template = config ? config : canvas.templates.placeables[canvas.templates.placeables.length - 1];
  const templateData = template.data || {};
  const templateType = templateData === null || templateData === void 0 ? void 0 : templateData.t;
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;

  if (data.isAuto) {
    data.type = data.type;
    data.persistent = data.persist || false;
  } else {
    var _handler$flags, _handler$flags$option;

    data.type = (_handler$flags = handler.flags) === null || _handler$flags === void 0 ? void 0 : (_handler$flags$option = _handler$flags.options) === null || _handler$flags$option === void 0 ? void 0 : _handler$flags$option.tempType;
  }
  /*
  if (data.animation === 'thunderwave') {
      thunderwaveAuto(handler, data);
      return;
  }
  */


  const tempAnimation = await buildFile(true, data.menuType, data.animation, "templatefx", data.variant, data.color, data.customPath);

  if (handler.debug) {
    aaDebugger("Template Animation Start", animationData, tempAnimation);
  }

  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$7(globalDelay);
  const templateTypes = ['sphere', 'cylinder', 'radius'];

  if (data.persistent && (data.persistType === 'overheadtile' || data.persistType === 'groundtile')) {
    let trueSize;

    if (templateType === 'rect') {
      var _game$modules$get, _handler$item$data, _handler$item$data$da, _handler$item$data$da2;

      if ((_game$modules$get = game.modules.get("dnd5e-helpers")) !== null && _game$modules$get !== void 0 && _game$modules$get.active && (game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 2 || game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 3) && templateTypes.includes((_handler$item$data = handler.item.data) === null || _handler$item$data === void 0 ? void 0 : (_handler$item$data$da = _handler$item$data.data) === null || _handler$item$data$da === void 0 ? void 0 : (_handler$item$data$da2 = _handler$item$data$da.target) === null || _handler$item$data$da2 === void 0 ? void 0 : _handler$item$data$da2.type)) {
        var _handler$item$data2, _handler$item$data2$d, _handler$item$data2$d2;

        trueSize = Math.sqrt(Math.pow(templateData.distance, 2) - Math.pow(((_handler$item$data2 = handler.item.data) === null || _handler$item$data2 === void 0 ? void 0 : (_handler$item$data2$d = _handler$item$data2.data) === null || _handler$item$data2$d === void 0 ? void 0 : (_handler$item$data2$d2 = _handler$item$data2$d.target) === null || _handler$item$data2$d2 === void 0 ? void 0 : _handler$item$data2$d2.value) * 2, 2));
      } else {
        trueSize = templateData.width;
      }
    } else {
      trueSize = templateData.distance * 2;
    }

    const templateLength = canvas.grid.size * (trueSize / canvas.dimensions.distance);
    const isOverhead = data.persistType === 'overheadtile' ? true : false;
    const tileWidth = templateLength * data.scaleX;
    const tileHeight = templateLength * data.scaleY;
    const tileX = templateType === 'circle' ? templateData.x - tileWidth / 2 : templateData.x + (templateLength - tileWidth) / 2;
    const tileY = templateType === 'circle' ? templateData.y - tileHeight / 2 : templateData.y + (templateLength - tileHeight) / 2;
    const templateObject = {
      alpha: data.opacity,
      width: tileWidth,
      height: tileHeight,
      img: tempAnimation.fileData,
      overhead: isOverhead,
      // false sets Tile in canvas.background. true sets Tile to canvas.foreground
      occlusion: {
        alpha: data.occlusionAlpha,
        mode: data.occlusionMode
      },
      video: {
        autoplay: true,
        loop: true,
        volume: 0
      },
      flags: {
        autoanimations: {
          origin: handler.itemUuid
        }
      },
      x: tileX,
      y: tileY,
      z: 100
    };
    let aaSeq = await new Sequence("Automated Animations"); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      handler.templateData = template;
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    aaSeq.play();
    socketlibSocket.executeAsGM("placeTile", templateObject);

    if (data.removeTemplate) {
      if (data.persistType === 'overheadtile') {
        AAanimationData.howToDelete("overheadtile");
      } else {
        AAanimationData.howToDelete("groundtile");
      }

      canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate", [templateData._id]);
    }
  } else {
    const _templateType = templateData.t;
    let aaSeq = await new Sequence("Automated Animations");

    if (data.persistent && data.persistType !== "attachtemplate" || !data.persistent) {
      aaSeq.thenDo(function () {
        if (data.removeTemplate) {
          canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate", [template.id]);
        }
      });
    } // Play Macro if Awaiting


    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      handler.templateData = template;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, "no-target");
    });

    if (_templateType === 'cone' || _templateType === 'ray') {
      const trueHeight = _templateType === 'cone' ? templateData.distance : templateData.width * 2;
      const coneRaySeq = aaSeq.effect();
      coneRaySeq.file(tempAnimation.file);
      coneRaySeq.size({
        width: canvas.grid.size * (templateData.distance / canvas.dimensions.distance) * data.scaleX,
        height: canvas.grid.size * (trueHeight / canvas.dimensions.distance) * data.scaleY
      });
      coneRaySeq.opacity(data.opacity);
      coneRaySeq.origin(handler.itemUuid);
      coneRaySeq.belowTokens(data.below);

      if (data.persistent) {
        coneRaySeq.persist(true);

        if (data.persistType === 'attachtemplate') {
          coneRaySeq.attachTo(template);
          coneRaySeq.rotateTowards(template, {
            attachTo: true
          });
        } else {
          coneRaySeq.atLocation(template, {
            cacheLocation: true
          });
          coneRaySeq.rotateTowards(template, {
            cacheLocation: true
          });
        }
      } else {
        coneRaySeq.atLocation(template, {
          cacheLocation: true
        });
        coneRaySeq.repeats(data.repeat, data.delay);
        coneRaySeq.rotateTowards(template, {
          cacheLocation: true
        });
      }
    }

    if (_templateType === 'circle' || _templateType === 'rect') {
      let trueSize;

      if (_templateType === 'rect') {
        var _game$modules$get2, _handler$item$data3, _handler$item$data3$d, _handler$item$data3$d2;

        if ((_game$modules$get2 = game.modules.get("dnd5e-helpers")) !== null && _game$modules$get2 !== void 0 && _game$modules$get2.active && (game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 2 || game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 3) && templateTypes.includes((_handler$item$data3 = handler.item.data) === null || _handler$item$data3 === void 0 ? void 0 : (_handler$item$data3$d = _handler$item$data3.data) === null || _handler$item$data3$d === void 0 ? void 0 : (_handler$item$data3$d2 = _handler$item$data3$d.target) === null || _handler$item$data3$d2 === void 0 ? void 0 : _handler$item$data3$d2.type)) {
          var _handler$item$data4, _handler$item$data4$d, _handler$item$data4$d2;

          trueSize = Math.sqrt(Math.pow(templateData.distance, 2) - Math.pow(((_handler$item$data4 = handler.item.data) === null || _handler$item$data4 === void 0 ? void 0 : (_handler$item$data4$d = _handler$item$data4.data) === null || _handler$item$data4$d === void 0 ? void 0 : (_handler$item$data4$d2 = _handler$item$data4$d.target) === null || _handler$item$data4$d2 === void 0 ? void 0 : _handler$item$data4$d2.value) * 2, 2));
        } else {
          trueSize = templateData.width;
        }
      } else {
        trueSize = templateData.distance * 2;
      }

      let circRectSeq = aaSeq.effect();
      circRectSeq.file(tempAnimation.file);
      circRectSeq.size({
        width: canvas.grid.size * (trueSize / canvas.dimensions.distance) * data.scaleX,
        height: canvas.grid.size * (trueSize / canvas.dimensions.distance) * data.scaleY
      });
      circRectSeq.opacity(data.opacity);
      circRectSeq.origin(handler.itemUuid);
      circRectSeq.belowTokens(data.below);

      if (data.persistent) {
        circRectSeq.persist(true);

        if (data.persistType === 'attachtemplate') {
          circRectSeq.attachTo(template, {
            followRotation: true
          });
        } else {
          circRectSeq.atLocation(template, {
            cacheLocation: true
          });
          circRectSeq.persist();
        }
      } else {
        circRectSeq.atLocation(template, {
          cacheLocation: true
        });
        circRectSeq.repeats(data.repeat, data.delay);
      }
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      handler.templateData = template;
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();

    if (data.persistType === 'sequencerground' && data.persistent) {
      AAanimationData.howToDelete("sequencerground");
    }

    await wait$7(500);
    Hooks.callAll("aa.animationEnd", sourceToken, "no-target");
  }
}

Hooks.once('aa.ready', async jb2a => {
  await menuOptions(jb2a);
});
const aaTypeMenu = {};
const aaNameMenu = {};
const aaColorMenu = {};
const aaVariantMenu = {};

async function menuOptions(database) {
  const jb2a = database;
  const menuSets = ['range', 'return', 'melee', 'static', 'templatefx'];

  for (let section of menuSets) {
    aaTypeMenu[section] = Object.keys(jb2a[section]).reduce((o, type) => _objectSpread2(_objectSpread2({}, o), {}, {
      [type]: game.i18n.localize(`autoanimations.menuTypes.${type}`)
    }), {});
    aaNameMenu[section] = Object.keys(jb2a[section]).reduce((o, type) => _objectSpread2(_objectSpread2({}, o), {}, {
      [type]: Object.keys(jb2a[section][type]).reduce((o, name) => _objectSpread2(_objectSpread2({}, o), {}, {
        [name]: game.i18n.localize(`autoanimations.animations.${name}`)
      }), {})
    }), {});
    aaVariantMenu[section] = Object.keys(jb2a[section]).reduce((o, type) => _objectSpread2(_objectSpread2({}, o), {}, {
      [type]: Object.keys(jb2a[section][type]).reduce((o, name) => _objectSpread2(_objectSpread2({}, o), {}, {
        [name]: Object.keys(jb2a[section][type][name]).reduce((o, variant) => _objectSpread2(_objectSpread2({}, o), {}, {
          [variant]: game.i18n.localize(`AUTOANIM.${variant}`)
        }), {})
      }), {})
    }), {});
    aaColorMenu[section] = Object.keys(jb2a[section]).reduce((o, type) => _objectSpread2(_objectSpread2({}, o), {}, {
      [type]: Object.keys(jb2a[section][type]).reduce((o, name) => _objectSpread2(_objectSpread2({}, o), {}, {
        [name]: Object.keys(jb2a[section][type][name]).reduce((o, variant) => _objectSpread2(_objectSpread2({}, o), {}, {
          [variant]: Object.keys(jb2a[section][type][name][variant]).reduce((o, color) => _objectSpread2(_objectSpread2({}, o), {}, {
            [color]: game.i18n.localize(`autoanimations.colors.${color}`)
          }), {})
        }), {})
      }), {})
    }), {});
  }

  await addRandom(aaColorMenu);
  await remove_Template(aaTypeMenu);
  /*
  let range = Object.keys(jb2a.range)
  let melee = Object.keys(jb2a.melee)
  let aaStatic = Object.keys(jb2a.static)
  let rangeReturn = Object.keys(jb2a.return)
  let templatefx = Object.keys(jb2a.templatefx)
  
  aaTypeMenu.range =    range.reduce((o, type) => ({...o, [type]: game.i18n.localize(`AUTOANIM.${type}`)}), {});
  aaTypeMenu.return =    rangeReturn.reduce((o, type) => ({...o, [type]: game.i18n.localize(`AUTOANIM.${type}`)}), {});
  aaTypeMenu.melee =    melee.reduce((o, type) => ({...o, [type]: game.i18n.localize(`AUTOANIM.${type}`)}), {});
  aaTypeMenu.static =    aaStatic.reduce((o, type) => ({...o, [type]: game.i18n.localize(`AUTOANIM.${type}`)}), {});
  aaTypeMenu.templatefx =  templatefx.reduce((o, type) => ({...o, [type]: game.i18n.localize(`AUTOANIM.${type}`)}), {});
  
  remove_Template(aaTypeMenu)
  
  aaNameMenu.range = range.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.range[type]).reduce((o, name) => ({...o, [name]: game.i18n.localize(`AUTOANIM.${name}`)}), {})}), {});
  aaNameMenu.return = rangeReturn.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.return[type]).reduce((o, name) => ({...o, [name]: game.i18n.localize(`AUTOANIM.${name}`)}), {})}), {});
  aaNameMenu.melee = melee.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.melee[type]).reduce((o, name) => ({...o, [name]: game.i18n.localize(`AUTOANIM.${name}`)}), {})}), {});
  aaNameMenu.static = aaStatic.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.static[type]).reduce((o, name) => ({...o, [name]: game.i18n.localize(`AUTOANIM.${name}`)}), {})}), {});
  aaNameMenu.templatefx = templatefx.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.templatefx[type]).reduce((o, name) => ({...o, [name]: game.i18n.localize(`AUTOANIM.${name}`)}), {})}), {});
  
  aaVariantMenu.range =  range.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.range[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.range[type][name]).reduce((o, variant) => ({...o, [variant]: game.i18n.localize(`AUTOANIM.${variant}`)}), {})}), {})}), {});
  aaVariantMenu.return = rangeReturn.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.return[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.return[type][name]).reduce((o, variant) => ({...o, [variant]: game.i18n.localize(`AUTOANIM.${variant}`)}), {})}), {})}), {});
  aaVariantMenu.melee = melee.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.melee[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.melee[type][name]).reduce((o, variant) => ({...o, [variant]: game.i18n.localize(`AUTOANIM.${variant}`)}), {})}), {})}), {});
  aaVariantMenu.static = aaStatic.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.static[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.static[type][name]).reduce((o, variant) => ({...o, [variant]: game.i18n.localize(`AUTOANIM.${variant}`)}), {})}), {})}), {});
  aaVariantMenu.templatefx = templatefx.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.templatefx[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.templatefx[type][name]).reduce((o, variant) => ({...o, [variant]: game.i18n.localize(`AUTOANIM.${variant}`)}), {})}), {})}), {});
  
  aaColorMenu.range = range.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.range[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.range[type][name]).reduce((o, variant) => ({...o, [variant]: Object.keys(jb2a.range[type][name][variant]).reduce((o, color) => ({...o, [color]: game.i18n.localize(`AUTOANIM.${color}`)}), {})}), {})}), {})}), {});
  aaColorMenu.return = rangeReturn.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.return[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.return[type][name]).reduce((o, variant) => ({...o, [variant]: Object.keys(jb2a.return[type][name][variant]).reduce((o, color) => ({...o, [color]: game.i18n.localize(`AUTOANIM.${color}`)}), {})}), {})}), {})}), {});
  aaColorMenu.melee = melee.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.melee[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.melee[type][name]).reduce((o, variant) => ({...o, [variant]: Object.keys(jb2a.melee[type][name][variant]).reduce((o, color) => ({...o, [color]: game.i18n.localize(`AUTOANIM.${color}`)}), {})}), {})}), {})}), {});
  aaColorMenu.static = aaStatic.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.static[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.static[type][name]).reduce((o, variant) => ({...o, [variant]: Object.keys(jb2a.static[type][name][variant]).reduce((o, color) => ({...o, [color]: game.i18n.localize(`AUTOANIM.${color}`)}), {})}), {})}), {})}), {});
  aaColorMenu.templatefx = templatefx.reduce((o, type) => ({...o, [type]: Object.keys(jb2a.templatefx[type]).reduce((o, name) => ({...o, [name]: Object.keys(jb2a.templatefx[type][name]).reduce((o, variant) => ({...o, [variant]: Object.keys(jb2a.templatefx[type][name][variant]).reduce((o, color) => ({...o, [color]: game.i18n.localize(`AUTOANIM.${color}`)}), {})}), {})}), {})}), {});
  
  addRandom(aaColorMenu)
  */
  //return {aaColorsPatreon, aaVariantsPatreon}
}

async function addRandom(menu) {
  const menuSection = Object.keys(menu);
  const length = menuSection.length;

  for (var a = 0; a < length; a++) {
    let subsetTypes = Object.keys(menu[menuSection[a]]);
    let typesLength = subsetTypes.length;

    for (var c = 0; c < typesLength; c++) {
      let subsetNames = Object.keys(menu[menuSection[a]][subsetTypes[c]]);
      let namesLength = subsetNames.length;

      for (var i = 0; i < namesLength; i++) {
        let subsetVariants = Object.keys(menu[menuSection[a]][subsetTypes[c]][subsetNames[i]]);
        let variantsLength = subsetVariants.length;

        for (var z = 0; z < variantsLength; z++) {
          menu[menuSection[a]][subsetTypes[c]][subsetNames[i]][subsetVariants[z]].random = game.i18n.localize('AUTOANIM.random');
        }
      }
    }
  }
}

async function remove_Template(menu) {
  const menuSection = Object.keys(menu);

  for (let section of menuSection) {
    delete menu[section]._template;
  }
}

const wait$6 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function shieldSpell(handler, animationData) {
  function moduleIncludes(test) {
    return !!game.modules.get(test);
  }

  let obj01 = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$6(globalDelay);

  async function buildShieldFile(jb2a, baseColor, variant, endeffect) {
    //const spellVariant = handler.spellVariant || "01";
    let color = baseColor;
    color = color.replace(/\s+/g, '');

    function random_item(items) {
      return items[Math.floor(Math.random() * items.length)];
    }

    color = color === "random" ? random_item(Object.keys(aaColorMenu.static.bless[variant])) : color; //const shieldVar = handler.options.shieldVar || "outro_fade";

    const file01 = `autoanimations.static.spell.shieldspell.${variant}.${color}.intro`;
    const file02 = `autoanimations.static.spell.shieldspell.${variant}.${color}.loop`;
    const file03 = `autoanimations.static.spell.shieldspell.${variant}.${color}.${endeffect}`;
    const fileData = jb2a.static.spell.shieldspell["01"]["blue"]["intro"];
    const metadata = await getVideoDimensionsOf$1(fileData);
    return {
      file01,
      file02,
      file03,
      metadata
    };
  }

  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;

  if (data.isAuto) {
    var _handler$autorecOverr, _handler$autorecOverr2, _handler$autorecOverr3;

    const autoOverridden = (_handler$autorecOverr = handler.autorecOverrides) === null || _handler$autorecOverr === void 0 ? void 0 : _handler$autorecOverr.enable;
    data.persistent = autoOverridden ? (_handler$autorecOverr2 = handler.autorecOverrides) === null || _handler$autorecOverr2 === void 0 ? void 0 : _handler$autorecOverr2.persistent : data.addCTA;
    data.endeffect = autoOverridden ? (_handler$autorecOverr3 = handler.autorecOverrides) === null || _handler$autorecOverr3 === void 0 ? void 0 : _handler$autorecOverr3.endEffect : data.endeffect;
  } else {
    var _data$options$shieldV;

    data.endeffect = (_data$options$shieldV = data.options.shieldVar) !== null && _data$options$shieldV !== void 0 ? _data$options$shieldV : "outro_fade";
  }

  const sourceToken = handler.sourceToken;
  const onToken = await buildShieldFile(obj01, data.color, data.variant, data.endeffect);

  if (handler.debug) {
    aaDebugger("Shield Animation Start", animationData, onToken);
  }

  const checkAnim = Sequencer.EffectManager.getEffects({
    object: sourceToken,
    origin: handler.itemUuid
  }).length > 0;
  const sourceTokenGS = sourceToken.width / canvas.grid.size;

  async function cast() {
    let aaSeq = await new Sequence(); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });
    aaSeq.effect().file(onToken.file01).size(sourceTokenGS * 1.75 * data.scale, {
      gridUnits: true
    }).atLocation(sourceToken).belowTokens(data.below).waitUntilFinished(-500);
    let persistSwitch = aaSeq.effect();
    persistSwitch.file(onToken.file02);
    persistSwitch.size(sourceTokenGS * 1.75 * data.scale, {
      gridUnits: true
    });
    persistSwitch.atLocation(sourceToken);
    persistSwitch.belowTokens(data.below);
    persistSwitch.fadeIn(300);
    persistSwitch.fadeOut(300);
    persistSwitch.origin(handler.itemUuid);

    if (data.persistent) {
      if (handler.isActiveEffect) {
        persistSwitch.name(handler.itemName + `${sourceToken.id}`);
      } else {
        persistSwitch.name(`${sourceToken.id}`);
      }

      persistSwitch.attachTo(sourceToken, {
        bindAlpha: data.unbindAlpha,
        bindVisibility: data.unbindVisibility
      });
      persistSwitch.persist();
      persistSwitch.origin(handler.itemUuid);
    } else {
      persistSwitch.atLocation(sourceToken);
    }

    persistSwitch.waitUntilFinished(-1000);
    aaSeq.effect().file(onToken.file03).size(sourceTokenGS * 1.75 * data.scale, {
      gridUnits: true
    }).belowTokens(data.below).atLocation(sourceToken);

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
  }

  if (!checkAnim) {
    cast();
  }
}

function getVideoDimensionsOf$1(url) {
  return new Promise(resolve => {
    // create the video element
    const video = document.createElement('video');
    video.preload = "metadata"; // place a listener on it

    video.addEventListener("loadedmetadata", function () {
      // retrieve dimensions
      const height = this.videoHeight;
      const width = this.videoWidth;
      const duration = this.duration; // send back result

      resolve({
        height,
        width,
        duration
      });
    }, false);
    video.src = url;
  });
}

async function sneakAttack(handler, animationData) {
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const sneak = await buildFile(true, "spell", data.animation, "static", "01", data.color);
  const sourceToken = handler.sourceToken;

  if (handler.debug) {
    aaDebugger("Sneak Attack Animation Start", animationData, sneak);
  }

  const sourceTokenGS = sourceToken.width / canvas.grid.size;

  async function cast() {
    let aaSeq = await new Sequence(); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });
    aaSeq.effect().file(sneak.file).atLocation(sourceToken).size(sourceTokenGS * 2 * data.scale, {
      gridUnits: true
    }).belowTokens(false).anchor({
      x: data.anchorX,
      y: data.anchorY
    });

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);
  }

  cast();
}

const wait$5 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function bless(handler, animationData) {
  function moduleIncludes(test) {
    return !!game.modules.get(test);
  }

  let obj01 = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$5(globalDelay);
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;

  if (data.isAuto) {
    var _handler$autorecOverr, _handler$autorecOverr2;

    const autoOverridden = (_handler$autorecOverr = handler.autorecOverrides) === null || _handler$autorecOverr === void 0 ? void 0 : _handler$autorecOverr.enable;
    data.persistent = autoOverridden ? (_handler$autorecOverr2 = handler.autorecOverrides) === null || _handler$autorecOverr2 === void 0 ? void 0 : _handler$autorecOverr2.persistent : data.addCTA;
  }

  const bless = await buildBlessFile(obj01, data.color);

  if (handler.debug) {
    aaDebugger("Aura Animation Start", animationData, bless);
  } // builds Source Token file if Enabled, and pulls from flags if already set
  //const sourceFX = await AAanimationData._sourceFX(handler, sourceToken);


  const sourceToken = handler.sourceToken; //let animWidth = onToken.metadata.width;

  sourceToken.w;

  if (handler.allTargets.length === 0) {
    const sourceTokenGS = sourceToken.width / canvas.grid.size * 1.75 * data.scale;
    const checkAnim = Sequencer.EffectManager.getEffects({
      object: sourceToken,
      origin: handler.itemUuid
    }).length > 0;
    const playPersist = !checkAnim && data.persistent ? true : false;
    let aaSeq = await new Sequence(); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });

    if (!checkAnim) {
      aaSeq.effect().file(bless.file01).attachTo(sourceToken, {
        bindAlpha: data.unbindAlpha,
        bindVisibility: data.unbindVisibility
      }).size(sourceTokenGS, {
        gridUnits: true
      }).belowTokens(data.below).waitUntilFinished(-500);
      let endSection = aaSeq.effect();
      endSection.file(bless.file02);
      endSection.size(sourceTokenGS, {
        gridUnits: true
      });
      endSection.origin(handler.itemUuid);
      endSection.attachTo(sourceToken, {
        bindAlpha: data.unbindAlpha,
        bindVisibility: data.unbindVisibility
      });
      endSection.belowTokens(data.below);
      endSection.loopProperty("sprite", "width", {
        from: sourceTokenGS * 0.95,
        to: sourceTokenGS * 1.05,
        duration: 2000,
        pingPong: true,
        ease: 'easeInOutSine',
        gridUnits: true
      });
      endSection.loopProperty("sprite", "height", {
        from: sourceTokenGS * 0.95,
        to: sourceTokenGS * 1.05,
        duration: 2000,
        pingPong: true,
        ease: 'easeInOutSine',
        gridUnits: true
      });

      if (playPersist) {
        if (handler.isActiveEffect) {
          endSection.name(handler.itemName + `${sourceToken.id}`);
        } else {
          endSection.name(sourceToken.id);
        }

        endSection.persist();
      }
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();

    if (playPersist) {
      AAanimationData.howToDelete("sequencerground");
    }
  }

  if (handler.allTargets.length > 0) {
    let aaSeq = await new Sequence(); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });

    for (let target of handler.allTargets) {
      let targetTokenGS = target.width / canvas.grid.size * 1.75 * data.scale;
      let checkAnim = Sequencer.EffectManager.getEffects({
        object: target,
        origin: handler.itemUuid
      }).length > 0;
      let playPersist = !checkAnim && data.persistent ? true : false;

      if (!checkAnim) {
        aaSeq.effect().file(bless.file01).attachTo(target, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        }).size(targetTokenGS, {
          gridUnits: true
        }).belowTokens(data.below).waitUntilFinished(-500);
        let endSection = aaSeq.effect();
        endSection.file(bless.file02);
        endSection.size(targetTokenGS, {
          gridUnits: true
        });
        endSection.origin(handler.itemUuid);
        endSection.attachTo(target, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        });
        endSection.belowTokens(data.below);
        endSection.loopProperty("sprite", "width", {
          from: targetTokenGS * 0.95,
          to: targetTokenGS * 1.05,
          duration: 2000,
          pingPong: true,
          ease: 'easeInOutSine',
          gridUnits: true
        });
        endSection.loopProperty("sprite", "height", {
          from: targetTokenGS * 0.95,
          to: targetTokenGS * 1.05,
          duration: 2000,
          pingPong: true,
          ease: 'easeInOutSine',
          gridUnits: true
        });

        if (playPersist) {
          if (handler.isActiveEffect) {
            endSection.name(handler.itemName + `${target.id}`);
          } else {
            endSection.name(target.id);
          }

          endSection.persist();
        }
      }
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play(); //if (playPersist) { AAanimationData.howToDelete("sequencerground") }
  }
}

async function buildBlessFile(jb2a, baseColor) {
  let color = baseColor || "yellow";
  color = color.replace(/\s+/g, '');

  function random_item(items) {
    return items[Math.floor(Math.random() * items.length)];
  }

  color = color === "random" ? random_item(Object.keys(aaColorMenu.static.spell.bless['01'])) : color;
  const file01 = `autoanimations.static.spell.bless.01.${color}.intro`;
  const file02 = `autoanimations.static.spell.bless.01.${color}.loop`;
  const ctaFile01 = jb2a.static.spell.bless['01'][color]["intro"];
  const ctaFile02 = jb2a.static.spell.bless['01'][color]["loop"];
  let metadata = await getVideoDimensionsOf(ctaFile01);
  let metadata2 = await getVideoDimensionsOf(ctaFile02);
  return {
    file01,
    file02,
    ctaFile01,
    ctaFile02,
    metadata,
    metadata2
  };
}

function getVideoDimensionsOf(url) {
  return new Promise(resolve => {
    // create the video element
    const video = document.createElement('video');
    video.preload = "metadata"; // place a listener on it

    video.addEventListener("loadedmetadata", function () {
      // retrieve dimensions
      const height = this.videoHeight;
      const width = this.videoWidth;
      const duration = this.duration; // send back result

      resolve({
        height,
        width,
        duration
      });
    }, false);
    video.src = url;
  });
}

const wait$4 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function staticAnimation(handler, animationData) {
  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$4(globalDelay);
  const sourceToken = handler.sourceToken;
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const targetFX = animationData.targetFX;
  const onToken = await buildFile(true, data.menuType, data.animation, "static", data.variant, data.color, data.customPath);

  if (handler.debug) {
    aaDebugger("Static Animation Start", animationData, onToken);
  } //const exScale = ((100 * handler.explosionRadius) / explosion?.metadata?.width) ?? 1;
  //const animWidth = onToken.metadata.width;


  if (handler.isActiveEffect) {
    await wait$4(data.aeDelay);
  }

  let aaSeq = await new Sequence("Automated Animations");
  const bottomAnim = onToken.fileData.replace('Above', 'Below'); // Play Macro if Awaiting

  if (data.playMacro && data.macro.playWhen === "1") {
    let userData = data.macro.args;
    aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
  } // Extra Effects => Source Token if active


  if (sourceFX.enabled) {
    aaSeq.addSequence(sourceFX.sourceSeq);
  } // Animation Start Hook


  aaSeq.thenDo(function () {
    Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
  });
  let sourceTokenGS = sourceToken.width / canvas.grid.size;
  let explosionSound = false;

  if (data.staticType === "source" || data.staticType === "sourcetarget" || data.staticType === "targetDefault" && handler.allTargets.length < 1) {
    const checkAnim = Sequencer.EffectManager.getEffects({
      object: sourceToken,
      origin: handler.itemUuid
    }).length > 0;
    const playPersist = !checkAnim && data.persistent ? true : false;

    if (data.isShieldFX) {
      let bottomEffect = aaSeq.effect();
      bottomEffect.file(bottomAnim);

      if (handler.isActiveEffect) {
        bottomEffect.name(handler.itemName + `${sourceToken.id}`);
      } else {
        bottomEffect.name("spot" + ` ${sourceToken.id}`);
      }

      bottomEffect.opacity(data.opacity);
      bottomEffect.size(sourceTokenGS * 1.5 * data.scale, {
        gridUnits: true
      });
      bottomEffect.belowTokens(true);
      bottomEffect.rotate(180);
      bottomEffect.fadeIn(250);
      bottomEffect.fadeOut(500);

      if (!data.persistent) {
        bottomEffect.atLocation(sourceToken);
        bottomEffect.repeats(data.repeat, data.delay);
      }

      if (playPersist) {
        bottomEffect.attachTo(sourceToken, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        });
        bottomEffect.persist(true);
        bottomEffect.origin(handler.itemUuid);
      }

      if (checkAnim) {
        bottomEffect.playIf(false);
      }

      let topEffect = aaSeq.effect();
      topEffect.file(onToken.fileData);

      if (handler.isActiveEffect) {
        topEffect.name(handler.itemName + `${sourceToken.id}`);
      } else {
        topEffect.name("spot" + ` ${sourceToken.id}`);
      }

      topEffect.opacity(data.opacity);
      topEffect.size(sourceTokenGS * 1.5 * data.scale, {
        gridUnits: true
      });
      topEffect.belowTokens(false);
      topEffect.fadeIn(250);
      topEffect.fadeOut(500);

      if (!data.persistent) {
        topEffect.atLocation(sourceToken);
        topEffect.repeats(data.repeat, data.delay);
      }

      if (playPersist) {
        topEffect.attachTo(sourceToken, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        });
        topEffect.persist(true);
        topEffect.origin(handler.itemUuid);
      }

      if (checkAnim) {
        topEffect.playIf(false);
      }
    } else {
      let aaEffect = aaSeq.effect();
      aaEffect.file(onToken.file);

      if (handler.isActiveEffect) {
        aaEffect.name(handler.itemName + `${sourceToken.id}`);
      } else {
        aaEffect.name("spot" + ` ${sourceToken.id}`);
      }

      aaEffect.opacity(data.opacity);
      aaEffect.size(sourceTokenGS * 1.5 * data.scale, {
        gridUnits: true
      });
      aaEffect.belowTokens(data.below);
      aaEffect.fadeIn(250);
      aaEffect.fadeOut(500);

      if (!data.persistent) {
        aaEffect.atLocation(sourceToken);
        aaEffect.repeats(data.repeat, data.delay);
      }

      if (playPersist) {
        aaEffect.attachTo(sourceToken, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        });
        aaEffect.persist(true);
        aaEffect.origin(handler.itemUuid);
      }

      if (checkAnim) {
        aaEffect.playIf(false);
      }
    }

    if (data.explosion.enabled) {
      var _data$explosion, _data$explosion$data, _data$explosion2, _data$explosion3, _data$explosion4, _data$explosion5;

      aaSeq.effect().atLocation("spot" + ` ${sourceToken.id}`).file((_data$explosion = data.explosion) === null || _data$explosion === void 0 ? void 0 : (_data$explosion$data = _data$explosion.data) === null || _data$explosion$data === void 0 ? void 0 : _data$explosion$data.file, true) //.scale({ x: data.explosion?.scale, y: data.explosion?.scale })
      .size(((_data$explosion2 = data.explosion) === null || _data$explosion2 === void 0 ? void 0 : _data$explosion2.radius) * 2, {
        gridUnits: true
      }).delay((_data$explosion3 = data.explosion) === null || _data$explosion3 === void 0 ? void 0 : _data$explosion3.delay).repeats(data.repeat, data.delay).belowTokens((_data$explosion4 = data.explosion) === null || _data$explosion4 === void 0 ? void 0 : _data$explosion4.below).fadeOut(500).playIf((_data$explosion5 = data.explosion) === null || _data$explosion5 === void 0 ? void 0 : _data$explosion5.enabled);
    }

    explosionSound = true;
  }

  let targetSound = false; // Target Effect sections

  if ((data.staticType === 'target' || data.staticType === 'targetDefault' || data.staticType === 'sourcetarget') && handler.allTargets.length > 0) {
    //for (var i = 0; i < handler.allTargets.length; i++) {
    //let target = handler.allTargets[i]
    for (let target of handler.allTargets) {
      let targetTokenGS = target.width / canvas.grid.size;
      let checkAnim = Sequencer.EffectManager.getEffects({
        object: target,
        origin: handler.itemUuid
      }).length > 0;
      let hit;

      if (handler.playOnMiss) {
        hit = handler.hitTargetsId.includes(target.id) ? true : false;
      } else {
        hit = true;
      }

      if (hit) {
        targetSound = true;
      }

      if (data.persistent && !checkAnim || !data.persistent) {
        if (data.isShieldFX) {
          let bottomEffect = aaSeq.effect();
          bottomEffect.file(bottomAnim);
          bottomEffect.name("spot" + ` ${target.id}`);
          bottomEffect.opacity(data.opacity);
          bottomEffect.size(targetTokenGS * 1.5 * data.scale, {
            gridUnits: true
          });
          bottomEffect.belowTokens(true);
          bottomEffect.rotate(180);
          bottomEffect.fadeIn(250);
          bottomEffect.fadeOut(500);

          if (!data.persistent) {
            bottomEffect.atLocation(target);
            bottomEffect.missed(!hit);
            bottomEffect.repeats(data.repeat, data.delay);
          } else {
            bottomEffect.attachTo(target, {
              bindAlpha: data.unbindAlpha,
              bindVisibility: false
            });
            bottomEffect.persist(true);
            bottomEffect.origin(handler.itemUuid);
          }

          let topEffect = aaSeq.effect();
          topEffect.file(onToken.fileData);
          topEffect.name("spot" + ` ${target.id}`);
          topEffect.opacity(data.opacity);
          topEffect.size(targetTokenGS * 1.5 * data.scale, {
            gridUnits: true
          });
          topEffect.belowTokens(false);
          topEffect.fadeIn(250);
          topEffect.fadeOut(500);

          if (!data.persistent) {
            topEffect.atLocation(target);
            topEffect.missed(!hit);
            topEffect.repeats(data.repeat, data.delay);
          } else {
            topEffect.attachTo(target, {
              bindAlpha: data.unbindAlpha,
              bindVisibility: false
            });
            topEffect.persist(true);
            topEffect.origin(handler.itemUuid);
          }
        } else {
          let effectScale = data.animation === 'bite' || data.animation === 'claw' ? sourceTokenGS : targetTokenGS; //let scale = data.animation === "bite" || data.animation === "claw" ? (sourceToken.w / animWidth) * 1.5 : (target.w / animWidth) * 1.75

          let aaEffect = aaSeq.effect();
          aaEffect.file(onToken.file);
          aaEffect.name("spot" + ` ${target.id}`);
          aaEffect.opacity(data.opacity); //aaEffect.scale(scale * data.scale)

          aaEffect.size(effectScale * 1.5 * data.scale, {
            gridUnits: true
          });
          aaEffect.belowTokens(data.below);
          aaEffect.fadeIn(250);
          aaEffect.fadeOut(500);

          if (!data.persistent) {
            aaEffect.atLocation(target);
            aaEffect.missed(!hit);
            aaEffect.repeats(data.repeat, data.delay);
          } else {
            aaEffect.attachTo(target, {
              bindAlpha: data.unbindAlpha,
              bindVisibility: false
            });
            aaEffect.persist(true);
            aaEffect.origin(handler.itemUuid);
          }
        }

        if (data.explosion.enabled) {
          var _data$explosion6, _data$explosion6$data, _data$explosion7, _data$explosion8, _data$explosion9, _data$explosion10;

          aaSeq.effect().atLocation("spot" + ` ${target.id}`).file((_data$explosion6 = data.explosion) === null || _data$explosion6 === void 0 ? void 0 : (_data$explosion6$data = _data$explosion6.data) === null || _data$explosion6$data === void 0 ? void 0 : _data$explosion6$data.file, true) //.scale({ x: data.explosion?.scale, y: data.explosion?.scale })
          .size(((_data$explosion7 = data.explosion) === null || _data$explosion7 === void 0 ? void 0 : _data$explosion7.radius) * 2, {
            gridUnits: true
          }).delay((_data$explosion8 = data.explosion) === null || _data$explosion8 === void 0 ? void 0 : _data$explosion8.delay).repeats(data.repeat, data.delay).belowTokens((_data$explosion9 = data.explosion) === null || _data$explosion9 === void 0 ? void 0 : _data$explosion9.below).playIf((_data$explosion10 = data.explosion) === null || _data$explosion10 === void 0 ? void 0 : _data$explosion10.enabled);
        }

        explosionSound = true;
      }

      if (targetFX.enabled && hit) {
        let targetSequence = AAanimationData._targetSequence(targetFX, target, handler);

        aaSeq.addSequence(targetSequence.targetSeq);
      }
    }
  }

  aaSeq.addSequence(await AAanimationData._sounds({
    animationData,
    explosionSound: data.staticType !== "source" && explosionSound,
    targetSound
  })); // Macro if Concurrent

  if (data.playMacro && data.macro.playWhen === "0") {
    let userData = data.macro.args;
    new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
  }

  aaSeq.play();
  Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets);

  if (data.persistent) {
    AAanimationData.howToDelete("sequencerground");
  }
}

const wait$3 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function auras(handler, animationData) {
  //const gridSize = canvas.grid.size
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX; //const targetFX = animationData.targetFX;

  if (data.isAuto) {
    data.size = data.scale * 2;
  } else {
    data.size = data.auraRadius * 2;
  }

  const easeArray = ['easeInOutCubic', 'easeInOutQuart', 'easeInQuad', 'easeInOutQuad', 'easeInCirc'];
  const sourceToken = handler.sourceToken;
  const aura = await buildFile(true, data.menuType, data.animation, "static", data.variant, data.color, data.customPath);

  if (handler.debug) {
    aaDebugger("Aura Animation Start", animationData, aura);
  }

  if (handler.isActiveEffect) {
    await wait$3(data.aeDelay);
  }

  if (handler.allTargets.length === 0 || data.ignoreTargets) {
    selfAura();
  } else {
    targetAura();
  }

  async function selfAura() {
    const randomEase = easeArray[Math.floor(Math.random() * easeArray.length)];
    let checkAnim = Sequencer.EffectManager.getEffects({
      object: sourceToken,
      origin: handler.itemUuid
    }).length > 0; //let playPersist = !checkAnim ? true : false;

    let nameField;

    if (handler.isActiveEffect) {
      nameField = handler.itemName + `${sourceToken.id}`;
    } else {
      nameField = sourceToken.name;
    }

    let aaSeq = new Sequence();

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    if (!checkAnim) {
      aaSeq.addSequence(sourceFX.sourceSeq);
      aaSeq.effect().persist().origin(handler.itemUuid).size(data.size, {
        gridUnits: true
      }).belowTokens(data.below).file(aura.file).attachTo(sourceToken, {
        bindAlpha: data.unbindAlpha,
        bindVisibility: data.unbindVisibility
      }).name(nameField).opacity(data.opacity).animateProperty("sprite", "width", {
        from: 0,
        to: data.size,
        duration: 2500,
        ease: randomEase,
        gridUnits: true
      }).animateProperty("sprite", "height", {
        from: 0,
        to: data.size,
        duration: 2500,
        ease: randomEase,
        gridUnits: true
      }).fadeIn(2500).fadeOut(500);
      AAanimationData.howToDelete("sequencerground");
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, [...userData]).play();
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    aaSeq.play();
  }

  async function targetAura() {
    let randomEase = easeArray[Math.floor(Math.random() * easeArray.length)];
    let aaSeq = new Sequence();

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, [...userData]);
    }

    aaSeq.addSequence(sourceFX.sourceSeq);

    for (let target of handler.allTargets) {
      let checkAnim = Sequencer.EffectManager.getEffects({
        object: target,
        origin: handler.itemUuid
      }).length > 0;

      if (!checkAnim) {
        aaSeq.effect().attachTo(target, {
          bindAlpha: data.unbindAlpha,
          bindVisibility: data.unbindVisibility
        }).persist().origin(handler.itemUuid).name(`${target.name}-${handler.itemName}`).size(data.size, {
          gridUnits: true
        }).belowTokens(data.below).file(aura.file).animateProperty("sprite", "width", {
          from: 0,
          to: data.size,
          duration: 2500,
          ease: randomEase,
          gridUnits: true
        }).animateProperty("sprite", "height", {
          from: 0,
          to: data.size,
          duration: 2500,
          ease: randomEase,
          gridUnits: true
        }).fadeIn(2500).fadeOut(500);
      }
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    } // Macro if Concurrent


    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, [...userData]).play();
    }

    aaSeq.play();
    AAanimationData.howToDelete("sequencerground");
  }
}

const autoRecMigration = {
  async handle(autoObject) {
    if (!autoObject) {
      return;
    }

    if (this.upToDate(autoObject)) {
      return;
    }

    ui.notifications.info("Automated Animations: Merging the Automatic Recognition Menu");

    for (let [version, migration] of Object.entries(this.migrations)) {
      let currentAutorec = game.settings.get('autoanimations', 'aaAutorec');
      let flagVersion = currentAutorec.version;
      if (flagVersion >= Number(version)) continue;
      await migration(currentAutorec);
    }

    ui.notifications.info("Automatic Recognition Menu merge is Complete!");
  },

  upToDate(autoObject) {
    const currentFlagVersion = Object.keys(this.migrations).map(n => Number(n)).reverse()[0];
    return autoObject.version >= currentFlagVersion;
  },

  migrations: {
    "1": async currentAutorec => {
      const staticObject = currentAutorec.static;

      if (staticObject) {
        const staticLength = Object.keys(staticObject).length;

        for (var i = 0; i < staticLength; i++) {
          switch (staticObject[i].animation) {
            case 'curewounds':
            case 'generichealing':
            case 'tollthedead':
              staticObject[i].staticOptions = 'staticSpells';
              break;

            case 'bite':
            case 'claw':
              staticObject[i].staticOptions = 'creature';
              break;

            default:
              staticObject[i].staticOptions = 'explosion';
          }
        }
      }

      const templates = currentAutorec.templates;

      if (templates) {
        const templateLength = Object.keys(templates).length;

        for (var i = 0; i < templateLength; i++) {
          switch (true) {
            case templates[i].persist:
              if (templates[i].overhead) {
                templates[i].persistType = 'overheadtile';
              } else {
                templates[i].persistType = 'sequencerground';
              }

              break;
          }
        }
      }

      currentAutorec.version = 1;
      await game.settings.set('autoanimations', 'aaAutorec', currentAutorec);
    },
    "2": async currentAutorec => {
      const meleeObject = currentAutorec.melee;

      if (meleeObject) {
        const meleeLength = Object.keys(meleeObject).length;

        for (var i = 0; i < meleeLength; i++) {
          meleeObject[i].meleeType = "weapon";
        }
      }

      currentAutorec.version = 2;
      await game.settings.set('autoanimations', 'aaAutorec', currentAutorec);
    },
    "3": async currentAutorec => {
      const templateObject = currentAutorec.templates;

      if (templateObject) {
        const templateLength = Object.keys(templateObject).length;

        for (var i = 0; i < templateLength; i++) {
          templateObject[i].scaleX = templateObject[i].scale || 1;
          templateObject[i].scaleY = templateObject[i].scale || 1;
        }
      }

      const presetObject = currentAutorec.preset;

      if (presetObject) {
        const presetLength = Object.keys(presetObject).length;

        for (var i = 0; i < presetLength; i++) {
          if (presetObject[i].animation === "teleportation") {
            var _presetObject$i$subAn, _presetObject$i$color;

            presetObject[i].measureType = "alternating";
            presetObject[i].custom02 = presetObject[i].custom ? true : false;
            presetObject[i].customPath02 = presetObject[i].custom ? presetObject[i].customPath : "";
            presetObject[i].subAnimation02 = (_presetObject$i$subAn = presetObject[i].subAnimation) !== null && _presetObject$i$subAn !== void 0 ? _presetObject$i$subAn : "mistystep";
            presetObject[i].variant = "01";
            presetObject[i].variant02 = "02";
            presetObject[i].color02 = (_presetObject$i$color = presetObject[i].color) !== null && _presetObject$i$color !== void 0 ? _presetObject$i$color : "blue";
            presetObject[i].scale02 = presetObject[i].scale || 1;
          }
        }
      }

      currentAutorec.version = 3;
      await game.settings.set('autoanimations', 'aaAutorec', currentAutorec);
    },
    "4": async currentAutorec => {
      const meleeObject = currentAutorec.melee;
      const rangeObject = currentAutorec.range;
      const staticObject = currentAutorec.static;
      const templateObject = currentAutorec.templates;
      const auraObject = currentAutorec.auras;
      const presetObject = currentAutorec.preset;

      if (meleeObject) {
        const generic = ['1hs', '2hs', '1hp', '2hp', '1hb', '2hb'];
        const meleeLength = Object.keys(meleeObject).length;

        for (var i = 0; i < meleeLength; i++) {
          var _co$explosion;

          let co = meleeObject[i];

          if (co.custom) ; else {
            if (generic.some(el => co.animation === el)) {
              co.menuType = 'generic';
            } else {
              co.menuType = co.meleeType;
            }
          }

          if (co.switchType === 'custom') {
            co.switchMenuType = 'weapon';
          }

          if ((_co$explosion = co.explosion) !== null && _co$explosion !== void 0 && _co$explosion.enable && !co.explosion.custom) {
            const fire = ['eruption'];
            const _generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
            const ice = ['snowflake'];
            const liquid = ['liquidsplash'];
            const fireball = ['fireballexplode'];

            switch (true) {
              case fire.some(el => co.explosion.animation === el):
                co.explosion.menuType = 'fire';
                break;

              case _generic.some(el => co.explosion.animation === el):
                co.explosion.menuType = 'generic';

                if (co.explosion.animation.includes('outpulse')) {
                  co.explosion.animation = 'outpulse';
                  co.explosion.variant = co.explosion.variant === 'outpulse02' ? '02' : '01';
                }

                break;

              case ice.some(el => co.explosion.animation === el):
                co.explosion.menuType = 'ice';
                break;

              case liquid.some(el => co.explosion.animation === el):
                co.explosion.menuType = 'liquid';
                co.explosion.animation = 'splash';
                break;

              case fireball.some(el => co.explosion.animation === el):
                co.explosion.menuType = 'spell';
                co.explosion.animation = 'fireball';
                co.explosion.variant = 'explode';
                break;

              default:
                co.explosion.menuType = 'spell';
            }
          }
        }
      }

      if (rangeObject) {
        const generic = ['energyconduitsquare', 'energyconduitcircle', 'energybeam', 'heart', 'iceshard', 'musicnote', 'skull', 'energystrand'];
        const rangeLength = Object.keys(rangeObject).length;

        for (var i = 0; i < rangeLength; i++) {
          var _ro$explosion;

          let ro = rangeObject[i];

          if (generic.some(el => ro.animation === el)) {
            ro.menuType = 'generic';

            if (ro.animation === "energyconduitcircle") {
              ro.animation = 'conduit';
              ro.variant = 'circle';
            }

            if (ro.animation === "energyconduitsquare") {
              ro.animation = 'conduit';
              ro.variant = 'square';
            }
          } else {
            ro.menuType = ro.type;
          }

          if ((_ro$explosion = ro.explosion) !== null && _ro$explosion !== void 0 && _ro$explosion.enable && !ro.explosion.custom) {
            const fire = ['eruption'];
            const _generic2 = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
            const ice = ['snowflake'];
            const liquid = ['liquidsplash'];
            const fireball = ['fireballexplode'];

            switch (true) {
              case fire.some(el => ro.explosion.animation === el):
                ro.explosion.menuType = 'fire';
                break;

              case _generic2.some(el => ro.explosion.animation === el):
                ro.explosion.menuType = 'generic';

                if (ro.explosion.animation.includes('outpulse')) {
                  ro.explosion.animation = 'outpulse';
                  ro.explosion.variant = ro.explosion.variant === 'outpulse02' ? '02' : '01';
                }

                break;

              case ice.some(el => ro.explosion.animation === el):
                ro.explosion.menuType = 'ice';
                break;

              case liquid.some(el => ro.explosion.animation === el):
                ro.explosion.menuType = 'liquid';
                ro.explosion.animation = 'splash';
                break;

              case fireball.some(el => ro.explosion.animation === el):
                ro.explosion.menuType = 'spell';
                ro.explosion.animation = 'fireball';
                ro.explosion.variant = 'explode';
                break;

              default:
                ro.explosion.menuType = 'spell';
            }
          }
        }
      }

      if (staticObject) {
        const conditions = ['drop', 'fear', 'heart', 'horror', 'light', 'poison', 'runes', 'shields', 'crackedshield', 'skull', 'snowflakes', 'stun', 'dizzystars'];
        const creature = ['bite', 'claw'];
        const energy = ['energyfield', 'dodecahedron', 'shimmer', 'sparkles'];
        const fire = ['eruption', 'groundcrack', 'fireworks'];
        const generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02', 'vortex', 'whirl'];
        const ice = ['icespikes', 'snowflake'];
        const lightning = ['lightningball', 'staticelectricity'];
        const liquid = ['liquidsplash'];
        const magicsign = ['magicSign'];
        const marker = ['marker', 'circleofstars', 'energystrand'];
        const shieldfx = ['energyfieldtop', 'shieldfiretop', 'shieldicetop', 'shieldearthtop', 'shieldeldritchwebtop'];
        const tokenborder = ['staticborder', 'spinningborder'];
        const fireball = ['fireballexplode'];
        const staticLength = Object.keys(staticObject).length;

        for (var i = 0; i < staticLength; i++) {
          var _so$explosion;

          let so = staticObject[i];

          switch (true) {
            case conditions.some(el => so.animation === el):
              so.menuType = 'conditions';
              break;

            case creature.some(el => so.animation === el):
              so.menuType = 'creature';
              break;

            case energy.some(el => so.animation === el):
              so.menuType = 'energy';
              break;

            case fire.some(el => so.animation === el):
              so.menuType = 'fire';
              break;

            case generic.some(el => so.animation === el):
              so.menuType = 'generic';

              if (so.animation.includes('outpulse')) {
                so.variant = so.animation === 'outpulse02' ? '02' : '01';
                so.animation = 'outpulse';
              }

              break;

            case ice.some(el => so.animation === el):
              so.menuType = 'ice';
              break;

            case lightning.some(el => so.animation === el):
              so.menuType = 'lightning';
              break;

            case liquid.some(el => so.animation === el):
              so.menuType = 'liquid';
              so.animation = 'splash';
              break;

            case magicsign.some(el => so.animation === el):
              so.menuType = 'magicsign';
              break;

            case marker.some(el => so.animation === el):
              so.menuType = 'marker';

              if (so.animation === 'circleofstars') ; else if (so.animation === 'energystrand') {
                so.animation = 'energystrand';
              } else {
                switch (so.variant) {
                  case '03':
                    so.animation = 'music';
                    so.variant = '01';
                    break;

                  case 'bubble':
                    so.animation = 'bubble';
                    so.variant = '01';
                    break;

                  case 'energystrand':
                    so.animation = 'energystrands';
                    so.variant = '01';
                    break;

                  default:
                    so.animation = 'standard';
                    so.variant = '01';
                }
              }

              break;

            case shieldfx.some(el => so.animation === el):
              so.menuType = 'shieldfx';

              switch (so.animation) {
                case 'energyfieldtop':
                  so.animation = 'energyfield';
                  break;

                case 'shieldfiretop':
                  so.animation = 'fire';
                  break;

                case 'shieldicetop':
                  so.animation = 'ice';
                  break;

                case 'shieldearthtop':
                  so.animation = 'earth';
                  break;

                case 'shieldeldritchwebtop':
                  so.animation = 'eldritchweb';
                  break;
              }

              break;

            case tokenborder.some(el => so.animation === el):
              so.menuType = 'tokenborder';

              if (so.animation === 'staticborder') {
                so.animation = 'static';
              } else {
                so.animation = 'spinning';
              }

              break;

            case fireball.some(el => so.animation === el):
              so.menuType = 'spell';
              so.animation = 'fireball';
              so.variant = 'explode';
              break;

            default:
              so.menuType = 'spell';
          }

          if ((_so$explosion = so.explosion) !== null && _so$explosion !== void 0 && _so$explosion.enable && !so.explosion.custom) {
            const _fire = ['eruption'];
            const _generic3 = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
            const _ice = ['snowflake'];
            const _liquid = ['liquidsplash'];
            const _fireball = ['fireballexplode'];

            switch (true) {
              case _fire.some(el => so.explosion.animation === el):
                so.explosion.menuType = 'fire';
                break;

              case _generic3.some(el => so.explosion.animation === el):
                so.explosion.menuType = 'generic';

                if (so.explosion.animation.includes('outpulse')) {
                  so.explosion.animation = 'outpulse';
                  so.explosion.variant = so.explosion.variant === 'outpulse02' ? '02' : '01';
                }

                break;

              case _ice.some(el => so.explosion.animation === el):
                so.explosion.menuType = 'ice';
                break;

              case _liquid.some(el => so.explosion.animation === el):
                so.explosion.menuType = 'liquid';
                so.explosion.animation = 'splash';
                break;

              case _fireball.some(el => so.explosion.animation === el):
                so.explosion.menuType = 'spell';
                so.explosion.animation = 'fireball';
                so.explosion.variant = 'explode';
                break;

              default:
                so.explosion.menuType = 'spell';
            }
          }
        }
      }

      if (templateObject) {
        const templateLength = Object.keys(templateObject).length;

        for (var i = 0; i < templateLength; i++) {
          let to = templateObject[i];
          to.menuType = to.type === 'rect' ? 'square' : to.type;

          switch (to.menuType) {
            case "cone":
              if (to.animation === 'breathweaponcone') {
                to.animation = 'breathweapon';
              }

              break;

            case "circle":
              const circleTypes = ['dropct', 'fearct', 'heartct', 'horrorct', 'poisonct', 'runesct', 'shieldsct', 'crackedshieldct', 'skullct', 'snowflakesct', 'musicnotect'];

              if (circleTypes.some(el => to.animation === el)) {
                to.animation = to.animation.replace('ct', '');
              }

              switch (to.animation) {
                case 'outpulse01':
                  to.animation = 'outpulse';
                  to.variant = '01';
                  break;

                case 'outpulse02':
                  to.animation = 'outpulse';
                  to.variant = '02';
                  break;

                case 'fireballloop':
                  to.animation = 'fireball';
                  to.variant = to.variant === 'nodebris' ? 'nodebris' : 'loop';
                  break;

                case 'fireballexplode':
                  to.animation = 'fireball';
                  to.variant = 'explode';
                  break;
              }

              break;

            case "square":
              const squareTypes = ['dropct', 'fearct', 'heartct', 'horrorct', 'poisonct', 'runesct', 'shieldsct', 'crackedshieldct', 'skullct', 'snowflakesct'];

              if (squareTypes.some(el => to.animation === el)) {
                to.animation = to.animation.replace('ct', '');
              } else if (to.animation === 'musicnotest') {
                to.animation = 'musicnote';
              }

              break;

            case "ray":
              if (to.animation === 'breathweaponline') {
                to.animation = 'breathweapon';
              }

              break;
          }
        }
      }

      if (auraObject) {
        const auraLength = Object.keys(auraObject).length;

        for (var i = 0; i < auraLength; i++) {
          let ao = auraObject[i];

          switch (ao.animation) {
            case "energystrand":
              ao.menuType = 'marker';
              break;

            case 'dodecahedron':
              ao.menuType = 'energy';
              break;

            case 'staticelectricity':
              ao.menuType = 'lightning';
              break;

            default:
              ao.menuType = 'spell';
          }
        }
      }

      if (presetObject) {
        const presetLength = Object.keys(presetObject).length;

        for (var i = 0; i < presetLength; i++) {
          let po = presetObject[i];

          switch (po.animation) {
            case 'teleportation':
              po.menuType = 'spell';
              po.menuType02 = 'spell';
              break;

            case "dualattach":
              switch (po.subAnimation) {
                case 'energystrand':
                case 'energybeam':
                  po.menuType = 'generic';
                  break;

                default:
                  po.menuType = 'spell';
              }

              break;

            case 'fireball':
              const fire = ['eruption'];
              const generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
              const ice = ['snowflake'];
              const liquid = ['liquidsplash'];
              const fireball = ['fireballexplode'];

              switch (po.projectile) {
                case 'energystrand':
                case 'energybeam':
                  po.rangeType = 'generic';
                  break;

                default:
                  po.rangeType = 'spell';
              }

              if (po.explosion01) {
                switch (true) {
                  case fire.some(el => po.explosion01 === el):
                    po.ex01Type = 'fire';
                    break;

                  case generic.some(el => po.explosion01 === el):
                    po.ex01Type = 'generic';

                    if (po.explosion01.includes('outpulse')) {
                      po.explosion01 = 'outpulse';
                      po.explosion01Variant = po.explosion01Variant === 'outpulse02' ? '02' : '01';
                    }

                    break;

                  case ice.some(el => po.explosion01 === el):
                    po.ex01Type = 'ice';
                    break;

                  case liquid.some(el => po.explosion01 === el):
                    po.ex01Type = 'liquid';
                    po.explosion01 = 'splash';
                    break;

                  case fireball.some(el => po.explosion01 === el):
                    po.ex01Type = 'spell';
                    po.explosion01 = 'fireball';
                    po.explosion01Variant = 'explode';
                    break;

                  default:
                    po.ex01Type = 'spell';
                }
              }

              if (po.explosion02) {
                switch (true) {
                  case fire.some(el => po.explosion02 === el):
                    po.ex02Type = 'fire';
                    break;

                  case generic.some(el => po.explosion02 === el):
                    po.ex02Type = 'generic';

                    if (po.explosion01.includes('outpulse')) {
                      po.explosion01 = 'outpulse';
                      po.explosion01Variant = po.explosion01Variant === 'outpulse02' ? '02' : '01';
                    }

                    break;

                  case ice.some(el => po.explosion02 === el):
                    po.ex02Type = 'ice';
                    break;

                  case liquid.some(el => po.explosion02 === el):
                    po.ex02Type = 'liquid';
                    po.explosion02 = 'splash';
                    break;

                  case fireball.some(el => po.explosion02 === el):
                    po.ex02Type = 'spell';
                    po.explosion02 = 'fireball';
                    po.explosion02Variant = 'explode';
                    break;

                  default:
                    po.ex02Type = 'spell';
                }
              }

              break;
          }
        }
      }

      currentAutorec.version = 4;
      await game.settings.set('autoanimations', 'aaAutorec', currentAutorec);
    }
  }
};

class AutorecFunctions {
  /**
   * 
   * @param {game.settings.get('autonanimations', 'aaAutorec')} obj 
   * @param {Menu field to get from} type 
   * @returns all NAMES in lower case from Autorec Menu defined by type
   */
  static _getAllNamesInSection(obj, type) {
    const nameArray = [];

    try {
      Object.keys(obj[type]).length;
    } catch (exception) {
      return nameArray;
    }

    const arrayLength = Object.keys(obj[type]).length;

    for (var i = 0; i < arrayLength; i++) {
      if (!obj[type][i].name) {
        continue;
      }

      nameArray.push(obj[type][i].name.toLowerCase());
    }

    return nameArray;
  }
  /*
  static _findObjectByName(data, type, name) {
      const newName = name.toLowerCase()
      var newObject = Object.values(data[type])
          .sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length)
          .find(section => {
              //cutting out all spaces
              return newName.includes(section.name.replace(/\s+/g, '').toLowerCase()) ? section : "";
          })
        return [newObject]
  }
  */

  /**
   * 
   * @param {game.settings.get('autoanimations', 'aaAutorec')} settings 
   * @param {Item name with all spaces removed} name 
   * @returns Returns TRUE if it is found in the Autorec Menus, otherwise FALSE
   */


  static foundInAutorec(settings, name) {
    const nameList = this._getAllTheNames(settings); //gets ALL names in Autorec sorted longest to shortest


    const isFound = this._autorecNameCheck(nameList, name); //checks autoNameList against current name


    return isFound;
  }
  /**
   * 
   * @param {array of Names from the Automatic Recognition menus, sorted longest to shortest} nameArray 
   * @param {item Name in lower case and no spaces} name 
   * @returns 
   */


  static _autorecNameCheck(nameArray, name) {
    if (!name) {
      return;
    }

    const arrayLength = nameArray.length;
    const newName = name.toLowerCase();
    let nameFound = false;

    for (var i = 0; i < arrayLength; i++) {
      //cutting out all spaces
      var currentArrayName = nameArray[i].replace(/\s+/g, '').toLowerCase();

      if (currentArrayName === "") ; else if (newName.includes(currentArrayName)) {
        nameFound = true;
        break;
      }
    }

    return nameFound;
  }

  static _autorecNameCheckAefx(nameArray, name) {
    if (!name) {
      return;
    }

    const arrayLength = nameArray.length;
    const newName = name.toLowerCase();
    let nameFound = false;

    for (var i = 0; i < arrayLength; i++) {
      //cutting out all spaces
      var currentArrayName = nameArray[i].replace(/\s+/g, '').toLowerCase();

      if (currentArrayName === "") ; else if (newName.includes(currentArrayName)) {
        nameFound = true;
        break;
      }
    }

    return nameFound;
  }
  /**
   * 
   * @param {Original item name} oldName 
   * @returns Original name with all spaces removed
   */


  static _rinseName(oldName) {
    if (!oldName) {
      return;
    }

    const newName = oldName.replace(/\s+/g, '');
    return newName;
  }
  /**
   * 
   * @param {game.settings.get('autoanimations', 'Autorec')} obj 
   * @returns 
   */


  static _getAllTheNames(obj) {
    const nameArray = [];
    const keys = Object.keys(obj);
    const keyLength = keys.length;

    for (var i = 0; i < keyLength; i++) {
      if (keys[i] === 'version' || keys[i] === 'aefx') {
        continue;
      }

      var arrayLength = Object.keys(obj[keys[i]]).length;
      var currentObject = obj[keys[i]];

      for (var k = 0; k < arrayLength; k++) {
        if (!currentObject[k].name) {
          continue;
        }

        nameArray.push(currentObject[k].name.toLowerCase());
      }
    }

    nameArray.sort((a, b) => b.length - a.length);
    return nameArray;
  }

  static _getAllTheNamesAefx(obj) {
    const nameArray = [];
    const keys = Object.keys(obj);
    const keyLength = keys.length;

    for (var i = 0; i < keyLength; i++) {
      var currentObject = obj[keys[i]];

      if (!currentObject.name) {
        continue;
      }

      nameArray.push(currentObject.name.toLowerCase());
    }

    nameArray.sort((a, b) => b.length - a.length);
    return nameArray;
  }
  /*
  static _findObjectByNameFull(data, name) {
      const keys = Object.keys(data)
      const keyLength = keys.length
      //let newObject;
      for (var i = 1; i < keyLength; i++) {
          var newObject = Object.values(data[keys[i]])
              //.sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length)
              .find(section => {
                  //added .replace()
                  return name.toLowerCase().includes(section.name.replace(/\s+/g, '').toLowerCase()) && section.name !== "" ? section : "";
              })
            if (newObject) { return [[newObject], keys[i]] }
      }
  }
  */

  /**
   * 
   * @param {game.settings.get('autoanimations', 'aaAutorec')} settings 
   * @param {item Name with all spaces removed} name 
   * @returns Autorec Object containing all default settings
   */


  static _findObjectFromArray(settings, name) {
    if (!name) {
      return;
    }

    const data = this._combineMenus(settings); //combines all Autorec Menus into a single array


    const length = data.length;

    for (var i = 0; i < length; i++) {
      var newObject = Object.values(data).sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length).find(section => {
        //added .replace()
        return name.toLowerCase().includes(section.name.replace(/\s+/g, '').toLowerCase()) && section.name !== "" ? section : "";
      });

      if (newObject) {
        return newObject;
      }
    }
  }

  static _findObjectFromAefx(settings, name) {
    if (!name) {
      return;
    }

    const mergedArray = [];
    var arrayLength = Object.keys(settings.aefx).length;

    for (var k = 0; k < arrayLength; k++) {
      if (!settings.aefx[k].name) {
        break;
      }

      mergedArray.push(settings.aefx[k]);
    }

    mergedArray.sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length);
    const length = mergedArray.length;

    for (var i = 0; i < length; i++) {
      var newObject = Object.values(mergedArray).sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length).find(section => {
        //added .replace()
        return name.toLowerCase().includes(section.name.replace(/\s+/g, '').toLowerCase()) && section.name !== "" ? section : "";
      });

      if (newObject) {
        return newObject;
      }
    }
  }

  static _findObjectIn5eAE(settings, name) {
    if (!name) {
      return;
    }

    const aeList = settings.aefx;

    if (!aeList) {
      return;
    }

    let newObject = Object.values(aeList).sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length).find(section => {
      //added .replace()
      return name.toLowerCase().includes(section.name.replace(/\s+/g, '').toLowerCase()) && section.name !== "" ? section : "";
    });

    if (newObject) {
      newObject.menuSection = 'aefx';
      return newObject;
    }
  }
  /**
   * 
   * @param {game.settings.get('autoanimations', 'aaAutorec')} data 
   * @returns combined menus in a single array sorted by NAME field longest to shortest 
   */


  static _combineMenus(data) {
    const mergedArray = [];
    const keys = Object.keys(data);
    const keyLength = keys.length;

    for (var i = 1; i < keyLength; i++) {
      if (keys[i] === 'version' || keys[i] === 'aefx') {
        continue;
      }

      var arrayLength = Object.keys(data[keys[i]]).length;
      var currentObject = data[keys[i]];

      for (var k = 0; k < arrayLength; k++) {
        if (!currentObject[k].name) {
          break;
        }

        currentObject[k].menuSection = keys[i];
        mergedArray.push(currentObject[k]);
      }
    }

    mergedArray.sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length);
    return mergedArray;
  }

  static _checkPreset(itemName) {}

  static _checkAutoRec(itemName) {
    const autoRecSettings = game.settings.get('autoanimations', 'aaAutorec');

    const autoName = this._rinseName(itemName);

    const nameArray = this._getAllTheNames(autoRecSettings);

    let foundName = false;

    if (this._autorecNameCheck(nameArray, autoName)) {
      foundName = true;
    }

    return foundName;
  }

  static _checkAutoRecAefx(itemName) {
    const autoRecSettings = game.settings.get('autoanimations', 'aaAutorec');

    const autoName = this._rinseName(itemName);

    const nameArray = this._getAllTheNamesAefx(autoRecSettings.aefx);

    let foundName = false;

    if (this._autorecNameCheckAefx(nameArray, autoName)) {
      foundName = true;
    }

    return foundName;
  }
  /**
   * Exports Automatic Recognition Menu settings
   */


  static _exportAutorecToJSON() {
    const data = game.settings.get('autoanimations', 'aaAutorec');
    const filename = `fvtt-autoanimations-autorecognition.json`;
    saveDataToFile(JSON.stringify(data, null, 2), "text/json", filename);
  }
  /**
   * 
   * @param {Imported JSON file from an Export} json 
   */


  static async _importAutorecFromJSON(json) {
    const data = JSON.parse(json);
    console.warn("autoanimations | Import settings ", data);
    await game.settings.set("autoanimations", "aaAutorec", data);
    await autoRecMigration.handle(game.settings.get('autoanimations', 'aaAutorec'));
  }

  static async _mergeAutorecFile(json) {
    // Imported Autorec Menu
    const newData = JSON.parse(json); // Existing Autorec Menu

    const oldData = game.settings.get('autoanimations', 'aaAutorec'); // New Autorec Menu

    oldData.version = newData.version;
    oldData.search = "";
    let idx;
    const menuSections = ['melee', 'range', 'static', 'templates', 'auras', 'preset', 'aefx'];
    await mergeMenus();

    async function mergeMenus() {
      for (var i = 0; i < menuSections.length; i++) {
        if (!newData[menuSections[i]]) {
          return;
        } // Resets IDX to 0


        if (!oldData[menuSections[i]]) {
          oldData[menuSections[i]] = {};
        }

        let sectionLength = Object.keys(oldData[menuSections[i]]).length;
        idx = sectionLength === 0 ? 0 : sectionLength; // Sets Menu Section in new Merged Data
        //mergedData[menuSections[i]] = {};
        // Sets Old and New Names arrays from the Section, spaces removed and toLowerCase()

        const newSectionNames = await getAllNamesInSection(newData, menuSections[i]);
        const oldSectionNames = await getAllNamesInSection(oldData, menuSections[i]); // If Existing Menu has no Section, check if New Menu has Section. If NO, return. If YES set Merged Section = New Section

        if (!oldData[menuSections[i]]) {
          if (!newData[menuSections[i]]) {
            oldData[menuSections[i]] = {};
            return;
          } else {
            oldData[menuSections[i]] = newData[menuSections[i]];
            return;
          }
        } // Compare Existing versus New and build new Merged Object for Section
        //await checkOldData(oldData, oldSectionNames, newSectionNames, menuSections[i]);


        await checkNewData(newData, oldSectionNames, newSectionNames, menuSections[i]);
      }
    }

    async function getAllNamesInSection(obj, type) {
      const nameArray = [];

      try {
        Object.keys(obj[type]).length;
      } catch (exception) {
        return nameArray;
      }

      const arrayLength = Object.keys(obj[type]).length;

      for (var i = 0; i < arrayLength; i++) {
        if (!obj[type][i].name) {
          continue;
        }

        nameArray.push(obj[type][i].name.replace(/\s+/g, '').toLowerCase());
      }

      return nameArray;
    }

    async function findObjectByName(data, type, name) {
      var newObject = Object.values(data[type]).sort((a, b) => b.name.replace(/\s+/g, '').length - a.name.replace(/\s+/g, '').length).find(section => {
        //cutting out all spaces
        return name.includes(section.name.replace(/\s+/g, '').toLowerCase()) ? section : "";
      });
      return newObject;
    }
    /*
    // Checks each Name field of Current Menu to see if it exists in the New Menu. If it exists, it pushes that one to the new Merged Menu and increase IDX, otherwise it continues
    async function checkOldData(oldData, oldArray, newArray, section) {
        let oldDataLength = Object.keys(oldData[section]).length;
        for (var i = 0; i < oldDataLength; i++) {
            for (var k = 0; k < oldArray.length; k++) {
                if (newArray.includes(oldArray[k])) {
                    let newSection = await findObjectByName(oldData, section, oldArray[k]);
                    mergedData[section][idx] = newSection;
                    idx = idx + 1;
                } else {
                    continue;
                }
            }
        }
    }
    */
    // Checks each Name field of the New Menu to see if it exists in the Current Menu. If it exists, continue, otherwise push to the new Merged Menu and increase IDX


    async function checkNewData(newData, oldArray, newArray, section) {
      let newDataLength = Object.keys(newData[section]).length;

      for (var i = 0; i < newDataLength; i++) {
        if (oldArray.includes(newArray[i])) {
          continue;
        } else {
          let newSection = await findObjectByName(newData, section, newArray[i]);
          oldData[section][idx] = newSection;
          idx = idx + 1;
        }
      }
    }

    await game.settings.set("autoanimations", "aaAutorec", oldData);
    await autoRecMigration.handle(game.settings.get('autoanimations', 'aaAutorec'));
  }

  static _autoPreview(name, patreon, flags) {
    var _flags$autoanimations, _flags$autoanimations2, _data$autorecObject, _flags$autoanimations3, _flags$autoanimations4, _data$autorecObject2, _flags$autoanimations5, _flags$autoanimations6, _data$autorecObject3, _data$autorecObject4;

    const data = {};
    data.autoOverriden = (_flags$autoanimations = flags.autoanimations) === null || _flags$autoanimations === void 0 ? void 0 : (_flags$autoanimations2 = _flags$autoanimations.options) === null || _flags$autoanimations2 === void 0 ? void 0 : _flags$autoanimations2.overrideAuto;
    data.autoRecSettings = game.settings.get('autoanimations', 'aaAutorec');
    data.autoName = this._rinseName(name);
    data.autorecSection = this._findObjectFromArray(data.autoRecSettings, data.autoName);

    if (!data.autorecSection) {
      return;
    }

    data.autorecObject = data.autorecSection;
    data.autorecType = data.autorecSection.menuSection;
    data.name = (_data$autorecObject = data.autorecObject) === null || _data$autorecObject === void 0 ? void 0 : _data$autorecObject.animation;
    data.color = data.autoOverriden ? (_flags$autoanimations3 = flags.autoanimations) === null || _flags$autoanimations3 === void 0 ? void 0 : (_flags$autoanimations4 = _flags$autoanimations3.options) === null || _flags$autoanimations4 === void 0 ? void 0 : _flags$autoanimations4.autoColor : (_data$autorecObject2 = data.autorecObject) === null || _data$autorecObject2 === void 0 ? void 0 : _data$autorecObject2.color;
    data.variant = data.autoOverriden ? (_flags$autoanimations5 = flags.autoanimations) === null || _flags$autoanimations5 === void 0 ? void 0 : (_flags$autoanimations6 = _flags$autoanimations5.options) === null || _flags$autoanimations6 === void 0 ? void 0 : _flags$autoanimations6.autoVariant : (_data$autorecObject3 = data.autorecObject) === null || _data$autorecObject3 === void 0 ? void 0 : _data$autorecObject3.variant;
    data.nameArray = this._getAllTheNames(data.autoRecSettings);

    if ((_data$autorecObject4 = data.autorecObject) !== null && _data$autorecObject4 !== void 0 && _data$autorecObject4.custom) {
      var _data$autorecObject5;

      return (_data$autorecObject5 = data.autorecObject) === null || _data$autorecObject5 === void 0 ? void 0 : _data$autorecObject5.customPath;
    }

    if (data.autorecType === 'preset') {
      return;
    }

    if (data.autorecType !== 'melee' && data.autorecType !== 'range') {
      data.autorecType = 'static';
    } //const autoName = this._rinseName(name);


    if (!data.autoName) {
      return;
    }

    if (!this._autorecNameCheck(data.nameArray, data.autoName)) {
      return;
    }

    const jb2a = patreon ? JB2APATREONDB : JB2AFREEDB;
    let file;

    switch (true) {
      case data.autorecType === 'melee':
        try {
          file = jb2a.melee[data.name][data.variant][data.color][0];
        } catch (exception) {}

        break;

      case data.autorecType === 'range':
        try {
          file = jb2a[data.autorecType][data.name][data.variant][data.color][Object.keys(jb2a[data.autorecType][data.name][data.variant][data.color])[1]][0];
        } catch (exception) {}

        break;

      default:
        try {
          file = jb2a.static[data.name][data.variant][data.color][0];
        } catch (exception) {}

    }

    return file;
  }

  static _autoPreviewAefx(name, patreon, flags) {
    var _flags$autoanimations7, _flags$autoanimations8, _data$autorecObject6, _flags$autoanimations9, _flags$autoanimations10, _data$autorecObject7, _flags$autoanimations11, _flags$autoanimations12, _data$autorecObject8, _data$autorecObject9;

    const data = {};
    data.autoOverriden = (_flags$autoanimations7 = flags.autoanimations) === null || _flags$autoanimations7 === void 0 ? void 0 : (_flags$autoanimations8 = _flags$autoanimations7.options) === null || _flags$autoanimations8 === void 0 ? void 0 : _flags$autoanimations8.overrideAuto;
    data.autoRecSettings = game.settings.get('autoanimations', 'aaAutorec');
    data.autoName = this._rinseName(name);
    data.autorecSection = this._findObjectFromAefx(data.autoRecSettings, data.autoName);

    if (!data.autorecSection) {
      return;
    }

    data.autorecObject = data.autorecSection;
    data.autorecType = data.autorecSection.menuSection;
    data.name = (_data$autorecObject6 = data.autorecObject) === null || _data$autorecObject6 === void 0 ? void 0 : _data$autorecObject6.animation;
    data.color = data.autoOverriden ? (_flags$autoanimations9 = flags.autoanimations) === null || _flags$autoanimations9 === void 0 ? void 0 : (_flags$autoanimations10 = _flags$autoanimations9.options) === null || _flags$autoanimations10 === void 0 ? void 0 : _flags$autoanimations10.autoColor : (_data$autorecObject7 = data.autorecObject) === null || _data$autorecObject7 === void 0 ? void 0 : _data$autorecObject7.color;
    data.variant = data.autoOverriden ? (_flags$autoanimations11 = flags.autoanimations) === null || _flags$autoanimations11 === void 0 ? void 0 : (_flags$autoanimations12 = _flags$autoanimations11.options) === null || _flags$autoanimations12 === void 0 ? void 0 : _flags$autoanimations12.autoVariant : (_data$autorecObject8 = data.autorecObject) === null || _data$autorecObject8 === void 0 ? void 0 : _data$autorecObject8.variant;
    data.nameArray = this._getAllTheNamesAefx(data.autoRecSettings);

    if ((_data$autorecObject9 = data.autorecObject) !== null && _data$autorecObject9 !== void 0 && _data$autorecObject9.custom) {
      var _data$autorecObject10;

      return (_data$autorecObject10 = data.autorecObject) === null || _data$autorecObject10 === void 0 ? void 0 : _data$autorecObject10.customPath;
    }

    if (data.autorecType === 'preset') {
      return;
    }

    if (data.autorecType !== 'melee' && data.autorecType !== 'range') {
      data.autorecType = 'static';
    } //const autoName = this._rinseName(name);


    if (!data.autoName) {
      return;
    }

    if (!this._autorecNameCheck(data.nameArray, data.autoName)) {
      return;
    }

    const jb2a = patreon ? JB2APATREONDB : JB2AFREEDB;
    let file;

    switch (true) {
      case data.autorecType === 'melee':
        try {
          file = jb2a.melee[data.name][data.variant][data.color][0];
        } catch (exception) {}

        break;

      case data.autorecType === 'range':
        try {
          file = jb2a[data.autorecType][data.name][data.variant][data.color][Object.keys(jb2a[data.autorecType][data.name][data.variant][data.color])[1]][0];
        } catch (exception) {}

        break;

      default:
        try {
          file = jb2a.static[data.name][data.variant][data.color][0];
        } catch (exception) {}

    }

    return file;
  }
  /*
  static _autorecChoices(itemName, flags) {
      const autoRecSettings = game.settings.get('autoanimations', 'aaAutorec');
      const autoName = AutorecFunctions._rinseName(itemName)
      const nameArray = AutorecFunctions._getAllTheNames(autoRecSettings);
      if (!AutorecFunctions._autorecNameCheck(nameArray, autoName)) {
          return;
      }
      const colorMenu = aaColorMenu;
      const variantMenu = aaVariantMenu;
      const autorecSection = AutorecFunctions._findObjectFromArray(autoRecSettings, autoName);
      if (autorecSection.custom) { return { colors: null, variantChoices: null } }
      let autorecType = autorecSection.menuSection
        let animationName = autorecType === 'preset' && autorecSection.animation === "teleportation" ? autorecSection.subAnimation : autorecSection.animation;
      if (autorecSection[1] === 'templates') {
          animationName = autorecSection.type;
      }
      if (autorecType !== 'melee' && autorecType !== 'range') { autorecType = 'static' }
      const name = animationName === 'shield' ? 'shieldspell' : animationName
      let variant;
      try { variant = !autorecSection.variant ? Object.keys(colorMenu[autorecType][name])[0] : autorecSection.variant; }
      catch (exception) { }
      if (autorecSection[1] === 'templates') {
          variant = autorecSection.animation;
      }
        let autoVariant;
      if (flags.autoanimations?.options?.overrideAuto) {
          autoVariant = flags.autoanimations?.options?.autoVariant;
      }
      variant = !autoVariant ? variant : autoVariant;
        let colors;
      try { colors = colorMenu[autorecType][name][variant] }
      catch (exception) { }
      let variantChoices;
      try { variantChoices = variantMenu[autorecType][name] }
      catch (exception) { }
      if (autorecSection[1] === "templates") { variantChoices = undefined }
        return { colors, variantChoices };
  }
  */


}
/*
async function sortAutorec() {
    const autoRec = await game.settings.get('autoanimations', 'aaAutorec');
    const sortedMenu = {};

    sortedMenu.version = autoRec.version;
    sortedMenu.search = autoRec.search;
    sortedMenu.melee = await sortMenu(autoRec.melee);
    sortedMenu.range = await sortMenu(autoRec.range);
    sortedMenu.static = await sortMenu(autoRec.static);
    sortedMenu.templates = await sortMenu(autoRec.templates);
    sortedMenu.auras = await sortMenu(autoRec.auras);
    sortedMenu.preset = await sortMenu(autoRec.preset)

}

async function sortMenu(data) {
    const mergedArray = [];
    const keys = Object.keys(data);
    const keyLength = keys.length;
    for (var i = 0; i < keyLength; i++) {
        var currentObject = data[keys[i]];
        if (!currentObject.name) { break; }
        currentObject.menuSection = keys[i]
        mergedArray.push(currentObject)
    }
    mergedArray.sort((a, b) => b.name.toLowerCase() > a.name.toLowerCase() ? -1 : 1)

    const melee = {};
    const newLength = mergedArray.length;
    for (var i = 0; i < newLength; i++) {
        var currentKey = i.toString()
        melee[currentKey] = mergedArray[currentKey];
    }
    return melee;
}

async function newMenu(data) {
    const melee = {};
    const keyLength = data.length;
    for (var i = 0; i < keyLength; i++) {
        var currentKey = i.toString()
        melee[currentKey] = data[currentKey];
    }
    return melee;
}
*/

async function fireball(handler, animationData, config) {
  var _game$modules$get, _template$data;

  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  const flags = handler.flags;

  if (data.isAuto) {
    var _flags$autoOverride$e, _flags$autoOverride, _flags$autoOverride$f, _flags$autoOverride2, _flags$autoOverride2$, _flags$autoOverride$f2, _flags$autoOverride3, _data$projectilVarian, _autoFireball$project, _data$projectileColor, _data$projectileRepea, _data$projectileDelay, _autoFireball$wait, _data$wait, _data$explosion01Vari, _autoFireball$explosi, _data$explosion01Colo, _data$wait2, _data$explosion02Vari, _autoFireball$explosi2, _data$explosion02Colo, _autoFireball$afterEf, _autoFireball$afterEf2, _data$afterEffectPath, _autoFireball$wait2, _data$wait3, _data$audio, _data$audio$a, _data$audio2, _data$audio2$a, _data$audio3, _data$audio3$a, _data$audio4, _data$audio4$a, _data$audio5, _data$audio5$a, _data$audio6, _data$audio6$e, _data$audio7, _data$audio7$e, _data$audio8, _data$audio8$e, _data$audio9, _data$audio9$e, _data$audio10, _data$audio10$e, _data$audio11, _data$audio11$e, _data$audio12, _data$audio12$e, _data$audio13, _data$audio13$e, _data$audio14, _data$audio14$e, _data$audio15, _data$audio15$e;

    //Object.assign(data, autoObject);
    const autoOverridden = (_flags$autoOverride$e = (_flags$autoOverride = flags.autoOverride) === null || _flags$autoOverride === void 0 ? void 0 : _flags$autoOverride.enable) !== null && _flags$autoOverride$e !== void 0 ? _flags$autoOverride$e : false;
    const autoOverrideAfter = (_flags$autoOverride$f = (_flags$autoOverride2 = flags.autoOverride) === null || _flags$autoOverride2 === void 0 ? void 0 : (_flags$autoOverride2$ = _flags$autoOverride2.fireball) === null || _flags$autoOverride2$ === void 0 ? void 0 : _flags$autoOverride2$.afterEffect) !== null && _flags$autoOverride$f !== void 0 ? _flags$autoOverride$f : false;
    const autoFireball = (_flags$autoOverride$f2 = (_flags$autoOverride3 = flags.autoOverride) === null || _flags$autoOverride3 === void 0 ? void 0 : _flags$autoOverride3.fireball) !== null && _flags$autoOverride$f2 !== void 0 ? _flags$autoOverride$f2 : {};
    data.rangeType = autoOverridden ? autoFireball.rangeType : data.rangeType;
    data.ex01Type = data.ex01Type;
    data.ex02Type = data.ex02Type;
    data.projectile = autoOverridden ? autoFireball.projectile : data.projectile;
    data.projectileVariant = autoFireball ? autoFireball.projectileVariant : (_data$projectilVarian = data.projectilVariant) !== null && _data$projectilVarian !== void 0 ? _data$projectilVarian : "01";
    data.projectileColor = autoOverridden ? (_autoFireball$project = autoFireball.projectileColor) !== null && _autoFireball$project !== void 0 ? _autoFireball$project : data.projectileColor : (_data$projectileColor = data.projectileColor) !== null && _data$projectileColor !== void 0 ? _data$projectileColor : "";
    data.projectileRepeat = (_data$projectileRepea = data.projectileRepeat) !== null && _data$projectileRepea !== void 0 ? _data$projectileRepea : 1;
    data.projectileDelay = (_data$projectileDelay = data.projectileDelay) !== null && _data$projectileDelay !== void 0 ? _data$projectileDelay : 250;
    data.wait01 = autoOverridden ? (_autoFireball$wait = autoFireball.wait01) !== null && _autoFireball$wait !== void 0 ? _autoFireball$wait : -500 : (_data$wait = data.wait01) !== null && _data$wait !== void 0 ? _data$wait : -500;
    data.explosion01 = data.explosion01;
    data.explosion01Variant = (_data$explosion01Vari = data.explosion01Variant) !== null && _data$explosion01Vari !== void 0 ? _data$explosion01Vari : "01";
    data.explosion01Color = autoOverridden ? (_autoFireball$explosi = autoFireball.explosion01Color) !== null && _autoFireball$explosi !== void 0 ? _autoFireball$explosi : "" : (_data$explosion01Colo = data.explosion01Color) !== null && _data$explosion01Colo !== void 0 ? _data$explosion01Colo : "";
    data.explosion01Repeat = data.explosion01Repeat || 1;
    data.explosion01Delay = data.explosion01Delay || 250;
    data.explosion01Scale = data.explosion01Scale || 1;
    data.wait02 = (_data$wait2 = data.wait02) !== null && _data$wait2 !== void 0 ? _data$wait2 : -500;
    data.explosion02 = data.explosion02;
    data.explosion02Variant = (_data$explosion02Vari = data.explosion02Variant) !== null && _data$explosion02Vari !== void 0 ? _data$explosion02Vari : "01";
    data.explosion02Color = autoOverridden ? (_autoFireball$explosi2 = autoFireball.explosion02Color) !== null && _autoFireball$explosi2 !== void 0 ? _autoFireball$explosi2 : "" : (_data$explosion02Colo = data.explosion02Color) !== null && _data$explosion02Colo !== void 0 ? _data$explosion02Colo : "";
    data.explosion02Repeat = data.explosion02Repeat || 1;
    data.explosion02Delay = data.explosion02Delay || 250;
    data.explosion02Scale = data.explosion02Scale || 1;
    data.afterEffect = autoOverrideAfter ? (_autoFireball$afterEf = autoFireball.afterEffect) !== null && _autoFireball$afterEf !== void 0 ? _autoFireball$afterEf : false : data.afterEffect || false;
    data.afterEffectPath = autoOverrideAfter ? (_autoFireball$afterEf2 = autoFireball.afterEffectPath) !== null && _autoFireball$afterEf2 !== void 0 ? _autoFireball$afterEf2 : "" : (_data$afterEffectPath = data.afterEffectPath) !== null && _data$afterEffectPath !== void 0 ? _data$afterEffectPath : "";
    data.wait03 = autoOverrideAfter ? (_autoFireball$wait2 = autoFireball.wait03) !== null && _autoFireball$wait2 !== void 0 ? _autoFireball$wait2 : 500 : (_data$wait3 = data.wait03) !== null && _data$wait3 !== void 0 ? _data$wait3 : 500;
    data.itemAudio = {
      enable: ((_data$audio = data.audio) === null || _data$audio === void 0 ? void 0 : (_data$audio$a = _data$audio.a01) === null || _data$audio$a === void 0 ? void 0 : _data$audio$a.enable) || false,
      file: (_data$audio2 = data.audio) === null || _data$audio2 === void 0 ? void 0 : (_data$audio2$a = _data$audio2.a01) === null || _data$audio2$a === void 0 ? void 0 : _data$audio2$a.file,
      volume: ((_data$audio3 = data.audio) === null || _data$audio3 === void 0 ? void 0 : (_data$audio3$a = _data$audio3.a01) === null || _data$audio3$a === void 0 ? void 0 : _data$audio3$a.volume) || 0.25,
      delay: ((_data$audio4 = data.audio) === null || _data$audio4 === void 0 ? void 0 : (_data$audio4$a = _data$audio4.a01) === null || _data$audio4$a === void 0 ? void 0 : _data$audio4$a.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.projectileRepeat || 1,
      startTime: ((_data$audio5 = data.audio) === null || _data$audio5 === void 0 ? void 0 : (_data$audio5$a = _data$audio5.a01) === null || _data$audio5$a === void 0 ? void 0 : _data$audio5$a.startTime) || 0
    };
    data.exAudio01 = {
      enable: ((_data$audio6 = data.audio) === null || _data$audio6 === void 0 ? void 0 : (_data$audio6$e = _data$audio6.e01) === null || _data$audio6$e === void 0 ? void 0 : _data$audio6$e.enable) || false,
      file: (_data$audio7 = data.audio) === null || _data$audio7 === void 0 ? void 0 : (_data$audio7$e = _data$audio7.e01) === null || _data$audio7$e === void 0 ? void 0 : _data$audio7$e.file,
      volume: ((_data$audio8 = data.audio) === null || _data$audio8 === void 0 ? void 0 : (_data$audio8$e = _data$audio8.e01) === null || _data$audio8$e === void 0 ? void 0 : _data$audio8$e.volume) || 0.25,
      delay: ((_data$audio9 = data.audio) === null || _data$audio9 === void 0 ? void 0 : (_data$audio9$e = _data$audio9.e01) === null || _data$audio9$e === void 0 ? void 0 : _data$audio9$e.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.explosion01Repeat || 1,
      startTime: ((_data$audio10 = data.audio) === null || _data$audio10 === void 0 ? void 0 : (_data$audio10$e = _data$audio10.e01) === null || _data$audio10$e === void 0 ? void 0 : _data$audio10$e.startTime) || 0
    };
    data.exAudio02 = {
      enable: ((_data$audio11 = data.audio) === null || _data$audio11 === void 0 ? void 0 : (_data$audio11$e = _data$audio11.e02) === null || _data$audio11$e === void 0 ? void 0 : _data$audio11$e.enable) || false,
      file: (_data$audio12 = data.audio) === null || _data$audio12 === void 0 ? void 0 : (_data$audio12$e = _data$audio12.e02) === null || _data$audio12$e === void 0 ? void 0 : _data$audio12$e.file,
      volume: ((_data$audio13 = data.audio) === null || _data$audio13 === void 0 ? void 0 : (_data$audio13$e = _data$audio13.e02) === null || _data$audio13$e === void 0 ? void 0 : _data$audio13$e.volume) || 0.25,
      delay: ((_data$audio14 = data.audio) === null || _data$audio14 === void 0 ? void 0 : (_data$audio14$e = _data$audio14.e02) === null || _data$audio14$e === void 0 ? void 0 : _data$audio14$e.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.explosion02Repeat || 1,
      startTime: ((_data$audio15 = data.audio) === null || _data$audio15 === void 0 ? void 0 : (_data$audio15$e = _data$audio15.e02) === null || _data$audio15$e === void 0 ? void 0 : _data$audio15$e.startTime) || 0
    };
  } else {
    var _flags$fireball, _fireballFlags$projec, _fireballFlags$projec2, _fireballFlags$projec3, _fireballFlags$projec4, _fireballFlags$wait, _fireballFlags$explos, _fireballFlags$explos2, _fireballFlags$explos3, _fireballFlags$explos4, _fireballFlags$explos5, _fireballFlags$wait2, _fireballFlags$explos6, _fireballFlags$explos7, _fireballFlags$explos8, _fireballFlags$explos9, _fireballFlags$explos10, _fireballFlags$afterE, _fireballFlags$wait3, _flags$options$remove, _flags$options, _handler$flags, _handler$flags$audio, _handler$flags$audio$, _handler$flags2, _handler$flags2$audio, _handler$flags2$audio2, _handler$flags3, _handler$flags3$audio, _handler$flags3$audio2, _handler$flags4, _handler$flags4$audio, _handler$flags4$audio2, _handler$flags5, _handler$flags5$audio, _handler$flags5$audio2, _handler$flags6, _handler$flags6$audio, _handler$flags6$audio2, _handler$flags7, _handler$flags7$audio, _handler$flags7$audio2, _handler$flags8, _handler$flags8$audio, _handler$flags8$audio2, _handler$flags9, _handler$flags9$audio, _handler$flags9$audio2, _handler$flags10, _handler$flags10$audi, _handler$flags10$audi2, _handler$flags11, _handler$flags11$audi, _handler$flags11$audi2, _handler$flags12, _handler$flags12$audi, _handler$flags12$audi2, _handler$flags13, _handler$flags13$audi, _handler$flags13$audi2, _handler$flags14, _handler$flags14$audi, _handler$flags14$audi2, _handler$flags15, _handler$flags15$audi, _handler$flags15$audi2;

    const fireballFlags = (_flags$fireball = flags.fireball) !== null && _flags$fireball !== void 0 ? _flags$fireball : {};
    data.rangeType = fireballFlags.rangeType;
    data.ex01Type = fireballFlags.ex01Type;
    data.ex02Type = fireballFlags.ex02Type;
    data.projectile = fireballFlags.projectile;
    data.projectileVariant = (_fireballFlags$projec = fireballFlags.projectileVariant) !== null && _fireballFlags$projec !== void 0 ? _fireballFlags$projec : "01";
    data.projectileColor = (_fireballFlags$projec2 = fireballFlags.projectileColor) !== null && _fireballFlags$projec2 !== void 0 ? _fireballFlags$projec2 : "";
    data.projectileRepeat = (_fireballFlags$projec3 = fireballFlags.projectileRepeat) !== null && _fireballFlags$projec3 !== void 0 ? _fireballFlags$projec3 : 1;
    data.projectileDelay = (_fireballFlags$projec4 = fireballFlags.projectileDelay) !== null && _fireballFlags$projec4 !== void 0 ? _fireballFlags$projec4 : 250;
    data.wait01 = (_fireballFlags$wait = fireballFlags.wait01) !== null && _fireballFlags$wait !== void 0 ? _fireballFlags$wait : -500;
    data.explosion01 = fireballFlags.explosion01;
    data.explosion01Variant = (_fireballFlags$explos = fireballFlags.explosion01Variant) !== null && _fireballFlags$explos !== void 0 ? _fireballFlags$explos : "01";
    data.explosion01Color = (_fireballFlags$explos2 = fireballFlags.explosion01Color) !== null && _fireballFlags$explos2 !== void 0 ? _fireballFlags$explos2 : "";
    data.explosion01Repeat = (_fireballFlags$explos3 = fireballFlags.explosion01Repeat) !== null && _fireballFlags$explos3 !== void 0 ? _fireballFlags$explos3 : 1;
    data.explosion01Delay = (_fireballFlags$explos4 = fireballFlags.explosion01Delay) !== null && _fireballFlags$explos4 !== void 0 ? _fireballFlags$explos4 : 250;
    data.explosion01Scale = (_fireballFlags$explos5 = fireballFlags.explosion01Scale) !== null && _fireballFlags$explos5 !== void 0 ? _fireballFlags$explos5 : 1;
    data.wait02 = (_fireballFlags$wait2 = fireballFlags.wait02) !== null && _fireballFlags$wait2 !== void 0 ? _fireballFlags$wait2 : -500;
    data.explosion02 = fireballFlags.explosion02;
    data.explosion02Variant = (_fireballFlags$explos6 = fireballFlags.explosion02Variant) !== null && _fireballFlags$explos6 !== void 0 ? _fireballFlags$explos6 : "01";
    data.explosion02Color = (_fireballFlags$explos7 = fireballFlags.explosion02Color) !== null && _fireballFlags$explos7 !== void 0 ? _fireballFlags$explos7 : "";
    data.explosion02Repeat = (_fireballFlags$explos8 = fireballFlags.explosion02Repeat) !== null && _fireballFlags$explos8 !== void 0 ? _fireballFlags$explos8 : 1;
    data.explosion02Delay = (_fireballFlags$explos9 = fireballFlags.explosion02Delay) !== null && _fireballFlags$explos9 !== void 0 ? _fireballFlags$explos9 : 250;
    data.explosion02Scale = (_fireballFlags$explos10 = fireballFlags.explosion02Scale) !== null && _fireballFlags$explos10 !== void 0 ? _fireballFlags$explos10 : 1;
    data.afterEffect = fireballFlags.afterEffect || false;
    data.afterEffectPath = (_fireballFlags$afterE = fireballFlags.afterEffectPath) !== null && _fireballFlags$afterE !== void 0 ? _fireballFlags$afterE : "";
    data.wait03 = (_fireballFlags$wait3 = fireballFlags.wait03) !== null && _fireballFlags$wait3 !== void 0 ? _fireballFlags$wait3 : 500;
    data.removeTemplate = (_flags$options$remove = (_flags$options = flags.options) === null || _flags$options === void 0 ? void 0 : _flags$options.removeTemplate) !== null && _flags$options$remove !== void 0 ? _flags$options$remove : false;
    data.itemAudio = {
      enable: ((_handler$flags = handler.flags) === null || _handler$flags === void 0 ? void 0 : (_handler$flags$audio = _handler$flags.audio) === null || _handler$flags$audio === void 0 ? void 0 : (_handler$flags$audio$ = _handler$flags$audio.a01) === null || _handler$flags$audio$ === void 0 ? void 0 : _handler$flags$audio$.enable) || false,
      file: (_handler$flags2 = handler.flags) === null || _handler$flags2 === void 0 ? void 0 : (_handler$flags2$audio = _handler$flags2.audio) === null || _handler$flags2$audio === void 0 ? void 0 : (_handler$flags2$audio2 = _handler$flags2$audio.a01) === null || _handler$flags2$audio2 === void 0 ? void 0 : _handler$flags2$audio2.file,
      volume: ((_handler$flags3 = handler.flags) === null || _handler$flags3 === void 0 ? void 0 : (_handler$flags3$audio = _handler$flags3.audio) === null || _handler$flags3$audio === void 0 ? void 0 : (_handler$flags3$audio2 = _handler$flags3$audio.a01) === null || _handler$flags3$audio2 === void 0 ? void 0 : _handler$flags3$audio2.volume) || 0.25,
      delay: ((_handler$flags4 = handler.flags) === null || _handler$flags4 === void 0 ? void 0 : (_handler$flags4$audio = _handler$flags4.audio) === null || _handler$flags4$audio === void 0 ? void 0 : (_handler$flags4$audio2 = _handler$flags4$audio.a01) === null || _handler$flags4$audio2 === void 0 ? void 0 : _handler$flags4$audio2.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.projectileRepeat || 1,
      startTime: ((_handler$flags5 = handler.flags) === null || _handler$flags5 === void 0 ? void 0 : (_handler$flags5$audio = _handler$flags5.audio) === null || _handler$flags5$audio === void 0 ? void 0 : (_handler$flags5$audio2 = _handler$flags5$audio.a01) === null || _handler$flags5$audio2 === void 0 ? void 0 : _handler$flags5$audio2.startTime) || 0
    };
    data.exAudio01 = {
      enable: ((_handler$flags6 = handler.flags) === null || _handler$flags6 === void 0 ? void 0 : (_handler$flags6$audio = _handler$flags6.audio) === null || _handler$flags6$audio === void 0 ? void 0 : (_handler$flags6$audio2 = _handler$flags6$audio.e01) === null || _handler$flags6$audio2 === void 0 ? void 0 : _handler$flags6$audio2.enable) || false,
      file: (_handler$flags7 = handler.flags) === null || _handler$flags7 === void 0 ? void 0 : (_handler$flags7$audio = _handler$flags7.audio) === null || _handler$flags7$audio === void 0 ? void 0 : (_handler$flags7$audio2 = _handler$flags7$audio.e01) === null || _handler$flags7$audio2 === void 0 ? void 0 : _handler$flags7$audio2.file,
      volume: ((_handler$flags8 = handler.flags) === null || _handler$flags8 === void 0 ? void 0 : (_handler$flags8$audio = _handler$flags8.audio) === null || _handler$flags8$audio === void 0 ? void 0 : (_handler$flags8$audio2 = _handler$flags8$audio.e01) === null || _handler$flags8$audio2 === void 0 ? void 0 : _handler$flags8$audio2.volume) || 0.25,
      delay: ((_handler$flags9 = handler.flags) === null || _handler$flags9 === void 0 ? void 0 : (_handler$flags9$audio = _handler$flags9.audio) === null || _handler$flags9$audio === void 0 ? void 0 : (_handler$flags9$audio2 = _handler$flags9$audio.e01) === null || _handler$flags9$audio2 === void 0 ? void 0 : _handler$flags9$audio2.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.explosion01Repeat || 1,
      startTime: ((_handler$flags10 = handler.flags) === null || _handler$flags10 === void 0 ? void 0 : (_handler$flags10$audi = _handler$flags10.audio) === null || _handler$flags10$audi === void 0 ? void 0 : (_handler$flags10$audi2 = _handler$flags10$audi.e01) === null || _handler$flags10$audi2 === void 0 ? void 0 : _handler$flags10$audi2.startTime) || 0
    };
    data.exAudio02 = {
      enable: ((_handler$flags11 = handler.flags) === null || _handler$flags11 === void 0 ? void 0 : (_handler$flags11$audi = _handler$flags11.audio) === null || _handler$flags11$audi === void 0 ? void 0 : (_handler$flags11$audi2 = _handler$flags11$audi.e02) === null || _handler$flags11$audi2 === void 0 ? void 0 : _handler$flags11$audi2.enable) || false,
      file: (_handler$flags12 = handler.flags) === null || _handler$flags12 === void 0 ? void 0 : (_handler$flags12$audi = _handler$flags12.audio) === null || _handler$flags12$audi === void 0 ? void 0 : (_handler$flags12$audi2 = _handler$flags12$audi.e02) === null || _handler$flags12$audi2 === void 0 ? void 0 : _handler$flags12$audi2.file,
      volume: ((_handler$flags13 = handler.flags) === null || _handler$flags13 === void 0 ? void 0 : (_handler$flags13$audi = _handler$flags13.audio) === null || _handler$flags13$audi === void 0 ? void 0 : (_handler$flags13$audi2 = _handler$flags13$audi.e02) === null || _handler$flags13$audi2 === void 0 ? void 0 : _handler$flags13$audi2.volume) || 0.25,
      delay: ((_handler$flags14 = handler.flags) === null || _handler$flags14 === void 0 ? void 0 : (_handler$flags14$audi = _handler$flags14.audio) === null || _handler$flags14$audi === void 0 ? void 0 : (_handler$flags14$audi2 = _handler$flags14$audi.e02) === null || _handler$flags14$audi2 === void 0 ? void 0 : _handler$flags14$audi2.delay) || 0,
      repeat: handler.decoupleSound ? 1 : data.explosion02Repeat || 1,
      startTime: ((_handler$flags15 = handler.flags) === null || _handler$flags15 === void 0 ? void 0 : (_handler$flags15$audi = _handler$flags15.audio) === null || _handler$flags15$audi === void 0 ? void 0 : (_handler$flags15$audi2 = _handler$flags15$audi.e02) === null || _handler$flags15$audi2 === void 0 ? void 0 : _handler$flags15$audi2.startTime) || 0
    };
  }

  const projectileAnimation = await buildFile(false, data.rangeType, data.projectile, "range", data.projectileVariant, data.projectileColor);
  const explosion01 = data.explosion01 !== "a1" ? await buildFile(true, data.ex01Type, data.explosion01, "static", data.explosion01Variant, data.explosion01Color) : "";
  const explosion02 = data.explosion02 !== "a1" ? await buildFile(true, data.ex02Type, data.explosion02, "static", data.explosion02Variant, data.explosion02Color) : "";

  if (handler.debug) {
    aaDebugger("Fireball Animation Start", data, projectileAnimation, explosion01, explosion02);
  }

  const template = config ? config : canvas.templates.placeables[canvas.templates.placeables.length - 1];
  const sourceToken = handler.sourceToken;
  let size;
  let position;

  if ((_game$modules$get = game.modules.get("dnd5e-helpers")) !== null && _game$modules$get !== void 0 && _game$modules$get.active && (game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 2 || game.settings.get("dnd5e-helpers", "gridTemplateScaling") === 3)) {
    const scale5e = template.data.distance / Math.sqrt(2);
    position = {
      x: template.data.x + scale5e / canvas.dimensions.distance * canvas.grid.size / 2,
      y: template.data.y + scale5e / canvas.dimensions.distance * canvas.grid.size / 2
    };
    size = canvas.grid.size * (template.data.distance / canvas.dimensions.distance);
  } else if (((_template$data = template.data) === null || _template$data === void 0 ? void 0 : _template$data.t) === 'rect') {
    var _template$data2;

    const offset = canvas.grid.size * (((_template$data2 = template.data) === null || _template$data2 === void 0 ? void 0 : _template$data2.width) / canvas.dimensions.distance);
    position = {
      x: template.data.x + offset / 2,
      y: template.data.y + offset / 2
    };
    size = canvas.grid.size * (template.data.distance / canvas.dimensions.distance);
  } else {
    position = {
      x: template.data.x,
      y: template.data.y
    };
    size = canvas.grid.size * (template.data.distance * 2 / canvas.dimensions.distance);
  }

  let aaSeq = await new Sequence("Automated Animations");

  if (data.removeTemplate) {
    aaSeq.thenDo(function () {
      canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate", [template.id]);
    });
  } // Play Macro if Awaiting


  if (data.playMacro && data.macro.playWhen === "1") {
    handler.templateData = config;
    let userData = data.macro.args;
    aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
  } // Extra Effects => Source Token if active


  if (sourceFX.enabled) {
    aaSeq.addSequence(sourceFX.sourceSeq);
  }

  if (data.itemAudio.enable && data.itemAudio.file) {
    aaSeq.sound().file(data.itemAudio.file, true).volume(data.itemAudio.volume).delay(data.itemAudio.delay).repeats(data.itemAudio.repeat, data.projectileDelay).startTime(data.itemAudio.startTime);
  }

  aaSeq.effect().file(projectileAnimation.file).atLocation(sourceToken).stretchTo(position).repeats(data.projectileRepeat, data.projectileDelay).waitUntilFinished(data.wait01);

  if (data.exAudio01.enable && data.exAudio01.file) {
    aaSeq.sound().file(data.exAudio01.file, true).volume(data.exAudio01.volume).delay(data.exAudio01.delay).repeats(data.exAudio01.repeat, data.explosion01Delay).startTime(data.exAudio01.startTime);
  }

  if (data.ex01Type) {
    aaSeq.effect().file(explosion01.file, true).atLocation(position).size(size * .35 * data.explosion01Scale).repeats(data.explosion01Repeat, data.explosion01Delay).waitUntilFinished(data.wait02);
  }

  if (data.exAudio02.enable && data.exAudio02.file) {
    aaSeq.sound().file(data.exAudio02.file, true).volume(data.exAudio02.volume).delay(data.exAudio02.delay).repeats(data.exAudio02.repeat, data.explosion02Delay).startTime(data.exAudio02.startTime);
  }

  if (data.ex02Type) {
    aaSeq.effect().file(explosion02.file, true).atLocation(position).size(size * data.explosion02Scale).repeats(data.explosion02Repeat, data.explosion02Delay).zIndex(5).waitUntilFinished(-750 + data.wait03);
  }

  if (data.afterEffect && data.afterEffectPath) {
    aaSeq.effect().file(data.afterEffectPath, true).size(size).atLocation(position).belowTokens(true).persist(true).origin(handler.itemUuid).fadeIn(250).fadeOut(500);
  }

  if (data.playMacro && data.macro.playWhen === "0") {
    handler.templateData = config;
    let userData = data.macro.args;
    new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
  }

  if (data.afterEffect && data.afterEffectPath) {
    AAanimationData.howToDelete("sequencerground");
  }

  aaSeq.play();
  /*
  new Sequence("Automated Animations")
      .sound()
          .file(data.itemAudio.file, true)
          .volume(data.itemAudio.volume)
          .delay(data.itemAudio.delay)
          .repeats(data.itemAudio.repeat, data.projectileDelay)
          .playIf(() => {
              return data.itemAudio.enable && data.itemAudio.file;
          })
      .effect()
          .file(projectileAnimation.file)
          .atLocation(sourceToken)
          .stretchTo(position)
          .repeats(data.projectileRepeat, data.projectileDelay)
          .waitUntilFinished(data.wait01)
      .sound()
          .file(data.exAudio01.file, true)
          .volume(data.exAudio01.volume)
          .delay(data.exAudio01.delay)
          .repeats(data.exAudio01.repeat, data.explosion01Delay)
          .playIf(() => {
              return data.exAudio01.enable && data.exAudio01.file;
          })
      .effect()
          .file(explosion01.file, true)
          .playIf(data.explosion01 !== "a1")
          .atLocation(position)
          .size(size * .35 * data.explosion01Scale)
          .repeats(data.explosion01Repeat, data.explosion01Delay)
          //.timeRange(0, 1200)
          .waitUntilFinished(data.wait02)
      .sound()
          .file(data.exAudio02.file, true)
          .volume(data.exAudio02.volume)
          .delay(data.exAudio02.delay)
          .repeats(data.exAudio02.repeat, data.explosion02Delay)
          .playIf(() => {
              return data.exAudio02.enable && data.exAudio02.file;
          })
      .effect()
          .file(explosion02.file, true)
          .playIf(data.explosion02 !== "a1")
          .atLocation(position)
          .size(size * data.explosion02Scale)
          .zIndex(5)
          .waitUntilFinished(-750 + data.wait03)
      .effect()
          .file(data.afterEffectPath, true)
          .size(size)
          .atLocation(position)
          .belowTokens(true)
          .persist(true)
          .origin(handler.item.uuid)
          .fadeIn(250)
          .playIf(data.afterEffect)
      .play()
        if (data.removeTemplate) {
          canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate", [template.data._id])
      }
      */
}

async function particleEffects(handler, autoObject) {
  var _autoObject$levels3d, _handler$flags$levels, _handler$flags;

  const options3d = autoObject ? (_autoObject$levels3d = autoObject.levels3d) !== null && _autoObject$levels3d !== void 0 ? _autoObject$levels3d : {} : (_handler$flags$levels = (_handler$flags = handler.flags) === null || _handler$flags === void 0 ? void 0 : _handler$flags.levels3d) !== null && _handler$flags$levels !== void 0 ? _handler$flags$levels : {};

  if (!options3d.type) {
    return;
  }

  const sourceToken = handler.sourceToken; //const target = handler.allTargets[0];

  const targets = handler.allTargets;
  const data = await AAanimationData.compileParticleData(autoObject, options3d);
  /*
      switch (options3d.type) {
          case "projectile":
          case "ray":
              projectileRay();
              break;
          case "explosion":
              explosion();
              break;
          case "sprite":
              sprite();
              break;
      }
  */

  class ParticleFunctions {
    static projectile(data, sourceToken, targets) {
      if (data.explosion.enable) {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).arc(data.arc).delay(data.delay).color(data.color01, data.color02).scale(data.scale).sprite(data.sprite).life(data.life).emitterSize(data.emittersize).alpha(data.alpha).mass(data.mass).gravity(data.gravity).rate(data.rate, 1).onEnd(new Particle3D("e").sprite(data.explosion.sprite).speed(data.explosion.speed).color(data.explosion.color01, data.explosion.color02).scale(data.explosion.scale).gravity(data.explosion.gravity).life(data.explosion.life).rate(data.explosion.rate, 1).emitterSize(data.explosion.emittersize).alpha(data.explosion.alpha).mass(data.explosion.mass)).start();
      } else {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).arc(data.arc).delay(data.delay).color(data.color01, data.color02).scale(data.scale).sprite(data.sprite).life(data.life).emitterSize(data.emittersize).alpha(data.alpha).mass(data.mass).gravity(data.gravity).rate(data.rate, 1).start();
      }
    }

    static ray(data, sourceToken, targets) {
      if (data.explosion.enable) {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).arc(data.arc).delay(data.delay).color(data.color01, data.color02).scale(data.scale).sprite(data.sprite).life(data.life).emitterSize(data.emittersize).alpha(data.alpha).mass(data.mass).gravity(data.gravity).rate(data.rate, 1).onEnd(new Particle3D("e").sprite(data.explosion.sprite).speed(data.explosion.speed).color(data.explosion.color01, data.explosion.color02).scale(data.explosion.scale).gravity(data.explosion.gravity).life(data.explosion.life).rate(data.explosion.rate, 1).emitterSize(data.explosion.emittersize).alpha(data.explosion.alpha).mass(data.explosion.mass)).start();
      } else {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).arc(data.arc).delay(data.delay).color(data.color01, data.color02).scale(data.scale).sprite(data.sprite).life(data.life).emitterSize(data.emittersize).alpha(data.alpha).mass(data.mass).gravity(data.gravity).rate(data.rate, 1).start();
      }
    }

    static explosion(data, sourceToken, targets) {
      new Particle3D("e").to(targets).sprite("modules/levels-3d-preview/assets/particles/dust.png").speed(data.speed).repeat(data.repeat).delay(data.delay).color(data.color01, data.color02).scale(data.scale, 2).gravity(data.gravity).life(data.life).rate(data.rate, 1).emitterSize(data.emittersize).alpha(data.alpha, 0).mass(data.mass).start();
    }

    static sprite(data, sourceToken, targets) {
      if (data.explosion.enable) {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).delay(data.delay).color(data.color01).scale(data.scale).sprite(data.sprite).alpha(data.alpha).onEnd(new Particle3D("e").sprite(data.explosion.sprite).speed(data.explosion.speed).color(data.explosion.color01, data.explosion.color02).scale(data.explosion.scale).gravity(data.explosion.gravity).life(data.explosion.life).rate(data.explosion.rate, 1).emitterSize(data.explosion.emittersize).alpha(data.explosion.alpha).mass(data.explosion.mass)).start();
      } else {
        new Particle3D(data.type).from(sourceToken).to(targets).speed(data.speed).repeat(data.repeat).delay(data.delay).color(data.color01).scale(data.scale).sprite(data.sprite).alpha(data.alpha).start();
      }
    }

  }

  ParticleFunctions[options3d.type](data, sourceToken, targets);
  /*
  function projectileRay() {
        if (data.explosion.enable) {
          new Particle3D(data.type)
              .from(sourceToken)
              .to(targets)
              .speed(data.speed)
              .repeat(data.repeat)
              .arc(data.arc)
              .delay(data.delay)
              .color(data.color01, data.color02)
              .scale(data.scale)
              .sprite(data.sprite)
              .life(data.life)
              .emitterSize(data.emittersize)
              .alpha(data.alpha)
              .mass(data.mass)
              .gravity(data.gravity)
              .rate(data.rate, 1)
              .onEnd(
                  new Particle3D("e")
                      .sprite(data.explosion.sprite)
                      .speed(data.explosion.speed)
                      .color(data.explosion.color01, data.explosion.color02)
                      .scale(data.explosion.scale)
                      .gravity(data.explosion.gravity)
                      .life(data.explosion.life)
                      .rate(data.explosion.rate, 1)
                      .emittersize(data.explosion.emittersize)
                      .alpha(data.explosion.alpha)
                      .mass(data.explosion.mass)
              )
              .start()
      } else {
          new Particle3D(data.type)
              .from(sourceToken)
              .to(targets)
              .speed(data.speed)
              .repeat(data.repeat)
              .arc(data.arc)
              .delay(data.delay)
              .color(data.color01, data.color02)
              .scale(data.scale)
              .sprite(data.sprite)
              .life(data.life)
              .emitterSize(data.emittersize)
              .alpha(data.alpha)
              .mass(data.mass)
              .gravity(data.gravity)
              .rate(data.rate, 1)
              .start()
      }
  }
    function explosion() {
      new Particle3D("e")
          .to(targets)
          .sprite("modules/levels-3d-preview/assets/particles/dust.png")
          .speed(data.speed)
          .repeat(data.repeat)
          .delay(data.delay)
          .color(data.color01, data.color02)
          .scale(data.scale, 2)
          .gravity(data.gravity)
          .life(data.life)
          .rate(data.rate, 1)
          .emitterSize(data.emittersize)
          .alpha(data.alpha, 0)
          .mass(data.mass)
          .start()
  }
      function sprite() {
    function spriteShoot() {
      const options = options3d.sprite;
      const type = options3d.type === "ray" ? "ray" : "projectile";
      const data = {
          type: type,
          speed: options.speed ?? 5,
          repeat: options.repeat || 1,
          //arc: options.arc || 2,
          delay: options.delay ?? 0,
          scale: options.scale || 0.7,
          color01: options.color01 ?? "#FFFFFF",
          //color02: options.color02 ?? "#FFFFFF",
          sprite: options.sprite || "modules/levels-3d-preview/assets/particles/emberssmall.png",
          //life: options.life || 500,
          //emitterSize: options.emittersize || .0001,
          alpha: options.alpha || 0.7,
          //mass: options.mass || 100,
          //gravity: options.gravity ?? 0,
          //rate: options.rate || 10,
          explosion: {
              enable: explode3d.enable || false,
              color01: explode3d.color01,
              color02: explode3d.color02,
              speed: explode3d.speed || 1,
              gravity: explode3d.gravity || 2,
              life: explode3d.life || 500,
              rate: explode3d.rate || 10,
              emitterSize: explode3d.emittersize || 1,
              alpha: explode3d.alpha || 0.5,
              mass: explode3d.mass || 100,
              sprite: explode3d.sprite || "modules/levels-3d-preview/assets/particles/dust.png",
              scale: explode3d.scale || 1,
          }
      }
        if (data.explosion.enable) {
          new Particle3D(data.type)
              .from(sourceToken)
              .to(targets)
              .speed(data.speed)
              .repeat(data.repeat)
              .delay(data.delay)
              .color(data.color01)
              .scale(data.scale)
              .sprite(data.sprite)
              .alpha(data.alpha)
              .onEnd(
                  new Particle3D("e")
                      .sprite(data.explosion.sprite)
                      .speed(data.explosion.speed)
                      .color(data.explosion.color01, data.explosion.color02)
                      .scale(data.explosion.scale)
                      .gravity(data.explosion.gravity)
                      .life(data.explosion.life)
                      .rate(data.explosion.rate, 1)
                      .emitterSize(data.explosion.emittersize)
                      .alpha(data.explosion.alpha)
                      .mass(data.explosion.mass)
              )
              .start()
      } else {
          new Particle3D(data.type)
              .from(sourceToken)
              .to(targets)
              .speed(data.speed)
              .repeat(data.repeat)
              .delay(data.delay)
              .color(data.color01)
              .scale(data.scale)
              .sprite(data.sprite)
              .alpha(data.alpha)
              .start()
      }
  }
  */
}

const wait$2 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function dualAttach(handler, animationData) {
  const aaDebug = game.settings.get("autoanimations", "debug"); // Sets JB2A database and Global Delay

  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$2(globalDelay);
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;

  if (data.isAuto) {
    data.itemName = data.subAnimation || "";
  } else {
    var _data$options;

    data.itemName = ((_data$options = data.options) === null || _data$options === void 0 ? void 0 : _data$options.name) || "";
  }

  const animFile = await buildFile(false, data.menuType, data.itemName, "range", data.variant, data.color, data.customPath);

  if (handler.debug) {
    aaDebugger("Dual Attach Animation Start", animationData, animFile);
  }

  const onlyX = data.enableCustom ? data.onlyX : false;
  const sourceToken = handler.sourceToken;
  let effectExists = Sequencer.EffectManager.getEffects({
    object: sourceToken,
    origin: handler.itemUuid
  });

  if (aaDebug) {
    aaDebugger("Dual Attach Animation Start", data, animFile);
  }

  async function cast() {
    let aaSeq = new Sequence(); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    } // Animation Start Hook


    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, handler.allTargets);
    });

    for (let target of handler.allTargets) {
      let checkTarget = effectExists.filter(i => i.data.target.includes(target.id)).length > 0;

      if (!checkTarget) {
        aaSeq.effect().file(animFile.file).attachTo(sourceToken).stretchTo(target, {
          attachTo: true,
          onlyX: onlyX
        }).persist(true).playbackRate(data.playbackRate).origin(handler.itemUuid).belowTokens(data.below); //.playIf(!checkTarget)
      }
    }

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play(); //Hooks.callAll("aa.animationEnd", sourceToken, handler.allTargets)
  }

  cast();
}

const wait$1 = delay => new Promise(resolve => setTimeout(resolve, delay));

async function thunderwaveAuto(handler, animationData, config) {
  function moduleIncludes(test) {
    return !!game.modules.get(test);
  }

  const sourceToken = handler.sourceToken;
  const data = animationData.primary;
  const sourceFX = animationData.sourceFX;
  let obj01 = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
  let color;
  const colors = ['green', 'orange', 'purple', 'red', 'blue'];

  function random_item(items) {
    return items[Math.floor(Math.random() * items.length)];
  }

  switch (true) {
    case data.color === "a1" || ``:
    case !data.color:
      color = "blue";
      break;

    case data.color === "random":
      color = random_item(colors);

    default:
      color = data.color;
  } //const templateID = await canvas.templates.placeables[canvas.templates.placeables.length - 1].data._id;
  //let template = await canvas.templates.get(templateID);


  const template = config ? config : canvas.templates.placeables[canvas.templates.placeables.length - 1];
  let filePath = obj01.static.spell.thunderwave;
  const getPosition = getRelativePosition(sourceToken, template);
  const angle = getPosition.angle;
  const anFile = filePath[getPosition.type][color];

  if (handler.debug) {
    aaDebugger("Thunderwave Animation Start", data, anFile);
  }

  let globalDelay = game.settings.get("autoanimations", "globaldelay");
  await wait$1(globalDelay);

  if (data.removeTemplate) {
    canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate", [template.id]);
  }

  if (data.persist && (data.type === "circle" || data.type === "rect")) {
    const gridSize = canvas.scene.data.grid;
    let tileData;

    if (data.overhead) {
      tileData = {
        alpha: data.opacity,
        width: gridSize * 3,
        height: gridSize * 3,
        img: anFile,
        // false sets it in canvas.background. true sets it to canvas.foreground
        overhead: true,
        occlusion: {
          alpha: occlusionAlpha,
          mode: occlusionMode
        },
        video: {
          autoplay: true,
          loop: true,
          volume: 0
        },
        x: template.data.x,
        y: template.data.y,
        z: 100
      };
    } else {
      tileData = {
        alpha: data.opacity,
        width: gridSize * 3,
        height: gridSize * 3,
        img: anFile,
        // false sets it in canvas.background. true sets it to canvas.foreground
        overhead: false,
        video: {
          autoplay: true,
          loop: true,
          volume: 0
        },
        x: template.data.x,
        y: template.data.y,
        z: 100
      };
    }

    socketlibSocket.executeAsGM("placeTile", tileData);

    if (data.playSound) {
      let aaSeq = await new Sequence("Automated Animations");
      aaSeq.effect().sound().file(data.itemAudio.file, true).volume(data.itemAudio.volume).delay(data.itemAudio.delay);
      aaSeq.play();
    }
  } else {
    const gridSize = canvas.scene.data.grid;
    let aaSeq = await new Sequence("Automated Animations"); // Play Macro if Awaiting

    if (data.playMacro && data.macro.playWhen === "1") {
      let userData = data.macro.args;
      aaSeq.macro(data.macro.name, handler.workflow, handler, ...userData);
    } // Extra Effects => Source Token if active


    if (sourceFX.enabled) {
      aaSeq.addSequence(sourceFX.sourceSeq);
    }

    if (data.playSound) {
      aaSeq.addSequence(await AAanimationData._sounds({
        animationData
      }));
    }

    aaSeq.thenDo(function () {
      Hooks.callAll("aa.animationStart", sourceToken, "no-target");
    });
    aaSeq.effect().file(anFile).atLocation({
      x: template.data.x + gridSize * 1.5,
      y: template.data.y + gridSize * 1.5
    }).anchor({
      x: 0.5,
      y: 0.5
    }) //.atLocation(template, { cacheLocation: true })
    .rotate(angle) //.scale(scale)
    .size(3, {
      gridUnits: true
    }).belowTokens(false).repeats(data.repeat, data.delay);

    if (data.playMacro && data.macro.playWhen === "0") {
      let userData = data.macro.args;
      new Sequence().macro(data.macro.name, handler.workflow, handler, ...userData).play();
    }

    aaSeq.play();
    await wait$1(500);
    Hooks.callAll("aa.animationEnd", sourceToken, "no-target");
  }

  function getRelativePosition(token, template) {
    const xPos = token.data.x;
    const yPos = token.data.y;
    const tempY = template.data.y;
    const tempX = template.data.x;
    const gridSize = canvas.scene.data.grid;
    let type;
    let angle;

    switch (true) {
      case xPos >= tempX && xPos <= tempX + gridSize * 2 && yPos >= tempY && yPos <= tempY + gridSize * 2:
        type = 'center';
        angle = 0;
        break;

      case xPos >= tempX - gridSize && xPos <= tempX - gridSize * 0.5 && yPos >= tempY - gridSize && yPos <= tempY - gridSize * 0.5:
        type = 'left';
        angle = 270;
        break;

      case xPos >= tempX + gridSize * 2.5 && xPos <= tempX + gridSize * 3 && yPos >= tempY - gridSize && yPos <= tempY - gridSize * 0.5:
        type = 'left';
        angle = 180;
        break;

      case xPos >= tempX + gridSize * 2.5 && xPos <= tempX + gridSize * 3 && yPos <= tempY + gridSize * 3 && yPos >= tempY + gridSize * 2.5:
        type = 'left';
        angle = 90;
        break;

      case xPos <= tempX - gridSize * 0.5 && xPos >= tempX - gridSize && yPos <= tempY + gridSize * 3 && yPos >= tempY + gridSize * 2.5:
        type = 'left';
        angle = 0;
        break;

      case xPos >= tempX + gridSize * 2.5 && yPos >= tempY && yPos <= tempY + gridSize * 2:
        type = 'mid';
        angle = 90;
        break;

      case xPos >= tempX && xPos <= tempX + gridSize * 2 && yPos >= tempY - gridSize && yPos <= tempY - gridSize * 0.5:
        type = 'mid';
        angle = 180;
        break;

      case xPos >= tempX - gridSize && xPos <= tempX - gridSize * 0.5 && yPos >= tempY && yPos <= tempY + gridSize * 2:
        type = 'mid';
        angle = 270;
        break;

      default:
        type = 'mid';
        angle = 0;
    }

    return {
      type,
      angle
    };
  }
}

//import { AAITEMCHECK, AAITEMCHECKFREE } from "../animation-functions/item-arrays.js";

async function trafficCop(handler) {
  var _game$Levels3DPreview, _game$modules$get, _game$modules$get2, _game$modules$get3, _game$modules$get4;

  const aaDebug = game.settings.get("autoanimations", "debug");

  if ((_game$Levels3DPreview = game.Levels3DPreview) !== null && _game$Levels3DPreview !== void 0 && _game$Levels3DPreview._active) {
    var _handler$flags, _handler$flags$levels;

    if ((_handler$flags = handler.flags) !== null && _handler$flags !== void 0 && (_handler$flags$levels = _handler$flags.levels3d) !== null && _handler$flags$levels !== void 0 && _handler$flags$levels.type) {
      if (aaDebug) {
        aaDebugger("Beginning Particle Animation for Custom Item Setting");
      }

      particleEffects(handler);
      return;
    } else if (!game.settings.get("autoanimations", "disableAutoRec")) {
      if (aaDebug) {
        aaDebugger("Automatic Recognition Beginning for Particle System");
      }

      const autoName = AutorecFunctions._rinseName(handler.itemName); //removes all spaces in the name


      const isAuto = AutorecFunctions.foundInAutorec(handler.autorecSettings, autoName);

      if (isAuto) {
        const autoObject = handler.autorecObject;
        particleEffects(handler, autoObject);
        return;
      }
    } else {
      if (aaDebug) {
        aaDebugger("No Automatic Recognition Found");
      }
    }

    return;
  }

  if (handler.isDisabled) {
    if (handler.soundNoAnimation || handler.macroOnly) {
      let aaSeq = new Sequence();

      if (handler.soundNoAnimation) {
        var _handler$flags$audio$, _handler$flags2, _handler$flags2$audio, _handler$flags2$audio2, _handler$flags$audio$2, _handler$flags3, _handler$flags3$audio, _handler$flags3$audio2, _handler$flags$audio$3, _handler$flags4, _handler$flags4$audio, _handler$flags4$audio2, _handler$flags$audio$4, _handler$flags5, _handler$flags5$audio, _handler$flags5$audio2;

        const sound = {
          file: (_handler$flags$audio$ = (_handler$flags2 = handler.flags) === null || _handler$flags2 === void 0 ? void 0 : (_handler$flags2$audio = _handler$flags2.audio) === null || _handler$flags2$audio === void 0 ? void 0 : (_handler$flags2$audio2 = _handler$flags2$audio.a01) === null || _handler$flags2$audio2 === void 0 ? void 0 : _handler$flags2$audio2.file) !== null && _handler$flags$audio$ !== void 0 ? _handler$flags$audio$ : "",
          volume: (_handler$flags$audio$2 = (_handler$flags3 = handler.flags) === null || _handler$flags3 === void 0 ? void 0 : (_handler$flags3$audio = _handler$flags3.audio) === null || _handler$flags3$audio === void 0 ? void 0 : (_handler$flags3$audio2 = _handler$flags3$audio.a01) === null || _handler$flags3$audio2 === void 0 ? void 0 : _handler$flags3$audio2.volume) !== null && _handler$flags$audio$2 !== void 0 ? _handler$flags$audio$2 : 0.75,
          delay: (_handler$flags$audio$3 = (_handler$flags4 = handler.flags) === null || _handler$flags4 === void 0 ? void 0 : (_handler$flags4$audio = _handler$flags4.audio) === null || _handler$flags4$audio === void 0 ? void 0 : (_handler$flags4$audio2 = _handler$flags4$audio.a01) === null || _handler$flags4$audio2 === void 0 ? void 0 : _handler$flags4$audio2.delay) !== null && _handler$flags$audio$3 !== void 0 ? _handler$flags$audio$3 : 0,
          startTime: (_handler$flags$audio$4 = (_handler$flags5 = handler.flags) === null || _handler$flags5 === void 0 ? void 0 : (_handler$flags5$audio = _handler$flags5.audio) === null || _handler$flags5$audio === void 0 ? void 0 : (_handler$flags5$audio2 = _handler$flags5$audio.a01) === null || _handler$flags5$audio2 === void 0 ? void 0 : _handler$flags5$audio2.startTime) !== null && _handler$flags$audio$4 !== void 0 ? _handler$flags$audio$4 : 0
        };
        aaSeq.sound().file(sound.file).volume(sound.volume).delay(sound.delay).startTime(sound.startTime);
      }

      if (handler.macroOnly) {
        var _handler$flags6, _handler$flags6$macro, _handler$flags7, _handler$flags7$macro;

        let userData = (_handler$flags6 = handler.flags) !== null && _handler$flags6 !== void 0 && (_handler$flags6$macro = _handler$flags6.macro) !== null && _handler$flags6$macro !== void 0 && _handler$flags6$macro.args ? handler.flags.macro.args.split(',').map(s => s.trim()) : "";
        aaSeq.macro((_handler$flags7 = handler.flags) === null || _handler$flags7 === void 0 ? void 0 : (_handler$flags7$macro = _handler$flags7.macro) === null || _handler$flags7$macro === void 0 ? void 0 : _handler$flags7$macro.name, handler.workflow, handler, ...userData);
      }

      aaSeq.play();
    }

    return;
  }
  /*
  if (handler.soundNoAnimation) {
      new Sequence()
          .sound()
          .file(handler.flags?.audio?.a01?.file)
          .volume(handler.flags?.audio?.a01?.volume)
          .delay(handler.flags?.audio?.a01?.delay)
          .play()
      return;
  } else if (handler.isDisabled) {
      return;
  }
  */


  const isCustom = handler.isCustomized;
  const isAutorec = handler.autorecObject;
  let aaTemplateHook; //const animationData = isCustom ? await AAanimationData._getAnimationData(handler) : await AAanimationData._getAnimationData(isAutorec)

  if (isCustom || isAutorec && !game.settings.get("autoanimations", "disableAutoRec")) {
    var _handler$flags8, _handler$allTargets$l, _handler$allTargets;

    let animType = isCustom ? handler.animType : isAutorec.menuSection;
    let presetType = isCustom ? (_handler$flags8 = handler.flags) === null || _handler$flags8 === void 0 ? void 0 : _handler$flags8.animation : isAutorec.animation;

    if (!isCustom && animType === 'aefx') {
      animType = isAutorec.aeType;

      if (animType === 'preset') {
        presetType = isAutorec.menuType;
      }
    }

    if (!isCustom && animType === 'aefx' && animType === 'preset') {
      presetType = isAutorec.menuType;
    }

    const targets = (_handler$allTargets$l = (_handler$allTargets = handler.allTargets) === null || _handler$allTargets === void 0 ? void 0 : _handler$allTargets.length) !== null && _handler$allTargets$l !== void 0 ? _handler$allTargets$l : 0;
    const animationData = isCustom ? await AAanimationData._getAnimationData(handler) : await AAanimationData._getAnimationData(handler, isAutorec);

    if (!isCustom && isAutorec) {
      if (animationData.primary.soundOnly.enable || animationData.primary.macro.playWhen === "2") {
        const primaryData = animationData.primary;
        const macroData = primaryData.macro;
        let aaSeq = new Sequence();
        let play = false;

        if (animType === 'templates' || animType === 'preset' && presetType === 'fireball' || animType === 'preset' && presetType === 'thunderwave') {
          switch (game.system.id) {
            case "dnd5e":
            case "pf2e":
            case "sw5e":
              if ((_game$modules$get = game.modules.get("mars-5e")) !== null && _game$modules$get !== void 0 && _game$modules$get.active) {
                autoOnlyData();
              } else {
                aaTemplateHook = Hooks.once("createMeasuredTemplate", config => {
                  autoOnlyData(config);
                });
                setTimeout(killHook, 30000);
              }

              break;

            default:
              autoOnlyData(config);
          }

          return;
        } else {
          autoOnlyData();
          return;
        }

        function autoOnlyData(config) {
          if (primaryData.soundOnly.enable && primaryData.soundOnly.file) {
            play = true;
            aaSeq.sound().file(primaryData.soundOnly.file, true).volume(primaryData.soundOnly.volume).delay(primaryData.soundOnly.delay);
          }

          if (primaryData.playMacro && macroData.playWhen === '2') {
            play = true;
            handler.templateData = config;
            let userData = macroData.args;
            aaSeq.macro(macroData.name, handler.workflow, handler, [...userData]); //aaSeq.play()
          }

          if (play) {
            aaSeq.play();
          }
        }
      }
    }

    switch (animType) {
      case "melee":
        if (targets === 0) {
          Hooks.callAll("aa.animationEnd", handler.sourceToken, "no-target");

          if (aaDebug) {
            aaDebugger("Melee Animation End", "NO TARGETS");
          }

          return;
        }

        Hooks.callAll("aa.preAnimationStart", handler.sourceToken);
        meleeAnimation(handler, animationData);
        break;

      case "range":
        if (targets === 0) {
          Hooks.callAll("aa.animationEnd", handler.sourceToken, "no-target");

          if (aaDebug) {
            aaDebugger("Range Animation End", "NO TARGETS");
          }

          return;
        }

        Hooks.callAll("aa.preAnimationStart", handler.sourceToken);
        rangedAnimations(handler, animationData);
        break;

      case "static":
        Hooks.callAll("aa.preAnimationStart", handler.sourceToken);
        staticAnimation(handler, animationData);
        break;

      case "template":
      case "templates":
        //some do not need hook on template, depends on when damage is rolled
        switch (game.system.id) {
          case "dnd5e":
          case "pf2e":
          case "sw5e":
          case "tormenta20":
            if ((_game$modules$get2 = game.modules.get("mars-5e")) !== null && _game$modules$get2 !== void 0 && _game$modules$get2.active) {
              templateAnimation(handler, animationData, config);
            } else {
              aaTemplateHook = Hooks.once("createMeasuredTemplate", config => {
                templateAnimation(handler, animationData, config);
              });
              setTimeout(killHook, 30000);
            }

            break;

          default:
            templateAnimation(handler, animationData);
        }

        break;

      case "aura":
      case "auras":
        auras(handler, animationData);
        break;

      case "preset":
        switch (presetType) {
          case "bardicinspiration":
            bardicInspiration(handler, animationData);
            break;

          case "shieldspell":
            shieldSpell(handler, animationData);
            break;

          case "huntersmark":
            huntersMark(handler, animationData);
            break;

          case "dualattach":
            dualAttach(handler, animationData);
            break;

          case "sneakattack":
            sneakAttack(handler, animationData);
            break;

          case "bless":
            bless(handler, animationData);
            break;

          case "teleportation":
            teleportation(handler, animationData);
            break;

          case "thunderwave":
            switch (game.system.id) {
              case "dnd5e":
              case "pf2e":
              case "sw5e":
                if ((_game$modules$get3 = game.modules.get("mars-5e")) !== null && _game$modules$get3 !== void 0 && _game$modules$get3.active) {
                  thunderwaveAuto(handler, animationData, config);
                } else {
                  aaTemplateHook = Hooks.once("createMeasuredTemplate", config => {
                    thunderwaveAuto(handler, animationData, config);
                  });
                  setTimeout(killHook, 30000);
                }

                break;

              default:
                thunderwaveAuto(handler, animationData);
            }

            break;

          case "fireball":
            switch (game.system.id) {
              case "dnd5e":
              case "pf2e":
              case "sw5e":
                if ((_game$modules$get4 = game.modules.get("mars-5e")) !== null && _game$modules$get4 !== void 0 && _game$modules$get4.active
                /* || game.modules.get('midi-qol')?.active*/
                ) {
                  fireball(handler, animationData);
                } else {
                  aaTemplateHook = Hooks.once("createMeasuredTemplate", config => {
                    fireball(handler, animationData, config);
                  });
                  setTimeout(killHook, 30000);
                }

                break;

              default:
                fireball(handler, animationData);
            }

            break;
        }

        break;
    }
  }

  function killHook() {
    Hooks.off("createMeasuredTemplate", aaTemplateHook);
  }
}

function endTiming(itemName) {
  if (!itemName) {
    return 700;
  }

  let name = itemName.replace(/\s+/g, '').toLowerCase();
  let animEnd = 700;

  switch (name) {
    case "rangelasersword":
    case "rangelasersworddb":
    case "doublelasersword":
      animEnd = 1350;
      break;

    case "chakram":
    case "rapier":
    case "sword":
    case "greatclub":
    case "dagger":
      animEnd = 1000;
      break;

    case "lasersword":
    case "magicmissile":
      animEnd = 1100;
      break;

    case "greatsword":
      animEnd = 1800;
      break;

    case "greataxe":
      animEnd = 1600;
      break;

    case "mace":
    case "spear":
      animEnd = 1200;
      break;

    case "maul":
      animEnd = 2000;
      break;

    case "handaxe":
      animEnd = 1350;
      break;

    case "arrow":
    case "rangehammer":
    case "siege":
    case "rayoffrost":
    case "witchbolt":
    case "scorchingray":
      animEnd = 700;
      break;

    case "boulder":
      animEnd = 1050;
      break;

    case "lasershot":
      animEnd = 0;
      break;

    case "javelin":
      animEnd = 1150;
      break;

    case "rangesling":
      animEnd = 2000;
      break;

    case "firebolt":
      animEnd = 1700;
      break;

    case "eldritchblast":
      animEnd = 1350;
      break;

    case "disintegrate":
      animEnd = 1400;
      break;

    case "guidingbolt":
      animEnd = 3700;
      break;

    case "bolt":
      animEnd = 1250;
      break;

    case "bullet":
      animEnd = 100;
      break;

    case "snipe":
      animEnd = 0;
      break;
  }

  return animEnd;
}

class AASystemData {
  /**
  * Gather required data:
  * 
  * @param token the Source Token that is using the item
  * @param item the originating item that is being rolled
  * @param targets an Array from target Set, either through Chat Message, Hook or game.user.targets
  * @param hitTargets an Array from a list of HIT targets if supported by system
  * @param reach calculating the cumulative Reach from Race/Weapon/etc. if supported by system
  * 
  * system name for new field should be in all Lower Case with special characters removed
  * 
  */
  static async dnd5e(input, isChat) {
    var _game$modules$get;

    if ((_game$modules$get = game.modules.get('midi-qol')) !== null && _game$modules$get !== void 0 && _game$modules$get.active && !isChat) {
      var _input$item2, _input$item2$data, _input$item2$data$fla, _input$item2$data$fla2, _input$item2$data$fla3, _input$item3, _input$item3$data, _input$item3$data$dat, _input$item3$data$dat2, _token$actor$items2, _input$item4, _input$item4$data, _input$item4$data$dat, _input$item4$data$dat2, _game$modules$get2, _token$actor2, _token$actor2$data, _token$actor2$data$da, _token$actor2$data$da2, _token$actor2$data$da3, _item$data, _item$data$data, _item$data$data$prope;

      const token = canvas.tokens.get(input.tokenId) || canvas.tokens.placeables.find(token => {
        var _token$actor, _token$actor$items, _input$item;

        return ((_token$actor = token.actor) === null || _token$actor === void 0 ? void 0 : (_token$actor$items = _token$actor.items) === null || _token$actor$items === void 0 ? void 0 : _token$actor$items.get((_input$item = input.item) === null || _input$item === void 0 ? void 0 : _input$item._id)) != null;
      });
      const ammo = (_input$item2 = input.item) === null || _input$item2 === void 0 ? void 0 : (_input$item2$data = _input$item2.data) === null || _input$item2$data === void 0 ? void 0 : (_input$item2$data$fla = _input$item2$data.flags) === null || _input$item2$data$fla === void 0 ? void 0 : (_input$item2$data$fla2 = _input$item2$data$fla.autoanimations) === null || _input$item2$data$fla2 === void 0 ? void 0 : (_input$item2$data$fla3 = _input$item2$data$fla2.options) === null || _input$item2$data$fla3 === void 0 ? void 0 : _input$item2$data$fla3.ammo;
      const ammoType = (_input$item3 = input.item) === null || _input$item3 === void 0 ? void 0 : (_input$item3$data = _input$item3.data) === null || _input$item3$data === void 0 ? void 0 : (_input$item3$data$dat = _input$item3$data.data) === null || _input$item3$data$dat === void 0 ? void 0 : (_input$item3$data$dat2 = _input$item3$data$dat.consume) === null || _input$item3$data$dat2 === void 0 ? void 0 : _input$item3$data$dat2.type;
      const item = ammo && ammoType === "ammo" ? (_token$actor$items2 = token.actor.items) === null || _token$actor$items2 === void 0 ? void 0 : _token$actor$items2.get(input.item.data.data.consume.target) : input.item;

      if (!item || !token) {
        return {};
      }

      const hitTargets = Array.from(input.hitTargets);
      let targets = ((_input$item4 = input.item) === null || _input$item4 === void 0 ? void 0 : (_input$item4$data = _input$item4.data) === null || _input$item4$data === void 0 ? void 0 : (_input$item4$data$dat = _input$item4$data.data) === null || _input$item4$data$dat === void 0 ? void 0 : (_input$item4$data$dat2 = _input$item4$data$dat.target) === null || _input$item4$data$dat2 === void 0 ? void 0 : _input$item4$data$dat2.type) === 'self' ? Array.from(game.user.targets) : Array.from(input.targets);

      if ((_game$modules$get2 = game.modules.get('midi-qol')) !== null && _game$modules$get2 !== void 0 && _game$modules$get2.active) {
        switch (true) {
          case game.settings.get("autoanimations", "playonmiss"):
            targets = targets;
            break;

          case game.settings.get("autoanimations", "playonhit"):
            targets = hitTargets;
            break;

          default:
            targets = targets;
        }
      }

      let reach = 0;

      if (((_token$actor2 = token.actor) === null || _token$actor2 === void 0 ? void 0 : (_token$actor2$data = _token$actor2.data) === null || _token$actor2$data === void 0 ? void 0 : (_token$actor2$data$da = _token$actor2$data.data) === null || _token$actor2$data$da === void 0 ? void 0 : (_token$actor2$data$da2 = _token$actor2$data$da.details) === null || _token$actor2$data$da2 === void 0 ? void 0 : (_token$actor2$data$da3 = _token$actor2$data$da2.race) === null || _token$actor2$data$da3 === void 0 ? void 0 : _token$actor2$data$da3.toLowerCase()) === 'bugbear') {
        reach += 5;
      }

      if ((_item$data = item.data) !== null && _item$data !== void 0 && (_item$data$data = _item$data.data) !== null && _item$data$data !== void 0 && (_item$data$data$prope = _item$data$data.properties) !== null && _item$data$data$prope !== void 0 && _item$data$data$prope.rch) {
        reach += 5;
      }

      return {
        item,
        token,
        targets,
        hitTargets,
        reach
      };
    } else {
      var _input$data, _input$data2, _input$data2$flags, _input$data2$flags$dn, _input$data2$flags$dn2, _input$data3, _input$data3$flags, _input$data3$flags$mi, _input$data4, _input$data4$speaker, _token$actor5, _token$actor5$items, _item$data2, _item$data2$flags, _item$data2$flags$aut, _item$data2$flags$aut2, _item$data3, _item$data3$data, _item$data3$data$cons, _token$actor6, _token$actor6$data, _token$actor6$data$da, _token$actor6$data$da2, _token$actor6$data$da3, _item$data4, _item$data4$data, _item$data4$data$prop;

      const inputAtr = this._extractItemId((_input$data = input.data) === null || _input$data === void 0 ? void 0 : _input$data.content);

      let itemId = ((_input$data2 = input.data) === null || _input$data2 === void 0 ? void 0 : (_input$data2$flags = _input$data2.flags) === null || _input$data2$flags === void 0 ? void 0 : (_input$data2$flags$dn = _input$data2$flags.dnd5e) === null || _input$data2$flags$dn === void 0 ? void 0 : (_input$data2$flags$dn2 = _input$data2$flags$dn.roll) === null || _input$data2$flags$dn2 === void 0 ? void 0 : _input$data2$flags$dn2.itemId) || inputAtr || ((_input$data3 = input.data) === null || _input$data3 === void 0 ? void 0 : (_input$data3$flags = _input$data3.flags) === null || _input$data3$flags === void 0 ? void 0 : (_input$data3$flags$mi = _input$data3$flags["midi-qol"]) === null || _input$data3$flags$mi === void 0 ? void 0 : _input$data3$flags$mi.itemId);
      const tokenId = ((_input$data4 = input.data) === null || _input$data4 === void 0 ? void 0 : (_input$data4$speaker = _input$data4.speaker) === null || _input$data4$speaker === void 0 ? void 0 : _input$data4$speaker.token) || input.uuid;

      if (!itemId || !tokenId) {
        return {};
      }

      const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
        var _token$actor3, _token$actor3$items;

        return (_token$actor3 = token.actor) === null || _token$actor3 === void 0 ? void 0 : (_token$actor3$items = _token$actor3.items) === null || _token$actor3$items === void 0 ? void 0 : _token$actor3$items.get(input.uuid);
      }) || canvas.tokens.placeables.find(token => {
        var _token$actor4, _token$actor4$items;

        return ((_token$actor4 = token.actor) === null || _token$actor4 === void 0 ? void 0 : (_token$actor4$items = _token$actor4.items) === null || _token$actor4$items === void 0 ? void 0 : _token$actor4$items.get(itemId)) != null;
      });

      if (!token) {
        return {};
      }

      let item = ((_token$actor5 = token.actor) === null || _token$actor5 === void 0 ? void 0 : (_token$actor5$items = _token$actor5.items) === null || _token$actor5$items === void 0 ? void 0 : _token$actor5$items.get(itemId)) || (await fromUuid(`Item.${itemId}`));
      if (!item) return {};

      if ((_item$data2 = item.data) !== null && _item$data2 !== void 0 && (_item$data2$flags = _item$data2.flags) !== null && _item$data2$flags !== void 0 && (_item$data2$flags$aut = _item$data2$flags.autoanimations) !== null && _item$data2$flags$aut !== void 0 && (_item$data2$flags$aut2 = _item$data2$flags$aut.options) !== null && _item$data2$flags$aut2 !== void 0 && _item$data2$flags$aut2.ammo && ((_item$data3 = item.data) === null || _item$data3 === void 0 ? void 0 : (_item$data3$data = _item$data3.data) === null || _item$data3$data === void 0 ? void 0 : (_item$data3$data$cons = _item$data3$data.consume) === null || _item$data3$data$cons === void 0 ? void 0 : _item$data3$data$cons.type) === "ammo") {
        var _token$actor$items$ge, _token$actor$items3;

        itemId = item.data.data.consume.target;
        item = (_token$actor$items$ge = (_token$actor$items3 = token.actor.items) === null || _token$actor$items3 === void 0 ? void 0 : _token$actor$items3.get(itemId)) !== null && _token$actor$items$ge !== void 0 ? _token$actor$items$ge : "";
      }

      const targets = Array.from(input.user.targets);
      let reach = 0;

      if (((_token$actor6 = token.actor) === null || _token$actor6 === void 0 ? void 0 : (_token$actor6$data = _token$actor6.data) === null || _token$actor6$data === void 0 ? void 0 : (_token$actor6$data$da = _token$actor6$data.data) === null || _token$actor6$data$da === void 0 ? void 0 : (_token$actor6$data$da2 = _token$actor6$data$da.details) === null || _token$actor6$data$da2 === void 0 ? void 0 : (_token$actor6$data$da3 = _token$actor6$data$da2.race) === null || _token$actor6$data$da3 === void 0 ? void 0 : _token$actor6$data$da3.toLowerCase()) === 'bugbear') {
        reach += 5;
      }

      if ((_item$data4 = item.data) !== null && _item$data4 !== void 0 && (_item$data4$data = _item$data4.data) !== null && _item$data4$data !== void 0 && (_item$data4$data$prop = _item$data4$data.properties) !== null && _item$data4$data$prop !== void 0 && _item$data4$data$prop.rch) {
        reach += 5;
      }

      return {
        item,
        token,
        targets,
        reach
      };
    }
  }

  static async sfrpg(input) {
    var _input$data5, _input$data5$item, _input$msg, _input$msg$data, _input$msg2, _input$msg2$data, _input$msg2$data$spea, _input$data6, _token$actor8, _token$actor8$items;

    const itemId = ((_input$data5 = input.data) === null || _input$data5 === void 0 ? void 0 : (_input$data5$item = _input$data5.item) === null || _input$data5$item === void 0 ? void 0 : _input$data5$item.id) || this._extractItemId((_input$msg = input.msg) === null || _input$msg === void 0 ? void 0 : (_input$msg$data = _input$msg.data) === null || _input$msg$data === void 0 ? void 0 : _input$msg$data.content);

    if (!itemId) {
      return {};
    }

    const tokenId = (_input$msg2 = input.msg) === null || _input$msg2 === void 0 ? void 0 : (_input$msg2$data = _input$msg2.data) === null || _input$msg2$data === void 0 ? void 0 : (_input$msg2$data$spea = _input$msg2$data.speaker) === null || _input$msg2$data$spea === void 0 ? void 0 : _input$msg2$data$spea.token;
    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor7, _token$actor7$items;

      return (_token$actor7 = token.actor) === null || _token$actor7 === void 0 ? void 0 : (_token$actor7$items = _token$actor7.items) === null || _token$actor7$items === void 0 ? void 0 : _token$actor7$items.get(itemId);
    });

    if (!token) {
      return {};
    }

    const item = (_input$data6 = input.data) !== null && _input$data6 !== void 0 && _input$data6.item ? input.data.item : (_token$actor8 = token.actor) === null || _token$actor8 === void 0 ? void 0 : (_token$actor8$items = _token$actor8.items) === null || _token$actor8$items === void 0 ? void 0 : _token$actor8$items.get(itemId);

    if (!item) {
      return {};
    }

    const targets = Array.from(input.msg.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async d35e(input) {
    var _input$data7, _input$data8, _input$data8$speaker, _token$actor$items$ge2, _token$actor$items4;

    const itemId = this._extractItemId((_input$data7 = input.data) === null || _input$data7 === void 0 ? void 0 : _input$data7.content);

    const tokenId = (_input$data8 = input.data) === null || _input$data8 === void 0 ? void 0 : (_input$data8$speaker = _input$data8.speaker) === null || _input$data8$speaker === void 0 ? void 0 : _input$data8$speaker.token;

    if (!itemId || !tokenId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor9, _token$actor9$items;

      return ((_token$actor9 = token.actor) === null || _token$actor9 === void 0 ? void 0 : (_token$actor9$items = _token$actor9.items) === null || _token$actor9$items === void 0 ? void 0 : _token$actor9$items.get(itemId)) != null;
    });
    const item = (_token$actor$items$ge2 = (_token$actor$items4 = token.actor.items) === null || _token$actor$items4 === void 0 ? void 0 : _token$actor$items4.get(itemId)) !== null && _token$actor$items$ge2 !== void 0 ? _token$actor$items$ge2 : null;
    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async sw5e(input, isChat) {
    var _game$modules$get3;

    if ((_game$modules$get3 = game.modules.get('midi-qol')) !== null && _game$modules$get3 !== void 0 && _game$modules$get3.active && !isChat) {
      var _input$item6, _input$item6$data, _input$item6$data$fla, _input$item6$data$fla2, _input$item6$data$fla3, _input$item7, _input$item7$data, _input$item7$data$dat, _input$item7$data$dat2, _token$actor$items5, _game$modules$get4, _token$actor11, _token$actor11$data, _token$actor11$data$d, _token$actor11$data$d2, _token$actor11$data$d3, _item$data5, _item$data5$data, _item$data5$data$prop;

      const token = canvas.tokens.get(input.tokenId) || canvas.tokens.placeables.find(token => {
        var _token$actor10, _token$actor10$items, _input$item5;

        return ((_token$actor10 = token.actor) === null || _token$actor10 === void 0 ? void 0 : (_token$actor10$items = _token$actor10.items) === null || _token$actor10$items === void 0 ? void 0 : _token$actor10$items.get((_input$item5 = input.item) === null || _input$item5 === void 0 ? void 0 : _input$item5._id)) != null;
      });
      const ammo = (_input$item6 = input.item) === null || _input$item6 === void 0 ? void 0 : (_input$item6$data = _input$item6.data) === null || _input$item6$data === void 0 ? void 0 : (_input$item6$data$fla = _input$item6$data.flags) === null || _input$item6$data$fla === void 0 ? void 0 : (_input$item6$data$fla2 = _input$item6$data$fla.autoanimations) === null || _input$item6$data$fla2 === void 0 ? void 0 : (_input$item6$data$fla3 = _input$item6$data$fla2.options) === null || _input$item6$data$fla3 === void 0 ? void 0 : _input$item6$data$fla3.ammo;
      const ammoType = (_input$item7 = input.item) === null || _input$item7 === void 0 ? void 0 : (_input$item7$data = _input$item7.data) === null || _input$item7$data === void 0 ? void 0 : (_input$item7$data$dat = _input$item7$data.data) === null || _input$item7$data$dat === void 0 ? void 0 : (_input$item7$data$dat2 = _input$item7$data$dat.consume) === null || _input$item7$data$dat2 === void 0 ? void 0 : _input$item7$data$dat2.type;
      const item = ammo && ammoType === "ammo" ? (_token$actor$items5 = token.actor.items) === null || _token$actor$items5 === void 0 ? void 0 : _token$actor$items5.get(input.item.data.data.consume.target) : input.item;

      if (!item || !token) {
        return {};
      }

      const hitTargets = Array.from(input.hitTargets);
      let targets = Array.from(input.targets);

      if ((_game$modules$get4 = game.modules.get('midi-qol')) !== null && _game$modules$get4 !== void 0 && _game$modules$get4.active) {
        switch (true) {
          case game.settings.get("autoanimations", "playonmiss"):
            targets = targets;
            break;

          case game.settings.get("autoanimations", "playonhit"):
            targets = hitTargets;
            break;

          default:
            targets = targets;
        }
      }

      let reach = 0;

      if (((_token$actor11 = token.actor) === null || _token$actor11 === void 0 ? void 0 : (_token$actor11$data = _token$actor11.data) === null || _token$actor11$data === void 0 ? void 0 : (_token$actor11$data$d = _token$actor11$data.data) === null || _token$actor11$data$d === void 0 ? void 0 : (_token$actor11$data$d2 = _token$actor11$data$d.details) === null || _token$actor11$data$d2 === void 0 ? void 0 : (_token$actor11$data$d3 = _token$actor11$data$d2.race) === null || _token$actor11$data$d3 === void 0 ? void 0 : _token$actor11$data$d3.toLowerCase()) === 'bugbear') {
        reach += 5;
      }

      if ((_item$data5 = item.data) !== null && _item$data5 !== void 0 && (_item$data5$data = _item$data5.data) !== null && _item$data5$data !== void 0 && (_item$data5$data$prop = _item$data5$data.properties) !== null && _item$data5$data$prop !== void 0 && _item$data5$data$prop.rch) {
        reach += 5;
      }

      return {
        item,
        token,
        targets,
        hitTargets,
        reach
      };
    } else {
      var _input$data9, _input$data10, _input$data10$flags, _input$data10$flags$s, _input$data10$flags$s2, _input$data11, _input$data11$flags, _input$data11$flags$m, _input$data12, _input$data12$speaker, _token$actor13, _token$actor13$items, _item$data6, _item$data6$flags, _item$data6$flags$aut, _item$data6$flags$aut2, _item$data7, _item$data7$data, _item$data7$data$cons, _token$actor14, _token$actor14$data, _token$actor14$data$d, _token$actor14$data$d2, _token$actor14$data$d3, _item$data8, _item$data8$data, _item$data8$data$prop;

      const inputAtr = this._extractItemId((_input$data9 = input.data) === null || _input$data9 === void 0 ? void 0 : _input$data9.content);

      const itemId = ((_input$data10 = input.data) === null || _input$data10 === void 0 ? void 0 : (_input$data10$flags = _input$data10.flags) === null || _input$data10$flags === void 0 ? void 0 : (_input$data10$flags$s = _input$data10$flags.sw5e) === null || _input$data10$flags$s === void 0 ? void 0 : (_input$data10$flags$s2 = _input$data10$flags$s.roll) === null || _input$data10$flags$s2 === void 0 ? void 0 : _input$data10$flags$s2.itemId) || inputAtr || ((_input$data11 = input.data) === null || _input$data11 === void 0 ? void 0 : (_input$data11$flags = _input$data11.flags) === null || _input$data11$flags === void 0 ? void 0 : (_input$data11$flags$m = _input$data11$flags["midi-qol"]) === null || _input$data11$flags$m === void 0 ? void 0 : _input$data11$flags$m.itemId);
      const tokenId = (_input$data12 = input.data) === null || _input$data12 === void 0 ? void 0 : (_input$data12$speaker = _input$data12.speaker) === null || _input$data12$speaker === void 0 ? void 0 : _input$data12$speaker.token;

      if (!itemId || !tokenId) {
        return {};
      }

      const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
        var _token$actor12, _token$actor12$items;

        return ((_token$actor12 = token.actor) === null || _token$actor12 === void 0 ? void 0 : (_token$actor12$items = _token$actor12.items) === null || _token$actor12$items === void 0 ? void 0 : _token$actor12$items.get(itemId)) != null;
      });
      let item = (_token$actor13 = token.actor) === null || _token$actor13 === void 0 ? void 0 : (_token$actor13$items = _token$actor13.items) === null || _token$actor13$items === void 0 ? void 0 : _token$actor13$items.get(itemId);

      if ((_item$data6 = item.data) !== null && _item$data6 !== void 0 && (_item$data6$flags = _item$data6.flags) !== null && _item$data6$flags !== void 0 && (_item$data6$flags$aut = _item$data6$flags.autoanimations) !== null && _item$data6$flags$aut !== void 0 && (_item$data6$flags$aut2 = _item$data6$flags$aut.options) !== null && _item$data6$flags$aut2 !== void 0 && _item$data6$flags$aut2.ammo && ((_item$data7 = item.data) === null || _item$data7 === void 0 ? void 0 : (_item$data7$data = _item$data7.data) === null || _item$data7$data === void 0 ? void 0 : (_item$data7$data$cons = _item$data7$data.consume) === null || _item$data7$data$cons === void 0 ? void 0 : _item$data7$data$cons.type) === "ammo") {
        var _token$actor$items$ge3, _token$actor$items6;

        itemId = item.data.data.consume.target;
        item = (_token$actor$items$ge3 = (_token$actor$items6 = token.actor.items) === null || _token$actor$items6 === void 0 ? void 0 : _token$actor$items6.get(itemId)) !== null && _token$actor$items$ge3 !== void 0 ? _token$actor$items$ge3 : "";
      }

      const targets = Array.from(input.user.targets);
      let reach = 0;

      if (((_token$actor14 = token.actor) === null || _token$actor14 === void 0 ? void 0 : (_token$actor14$data = _token$actor14.data) === null || _token$actor14$data === void 0 ? void 0 : (_token$actor14$data$d = _token$actor14$data.data) === null || _token$actor14$data$d === void 0 ? void 0 : (_token$actor14$data$d2 = _token$actor14$data$d.details) === null || _token$actor14$data$d2 === void 0 ? void 0 : (_token$actor14$data$d3 = _token$actor14$data$d2.race) === null || _token$actor14$data$d3 === void 0 ? void 0 : _token$actor14$data$d3.toLowerCase()) === 'bugbear') {
        reach += 5;
      }

      if ((_item$data8 = item.data) !== null && _item$data8 !== void 0 && (_item$data8$data = _item$data8.data) !== null && _item$data8$data !== void 0 && (_item$data8$data$prop = _item$data8$data.properties) !== null && _item$data8$data$prop !== void 0 && _item$data8$data$prop.rch) {
        reach += 5;
      }

      return {
        item,
        token,
        targets,
        reach
      };
    }
  }

  static async pf1(input) {
    var _input$data13, _input$data13$speaker;

    const item = input === null || input === void 0 ? void 0 : input.itemSource;
    const tokenId = (_input$data13 = input.data) === null || _input$data13 === void 0 ? void 0 : (_input$data13$speaker = _input$data13.speaker) === null || _input$data13$speaker === void 0 ? void 0 : _input$data13$speaker.token;

    if (!item || !tokenId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor15, _token$actor15$items;

      return ((_token$actor15 = token.actor) === null || _token$actor15 === void 0 ? void 0 : (_token$actor15$items = _token$actor15.items) === null || _token$actor15$items === void 0 ? void 0 : _token$actor15$items.get(item === null || item === void 0 ? void 0 : item.id)) != null;
    });
    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async pf2e(input) {
    var _input$data14, _input$data14$flags, _input$data14$flags$p, _input$data14$flags$p2;

    const item = input.item;
    const token = input.token || canvas.tokens.placeables.find(token => {
      var _token$actor16, _token$actor16$items;

      return ((_token$actor16 = token.actor) === null || _token$actor16 === void 0 ? void 0 : (_token$actor16$items = _token$actor16.items) === null || _token$actor16$items === void 0 ? void 0 : _token$actor16$items.get(item === null || item === void 0 ? void 0 : item.id)) != null;
    });
    const targets = Array.from(input.user.targets);

    if (!item || !token) {
      return {};
    }

    let outcome = (_input$data14 = input.data) === null || _input$data14 === void 0 ? void 0 : (_input$data14$flags = _input$data14.flags) === null || _input$data14$flags === void 0 ? void 0 : (_input$data14$flags$p = _input$data14$flags.pf2e) === null || _input$data14$flags$p === void 0 ? void 0 : (_input$data14$flags$p2 = _input$data14$flags$p.context) === null || _input$data14$flags$p2 === void 0 ? void 0 : _input$data14$flags$p2.outcome;
    outcome = outcome ? outcome.toLowerCase() : "";
    let hitTargets;

    if (targets.length < 2 && !game.settings.get('autoanimations', 'playonDamageCore') && outcome) {
      if (outcome === 'success' || outcome === 'criticalsuccess') {
        hitTargets = targets;
      } else {
        hitTargets = false;
      }
    } else {
      hitTargets = targets;
    }

    const extraNames = [];

    if (item.type === "weapon") {
      const baseType = game.i18n.localize(CONFIG.PF2E.baseWeaponTypes[item.baseType]);
      const group = game.i18n.localize(CONFIG.PF2E.weaponGroups[item.group]);
      extraNames.push(baseType, group);
    }

    return {
      item,
      token,
      targets,
      hitTargets,
      extraNames
    };
  }

  static async forbiddenlands(input) {
    var _input$_roll$options, _input$_roll$options2, _token$actor18, _token$actor18$items;

    const itemId = (_input$_roll$options = input._roll.options) === null || _input$_roll$options === void 0 ? void 0 : _input$_roll$options.itemId;
    const tokenId = (_input$_roll$options2 = input._roll.options) === null || _input$_roll$options2 === void 0 ? void 0 : _input$_roll$options2.tokenId;

    if (!itemId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor17, _token$actor17$items;

      return ((_token$actor17 = token.actor) === null || _token$actor17 === void 0 ? void 0 : (_token$actor17$items = _token$actor17.items) === null || _token$actor17$items === void 0 ? void 0 : _token$actor17$items.get(itemId)) != null;
    });

    if (!token) {
      return {};
    }

    const item = (_token$actor18 = token.actor) === null || _token$actor18 === void 0 ? void 0 : (_token$actor18$items = _token$actor18.items) === null || _token$actor18$items === void 0 ? void 0 : _token$actor18$items.get(itemId);
    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async demonlord(input) {
    var _token$actor19, _token$actor19$items;

    const eventType = input.type;
    const itemId = input.itemId;
    const token = input.sourceToken || canvas.tokens.placeables.find(token => token.actor.items.get(itemId) != null);
    const item = (_token$actor19 = token.actor) === null || _token$actor19 === void 0 ? void 0 : (_token$actor19$items = _token$actor19.items) === null || _token$actor19$items === void 0 ? void 0 : _token$actor19$items.get(itemId);
    let hitTargets = input.hitTargets || [];
    hitTargets = Array.from(hitTargets);
    let targets;

    if (game.settings.get("autoanimations", "playtrigger") === "hits") {
      targets = hitTargets;
    } else {
      targets = Array.from(input.targets);
    }

    const canRunAnimations = () => {
      const commonEventTypes = ["apply-healing"];

      if (!(item !== null && item !== void 0 && item.hasDamage()) && !(item !== null && item !== void 0 && item.hasHealing())) {
        return true;
      }

      if (game.settings.get("autoanimations", "playtrigger") === "rolldamage") {
        return commonEventTypes.concat(["roll-damage"]).includes(eventType);
      }

      if (game.settings.get("autoanimations", "playtrigger") === "applydamage") {
        return commonEventTypes.concat(["apply-damage"]).includes(eventType);
      }

      return commonEventTypes.concat(["roll-attack"]).includes(eventType);
    };

    if (eventType && !canRunAnimations()) {
      return {};
    }

    return {
      item,
      token,
      targets,
      hitTargets
    };
  }

  static async starwarsffg(input) {
    var _token$actor$items$ge4, _token$actor$items7;

    const itemId = input.roll.data._id;
    const tokenId = input.data.speaker.token;
    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor20, _token$actor20$items;

      return ((_token$actor20 = token.actor) === null || _token$actor20 === void 0 ? void 0 : (_token$actor20$items = _token$actor20.items) === null || _token$actor20$items === void 0 ? void 0 : _token$actor20$items.get(itemId)) != null;
    });

    if (!itemId || !token) {
      return {};
    }

    const item = (_token$actor$items$ge4 = (_token$actor$items7 = token.actor.items) === null || _token$actor$items7 === void 0 ? void 0 : _token$actor$items7.get(itemId)) !== null && _token$actor$items$ge4 !== void 0 ? _token$actor$items$ge4 : "";
    const targets = Array.from(input.user.targets);
    const hitTargets = input.roll.ffg.success > 0 ? targets : [];
    return {
      item,
      token,
      targets,
      hitTargets
    };
  }

  static async swade(input) {
    const item = input.SwadeItem;
    const tokenOrActor = input.SwadeTokenOrActor;
    let token = canvas.tokens.placeables.find(token => {
      var _token$actor21, _token$actor21$items;

      return ((_token$actor21 = token.actor) === null || _token$actor21 === void 0 ? void 0 : (_token$actor21$items = _token$actor21.items) === null || _token$actor21$items === void 0 ? void 0 : _token$actor21$items.get(item.id)) != null;
    }) || canvas.tokens.ownedTokens.find(x => x.actor.id === tokenOrActor.id);

    if (tokenOrActor instanceof Token) {
      token = tokenOrActor;
    }

    const targets = Array.from(game.user.targets);

    if (!item || !token) {
      return {};
    }

    return {
      item,
      token,
      targets
    };
  }

  static async tormenta20(input) {
    var _input$data15, _input$data16, _input$data16$speaker, _token$actor$items$ge5, _token$actor$items8;

    const itemId = this._extractItemId((_input$data15 = input.data) === null || _input$data15 === void 0 ? void 0 : _input$data15.content);

    const tokenId = (_input$data16 = input.data) === null || _input$data16 === void 0 ? void 0 : (_input$data16$speaker = _input$data16.speaker) === null || _input$data16$speaker === void 0 ? void 0 : _input$data16$speaker.token;

    if (!itemId || !tokenId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(itemId) != null);
    const item = (_token$actor$items$ge5 = (_token$actor$items8 = token.actor.items) === null || _token$actor$items8 === void 0 ? void 0 : _token$actor$items8.get(itemId)) !== null && _token$actor$items$ge5 !== void 0 ? _token$actor$items$ge5 : "";
    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async wfrp4e(input) {
    var _input$info, _input$info$speaker;

    const item = input.item;
    const itemId = item.id;
    const tokenId = (_input$info = input.info) === null || _input$info === void 0 ? void 0 : (_input$info$speaker = _input$info.speaker) === null || _input$info$speaker === void 0 ? void 0 : _input$info$speaker.token;
    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor22, _token$actor22$items;

      return ((_token$actor22 = token.actor) === null || _token$actor22 === void 0 ? void 0 : (_token$actor22$items = _token$actor22.items) === null || _token$actor22$items === void 0 ? void 0 : _token$actor22$items.get(itemId)) != undefined;
    });
    const targets = input.targets ? Array.from(input.targets).map(token => canvas.tokens.get(token.token)) : [];

    if (!item || !token) {
      return {};
    }

    return {
      item,
      token,
      targets
    };
  }

  static async ose(input) {
    var _input$data17, _input$data17$flags, _input$data17$flags$o, _input$data18, _input$data18$speaker, _token$actor24, _token$actor24$items;

    const itemId = (_input$data17 = input.data) === null || _input$data17 === void 0 ? void 0 : (_input$data17$flags = _input$data17.flags) === null || _input$data17$flags === void 0 ? void 0 : (_input$data17$flags$o = _input$data17$flags.ose) === null || _input$data17$flags$o === void 0 ? void 0 : _input$data17$flags$o.itemId;
    const tokenId = (_input$data18 = input.data) === null || _input$data18 === void 0 ? void 0 : (_input$data18$speaker = _input$data18.speaker) === null || _input$data18$speaker === void 0 ? void 0 : _input$data18$speaker.token;

    if (!itemId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor23, _token$actor23$items;

      return ((_token$actor23 = token.actor) === null || _token$actor23 === void 0 ? void 0 : (_token$actor23$items = _token$actor23.items) === null || _token$actor23$items === void 0 ? void 0 : _token$actor23$items.get(itemId)) != null;
    });
    const item = (_token$actor24 = token.actor) === null || _token$actor24 === void 0 ? void 0 : (_token$actor24$items = _token$actor24.items) === null || _token$actor24$items === void 0 ? void 0 : _token$actor24$items.get(itemId);

    if (!token || !item) {
      return {};
    }

    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async dcc(input) {
    var _input$data19, _input$data19$flags, _input$data19$flags$d, _input$data20, _input$data20$speaker, _token$actor26, _token$actor26$items;

    const itemId = (_input$data19 = input.data) === null || _input$data19 === void 0 ? void 0 : (_input$data19$flags = _input$data19.flags) === null || _input$data19$flags === void 0 ? void 0 : (_input$data19$flags$d = _input$data19$flags.dcc) === null || _input$data19$flags$d === void 0 ? void 0 : _input$data19$flags$d.ItemId;
    const tokenId = (_input$data20 = input.data) === null || _input$data20 === void 0 ? void 0 : (_input$data20$speaker = _input$data20.speaker) === null || _input$data20$speaker === void 0 ? void 0 : _input$data20$speaker.token;

    if (!itemId) {
      return {};
    }

    const token = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
      var _token$actor25, _token$actor25$items;

      return ((_token$actor25 = token.actor) === null || _token$actor25 === void 0 ? void 0 : (_token$actor25$items = _token$actor25.items) === null || _token$actor25$items === void 0 ? void 0 : _token$actor25$items.get(itemId)) != null;
    });
    const item = (_token$actor26 = token.actor) === null || _token$actor26 === void 0 ? void 0 : (_token$actor26$items = _token$actor26.items) === null || _token$actor26$items === void 0 ? void 0 : _token$actor26$items.get(itemId);

    if (!token || !item) {
      return {};
    }

    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static async alienrpg(input) {
    var _input$data21, _token$actor28, _token$actor28$items;

    const inputAtr = this._extractItemId((_input$data21 = input.data) === null || _input$data21 === void 0 ? void 0 : _input$data21.content);

    let itemId = inputAtr; //const tokenId = input.data?.speaker?.token;

    if (!itemId) {
      return {};
    }

    const token = canvas.tokens.placeables.find(token => {
      var _token$actor27, _token$actor27$items;

      return ((_token$actor27 = token.actor) === null || _token$actor27 === void 0 ? void 0 : (_token$actor27$items = _token$actor27.items) === null || _token$actor27$items === void 0 ? void 0 : _token$actor27$items.get(itemId)) != null;
    });

    if (!token) {
      return {};
    }

    let item = ((_token$actor28 = token.actor) === null || _token$actor28 === void 0 ? void 0 : (_token$actor28$items = _token$actor28.items) === null || _token$actor28$items === void 0 ? void 0 : _token$actor28$items.get(itemId)) || (await fromUuid(`Item.${itemId}`));
    if (!item) return {};
    const targets = Array.from(input.user.targets);
    return {
      item,
      token,
      targets
    };
  }

  static _extractItemId(content) {
    try {
      return $(content).attr("data-item-id");
    } catch (exception) {
      console.log("Autoanimations | Couldn´t extract data-item-id for message :", content);
      return null;
    }
  }

}

const flagMigrations = {
  async handle(item) {
    var _item$data, _item$data$flags;

    let flags = (_item$data = item.data) === null || _item$data === void 0 ? void 0 : (_item$data$flags = _item$data.flags) === null || _item$data$flags === void 0 ? void 0 : _item$data$flags.autoanimations;
    if (!flags) return;
    if (this.upToDate(flags)) return flags;

    if (flags.version && isNaN(flags.version)) {
      console.error("Your A-A Item data may be corrupted. Please log this in the Automated Animations GitHub issues");
      return flags;
    }

    for (let [version, migration] of Object.entries(this.migrations)) {
      let flagVersion = item.data.flags.autoanimations.version;
      if (flagVersion >= Number(version)) continue;
      await migration(item);
    }

    return item.data.flags.autoanimations;
  },

  upToDate(flags) {
    const currentFlagVersion = Object.keys(this.migrations).map(n => Number(n)).reverse()[0];
    return flags.version >= currentFlagVersion;
  },

  migrations: {
    "1": async item => {
      var _item$data2, _item$data2$flags, _oldFlags$killAnim, _oldFlags$animLevel, _oldFlags$override, _oldFlags$targetToken, _oldFlags$sourceToken, _oldFlags$allSounds, _oldFlags$options, _oldFlags$meleeSwitch, _oldFlags$meleeSwitch2, _oldFlags$meleeSwitch3, _oldFlags$uaStrikeTyp, _oldFlags$options2, _oldFlags$options3, _oldFlags$options$sca, _oldFlags$options4, _oldFlags$options$ena, _oldFlags$options5, _oldFlags$options$cus, _oldFlags$options6, _oldFlags$meleeSwitch4, _oldFlags$meleeSwitch5, _oldFlags$meleeSwitch6, _oldFlags$uaStrikeTyp2, _oldFlags$options7, _oldFlags$options8, _oldFlags$options$sca2, _oldFlags$options9, _oldFlags$options$ena2, _oldFlags$options10, _oldFlags$options$cus2, _oldFlags$options11, _oldFlags$options12, _oldFlags$options13, _oldFlags$options14, _oldFlags$options15, _oldFlags$options$sca3, _oldFlags$options16, _oldFlags$options$ena3, _oldFlags$options17, _oldFlags$options$cus3, _oldFlags$options18, _oldFlags$spellVar, _oldFlags$options19, _oldFlags$options20, _oldFlags$spellVar2, _oldFlags$options21, _oldFlags$options22, _oldFlags$options$sca4, _oldFlags$options23, _oldFlags$options$ena4, _oldFlags$options24, _oldFlags$options$cus4, _oldFlags$options25, _oldFlags$templates, _oldFlags$templates2, _oldFlags$templates$r, _oldFlags$templates3, _oldFlags$templates$c, _oldFlags$templates4, _oldFlags$templates$c2, _oldFlags$templates5, _oldFlags$templates$p, _oldFlags$templates6, _oldFlags$templates7, _oldFlags$templates8, _oldFlags$templates$o, _oldFlags$templates9, _oldFlags$templates$o2, _oldFlags$templates10, _oldFlags$templates$o3, _oldFlags$templates11, _oldFlags$templates$o4, _oldFlags$templates12, _oldFlags$templates13, _oldFlags$templates14, _oldFlags$options$var, _oldFlags$options26, _oldFlags$options$sca5, _oldFlags$options27, _oldFlags$options$ena5, _oldFlags$options28, _oldFlags$options$cus5, _oldFlags$options29, _oldFlags$options$ena6, _oldFlags$options30, _oldFlags$options$cus6, _oldFlags$options31, _oldFlags$selfRadius, _oldFlags$auraOpacity, _oldFlags$ignoreTarge, _oldFlags$teleDist, _oldFlags$options$sca6, _oldFlags$options32, _oldFlags$options$hid, _oldFlags$options33, _oldFlags$options$ena7, _oldFlags$options34, _oldFlags$options$cus7, _oldFlags$options35, _oldFlags$spellVar3, _oldFlags$shieldVar, _oldFlags$ctaOption, _oldFlags$options$add;

      const oldFlags = (_item$data2 = item.data) === null || _item$data2 === void 0 ? void 0 : (_item$data2$flags = _item$data2.flags) === null || _item$data2$flags === void 0 ? void 0 : _item$data2$flags.autoanimations;
      const type = oldFlags.animType;
      const data = {
        killAnim: (_oldFlags$killAnim = oldFlags.killAnim) !== null && _oldFlags$killAnim !== void 0 ? _oldFlags$killAnim : false,
        below: (_oldFlags$animLevel = oldFlags.animLevel) !== null && _oldFlags$animLevel !== void 0 ? _oldFlags$animLevel : false,
        override: (_oldFlags$override = oldFlags.override) !== null && _oldFlags$override !== void 0 ? _oldFlags$override : false,
        //animType: 'function here',
        //animation: 'animation function here',
        //color: 'color funciton here',
        //'options.repeat': type === 't8' ? oldFlags.templates?.tempLoop || 1 : oldFlags.options?.loops || 1,
        //'options.delay': type === 't8' ? oldFlags.templates?.loopDelay || 250 : oldFlags.options?.loopDelay || 250,
        //'options.scale': oldFlags.options?.scale ?? 1,
        //enableCustom: 'function here',
        //customPath: 'function here',
        targetToken: (_oldFlags$targetToken = oldFlags.targetToken) !== null && _oldFlags$targetToken !== void 0 && _oldFlags$targetToken.enable ? oldFlags.targetToken : {
          enable: false
        },
        sourceToken: (_oldFlags$sourceToken = oldFlags.sourceToken) !== null && _oldFlags$sourceToken !== void 0 && _oldFlags$sourceToken.enable ? oldFlags.sourceToken : {
          enable: false
        },
        allSounds: (_oldFlags$allSounds = oldFlags.allSounds) !== null && _oldFlags$allSounds !== void 0 ? _oldFlags$allSounds : {},
        autoOverride: (_oldFlags$options = oldFlags.options) !== null && _oldFlags$options !== void 0 && _oldFlags$options.overrideAuto ? await overrideAuto() : {
          enable: false
        },
        version: 1
      };

      if (oldFlags.override) {
        switch (type) {
          case "t2":
            data.animType = 'melee';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.meleeSwitch = ((_oldFlags$meleeSwitch = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch === void 0 ? void 0 : _oldFlags$meleeSwitch.switchType) === "custom" ? await rangeSwitch() : {
              switchType: (_oldFlags$meleeSwitch2 = (_oldFlags$meleeSwitch3 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch3 === void 0 ? void 0 : _oldFlags$meleeSwitch3.switchType) !== null && _oldFlags$meleeSwitch2 !== void 0 ? _oldFlags$meleeSwitch2 : 'on'
            };
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              meleeType: "weapon",
              variant: (_oldFlags$uaStrikeTyp = oldFlags.uaStrikeType) !== null && _oldFlags$uaStrikeTyp !== void 0 ? _oldFlags$uaStrikeTyp : "01",
              repeat: ((_oldFlags$options2 = oldFlags.options) === null || _oldFlags$options2 === void 0 ? void 0 : _oldFlags$options2.loops) || 1,
              delay: ((_oldFlags$options3 = oldFlags.options) === null || _oldFlags$options3 === void 0 ? void 0 : _oldFlags$options3.loopDelay) || 250,
              scale: (_oldFlags$options$sca = (_oldFlags$options4 = oldFlags.options) === null || _oldFlags$options4 === void 0 ? void 0 : _oldFlags$options4.scale) !== null && _oldFlags$options$sca !== void 0 ? _oldFlags$options$sca : 1,
              enableCustom: (_oldFlags$options$ena = (_oldFlags$options5 = oldFlags.options) === null || _oldFlags$options5 === void 0 ? void 0 : _oldFlags$options5.enableCustom01) !== null && _oldFlags$options$ena !== void 0 ? _oldFlags$options$ena : false,
              customPath: (_oldFlags$options$cus = (_oldFlags$options6 = oldFlags.options) === null || _oldFlags$options6 === void 0 ? void 0 : _oldFlags$options6.customPath01) !== null && _oldFlags$options$cus !== void 0 ? _oldFlags$options$cus : ""
            };
            break;

          case "t3":
            let genericList = ['flurryofblows', 'unarmedstrike'];
            data.animation = replaceName(oldFlags.animName);
            data.animType = "melee";
            data.color = replaceName(oldFlags.color);
            data.meleeSwitch = ((_oldFlags$meleeSwitch4 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch4 === void 0 ? void 0 : _oldFlags$meleeSwitch4.switchType) === "custom" ? await rangeSwitch() : {
              switchType: (_oldFlags$meleeSwitch5 = (_oldFlags$meleeSwitch6 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch6 === void 0 ? void 0 : _oldFlags$meleeSwitch6.switchType) !== null && _oldFlags$meleeSwitch5 !== void 0 ? _oldFlags$meleeSwitch5 : 'on'
            };
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              meleeType: genericList.includes(data.animation) ? "weapon" : "generic",
              variant: (_oldFlags$uaStrikeTyp2 = oldFlags.uaStrikeType) !== null && _oldFlags$uaStrikeTyp2 !== void 0 ? _oldFlags$uaStrikeTyp2 : "01",
              repeat: ((_oldFlags$options7 = oldFlags.options) === null || _oldFlags$options7 === void 0 ? void 0 : _oldFlags$options7.loops) || 1,
              delay: ((_oldFlags$options8 = oldFlags.options) === null || _oldFlags$options8 === void 0 ? void 0 : _oldFlags$options8.loopDelay) || 250,
              scale: (_oldFlags$options$sca2 = (_oldFlags$options9 = oldFlags.options) === null || _oldFlags$options9 === void 0 ? void 0 : _oldFlags$options9.scale) !== null && _oldFlags$options$sca2 !== void 0 ? _oldFlags$options$sca2 : 1,
              enableCustom: (_oldFlags$options$ena2 = (_oldFlags$options10 = oldFlags.options) === null || _oldFlags$options10 === void 0 ? void 0 : _oldFlags$options10.enableCustom01) !== null && _oldFlags$options$ena2 !== void 0 ? _oldFlags$options$ena2 : false,
              customPath: (_oldFlags$options$cus2 = (_oldFlags$options11 = oldFlags.options) === null || _oldFlags$options11 === void 0 ? void 0 : _oldFlags$options11.customPath01) !== null && _oldFlags$options$cus2 !== void 0 ? _oldFlags$options$cus2 : ""
            };
            break;

          case "t4":
            data.animType = 'range';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              rangeType: 'weapon',
              variant: t4VariantSwitch(replaceName(oldFlags.animName)),
              repeat: ((_oldFlags$options12 = oldFlags.options) === null || _oldFlags$options12 === void 0 ? void 0 : _oldFlags$options12.loops) || 1,
              delay: ((_oldFlags$options13 = oldFlags.options) === null || _oldFlags$options13 === void 0 ? void 0 : _oldFlags$options13.loopDelay) || 250
            };

            function t4VariantSwitch(name) {
              var _oldFlags$rangedOptio, _oldFlags$rangedOptio2, _oldFlags$dtvar;

              switch (name) {
                case 'bolt':
                case 'bullet':
                case 'arrow':
                  return (_oldFlags$rangedOptio = (_oldFlags$rangedOptio2 = oldFlags.rangedOptions) === null || _oldFlags$rangedOptio2 === void 0 ? void 0 : _oldFlags$rangedOptio2.rangeDmgType) !== null && _oldFlags$rangedOptio !== void 0 ? _oldFlags$rangedOptio : "01";

                case 'lasersword':
                case 'dagger':
                case 'handaxe':
                case 'chakram':
                  return (_oldFlags$dtvar = oldFlags.dtvar) !== null && _oldFlags$dtvar !== void 0 ? _oldFlags$dtvar : "01";

                default:
                  return "01";
              }
            }

            break;

          case "t5":
            data.animType = 'static';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              staticType: 'target',
              staticOptions: 'creature',
              variant: "01",
              repeat: ((_oldFlags$options14 = oldFlags.options) === null || _oldFlags$options14 === void 0 ? void 0 : _oldFlags$options14.loops) || 1,
              delay: ((_oldFlags$options15 = oldFlags.options) === null || _oldFlags$options15 === void 0 ? void 0 : _oldFlags$options15.loopDelay) || 250,
              scale: (_oldFlags$options$sca3 = (_oldFlags$options16 = oldFlags.options) === null || _oldFlags$options16 === void 0 ? void 0 : _oldFlags$options16.scale) !== null && _oldFlags$options$sca3 !== void 0 ? _oldFlags$options$sca3 : 1,
              enableCustom: (_oldFlags$options$ena3 = (_oldFlags$options17 = oldFlags.options) === null || _oldFlags$options17 === void 0 ? void 0 : _oldFlags$options17.enableCustom01) !== null && _oldFlags$options$ena3 !== void 0 ? _oldFlags$options$ena3 : false,
              customPath: (_oldFlags$options$cus3 = (_oldFlags$options18 = oldFlags.options) === null || _oldFlags$options18 === void 0 ? void 0 : _oldFlags$options18.customPath01) !== null && _oldFlags$options$cus3 !== void 0 ? _oldFlags$options$cus3 : ""
            };
            break;

          case "t6":
            data.animType = 'range';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              rangeType: 'spell',
              variant: (_oldFlags$spellVar = oldFlags.spellVar) !== null && _oldFlags$spellVar !== void 0 ? _oldFlags$spellVar : "01",
              repeat: ((_oldFlags$options19 = oldFlags.options) === null || _oldFlags$options19 === void 0 ? void 0 : _oldFlags$options19.loops) || 1,
              delay: ((_oldFlags$options20 = oldFlags.options) === null || _oldFlags$options20 === void 0 ? void 0 : _oldFlags$options20.loopDelay) || 250
            };
            break;

          case "t7":
            data.animType = 'static';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.explosions = oldFlags.explosion ? await explosions() : {
              enable: false
            };
            data.options = {
              staticType: "targetDefault",
              staticOptions: 'staticSpells',
              variant: (_oldFlags$spellVar2 = oldFlags.spellVar) !== null && _oldFlags$spellVar2 !== void 0 ? _oldFlags$spellVar2 : "01",
              repeat: ((_oldFlags$options21 = oldFlags.options) === null || _oldFlags$options21 === void 0 ? void 0 : _oldFlags$options21.loops) || 1,
              delay: ((_oldFlags$options22 = oldFlags.options) === null || _oldFlags$options22 === void 0 ? void 0 : _oldFlags$options22.loopDelay) || 250,
              scale: (_oldFlags$options$sca4 = (_oldFlags$options23 = oldFlags.options) === null || _oldFlags$options23 === void 0 ? void 0 : _oldFlags$options23.scale) !== null && _oldFlags$options$sca4 !== void 0 ? _oldFlags$options$sca4 : 1,
              enableCustom: (_oldFlags$options$ena4 = (_oldFlags$options24 = oldFlags.options) === null || _oldFlags$options24 === void 0 ? void 0 : _oldFlags$options24.enableCustom01) !== null && _oldFlags$options$ena4 !== void 0 ? _oldFlags$options$ena4 : false,
              customPath: (_oldFlags$options$cus4 = (_oldFlags$options25 = oldFlags.options) === null || _oldFlags$options25 === void 0 ? void 0 : _oldFlags$options25.customPath01) !== null && _oldFlags$options$cus4 !== void 0 ? _oldFlags$options$cus4 : ""
            };
            break;

          case "t8":
            const tempAnimVar = await templateAnimation();
            data.animType = 'template';
            data.animation = tempAnimVar.name;
            data.color = replaceName((_oldFlags$templates = oldFlags.templates) === null || _oldFlags$templates === void 0 ? void 0 : _oldFlags$templates.tempColor);
            data.options = {
              tempType: (_oldFlags$templates2 = oldFlags.templates) === null || _oldFlags$templates2 === void 0 ? void 0 : _oldFlags$templates2.tempType,
              variant: tempAnimVar.variant,
              removeTemplate: (_oldFlags$templates$r = (_oldFlags$templates3 = oldFlags.templates) === null || _oldFlags$templates3 === void 0 ? void 0 : _oldFlags$templates3.removeTemplate) !== null && _oldFlags$templates$r !== void 0 ? _oldFlags$templates$r : false,
              enableCustom: (_oldFlags$templates$c = (_oldFlags$templates4 = oldFlags.templates) === null || _oldFlags$templates4 === void 0 ? void 0 : _oldFlags$templates4.customAnim) !== null && _oldFlags$templates$c !== void 0 ? _oldFlags$templates$c : false,
              customPath: (_oldFlags$templates$c2 = (_oldFlags$templates5 = oldFlags.templates) === null || _oldFlags$templates5 === void 0 ? void 0 : _oldFlags$templates5.customPath) !== null && _oldFlags$templates$c2 !== void 0 ? _oldFlags$templates$c2 : "",
              persistent: (_oldFlags$templates$p = (_oldFlags$templates6 = oldFlags.templates) === null || _oldFlags$templates6 === void 0 ? void 0 : _oldFlags$templates6.persistent) !== null && _oldFlags$templates$p !== void 0 ? _oldFlags$templates$p : false,
              persistType: (_oldFlags$templates7 = oldFlags.templates) !== null && _oldFlags$templates7 !== void 0 && _oldFlags$templates7.persistent && (_oldFlags$templates8 = oldFlags.templates) !== null && _oldFlags$templates8 !== void 0 && _oldFlags$templates8.overhead ? 'overheadtile' : 'sequencerground',
              opacity: (_oldFlags$templates$o = (_oldFlags$templates9 = oldFlags.templates) === null || _oldFlags$templates9 === void 0 ? void 0 : _oldFlags$templates9.opacity) !== null && _oldFlags$templates$o !== void 0 ? _oldFlags$templates$o : 0.75,
              overhead: (_oldFlags$templates$o2 = (_oldFlags$templates10 = oldFlags.templates) === null || _oldFlags$templates10 === void 0 ? void 0 : _oldFlags$templates10.overhead) !== null && _oldFlags$templates$o2 !== void 0 ? _oldFlags$templates$o2 : false,
              occlusionMode: (_oldFlags$templates$o3 = (_oldFlags$templates11 = oldFlags.templates) === null || _oldFlags$templates11 === void 0 ? void 0 : _oldFlags$templates11.occlusionMode) !== null && _oldFlags$templates$o3 !== void 0 ? _oldFlags$templates$o3 : "03",
              occlusionAlpha: (_oldFlags$templates$o4 = (_oldFlags$templates12 = oldFlags.templates) === null || _oldFlags$templates12 === void 0 ? void 0 : _oldFlags$templates12.occlusionAlpha) !== null && _oldFlags$templates$o4 !== void 0 ? _oldFlags$templates$o4 : 0.75,
              repeat: ((_oldFlags$templates13 = oldFlags.templates) === null || _oldFlags$templates13 === void 0 ? void 0 : _oldFlags$templates13.tempLoop) || 1,
              delay: ((_oldFlags$templates14 = oldFlags.templates) === null || _oldFlags$templates14 === void 0 ? void 0 : _oldFlags$templates14.loopDelay) || 250
            };
            break;

          case "t9":
          case "t10":
            data.animType = 'static';
            data.animation = replaceName(oldFlags.explodeVariant);
            data.color = replaceName(oldFlags.explodeColor);
            data.explosions = {
              enable: false
            };
            data.options = {
              staticType: type === 't9' ? 'target' : 'source',
              staticOptions: 'explosion',
              variant: (_oldFlags$options$var = (_oldFlags$options26 = oldFlags.options) === null || _oldFlags$options26 === void 0 ? void 0 : _oldFlags$options26.variant) !== null && _oldFlags$options$var !== void 0 ? _oldFlags$options$var : "01",
              repeat: oldFlags.explodeLoop || 1,
              delay: oldFlags.explodeDelay || 250,
              scale: (_oldFlags$options$sca5 = (_oldFlags$options27 = oldFlags.options) === null || _oldFlags$options27 === void 0 ? void 0 : _oldFlags$options27.scale) !== null && _oldFlags$options$sca5 !== void 0 ? _oldFlags$options$sca5 : 1,
              enableCustom: (_oldFlags$options$ena5 = (_oldFlags$options28 = oldFlags.options) === null || _oldFlags$options28 === void 0 ? void 0 : _oldFlags$options28.enableCustomExplosion) !== null && _oldFlags$options$ena5 !== void 0 ? _oldFlags$options$ena5 : false,
              customPath: (_oldFlags$options$cus5 = (_oldFlags$options29 = oldFlags.options) === null || _oldFlags$options29 === void 0 ? void 0 : _oldFlags$options29.customExplosion) !== null && _oldFlags$options$cus5 !== void 0 ? _oldFlags$options$cus5 : ""
            };
            break;

          case "t11":
            data.animType = 'aura';
            data.animation = replaceName(oldFlags.animName);
            data.color = replaceName(oldFlags.color);
            data.options = {
              variant: "01",
              enableCustom: (_oldFlags$options$ena6 = (_oldFlags$options30 = oldFlags.options) === null || _oldFlags$options30 === void 0 ? void 0 : _oldFlags$options30.enableCustom01) !== null && _oldFlags$options$ena6 !== void 0 ? _oldFlags$options$ena6 : false,
              customPath: (_oldFlags$options$cus6 = (_oldFlags$options31 = oldFlags.options) === null || _oldFlags$options31 === void 0 ? void 0 : _oldFlags$options31.customPath01) !== null && _oldFlags$options$cus6 !== void 0 ? _oldFlags$options$cus6 : "",
              auraRadius: (_oldFlags$selfRadius = oldFlags.selfRadius) !== null && _oldFlags$selfRadius !== void 0 ? _oldFlags$selfRadius : 3.5,
              opacity: (_oldFlags$auraOpacity = oldFlags.auraOpacity) !== null && _oldFlags$auraOpacity !== void 0 ? _oldFlags$auraOpacity : 0.75,
              ignoreTarget: (_oldFlags$ignoreTarge = oldFlags.ignoreTarget) !== null && _oldFlags$ignoreTarge !== void 0 ? _oldFlags$ignoreTarge : false
            };
            break;

          case "t12":
            data.animType = 'preset';
            data.animation = "teleportation";
            data.color = replaceName(oldFlags.color);
            data.options = {
              name: replaceName(oldFlags.animName),
              variant: "01",
              teleDist: (_oldFlags$teleDist = oldFlags.teleDist) !== null && _oldFlags$teleDist !== void 0 ? _oldFlags$teleDist : 30,
              scale: (_oldFlags$options$sca6 = (_oldFlags$options32 = oldFlags.options) === null || _oldFlags$options32 === void 0 ? void 0 : _oldFlags$options32.scale) !== null && _oldFlags$options$sca6 !== void 0 ? _oldFlags$options$sca6 : 1,
              hideTemplate: (_oldFlags$options$hid = (_oldFlags$options33 = oldFlags.options) === null || _oldFlags$options33 === void 0 ? void 0 : _oldFlags$options33.hideTemplate) !== null && _oldFlags$options$hid !== void 0 ? _oldFlags$options$hid : false,
              enableCustom: (_oldFlags$options$ena7 = (_oldFlags$options34 = oldFlags.options) === null || _oldFlags$options34 === void 0 ? void 0 : _oldFlags$options34.enableCustom01) !== null && _oldFlags$options$ena7 !== void 0 ? _oldFlags$options$ena7 : false,
              customPath: (_oldFlags$options$cus7 = (_oldFlags$options35 = oldFlags.options) === null || _oldFlags$options35 === void 0 ? void 0 : _oldFlags$options35.customPath01) !== null && _oldFlags$options$cus7 !== void 0 ? _oldFlags$options$cus7 : ""
            };
            break;

          case "t13":
            const presetName = replaceName(oldFlags.animName);
            data.animType = 'preset';
            data.animation = presetName;
            data.color = replaceName(oldFlags.color);

            switch (presetName) {
              case 'shieldspell':
                data.options = {
                  variant: (_oldFlags$spellVar3 = oldFlags.spellVar) !== null && _oldFlags$spellVar3 !== void 0 ? _oldFlags$spellVar3 : "01",
                  shieldVar: (_oldFlags$shieldVar = oldFlags.shieldVar) !== null && _oldFlags$shieldVar !== void 0 ? _oldFlags$shieldVar : 'outro_explode'
                };
                break;

              case 'bardicinspiration':
                data.bards = oldFlags.bards;
                break;

              case 'huntersmark':
                data.options = {
                  variant: replaceName(oldFlags.hmAnim),
                  persistent: (_oldFlags$ctaOption = oldFlags.ctaOption) !== null && _oldFlags$ctaOption !== void 0 ? _oldFlags$ctaOption : false
                };
                break;

              case 'sneakattack':
                data.options = {
                  variant: "01"
                };
                break;

              case 'bless':
                data.options = {
                  variant: "01",
                  persistent: (_oldFlags$options$add = oldFlags.options.addCTA) !== null && _oldFlags$options$add !== void 0 ? _oldFlags$options$add : false
                };
                break;
            }

            break;
        }
      }

      async function overrideAuto() {
        var _oldFlags$options36, _auto$autoVariant, _auto$autoColor, _auto$autoRepeat, _auto$endEffect, _auto$autoDelay, _auto$autoScale, _auto$autoFireball;

        const auto = (_oldFlags$options36 = oldFlags.options) !== null && _oldFlags$options36 !== void 0 ? _oldFlags$options36 : {};
        const data = {
          enable: true,
          variant: (_auto$autoVariant = auto.autoVariant) !== null && _auto$autoVariant !== void 0 ? _auto$autoVariant : "01",
          color: (_auto$autoColor = auto.autoColor) !== null && _auto$autoColor !== void 0 ? _auto$autoColor : "",
          repeat: (_auto$autoRepeat = auto.autoRepeat) !== null && _auto$autoRepeat !== void 0 ? _auto$autoRepeat : 1,
          endEffect: (_auto$endEffect = auto.endEffect) !== null && _auto$endEffect !== void 0 ? _auto$endEffect : "outro_explode",
          delay: (_auto$autoDelay = auto.autoDelay) !== null && _auto$autoDelay !== void 0 ? _auto$autoDelay : 250,
          scale: (_auto$autoScale = auto.autoScale) !== null && _auto$autoScale !== void 0 ? _auto$autoScale : 1,
          fireball: (_auto$autoFireball = auto.autoFireball) !== null && _auto$autoFireball !== void 0 ? _auto$autoFireball : {}
        };
        return data;
      }
      /*
      if (oldFlags.options?.overrideAuto) {
          const auto = oldFlags.options ?? {};
          data.autoOverride = {
              enable: true,
              variant: auto.autoVariant ?? "01",
              color: auto.autoColor ?? "",
              repeat: auto.autoRepeat ?? 1,
              delay: auto.autoDelay ?? 250,
              scale: auto.autoScale ?? 1,
              fireball: auto.autoFireball ?? {},
          }
      }
      */


      async function explosions() {
        var _oldFlags$exAnimLevel, _oldFlags$explodeRadi, _oldFlags$explodeDela, _replaceName, _oldFlags$options$ena8, _oldFlags$options37, _oldFlags$options$cus8, _oldFlags$options38;

        //if (!oldFlags.explosion) { return; }
        const explosion = {
          enable: true,
          below: (_oldFlags$exAnimLevel = oldFlags.exAnimLevel) !== null && _oldFlags$exAnimLevel !== void 0 ? _oldFlags$exAnimLevel : false,
          radius: (_oldFlags$explodeRadi = oldFlags.explodeRadius) !== null && _oldFlags$explodeRadi !== void 0 ? _oldFlags$explodeRadi : 2,
          delay: (_oldFlags$explodeDela = oldFlags.explodeDelay) !== null && _oldFlags$explodeDela !== void 0 ? _oldFlags$explodeDela : 500,
          animation: (_replaceName = replaceName(oldFlags.explodeVariant)) !== null && _replaceName !== void 0 ? _replaceName : "",
          variant: "01",
          color: replaceName(oldFlags.explodeColor),
          enableCustom: (_oldFlags$options$ena8 = (_oldFlags$options37 = oldFlags.options) === null || _oldFlags$options37 === void 0 ? void 0 : _oldFlags$options37.enableCustomExplosion) !== null && _oldFlags$options$ena8 !== void 0 ? _oldFlags$options$ena8 : false,
          customPath: (_oldFlags$options$cus8 = (_oldFlags$options38 = oldFlags.options) === null || _oldFlags$options38 === void 0 ? void 0 : _oldFlags$options38.customExplosion) !== null && _oldFlags$options$cus8 !== void 0 ? _oldFlags$options$cus8 : ""
        };
        return explosion;
      }

      async function rangeSwitch() {
        var _oldFlags$meleeSwitch7, _oldFlags$meleeSwitch8, _oldFlags$meleeSwitch9, _oldFlags$meleeSwitch10, _oldFlags$meleeSwitch11, _oldFlags$meleeSwitch12, _oldFlags$meleeSwitch13, _oldFlags$meleeSwitch14, _oldFlags$meleeSwitch15, _oldFlags$meleeSwitch16, _oldFlags$meleeSwitch17;

        const data = {
          animation: (_oldFlags$meleeSwitch7 = (_oldFlags$meleeSwitch8 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch8 === void 0 ? void 0 : _oldFlags$meleeSwitch8.animName) !== null && _oldFlags$meleeSwitch7 !== void 0 ? _oldFlags$meleeSwitch7 : "",
          variant: switchVariants(replaceName(oldFlags.animName)),
          switchType: "custom",
          color: (_oldFlags$meleeSwitch9 = (_oldFlags$meleeSwitch10 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch10 === void 0 ? void 0 : _oldFlags$meleeSwitch10.color) !== null && _oldFlags$meleeSwitch9 !== void 0 ? _oldFlags$meleeSwitch9 : "white",
          detect: (_oldFlags$meleeSwitch11 = (_oldFlags$meleeSwitch12 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch12 === void 0 ? void 0 : _oldFlags$meleeSwitch12.detect) !== null && _oldFlags$meleeSwitch11 !== void 0 ? _oldFlags$meleeSwitch11 : "auto",
          range: ((_oldFlags$meleeSwitch13 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch13 === void 0 ? void 0 : _oldFlags$meleeSwitch13.detect) === 'custom' ? (_oldFlags$meleeSwitch14 = (_oldFlags$meleeSwitch15 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch15 === void 0 ? void 0 : _oldFlags$meleeSwitch15.range) !== null && _oldFlags$meleeSwitch14 !== void 0 ? _oldFlags$meleeSwitch14 : 2 : 2,
          returning: (_oldFlags$meleeSwitch16 = (_oldFlags$meleeSwitch17 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch17 === void 0 ? void 0 : _oldFlags$meleeSwitch17.returning) !== null && _oldFlags$meleeSwitch16 !== void 0 ? _oldFlags$meleeSwitch16 : false
        };

        function switchVariants(name) {
          var _oldFlags$meleeSwitch18, _oldFlags$meleeSwitch19, _oldFlags$meleeSwitch20, _oldFlags$meleeSwitch21;

          switch (name) {
            case 'bolt':
            case 'bullet':
            case 'arrow':
              return (_oldFlags$meleeSwitch18 = (_oldFlags$meleeSwitch19 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch19 === void 0 ? void 0 : _oldFlags$meleeSwitch19.rangeDmgType) !== null && _oldFlags$meleeSwitch18 !== void 0 ? _oldFlags$meleeSwitch18 : "01";

            case 'lasersword':
            case 'dagger':
            case 'handaxe':
              return (_oldFlags$meleeSwitch20 = (_oldFlags$meleeSwitch21 = oldFlags.meleeSwitch) === null || _oldFlags$meleeSwitch21 === void 0 ? void 0 : _oldFlags$meleeSwitch21.rangeVar) !== null && _oldFlags$meleeSwitch20 !== void 0 ? _oldFlags$meleeSwitch20 : "01";

            default:
              return "01";
          }
        }

        return data;
      }

      async function templateAnimation() {
        var _oldFlags$templates15, _oldFlags$templates16, _oldFlags$templates17, _oldFlags$templates18, _oldFlags$templates19, _oldFlags$templates20, _oldFlags$templates21;

        switch ((_oldFlags$templates15 = oldFlags.templates) === null || _oldFlags$templates15 === void 0 ? void 0 : _oldFlags$templates15.tempType) {
          case 'cone':
            switch ((_oldFlags$templates16 = oldFlags.templates) === null || _oldFlags$templates16 === void 0 ? void 0 : _oldFlags$templates16.tempAnim) {
              case 'coneofcold':
                return {
                  name: 'coneofcold',
                  variant: "01"
                };

              case 'burninghands01':
                return {
                  name: 'burninghands',
                  variant: '01'
                };

              case 'burninghands02':
                return {
                  name: 'burninghands',
                  variant: '02'
                };

              default:
                return {
                  name: 'breathweaponcone',
                  variant: (_oldFlags$templates17 = oldFlags.templates) === null || _oldFlags$templates17 === void 0 ? void 0 : _oldFlags$templates17.tempAnim
                };
            }

          case 'ray':
            switch ((_oldFlags$templates18 = oldFlags.templates) === null || _oldFlags$templates18 === void 0 ? void 0 : _oldFlags$templates18.tempAnim) {
              case 'lightningbolt01':
                return {
                  name: 'lightningbolt',
                  variant: '01'
                };

              case 'lightningbolt02':
                return {
                  name: 'lightningbolt',
                  variant: '02'
                };

              default:
                return {
                  name: 'breathweaponline',
                  variant: (_oldFlags$templates19 = oldFlags.templates) === null || _oldFlags$templates19 === void 0 ? void 0 : _oldFlags$templates19.tempAnim
                };
            }

          case "circle":
            switch ((_oldFlags$templates20 = oldFlags.templates) === null || _oldFlags$templates20 === void 0 ? void 0 : _oldFlags$templates20.tempAnim) {
              case 'snowflake':
                return {
                  name: 'snowflake',
                  variant: '01'
                };

              case 'outpulse01':
                return {
                  name: 'outpulse01',
                  variant: '01'
                };

              case 'outpulse02':
                return {
                  name: 'outpulse02',
                  variant: '01'
                };

              case 'shatter':
                return {
                  name: 'shatter',
                  variant: '01'
                };

              case 'fogcloud':
                return {
                  name: 'fogcloud',
                  variant: '01'
                };

              case 'darkness':
                return {
                  name: 'darkness',
                  variant: '01'
                };

              case 'calllightning':
                return {
                  name: 'calllightning',
                  variant: '01'
                };

              case 'sleetstorm':
                return {
                  name: 'sleetstorm',
                  variant: '01'
                };

              case 'cloudofdaggers':
                return {
                  name: 'cloudofdaggers',
                  variant: '01'
                };

              case 'cloudofkunais':
                return {
                  name: 'cloudofdaggers',
                  variant: '02'
                };

              default:
                return {
                  name: 'explosion',
                  variant: '01'
                };
            }

          case 'rect':
            switch ((_oldFlags$templates21 = oldFlags.templates) === null || _oldFlags$templates21 === void 0 ? void 0 : _oldFlags$templates21.tempAnim) {
              case 'entangle':
                return {
                  name: 'entangle',
                  variant: '01'
                };

              case 'thunderwave':
                return {
                  name: 'thunderwave',
                  variant: '01'
                };

              default:
                return {
                  name: 'web',
                  variant: '01'
                };
            }

          default:
            return {};
        }
      }

      function replaceName(name) {
        if (!name) {
          return "";
        }

        const newName = name.replace(/\s+/g, '').toLowerCase();
        return newName;
      }

      await item.update({
        'flags.-=autoanimations': null
      });
      await item.update({
        'flags.autoanimations': data
      });
      return data;
    },
    "2": async item => {
      var _item$data3, _item$data3$flags, _allSounds$item$enabl, _allSounds$item, _allSounds$item$file, _allSounds$item2, _allSounds$item$delay, _allSounds$item3, _allSounds$item$volum, _allSounds$item4, _allSounds$explosion, _allSounds$explosion$, _allSounds$explosion2, _allSounds$explosion$2, _allSounds$explosion3, _allSounds$explosion$3, _allSounds$explosion4;

      /**
       * allSounds.item.enableAudio --------------> audio.a01.enable
       * allSounds.item.file ---------------------> audio.a01.file
       * allSounds.item.delay --------------------> audio.a01.delay
       * allSounds.item.volume -------------------> audio.a01.volume
       * 
       * allSounds.explosion.audioExplodeEnabled -> audio.e01.enable
       * allSounds.explosion.file ----------------> audio.e01.file
       * allSounds.explosion.delay ---------------> audio.e01.delay
       * allSounds.explosion.volume --------------> audio.e01.volume
       * 
       */
      const v2Flags = ((_item$data3 = item.data) === null || _item$data3 === void 0 ? void 0 : (_item$data3$flags = _item$data3.flags) === null || _item$data3$flags === void 0 ? void 0 : _item$data3$flags.autoanimations) || {};
      const allSounds = v2Flags.allSounds || {};
      v2Flags.audio = {
        a01: {
          enable: (_allSounds$item$enabl = (_allSounds$item = allSounds.item) === null || _allSounds$item === void 0 ? void 0 : _allSounds$item.enableAudio) !== null && _allSounds$item$enabl !== void 0 ? _allSounds$item$enabl : false,
          file: (_allSounds$item$file = (_allSounds$item2 = allSounds.item) === null || _allSounds$item2 === void 0 ? void 0 : _allSounds$item2.file) !== null && _allSounds$item$file !== void 0 ? _allSounds$item$file : "",
          delay: (_allSounds$item$delay = (_allSounds$item3 = allSounds.item) === null || _allSounds$item3 === void 0 ? void 0 : _allSounds$item3.delay) !== null && _allSounds$item$delay !== void 0 ? _allSounds$item$delay : 0,
          volume: (_allSounds$item$volum = (_allSounds$item4 = allSounds.item) === null || _allSounds$item4 === void 0 ? void 0 : _allSounds$item4.volume) !== null && _allSounds$item$volum !== void 0 ? _allSounds$item$volum : 0.25
        },
        e01: {
          enable: ((_allSounds$explosion = allSounds.explosion) === null || _allSounds$explosion === void 0 ? void 0 : _allSounds$explosion.audioExplodeEnabled) || false,
          file: (_allSounds$explosion$ = (_allSounds$explosion2 = allSounds.explosion) === null || _allSounds$explosion2 === void 0 ? void 0 : _allSounds$explosion2.file) !== null && _allSounds$explosion$ !== void 0 ? _allSounds$explosion$ : "",
          delay: (_allSounds$explosion$2 = (_allSounds$explosion3 = allSounds.explosion) === null || _allSounds$explosion3 === void 0 ? void 0 : _allSounds$explosion3.delay) !== null && _allSounds$explosion$2 !== void 0 ? _allSounds$explosion$2 : 0,
          volume: (_allSounds$explosion$3 = (_allSounds$explosion4 = allSounds.explosion) === null || _allSounds$explosion4 === void 0 ? void 0 : _allSounds$explosion4.volume) !== null && _allSounds$explosion$3 !== void 0 ? _allSounds$explosion$3 : 0.25
        }
      };
      v2Flags.version = 2;
      await item.update({
        'flags.-=autoanimations': null
      });
      await item.update({
        'flags.autoanimations': v2Flags
      });
      console.warn(`DEBUG | Automated Animations | Version 2 Flag Migration Complete`, v2Flags);
    },
    "3": async item => {
      var _item$data4, _item$data4$flags;

      const v3Flags = ((_item$data4 = item.data) === null || _item$data4 === void 0 ? void 0 : (_item$data4$flags = _item$data4.flags) === null || _item$data4$flags === void 0 ? void 0 : _item$data4$flags.autoanimations) || {};

      if (v3Flags.killAnim) {
        v3Flags.version = 3;
        await item.update({
          'flags.-=autoanimations': null
        });
        await item.update({
          'flags.autoanimations': v3Flags
        });
        return;
      }

      if (v3Flags.override) {
        if (v3Flags.animType === 'template') {
          v3Flags.options.scaleX = v3Flags.options.scale || 1;
          v3Flags.options.scaleY = v3Flags.options.scale || 1;
        }

        if (v3Flags.animType === 'preset') {
          if (v3Flags.animation === 'teleportation') {
            var _v3Flags$options, _v3Flags$options2, _v3Flags$options3, _v3Flags$options4, _v3Flags$options$name, _v3Flags$options5, _v3Flags$options$scal, _v3Flags$options6;

            v3Flags.options.measureType = 'alternating';
            v3Flags.options.hideFromPlayers = ((_v3Flags$options = v3Flags.options) === null || _v3Flags$options === void 0 ? void 0 : _v3Flags$options.hideTemplate) === true ? true : false;
            v3Flags.options.enableCustom02 = (_v3Flags$options2 = v3Flags.options) !== null && _v3Flags$options2 !== void 0 && _v3Flags$options2.enableCustom ? true : false;
            v3Flags.options.customPath02 = (_v3Flags$options3 = v3Flags.options) !== null && _v3Flags$options3 !== void 0 && _v3Flags$options3.enableCustom ? (_v3Flags$options4 = v3Flags.options) === null || _v3Flags$options4 === void 0 ? void 0 : _v3Flags$options4.customPath : "";
            v3Flags.options.name02 = (_v3Flags$options$name = (_v3Flags$options5 = v3Flags.options) === null || _v3Flags$options5 === void 0 ? void 0 : _v3Flags$options5.name) !== null && _v3Flags$options$name !== void 0 ? _v3Flags$options$name : "mistystep";
            v3Flags.options.variant02 = "02";
            v3Flags.color02 = v3Flags.color || "blue";
            v3Flags.options.scale02 = (_v3Flags$options$scal = (_v3Flags$options6 = v3Flags.options) === null || _v3Flags$options6 === void 0 ? void 0 : _v3Flags$options6.scale) !== null && _v3Flags$options$scal !== void 0 ? _v3Flags$options$scal : 1;
          }
        }

        v3Flags.version = 3;
        await item.update({
          'flags.-=autoanimations': null
        });
        await item.update({
          'flags.autoanimations': v3Flags
        });
        console.warn(`DEBUG | Automated Animations | Version 3 Flag Migration Complete`, v3Flags);
      }
    },
    "4": async item => {
      var _item$data5, _item$data5$flags, _v4Flags$sourceToken, _v4Flags$sourceToken2, _v4Flags$explosions, _v4Flags$explosions2, _v4Flags$animation, _v4Flags$explosions3, _fireSettings$explosi, _fireSettings$explosi2;

      const v4Flags = ((_item$data5 = item.data) === null || _item$data5 === void 0 ? void 0 : (_item$data5$flags = _item$data5.flags) === null || _item$data5$flags === void 0 ? void 0 : _item$data5$flags.autoanimations) || {};
      const options = v4Flags.options || {};

      if (v4Flags.killAnim) {
        v4Flags.version = 4;
        await item.update({
          'flags.-=autoanimations': null
        });
        await item.update({
          'flags.autoanimations': v4Flags
        });
        return;
      }

      if ((_v4Flags$sourceToken = v4Flags.sourceToken) !== null && _v4Flags$sourceToken !== void 0 && _v4Flags$sourceToken.enable) {
        await convertExtraFX(v4Flags.sourceToken);
      }

      if ((_v4Flags$sourceToken2 = v4Flags.sourceToken) !== null && _v4Flags$sourceToken2 !== void 0 && _v4Flags$sourceToken2.enable) {
        await convertExtraFX(v4Flags.targetToken);
      }

      if (v4Flags.override) {
        const section = v4Flags.animType;

        switch (section) {
          case 'melee':
            options.menuType = options.meleeType;

            if ((_v4Flags$explosions = v4Flags.explosions) !== null && _v4Flags$explosions !== void 0 && _v4Flags$explosions.enable) {
              await convertExplosion(v4Flags.explosions);
            }

            delete options.meleeType;
            break;

          case 'range':
            const genericRange = ['energyconduitsquare', 'energyconduitcircle', 'energybeam', 'heart', 'iceshard', 'musicnote', 'skull', 'energystrand'];

            if (genericRange.some(el => v4Flags.animation === el)) {
              options.menuType = 'generic';

              if (v4Flags.animation === "energyconduitcircle") {
                v4Flags.animation = 'conduit';
                options.variant = 'circle';
              }

              if (v4Flags.animation === "energyconduitsquare") {
                v4Flags.animation = 'conduit';
                options.variant = 'square';
              }
            } else {
              options.menuType = options.rangeType;
            }

            if ((_v4Flags$explosions2 = v4Flags.explosions) !== null && _v4Flags$explosions2 !== void 0 && _v4Flags$explosions2.enable) {
              await convertExplosion(v4Flags.explosions);
            }

            delete options.rangeType;
            break;

          case 'static':
            const conditions = ['drop', 'fear', 'heart', 'horror', 'light', 'poison', 'runes', 'shields', 'crackedshield', 'skull', 'snowflakes', 'stun', 'dizzystars'];
            const creature = ['bite', 'claw'];
            const energy = ['energyfield', 'dodecahedron', 'shimmer', 'sparkles'];
            const fire = ['eruption', 'groundcrack', 'fireworks'];
            const generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02', 'vortex', 'whirl'];
            const ice = ['icespikes', 'snowflake'];
            const lightning = ['lightningball', 'staticelectricity'];
            const liquid = ['liquidsplash'];
            const magicsign = ['magicSign'];
            const marker = ['marker', 'circleofstars', 'energystrand'];
            const shieldfx = ['energyfieldtop', 'shieldfiretop', 'shieldicetop', 'shieldearthtop', 'shieldeldritchwebtop'];
            const tokenborder = ['staticborder', 'spinningborder'];
            const fireball = ['fireballexplode'];

            switch (true) {
              case conditions.some(el => v4Flags.animation === el):
                options.menuType = 'conditions';
                break;

              case creature.some(el => v4Flags.animation === el):
                options.menuType = 'creature';
                break;

              case energy.some(el => v4Flags.animation === el):
                options.menuType = 'energy';
                break;

              case fire.some(el => v4Flags.animation === el):
                options.menuType = 'fire';
                break;

              case generic.some(el => v4Flags.animation === el):
                options.menuType = 'generic';

                if ((_v4Flags$animation = v4Flags.animation) !== null && _v4Flags$animation !== void 0 && _v4Flags$animation.includes('outpulse')) {
                  options.variant = v4Flags.animation === 'outpulse02' ? '02' : '01';
                  v4Flags.animation = 'outpulse';
                }

                break;

              case ice.some(el => v4Flags.animation === el):
                options.menuType = 'ice';
                break;

              case lightning.some(el => v4Flags.animation === el):
                options.menuType = 'lightning';
                break;

              case liquid.some(el => v4Flags.animation === el):
                options.menuType = 'liquid';
                v4Flags.animation = 'splash';
                break;

              case magicsign.some(el => v4Flags.animation === el):
                options.menuType = 'magicsign';
                break;

              case marker.some(el => v4Flags.animation === el):
                options.menuType = 'marker';

                if (v4Flags.animation === 'circleofstars') ; else if (v4Flags.animation === 'energystrand') {
                  v4Flags.animation = 'energystrand';
                } else {
                  switch (v4Flags.variant) {
                    case '03':
                      v4Flags.animation = 'music';
                      v4Flags.variant = '01';
                      break;

                    case 'bubble':
                      v4Flags.animation = 'bubble';
                      v4Flags.variant = '01';
                      break;

                    case 'energystrand':
                      v4Flags.animation = 'energystrands';
                      v4Flags.variant = '01';
                      break;

                    default:
                      v4Flags.animation = 'standard';
                      v4Flags.variant = '01';
                  }
                }

                break;

              case shieldfx.some(el => v4Flags.animation === el):
                options.menuType = 'shieldfx';

                switch (v4Flags.animation) {
                  case 'energyfieldtop':
                    v4Flags.animation = 'energyfield';
                    break;

                  case 'shieldfiretop':
                    v4Flags.animation = 'fire';
                    break;

                  case 'shieldicetop':
                    v4Flags.animation = 'ice';
                    break;

                  case 'shieldearthtop':
                    v4Flags.animation = 'earth';
                    break;

                  case 'shieldeldritchwebtop':
                    v4Flags.animation = 'eldritchweb';
                    break;
                }

                break;

              case tokenborder.some(el => v4Flags.animation === el):
                options.menuType = 'tokenborder';

                if (v4Flags.animation === 'staticborder') {
                  v4Flags.animation = 'static';
                } else {
                  v4Flags.animation = 'spinning';
                }

                break;

              case fireball.some(el => v4Flags.animation === el):
                options.menuType = 'spell';
                v4Flags.animation = 'fireball';
                options.variant = 'explode';
                break;

              default:
                options.menuType = 'spell';
            }

            if ((_v4Flags$explosions3 = v4Flags.explosions) !== null && _v4Flags$explosions3 !== void 0 && _v4Flags$explosions3.enable) {
              await convertExplosion(v4Flags.explosions);
            }

            delete options.staticOptions;
            break;

          case 'template':
            options.menuType = options.tempType === 'rect' ? 'square' : options.tempType;

            switch (options.menuType) {
              case "cone":
                if (v4Flags.animation === 'breathweaponcone') {
                  v4Flags.animation = 'breathweapon';
                }

                break;

              case "circle":
                const circleTypes = ['dropct', 'fearct', 'heartct', 'horrorct', 'poisonct', 'runesct', 'shieldsct', 'crackedshieldct', 'skullct', 'snowflakesct', 'musicnotect'];

                if (circleTypes.some(el => v4Flags.animation === el)) {
                  v4Flags.animation = v4Flags.animation.replace('ct', '');
                }

                switch (v4Flags.animation) {
                  case 'outpulse01':
                    v4Flags.animation = 'outpulse';
                    options.variant = '01';
                    break;

                  case 'outpulse02':
                    v4Flags.animation = 'outpulse';
                    options.variant = '02';
                    break;

                  case 'fireballloop':
                    v4Flags.animation = 'fireball';
                    options.variant = options.variant === 'nodebris' ? 'nodebris' : 'loop';
                    break;

                  case 'fireballexplode':
                    v4Flags.animation = 'fireball';
                    options.variant = 'explode';
                    break;
                }

                break;

              case "square":
                const squareTypes = ['dropct', 'fearct', 'heartct', 'horrorct', 'poisonct', 'runesct', 'shieldsct', 'crackedshieldct', 'skullct', 'snowflakesct'];

                if (squareTypes.some(el => v4Flags.animation === el)) {
                  v4Flags.animation = v4Flags.animation.replace('ct', '');
                } else if (v4Flags.animation === 'musicnotest') {
                  v4Flags.animation = 'musicnote';
                }

                break;

              case "ray":
                if (v4Flags.animation === 'breathweaponline') {
                  v4Flags.animation = 'breathweapon';
                }

                break;
            }

            break;

          case 'aura':
            switch (v4Flags.animation) {
              case "energystrand":
                options.menuType = 'marker';
                break;

              case 'dodecahedron':
                options.menuType = 'energy';
                break;

              case 'staticelectricity':
                options.menuType = 'lightning';
                break;

              default:
                options.menuType = 'spell';
            }

            break;

          case 'preset':
            switch (v4Flags.animation) {
              case 'teleportation':
                options.menuType = 'spell';
                options.menuType02 = 'spell';
                break;

              case "dualattach":
                switch (options.name) {
                  case 'energystrand':
                  case 'energybeam':
                    options.menuType = 'generic';
                    break;

                  default:
                    options.menuType = 'spell';
                }

                break;

              case 'fireball':
                const _fire = ['eruption'];
                const _generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
                const _ice = ['snowflake'];
                const _liquid = ['liquidsplash'];
                const _fireball = ['fireballexplode'];
                const fireSettings = v4Flags.fireball || {};

                switch (fireSettings.projectile) {
                  case 'energystrand':
                  case 'energybeam':
                    fireSettings.rangeType = 'generic';
                    break;

                  default:
                    fireSettings.rangeType = 'spell';
                }

                if (fireSettings.explosion01) {
                  switch (true) {
                    case _fire.some(el => fireSettings.explosion01 === el):
                      fireSettings.ex01Type = 'fire';
                      break;

                    case _generic.some(el => fireSettings.explosion01 === el):
                      fireSettings.ex01Type = 'generic';

                      if ((_fireSettings$explosi = fireSettings.explosion01) !== null && _fireSettings$explosi !== void 0 && _fireSettings$explosi.includes('outpulse')) {
                        fireSettings.explosion01 = 'outpulse';
                        fireSettings.explosion01Variant = fireSettings.explosion01Variant === 'outpulse02' ? '02' : '01';
                      }

                      break;

                    case _ice.some(el => fireSettings.explosion01 === el):
                      fireSettings.ex01Type = 'ice';
                      break;

                    case _liquid.some(el => fireSettings.explosion01 === el):
                      fireSettings.ex01Type = 'liquid';
                      fireSettings.explosion01 = 'splash';
                      break;

                    case _fireball.some(el => fireSettings.explosion01 === el):
                      fireSettings.ex01Type = 'spell';
                      fireSettings.explosion01 = 'fireball';
                      fireSettings.explosion01Variant = 'explode';
                      break;

                    default:
                      if (fireSettings.explosion01 === 'a1' || !fireSettings.explosion01) {
                        fireSettings.ex01Type === '';
                      } else {
                        fireSettings.ex01Type = 'spell';
                      }

                  }
                }

                if (fireSettings.explosion02) {
                  switch (true) {
                    case _fire.some(el => fireSettings.explosion02 === el):
                      fireSettings.ex02Type = 'fire';
                      break;

                    case _generic.some(el => fireSettings.explosion02 === el):
                      fireSettings.ex02Type = 'generic';

                      if ((_fireSettings$explosi2 = fireSettings.explosion02) !== null && _fireSettings$explosi2 !== void 0 && _fireSettings$explosi2.includes('outpulse')) {
                        fireSettings.explosion02 = 'outpulse';
                        fireSettings.explosion02Variant = fireSettings.explosion02Variant === 'outpulse02' ? '02' : '01';
                      }

                      break;

                    case _ice.some(el => fireSettings.explosion02 === el):
                      fireSettings.ex02Type = 'ice';
                      break;

                    case _liquid.some(el => fireSettings.explosion02 === el):
                      fireSettings.ex02Type = 'liquid';
                      fireSettings.explosion02 = 'splash';
                      break;

                    case _fireball.some(el => fireSettings.explosion02 === el):
                      fireSettings.ex02Type = 'spell';
                      fireSettings.explosion02 = 'fireball';
                      fireSettings.explosion02Variant = 'explode';
                      break;

                    default:
                      if (fireSettings.explosion02 === 'a1' || !fireSettings.explosion02) {
                        fireSettings.ex02Type === '';
                      } else {
                        fireSettings.ex02Type = 'spell';
                      }

                  }
                }

                break;
            }

            break;
        }

        async function convertExplosion(flags) {
          var _flags$animation;

          if (flags.enableCustom) {
            return;
          } else {
            const fire = ['eruption'];
            const generic = ['boulderimpact', 'explosion', 'impact', 'outpulse01', 'outpulse02'];
            const ice = ['snowflake'];
            const liquid = ['liquidsplash'];
            const fireball = ['fireballexplode'];

            switch (true) {
              case fire.some(el => flags.animation === el):
                flags.menuType = 'fire';
                break;

              case generic.some(el => flags.animation === el):
                flags.menuType = 'generic';

                if ((_flags$animation = flags.animation) !== null && _flags$animation !== void 0 && _flags$animation.includes('outpulse')) {
                  flags.animation = 'outpulse';
                  flags.variant = flags.variant === 'outpulse02' ? '02' : '01';
                }

                break;

              case ice.some(el => flags.animation === el):
                flags.menuType = 'ice';
                break;

              case liquid.some(el => flags.animation === el):
                flags.menuType = 'liquid';
                flags.animation = 'splash';
                break;

              case fireball.some(el => flags.animation === el):
                flags.menuType = 'spell';
                flags.animation = 'fireball';
                flags.variant = 'explode';
                break;

              default:
                if (flags.animation === 'a1' || !flags.animation) {
                  flags.menuType === '';
                } else {
                  flags.menuType = 'spell';
                }

            }
          }

          return flags;
        }
      }

      async function convertExtraFX(flags) {
        var _flags$name, _flags$name2, _flags$name3, _flags$name4, _flags$name5;

        const generic = ['explosion', 'impact'];
        const ice = ['icespikes', 'snowflake'];
        const fireball = ['fireballexplode'];

        switch (true) {
          case (_flags$name = flags.name) === null || _flags$name === void 0 ? void 0 : _flags$name.includes('dizzystars'):
            flags.menuType = 'conditions';
            break;

          case (_flags$name2 = flags.name) === null || _flags$name2 === void 0 ? void 0 : _flags$name2.includes('eruption'):
            flags.menuType = 'fire';
            break;

          case generic.some(el => flags.name === el):
            flags.menuType = 'generic';
            break;

          case ice.some(el => flags.name === el):
            flags.menuType = 'ice';
            break;

          case (_flags$name3 = flags.name) === null || _flags$name3 === void 0 ? void 0 : _flags$name3.includes('liquidsplash'):
            flags.menuType = 'liquid';
            flags.name = 'splash';
            break;

          case (_flags$name4 = flags.name) === null || _flags$name4 === void 0 ? void 0 : _flags$name4.includes('magicSign'):
            flags.menuType = 'magicsign';

            switch (flags.color) {
              case 'blue':
                flags.name = 'abjuration';
                break;

              case 'yellow':
                flags.name = 'conjuration';
                break;

              default:
                flags.name = 'divination';
            }

            flags.variant = '01';
            break;

          case (_flags$name5 = flags.name) === null || _flags$name5 === void 0 ? void 0 : _flags$name5.includes('marker'):
            flags.menuType = 'marker';

            if (flags.name === 'circleofstars') ; else if (flags.name === 'energystrand') {
              flags.name = 'energystrand';
            } else {
              switch (flags.variant) {
                case '03':
                  flags.name = 'music';
                  flags.variant = '01';
                  break;

                case 'bubble':
                  flags.name = 'bubble';
                  flags.variant = '01';
                  break;

                case 'energystrand':
                  flags.name = 'energystrands';
                  flags.variant = '01';
                  break;

                default:
                  flags.name = 'standard';
                  flags.variant = '01';
              }
            }

            break;

          case fireball.some(el => flags.name === el):
            flags.menuType = 'spell';
            flags.name = 'fireball';
            flags.variant = 'explode';
            break;

          default:
            flags.menuType = 'spell';
        }
      }

      v4Flags.version = 4;
      await item.update({
        'flags.-=autoanimations': null
      });
      await item.update({
        'flags.autoanimations': v4Flags
      });
      console.warn(`DEBUG | Automated Animations | Version 3 Flag Migration Complete`, v4Flags);
    }
  }
};

class systemData {
  static async make(msg, isChat, external) {
    const systemID = game.system.id.toLowerCase().replace(/[^a-zA-Z0-9 ]/g, "");
    const data = external ? external : await AASystemData[systemID](msg, isChat);

    if (!data.item) {
      return {};
    } //this._log("Data Retrieved", data)


    const flags = await flagMigrations.handle(data.item);
    return new systemData(data, flags, msg);
  }

  constructor(systemData, flagData, msg) {
    var _game$modules$get, _this$item, _this$item$hasAttack, _this$item2, _this$item$hasDamage, _this$item3, _this$item$name, _this$item$sourceName, _this$item4, _this$item4$uuid, _this$item$data$flags, _this$item$data3, _this$item$data3$flag, _this$item$data3$flag2, _this$item$data3$flag3, _this$item$data3$flag4, _this$item$data$type$, _this$item$data4, _this$item$data4$type, _data$token, _data$token2, _data$token3, _this$flags$bards, _this$flags$autoOverr, _data$extraNames;

    this.debug = game.settings.get("autoanimations", "debug");

    this._log("Getting System Data");

    const data = systemData;
    this.gameSystem = game.system.id;
    const midiActive = (_game$modules$get = game.modules.get('midi-qol')) === null || _game$modules$get === void 0 ? void 0 : _game$modules$get.active;
    this.systemId = game.system.id;
    this.workflow = msg || "";
    this.flags = flagData !== null && flagData !== void 0 ? flagData : {};
    this.animation = this.flags.animation || "";
    this.reachCheck = data.reach || 0;
    this.item = data.item;
    this.itemUuid = (_this$item = this.item) === null || _this$item === void 0 ? void 0 : _this$item.uuid;
    this.hasAttack = (_this$item$hasAttack = (_this$item2 = this.item) === null || _this$item2 === void 0 ? void 0 : _this$item2.hasAttack) !== null && _this$item$hasAttack !== void 0 ? _this$item$hasAttack : false;
    this.hasDamage = (_this$item$hasDamage = (_this$item3 = this.item) === null || _this$item3 === void 0 ? void 0 : _this$item3.hasDamage) !== null && _this$item$hasDamage !== void 0 ? _this$item$hasDamage : false;
    this.itemName = ((_this$item$name = this.item.name) === null || _this$item$name === void 0 ? void 0 : _this$item$name.toLowerCase()) || ((_this$item$sourceName = this.item.sourceName) === null || _this$item$sourceName === void 0 ? void 0 : _this$item$sourceName.toLowerCase());

    if (this.systemId === 'pf2e') {
      const pf2eRuleTypes = ['condition', 'effect', 'feat'];
      this.isPF2eRuleset = pf2eRuleTypes === null || pf2eRuleTypes === void 0 ? void 0 : pf2eRuleTypes.includes(this.item.type);
    }

    this.isActiveEffect = (_this$item4 = this.item) !== null && _this$item4 !== void 0 && (_this$item4$uuid = _this$item4.uuid) !== null && _this$item4$uuid !== void 0 && _this$item4$uuid.includes("ActiveEffect") || this.isPF2eRuleset ? true : false;

    if (this.isActiveEffect) {
      var _this$item$data2, _this$item$data2$flag, _this$item$data2$flag2;

      if (this.systemId === 'dnd5e' || this.systemId === 'pf1') {
        var _this$item$data;

        this.itemName = ((_this$item$data = this.item.data) === null || _this$item$data === void 0 ? void 0 : _this$item$data.label) || "placeholder";
      }

      if (this.systemId === 'pf2e') {
        this.itemName = this.item.name.replace(/[^A-Za-z0-9 .*_-]/g, "");
      }

      this.workflow = (_this$item$data2 = this.item.data) === null || _this$item$data2 === void 0 ? void 0 : (_this$item$data2$flag = _this$item$data2.flags) === null || _this$item$data2$flag === void 0 ? void 0 : (_this$item$data2$flag2 = _this$item$data2$flag.autoanimations) === null || _this$item$data2$flag2 === void 0 ? void 0 : _this$item$data2$flag2.aaAeStatus;
    }

    this.itemMacro = (_this$item$data$flags = (_this$item$data3 = this.item.data) === null || _this$item$data3 === void 0 ? void 0 : (_this$item$data3$flag = _this$item$data3.flags) === null || _this$item$data3$flag === void 0 ? void 0 : (_this$item$data3$flag2 = _this$item$data3$flag.itemacro) === null || _this$item$data3$flag2 === void 0 ? void 0 : (_this$item$data3$flag3 = _this$item$data3$flag2.macro) === null || _this$item$data3$flag3 === void 0 ? void 0 : (_this$item$data3$flag4 = _this$item$data3$flag3.data) === null || _this$item$data3$flag4 === void 0 ? void 0 : _this$item$data3$flag4.name) !== null && _this$item$data$flags !== void 0 ? _this$item$data$flags : "";
    this.itemType = (_this$item$data$type$ = (_this$item$data4 = this.item.data) === null || _this$item$data4 === void 0 ? void 0 : (_this$item$data4$type = _this$item$data4.type) === null || _this$item$data4$type === void 0 ? void 0 : _this$item$data4$type.toLowerCase()) !== null && _this$item$data$type$ !== void 0 ? _this$item$data$type$ : "";
    this.sourceToken = (_data$token = data.token) !== null && _data$token !== void 0 && _data$token.isEmbedded ? (_data$token2 = data.token) === null || _data$token2 === void 0 ? void 0 : _data$token2.object : data.token;
    this.actor = (_data$token3 = data.token) === null || _data$token3 === void 0 ? void 0 : _data$token3.actor;
    this.allTargets = data.targets;
    this.hitTargets = data.hitTargets;
    this.hitTargetsId = data.hitTargets ? Array.from(this.hitTargets.filter(actor => actor.id).map(actor => actor.id)) : [];
    this.targetsId = Array.from(this.allTargets.filter(actor => actor.id).map(actor => actor.id)); //midi-qol specific settings

    this.playOnMiss = data.playOnMiss || (midiActive || game.system.id === 'pf2e' ? game.settings.get("autoanimations", "playonmiss") : false) || false; //this.playOnMiss = true;

    const midiSettings = midiActive ? game.settings.get("midi-qol", "ConfigSettings") : false;
    this._gmAD = midiActive ? midiSettings === null || midiSettings === void 0 ? void 0 : midiSettings.gmAutoDamage : "";
    this._userAD = midiActive ? midiSettings === null || midiSettings === void 0 ? void 0 : midiSettings.autoRollDamage : "";
    this.isDisabled = this.flags.killAnim || false;
    this.isCustomized = this.flags.override || false;
    this.animType = this.flags.animType || "";
    this.bards = (_this$flags$bards = this.flags.bards) !== null && _this$flags$bards !== void 0 ? _this$flags$bards : {};
    this.autorecOverrides = (_this$flags$autoOverr = this.flags.autoOverride) !== null && _this$flags$autoOverr !== void 0 ? _this$flags$autoOverr : {};
    this.animNameFinal;

    switch (true) {
      case !this.flags.override || this.flags.override && this.animation === ``:
        this.animNameFinal = this.itemName;
        break;

      default:
        this.animNameFinal = this.animation;
        break;
    }

    this.animEnd = endTiming(this.animNameFinal);
    this.autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    this.rinsedName = this.itemName ? AutorecFunctions._rinseName(this.itemName) : "noitem";
    this.isAutorecTemplateItem = AutorecFunctions._autorecNameCheck(AutorecFunctions._getAllNamesInSection(this.autorecSettings, 'templates'), this.rinsedName);
    this.autorecObject = this.isActiveEffect || this.pf2eRuleset ? AutorecFunctions._findObjectIn5eAE(this.autorecSettings, this.rinsedName) : AutorecFunctions._findObjectFromArray(this.autorecSettings, this.rinsedName); // If there is no match and there are alternative names, then attempt to use those names instead

    if (!this.autorecObject && (_data$extraNames = data.extraNames) !== null && _data$extraNames !== void 0 && _data$extraNames.length) {
      for (const name of data.extraNames) {
        const rinsedName = AutorecFunctions._rinseName(name);

        this.autorecObject = AutorecFunctions._findObjectFromArray(this.autorecSettings, rinsedName);

        if (this.autorecObject) {
          this.rinsedName = rinsedName;
          break;
        }
      }
    }

    this.isAutorecFireball = false;
    this.isAutorecAura = false;
    this.isAutorecTeleport = false;
    this.isAutoThunderwave5e = false;

    if (this.autorecObject && !this.isCustomized) {
      var _this$autorecObject, _this$autorecObject2, _this$autorecObject3, _this$autorecObject4;

      this.isAutorecFireball = this.autorecObject.menuSection === "preset" && this.autorecObject.animation === "fireball" ? true : false;
      this.isAutorecAura = this.autorecObject.menuSection === "auras" ? true : false;
      this.isAutorecTeleport = ((_this$autorecObject = this.autorecObject) === null || _this$autorecObject === void 0 ? void 0 : _this$autorecObject.menuSection) === "preset" && ((_this$autorecObject2 = this.autorecObject) === null || _this$autorecObject2 === void 0 ? void 0 : _this$autorecObject2.animation) === 'teleportation' ? true : false;
      this.isAutoThunderwave5e = ((_this$autorecObject3 = this.autorecObject) === null || _this$autorecObject3 === void 0 ? void 0 : _this$autorecObject3.menuSection) === 'preset' && ((_this$autorecObject4 = this.autorecObject) === null || _this$autorecObject4 === void 0 ? void 0 : _this$autorecObject4.animation) === 'thunderwave' ? true : false;
    }

    this.isAutorecTemplate = (this.isAutorecTemplateItem || this.isAutorecFireball) && !this.isCustomized ? true : false;
    this.isOverrideTemplate = this.animType === "template" && this.isCustomized || this.animType === "preset" && this.flags.animation === "fireball" && this.isCustomized ? true : false;
    this.isOverrideAura = this.animType === "aura" && this.isCustomized ? true : false;
    this.isOverrideTeleport = this.animType === "preset" && this.flags.animation === "teleportation" || this.isAutorecTeleport ? true : false; //this.isAutorecTeleport = this.autorecObject.menuSection === "preset" && this.autorecObject.animation === 'teleportation' ? true: false;

    this.decoupleSound = game.settings.get("autoanimations", "decoupleSound");
    this.isThunderwave5e = this.animType === 'preset' && this.isCustomized && this.flags.animation === 'thunderwave';
  }

  get shouldPlayImmediately() {
    return this.isOverrideAura || this.isAutorecAura || this.isOverrideTemplate || this.isAutorecTemplate || this.isOverrideTeleport || this.isAutorecTeleport || this.isThunderwave5e || this.isAutoThunderwave5e;
  }

  get soundNoAnimation() {
    var _this$flags$audio, _this$flags$audio$a, _this$flags$audio2, _this$flags$audio2$a;

    return ((_this$flags$audio = this.flags.audio) === null || _this$flags$audio === void 0 ? void 0 : (_this$flags$audio$a = _this$flags$audio.a01) === null || _this$flags$audio$a === void 0 ? void 0 : _this$flags$audio$a.enable) && ((_this$flags$audio2 = this.flags.audio) === null || _this$flags$audio2 === void 0 ? void 0 : (_this$flags$audio2$a = _this$flags$audio2.a01) === null || _this$flags$audio2$a === void 0 ? void 0 : _this$flags$audio2$a.file);
  }

  get macroOnly() {
    var _this$flags$macro, _this$flags$macro2;

    return ((_this$flags$macro = this.flags.macro) === null || _this$flags$macro === void 0 ? void 0 : _this$flags$macro.enable) && ((_this$flags$macro2 = this.flags.macro) === null || _this$flags$macro2 === void 0 ? void 0 : _this$flags$macro2.name);
  }

  getDistanceTo(target) {
    if (game.system.id === 'pf1') {
      const scene = game.scenes.active;
      const gridSize = scene.data.grid;

      const left = token => token.data.x;

      const right = token => token.data.x + token.w;

      const top = token => token.data.y;

      const bottom = token => token.data.y + token.h;

      const isLeftOf = right(this.sourceToken) <= left(target);
      const isRightOf = left(this.sourceToken) >= right(target);
      const isAbove = bottom(this.sourceToken) <= top(target);
      const isBelow = top(this.sourceToken) >= bottom(target);

      let _x = left(this.sourceToken);

      let x2 = left(target);

      let _y = top(this.sourceToken);

      let y2 = top(target);

      if (isLeftOf) {
        _x += (this.sourceToken.data.width - 1) * gridSize;
      } else if (isRightOf) {
        x2 += (target.data.width - 1) * gridSize;
      }

      if (isAbove) {
        _y += (this.sourceToken.data.height - 1) * gridSize;
      } else if (isBelow) {
        y2 += (target.data.height - 1) * gridSize;
      }

      const ray = new Ray({
        x: _x,
        y: _y
      }, {
        x: x2,
        y: y2
      });
      const _distance = canvas.grid.grid.measureDistances([{
        ray
      }], {
        gridSpaces: true
      })[0];
      return _distance;
    } else {
      var x,
          x1,
          y,
          y1,
          segments = [],
          rdistance,
          distance;

      for (x = 0; x < this.sourceToken.data.width; x++) {
        for (y = 0; y < this.sourceToken.data.height; y++) {
          const origin = new PIXI.Point(...canvas.grid.getCenter(this.sourceToken.data.x + canvas.dimensions.size * x, this.sourceToken.data.y + canvas.dimensions.size * y));

          for (x1 = 0; x1 < target.data.width; x1++) {
            for (y1 = 0; y1 < target.data.height; y1++) {
              const dest = new PIXI.Point(...canvas.grid.getCenter(target.data.x + canvas.dimensions.size * x1, target.data.y + canvas.dimensions.size * y1));

              const _r = new Ray(origin, dest);

              segments.push({
                ray: _r
              });
            }
          }
        }
      }

      if (segments.length === 0) {
        return -1;
      }

      rdistance = canvas.grid.measureDistances(segments, {
        gridSpaces: true
      });
      distance = rdistance[0];
      rdistance.forEach(d => {
        if (d < distance) distance = d;
      });
      return distance;
    }
  }

  _log(...args) {
    if (this.debug) console.log(`DEBUG | Automated Animations |`, ...args);
  }

}

/**
 * 
 * @param {*} // The Active Effect being applied 
 * 
 */

async function createActiveEffects5e(effect) {
  var _effect$data, _effect$data2, _effect$data2$flags, _effect$data3, _effect$data3$flags, _effect$data3$flags$a;

  const aaDebug = game.settings.get("autoanimations", "debug");


  const aeToken = canvas.tokens.placeables.find(token => {
    var _token$actor, _token$actor$effects;

    return (_token$actor = token.actor) === null || _token$actor === void 0 ? void 0 : (_token$actor$effects = _token$actor.effects) === null || _token$actor$effects === void 0 ? void 0 : _token$actor$effects.get(effect.id);
  });

  if (!aeToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Token for the Active Effect");
    }

    return;
  }

  const aeNameField = ((_effect$data = effect.data) === null || _effect$data === void 0 ? void 0 : _effect$data.label) + `${aeToken.id}`;
  const checkAnim = Sequencer.EffectManager.getEffects({
    object: aeToken,
    name: aeNameField
  }).length > 0;

  if (checkAnim) {
    if (aaDebug) {
      aaDebugger("Animation is already present on the Token, returning.");
    }

    return;
  } // Sets data for the System Handler


  const flagData = {
    aaAeStatus: "on",
    aaAeTokenId: aeToken.id
  }; // If A-A flags are preset on the AE, ensure they are up-to-date

  if ((_effect$data2 = effect.data) !== null && _effect$data2 !== void 0 && (_effect$data2$flags = _effect$data2.flags) !== null && _effect$data2$flags !== void 0 && _effect$data2$flags.autoanimations) {
    await flagMigrations.handle(effect);
  } // If no A-A flags are present, grab current Flag version and apply it to the effect (bypasses flag merge issues)


  if (!((_effect$data3 = effect.data) !== null && _effect$data3 !== void 0 && (_effect$data3$flags = _effect$data3.flags) !== null && _effect$data3$flags !== void 0 && (_effect$data3$flags$a = _effect$data3$flags.autoanimation) !== null && _effect$data3$flags$a !== void 0 && _effect$data3$flags$a.version)) {
    flagData.version = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
  }

  await effect.update({
    'flags.autoanimations': flagData
  }); // Initilizes the A-A System Handler

  const data = {
    token: aeToken,
    targets: [],
    item: effect
  };
  let handler = await systemData.make(null, null, data); // Exits early if Item or Source Token returns null. Total Failure

  if (!handler.item || !handler.sourceToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Item or Source Token", handler);
    }

    return;
  }

  if (handler.isCustomized || !handler.isCustomized && handler.autorecObject) {
    var _handler$flags, _handler$flags$option;

    const aeDelay = handler.isCustomized ? ((_handler$flags = handler.flags) === null || _handler$flags === void 0 ? void 0 : (_handler$flags$option = _handler$flags.options) === null || _handler$flags$option === void 0 ? void 0 : _handler$flags$option.aeDelay) || "noDelay" : handler.autorecObject.aeDelay || "noDelay";

    const wait = delay => new Promise(resolve => setTimeout(resolve, delay));

    if (aeDelay === "noDelay") ; else {
      await wait(aeDelay);
    }
  } // Sends the data to begin the animation Sequence


  trafficCop(handler);
}
/**
 * 
 * @param {*} effect // The Active Effect being removed
 * 
 */

async function deleteActiveEffects5e(effect) {
  const aaDebug = game.settings.get("autoanimations", "debug"); // Finds all active Animations on the scene that match .origin(effect.uuid)

  let aaEffects = Sequencer.EffectManager.getEffects({
    origin: effect.uuid
  }); // If no animations, exit early, Else continue with gathering data

  if (aaEffects.length > 0) {
    var _effect$data$flags$au, _effect$data4, _effect$data4$flags, _itemData$macro, _itemData$macro2, _handler$autorecObjec, _handler$autorecObjec2, _handler$autorecObjec3, _handler$autorecObjec4;

    const itemData = (_effect$data$flags$au = (_effect$data4 = effect.data) === null || _effect$data4 === void 0 ? void 0 : (_effect$data4$flags = _effect$data4.flags) === null || _effect$data4$flags === void 0 ? void 0 : _effect$data4$flags.autoanimations) !== null && _effect$data$flags$au !== void 0 ? _effect$data$flags$au : {};
    const data = {
      token: undefined,
      targets: [],
      item: effect
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data); // If a Macro is enabled on the Item, compile that data

    const macroData = {};

    if ((_itemData$macro = itemData.macro) !== null && _itemData$macro !== void 0 && _itemData$macro.enable && (_itemData$macro2 = itemData.macro) !== null && _itemData$macro2 !== void 0 && _itemData$macro2.name && (itemData.override || itemData.killAnim)) {
      var _itemData$macro$name, _itemData$macro3, _itemData$macro4;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name = (_itemData$macro3 = itemData.macro) === null || _itemData$macro3 === void 0 ? void 0 : _itemData$macro3.name) !== null && _itemData$macro$name !== void 0 ? _itemData$macro$name : "";
      macroData.args = (_itemData$macro4 = itemData.macro) !== null && _itemData$macro4 !== void 0 && _itemData$macro4.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec = handler.autorecObject) !== null && _handler$autorecObjec !== void 0 && (_handler$autorecObjec2 = _handler$autorecObjec.macro) !== null && _handler$autorecObjec2 !== void 0 && _handler$autorecObjec2.enable && (_handler$autorecObjec3 = handler.autorecObject) !== null && _handler$autorecObjec3 !== void 0 && (_handler$autorecObjec4 = _handler$autorecObjec3.macro) !== null && _handler$autorecObjec4 !== void 0 && _handler$autorecObjec4.name) {
      var _handler$autorecObjec5, _handler$autorecObjec6, _handler$autorecObjec7, _handler$autorecObjec8, _handler$autorecObjec9;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec5 = (_handler$autorecObjec6 = handler.autorecObject) === null || _handler$autorecObjec6 === void 0 ? void 0 : (_handler$autorecObjec7 = _handler$autorecObjec6.macro) === null || _handler$autorecObjec7 === void 0 ? void 0 : _handler$autorecObjec7.name) !== null && _handler$autorecObjec5 !== void 0 ? _handler$autorecObjec5 : "";
      macroData.args = (_handler$autorecObjec8 = handler.autorecObject) !== null && _handler$autorecObjec8 !== void 0 && (_handler$autorecObjec9 = _handler$autorecObjec8.macro) !== null && _handler$autorecObjec9 !== void 0 && _handler$autorecObjec9.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // Filters the active Animations to isolate the ones active on the Token


    let currentEffect = aaEffects.filter(i => {
      var _i$source, _i$source$actor;

      return effect.uuid.includes((_i$source = i.source) === null || _i$source === void 0 ? void 0 : (_i$source$actor = _i$source.actor) === null || _i$source$actor === void 0 ? void 0 : _i$source$actor.id);
    });
    currentEffect = currentEffect.length < 1 ? aaEffects.filter(i => {
      var _i$source2;

      return effect.uuid.includes((_i$source2 = i.source) === null || _i$source2 === void 0 ? void 0 : _i$source2.id);
    }) : currentEffect;

    if (currentEffect.length < 0) {
      return;
    } // Sets the Source Token on the Handler document


    handler.sourceToken = currentEffect[0].source; // If no Item or Source Token was found, exit early with Debug

    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    } // End all Animations on the token with .origin(effect.uuid)


    Sequencer.EffectManager.endEffects({
      origin: effect.uuid,
      object: handler.sourceToken
    });
  } else {
    var _effect$data$flags$au2, _effect$data5, _effect$data5$flags, _handler$autorecObjec10, _handler$autorecObjec11, _handler$autorecObjec12, _handler$autorecObjec13;

    const itemData = (_effect$data$flags$au2 = (_effect$data5 = effect.data) === null || _effect$data5 === void 0 ? void 0 : (_effect$data5$flags = _effect$data5.flags) === null || _effect$data5$flags === void 0 ? void 0 : _effect$data5$flags.autoanimations) !== null && _effect$data$flags$au2 !== void 0 ? _effect$data$flags$au2 : {};
    const aeToken = canvas.tokens.get(itemData.aaAeTokenId);
    const data = {
      token: aeToken,
      targets: [],
      item: effect
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data);
    const macroData = {};

    if (handler.isCustomized && handler.macroOnly || handler.isDisabled && handler.macroOnly) {
      var _itemData$macro$name2, _itemData$macro5, _itemData$macro6;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name2 = (_itemData$macro5 = itemData.macro) === null || _itemData$macro5 === void 0 ? void 0 : _itemData$macro5.name) !== null && _itemData$macro$name2 !== void 0 ? _itemData$macro$name2 : "";
      macroData.args = (_itemData$macro6 = itemData.macro) !== null && _itemData$macro6 !== void 0 && _itemData$macro6.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec10 = handler.autorecObject) !== null && _handler$autorecObjec10 !== void 0 && (_handler$autorecObjec11 = _handler$autorecObjec10.macro) !== null && _handler$autorecObjec11 !== void 0 && _handler$autorecObjec11.enable && (_handler$autorecObjec12 = handler.autorecObject) !== null && _handler$autorecObjec12 !== void 0 && (_handler$autorecObjec13 = _handler$autorecObjec12.macro) !== null && _handler$autorecObjec13 !== void 0 && _handler$autorecObjec13.name) {
      var _handler$autorecObjec14, _handler$autorecObjec15, _handler$autorecObjec16, _handler$autorecObjec17, _handler$autorecObjec18;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec14 = (_handler$autorecObjec15 = handler.autorecObject) === null || _handler$autorecObjec15 === void 0 ? void 0 : (_handler$autorecObjec16 = _handler$autorecObjec15.macro) === null || _handler$autorecObjec16 === void 0 ? void 0 : _handler$autorecObjec16.name) !== null && _handler$autorecObjec14 !== void 0 ? _handler$autorecObjec14 : "";
      macroData.args = (_handler$autorecObjec17 = handler.autorecObject) !== null && _handler$autorecObjec17 !== void 0 && (_handler$autorecObjec18 = _handler$autorecObjec17.macro) !== null && _handler$autorecObjec18 !== void 0 && _handler$autorecObjec18.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // If no Item or Source Token was found, exit early with Debug


    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    }
  }
}
/**
 * 
 * @param {Active Effect being updated} effect 
 * @param {Toggle Check On/Off for Effect} toggle 
 */

async function toggleActiveEffects5e(effect, toggle) {
  if (toggle.disabled === true) {
    deleteActiveEffects5e(effect);
  } else if (toggle.disabled === false) {
    createActiveEffects5e(effect);
  }
}
async function checkConcentration(effect) {
  var _effect$data6, _effect$data7;

  const aaDebug = game.settings.get("autoanimations", "debug"); // Check effect label and return if it is not equal to "concentrating"

  const label = ((_effect$data6 = effect.data) === null || _effect$data6 === void 0 ? void 0 : _effect$data6.label) || "";

  if (label.toLowerCase() !== "concentrating") {
    return;
  } // Get Originating Item. If no Origin, return


  const origin = (_effect$data7 = effect.data) === null || _effect$data7 === void 0 ? void 0 : _effect$data7.origin;

  if (!origin) {
    if (aaDebug) {
      aaDebugger("Failed to find an Origin for Concentration");
    }

    return;
  } // Get arrays of Background and Foreground Tiles with the A-A Origin flag UUID matching the Effect Origin


  const bgTiles = canvas.background.placeables.filter(i => {
    var _i$data, _i$data$flags, _i$data$flags$autoani;

    return ((_i$data = i.data) === null || _i$data === void 0 ? void 0 : (_i$data$flags = _i$data.flags) === null || _i$data$flags === void 0 ? void 0 : (_i$data$flags$autoani = _i$data$flags.autoanimations) === null || _i$data$flags$autoani === void 0 ? void 0 : _i$data$flags$autoani.origin) === origin;
  });
  const fgTiles = canvas.foreground.placeables.filter(i => {
    var _i$data2, _i$data2$flags, _i$data2$flags$autoan;

    return ((_i$data2 = i.data) === null || _i$data2 === void 0 ? void 0 : (_i$data2$flags = _i$data2.flags) === null || _i$data2$flags === void 0 ? void 0 : (_i$data2$flags$autoan = _i$data2$flags.autoanimations) === null || _i$data2$flags$autoan === void 0 ? void 0 : _i$data2$flags$autoan.origin) === origin;
  });

  if (bgTiles.length < 1 && fgTiles.length < 1) {
    if (aaDebug) {
      aaDebugger("Failed to find any Tiles tied to Concentration");
    }

    return;
  }

  let tileIdArray = [];

  if (bgTiles.length || fgTiles.length) {
    //if (bgTiles.length) {
    for (let tile of bgTiles) {
      tileIdArray.push(tile.id);
    } //}
    //if (fgTiles.length) {


    for (let tile of fgTiles) {
      tileIdArray.push(tile.id);
    } //}


    socketlibSocket.executeAsGM("removeTile", tileIdArray);
  } //Sequencer.EffectManager.endEffects({ origin: origin })

}

async function createActiveEffectsPF2e(item) {
  var _item$data, _item$data$data, _item$data$data$refer, _item$data2, _item$data2$flags, _item$data3, _item$data3$flags, _item$data3$flags$aut;

  const aePF2eTypes = ['condition', 'effect', 'feat'];
  const aaDebug = game.settings.get("autoanimations", "debug");

  if (!aePF2eTypes.includes(item.type)) {
    if (aaDebug) {
      aaDebugger("This is not a PF2e Ruleset, exiting early");
    }

    return;
  }

  if ((_item$data = item.data) !== null && _item$data !== void 0 && (_item$data$data = _item$data.data) !== null && _item$data$data !== void 0 && (_item$data$data$refer = _item$data$data.references) !== null && _item$data$data$refer !== void 0 && _item$data$data$refer.parent && game.settings.get("autoanimations", "disableNestedEffects")) {
    if (aaDebug) {
      aaDebugger("This is a nested Ruleset, exiting early");
    }

    return;
  }


  const itemId = item.id;
  const aeToken = canvas.tokens.placeables.find(token => {
    var _token$actor, _token$actor$items;

    return ((_token$actor = token.actor) === null || _token$actor === void 0 ? void 0 : (_token$actor$items = _token$actor.items) === null || _token$actor$items === void 0 ? void 0 : _token$actor$items.get(itemId)) != null;
  });

  if (!aeToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Token for the Active Effect");
    }

    return;
  } // Sets data for the System Handler


  const flagData = {
    aaAeStatus: "on",
    aaAeTokenId: aeToken.id
  }; // Check if the Animation is already present on the Token
  //const flattenedName = item.name.toLowerCase()

  const aeNameField = item.name.replace(/[^A-Za-z0-9 .*_-]/g, "") + `${aeToken.id}`;
  const checkAnim = (await Sequencer.EffectManager.getEffects({
    object: aeToken,
    name: aeNameField
  }).length) > 0;

  if (checkAnim) {
    if (aaDebug) {
      aaDebugger("Animation is already present on the Token, returning.");
    }

    return;
  } // If A-A flags are preset on the AE, ensure they are up-to-date


  if ((_item$data2 = item.data) !== null && _item$data2 !== void 0 && (_item$data2$flags = _item$data2.flags) !== null && _item$data2$flags !== void 0 && _item$data2$flags.autoanimations) {
    await flagMigrations.handle(item);
  } // If no A-A flags are present, grab current Flag version and apply it to the effect (bypasses flag merge issues)


  if (!((_item$data3 = item.data) !== null && _item$data3 !== void 0 && (_item$data3$flags = _item$data3.flags) !== null && _item$data3$flags !== void 0 && (_item$data3$flags$aut = _item$data3$flags.autoanimation) !== null && _item$data3$flags$aut !== void 0 && _item$data3$flags$aut.version)) {
    flagData.version = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
  }

  await item.update({
    'flags.autoanimations': flagData
  }); // Initilizes the A-A System Handler

  const data = {
    token: aeToken,
    targets: [],
    item: item
  };
  let handler = await systemData.make(null, null, data); // Exits early if Item or Source Token returns null. Total Failure

  if (!handler.item || !handler.sourceToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Item or Source Token", handler);
    }

    return;
  } // Sends the data to begin the animation Sequence


  trafficCop(handler);
}
async function deleteActiveEffectsPF2e(item) {
  const aePF2eTypes = ['condition', 'effect', 'feat'];

  if (!aePF2eTypes.includes(item.type)) {
    return;
  }

  const aaDebug = game.settings.get("autoanimations", "debug"); // Finds all active Animations on the scene that match .origin(effect.uuid)

  let aaEffects = Sequencer.EffectManager.getEffects({
    origin: item.uuid
  }); // If no animations, exit early, Else continue with gathering data

  if (aaEffects.length > 0) {
    var _item$data$flags$auto, _item$data4, _item$data4$flags, _itemData$macro, _itemData$macro2, _handler$autorecObjec, _handler$autorecObjec2, _handler$autorecObjec3, _handler$autorecObjec4;

    const itemData = (_item$data$flags$auto = (_item$data4 = item.data) === null || _item$data4 === void 0 ? void 0 : (_item$data4$flags = _item$data4.flags) === null || _item$data4$flags === void 0 ? void 0 : _item$data4$flags.autoanimations) !== null && _item$data$flags$auto !== void 0 ? _item$data$flags$auto : {};
    const data = {
      token: undefined,
      targets: [],
      item: item
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data); // If a Macro is enabled on the Item, compile that data

    const macroData = {};

    if ((_itemData$macro = itemData.macro) !== null && _itemData$macro !== void 0 && _itemData$macro.enable && (_itemData$macro2 = itemData.macro) !== null && _itemData$macro2 !== void 0 && _itemData$macro2.name && (itemData.override || itemData.killAnim)) {
      var _itemData$macro$name, _itemData$macro3, _itemData$macro4;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name = (_itemData$macro3 = itemData.macro) === null || _itemData$macro3 === void 0 ? void 0 : _itemData$macro3.name) !== null && _itemData$macro$name !== void 0 ? _itemData$macro$name : "";
      macroData.args = (_itemData$macro4 = itemData.macro) !== null && _itemData$macro4 !== void 0 && _itemData$macro4.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec = handler.autorecObject) !== null && _handler$autorecObjec !== void 0 && (_handler$autorecObjec2 = _handler$autorecObjec.macro) !== null && _handler$autorecObjec2 !== void 0 && _handler$autorecObjec2.enable && (_handler$autorecObjec3 = handler.autorecObject) !== null && _handler$autorecObjec3 !== void 0 && (_handler$autorecObjec4 = _handler$autorecObjec3.macro) !== null && _handler$autorecObjec4 !== void 0 && _handler$autorecObjec4.name) {
      var _handler$autorecObjec5, _handler$autorecObjec6, _handler$autorecObjec7, _handler$autorecObjec8, _handler$autorecObjec9;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec5 = (_handler$autorecObjec6 = handler.autorecObject) === null || _handler$autorecObjec6 === void 0 ? void 0 : (_handler$autorecObjec7 = _handler$autorecObjec6.macro) === null || _handler$autorecObjec7 === void 0 ? void 0 : _handler$autorecObjec7.name) !== null && _handler$autorecObjec5 !== void 0 ? _handler$autorecObjec5 : "";
      macroData.args = (_handler$autorecObjec8 = handler.autorecObject) !== null && _handler$autorecObjec8 !== void 0 && (_handler$autorecObjec9 = _handler$autorecObjec8.macro) !== null && _handler$autorecObjec9 !== void 0 && _handler$autorecObjec9.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // Filters the active Animations to isolate the ones active on the Token


    let currentEffect = aaEffects.filter(i => {
      var _i$source, _i$source$actor;

      return item.uuid.includes((_i$source = i.source) === null || _i$source === void 0 ? void 0 : (_i$source$actor = _i$source.actor) === null || _i$source$actor === void 0 ? void 0 : _i$source$actor.id);
    });
    currentEffect = currentEffect.length < 1 ? aaEffects.filter(i => {
      var _i$source2;

      return item.uuid.includes((_i$source2 = i.source) === null || _i$source2 === void 0 ? void 0 : _i$source2.id);
    }) : currentEffect;

    if (currentEffect.length < 0) {
      return;
    } // Sets the Source Token on the Handler document


    handler.sourceToken = currentEffect[0].source; // If no Item or Source Token was found, exit early with Debug

    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    } // End all Animations on the token with .origin(effect.uuid)


    Sequencer.EffectManager.endEffects({
      origin: item.uuid,
      object: handler.sourceToken
    });
  } else {
    var _item$data$flags$auto2, _item$data5, _item$data5$flags, _handler$autorecObjec10, _handler$autorecObjec11, _handler$autorecObjec12, _handler$autorecObjec13;

    const itemData = (_item$data$flags$auto2 = (_item$data5 = item.data) === null || _item$data5 === void 0 ? void 0 : (_item$data5$flags = _item$data5.flags) === null || _item$data5$flags === void 0 ? void 0 : _item$data5$flags.autoanimations) !== null && _item$data$flags$auto2 !== void 0 ? _item$data$flags$auto2 : {};
    const aeToken = canvas.tokens.get(itemData.aaAeTokenId);
    const data = {
      token: aeToken,
      targets: [],
      item: item
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data);
    const macroData = {};

    if (handler.isCustomized && handler.macroOnly || handler.isDisabled && handler.macroOnly) {
      var _itemData$macro$name2, _itemData$macro5, _itemData$macro6;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name2 = (_itemData$macro5 = itemData.macro) === null || _itemData$macro5 === void 0 ? void 0 : _itemData$macro5.name) !== null && _itemData$macro$name2 !== void 0 ? _itemData$macro$name2 : "";
      macroData.args = (_itemData$macro6 = itemData.macro) !== null && _itemData$macro6 !== void 0 && _itemData$macro6.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec10 = handler.autorecObject) !== null && _handler$autorecObjec10 !== void 0 && (_handler$autorecObjec11 = _handler$autorecObjec10.macro) !== null && _handler$autorecObjec11 !== void 0 && _handler$autorecObjec11.enable && (_handler$autorecObjec12 = handler.autorecObject) !== null && _handler$autorecObjec12 !== void 0 && (_handler$autorecObjec13 = _handler$autorecObjec12.macro) !== null && _handler$autorecObjec13 !== void 0 && _handler$autorecObjec13.name) {
      var _handler$autorecObjec14, _handler$autorecObjec15, _handler$autorecObjec16, _handler$autorecObjec17, _handler$autorecObjec18;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec14 = (_handler$autorecObjec15 = handler.autorecObject) === null || _handler$autorecObjec15 === void 0 ? void 0 : (_handler$autorecObjec16 = _handler$autorecObjec15.macro) === null || _handler$autorecObjec16 === void 0 ? void 0 : _handler$autorecObjec16.name) !== null && _handler$autorecObjec14 !== void 0 ? _handler$autorecObjec14 : "";
      macroData.args = (_handler$autorecObjec17 = handler.autorecObject) !== null && _handler$autorecObjec17 !== void 0 && (_handler$autorecObjec18 = _handler$autorecObjec17.macro) !== null && _handler$autorecObjec18 !== void 0 && _handler$autorecObjec18.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // If no Item or Source Token was found, exit early with Debug


    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    }
  }
}

/**
 * 
 * @param {*} // The Active Effect being applied 
 * 
 */

async function createActiveEffectsPF1(effect) {
  var _effect$data, _originatingItem$data, _originatingItem$data2, _originatingItem$data3, _originatingItem$data4;

  const aaDebug = game.settings.get("autoanimations", "debug");
  /*
  // Sets data for the System Handler
  const flagData = {
      aaAeStatus: "on",
  }
  */
  // Gets the Token that the Active Effect is applied to


  const aeToken = canvas.tokens.placeables.find(token => {
    var _token$actor, _token$actor$effects;

    return (_token$actor = token.actor) === null || _token$actor === void 0 ? void 0 : (_token$actor$effects = _token$actor.effects) === null || _token$actor$effects === void 0 ? void 0 : _token$actor$effects.get(effect.id);
  });

  if (!aeToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Token for the Active Effect");
    }

    return;
  }

  const aeNameField = ((_effect$data = effect.data) === null || _effect$data === void 0 ? void 0 : _effect$data.label) + `${aeToken.id}`;
  const checkAnim = Sequencer.EffectManager.getEffects({
    object: aeToken,
    name: aeNameField
  }).length > 0;

  if (checkAnim) {
    if (aaDebug) {
      aaDebugger("Animation is already present on the Token, returning.");
    }

    return;
  } // Checks to see if the BUFF has an Item Origin. If YES get that item, otherwise assign empty object


  const itemOrigin = effect.data.origin;
  const originatingItem = itemOrigin ? await fromUuid(itemOrigin) : {};
  /*
  // If A-A flags are preset on the AE, ensure they are up-to-date
  if (effect.data?.flags?.autoanimations) {
      await flagMigrations.handle(effect);
  }
  */
  // If A-A flags are preset on the Originating Item, ensure they are up-to-date

  if ((_originatingItem$data = originatingItem.data) !== null && _originatingItem$data !== void 0 && (_originatingItem$data2 = _originatingItem$data.flags) !== null && _originatingItem$data2 !== void 0 && _originatingItem$data2.autoanimations) {
    await flagMigrations.handle(originatingItem);
  }

  const flagData = {};

  if ((_originatingItem$data3 = originatingItem.data) !== null && _originatingItem$data3 !== void 0 && (_originatingItem$data4 = _originatingItem$data3.flags) !== null && _originatingItem$data4 !== void 0 && _originatingItem$data4.autoanimations) {
    var _originatingItem$data5, _originatingItem$data6;

    // If the BUFF had an originating Item with A-A data, assign that data to flagData, and set status to "on"
    Object.assign(flagData, (_originatingItem$data5 = originatingItem.data) === null || _originatingItem$data5 === void 0 ? void 0 : (_originatingItem$data6 = _originatingItem$data5.flags) === null || _originatingItem$data6 === void 0 ? void 0 : _originatingItem$data6.autoanimations);
    flagData.aaAeStatus = "on";
    flagData.aaAeTokenId = aeToken.id;
  } else {
    // If no A-A flags are present, grab current Flag version and apply it to the effect (bypasses flag merge issues)
    flagData.aaAeStatus = "on";
    flagData.version = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
    flagData.aaAeTokenId = aeToken.id;
  }
  /*
  // If no A-A flags are present, grab current Flag version and apply it to the effect (bypasses flag merge issues)
  if (!effect.data?.flags?.autoanimation?.version) {
      flagData.version = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
  }
  */
  // Update the Active Effect flags with flagData


  await effect.update({
    'flags.autoanimations': flagData
  }); // Initilizes the A-A System Handler

  const data = {
    token: aeToken,
    targets: [],
    item: effect
  };
  let handler = await systemData.make(null, null, data); // Exits early if Item or Source Token returns null. Total Failure

  if (!handler.item || !handler.sourceToken) {
    if (aaDebug) {
      aaDebugger("Failed to find the Item or Source Token", handler);
    }

    return;
  } // Sends the data to begin the animation Sequence


  trafficCop(handler);
}
/**
 * 
 * @param {*} effect // The Active Effect being removed
 * 
 */

async function deleteActiveEffectsPF1(effect) {
  const aaDebug = game.settings.get("autoanimations", "debug"); // Finds all active Animations on the scene that match .origin(effect.uuid)

  let aaEffects = Sequencer.EffectManager.getEffects({
    origin: effect.uuid
  }); // If no animations, exit early, Else continue with gathering data

  if (aaEffects.length > 0) {
    var _effect$data$flags$au, _effect$data2, _effect$data2$flags, _itemData$macro, _itemData$macro2, _handler$autorecObjec, _handler$autorecObjec2, _handler$autorecObjec3, _handler$autorecObjec4;

    //const itemData = aaEffects[0].data?.flags?.autoanimations ?? {};
    const itemData = (_effect$data$flags$au = (_effect$data2 = effect.data) === null || _effect$data2 === void 0 ? void 0 : (_effect$data2$flags = _effect$data2.flags) === null || _effect$data2$flags === void 0 ? void 0 : _effect$data2$flags.autoanimations) !== null && _effect$data$flags$au !== void 0 ? _effect$data$flags$au : {};
    const data = {
      token: undefined,
      targets: [],
      item: effect
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data); // If a Macro is enabled on the Item, compile that data

    const macroData = {};

    if ((_itemData$macro = itemData.macro) !== null && _itemData$macro !== void 0 && _itemData$macro.enable && (_itemData$macro2 = itemData.macro) !== null && _itemData$macro2 !== void 0 && _itemData$macro2.name && (itemData.override || itemData.killAnim)) {
      var _itemData$macro$name, _itemData$macro3, _itemData$macro4;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name = (_itemData$macro3 = itemData.macro) === null || _itemData$macro3 === void 0 ? void 0 : _itemData$macro3.name) !== null && _itemData$macro$name !== void 0 ? _itemData$macro$name : "";
      macroData.args = (_itemData$macro4 = itemData.macro) !== null && _itemData$macro4 !== void 0 && _itemData$macro4.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec = handler.autorecObject) !== null && _handler$autorecObjec !== void 0 && (_handler$autorecObjec2 = _handler$autorecObjec.macro) !== null && _handler$autorecObjec2 !== void 0 && _handler$autorecObjec2.enable && (_handler$autorecObjec3 = handler.autorecObject) !== null && _handler$autorecObjec3 !== void 0 && (_handler$autorecObjec4 = _handler$autorecObjec3.macro) !== null && _handler$autorecObjec4 !== void 0 && _handler$autorecObjec4.name) {
      var _handler$autorecObjec5, _handler$autorecObjec6, _handler$autorecObjec7, _handler$autorecObjec8, _handler$autorecObjec9;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec5 = (_handler$autorecObjec6 = handler.autorecObject) === null || _handler$autorecObjec6 === void 0 ? void 0 : (_handler$autorecObjec7 = _handler$autorecObjec6.macro) === null || _handler$autorecObjec7 === void 0 ? void 0 : _handler$autorecObjec7.name) !== null && _handler$autorecObjec5 !== void 0 ? _handler$autorecObjec5 : "";
      macroData.args = (_handler$autorecObjec8 = handler.autorecObject) !== null && _handler$autorecObjec8 !== void 0 && (_handler$autorecObjec9 = _handler$autorecObjec8.macro) !== null && _handler$autorecObjec9 !== void 0 && _handler$autorecObjec9.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // Filters the active Animations to isolate the ones active on the Token


    let currentEffect = aaEffects.filter(i => {
      var _i$source, _i$source$actor;

      return effect.uuid.includes((_i$source = i.source) === null || _i$source === void 0 ? void 0 : (_i$source$actor = _i$source.actor) === null || _i$source$actor === void 0 ? void 0 : _i$source$actor.id);
    });
    currentEffect = currentEffect.length < 1 ? aaEffects.filter(i => {
      var _i$source2;

      return effect.uuid.includes((_i$source2 = i.source) === null || _i$source2 === void 0 ? void 0 : _i$source2.id);
    }) : currentEffect;

    if (currentEffect.length < 0) {
      return;
    } // Sets the Source Token on the Handler document


    handler.sourceToken = currentEffect[0].source; // If no Item or Source Token was found, exit early with Debug

    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    } // End all Animations on the token with .origin(effect.uuid)


    Sequencer.EffectManager.endEffects({
      origin: effect.uuid,
      object: handler.sourceToken
    });
  } else {
    var _effect$data$flags$au2, _effect$data3, _effect$data3$flags, _handler$autorecObjec10, _handler$autorecObjec11, _handler$autorecObjec12, _handler$autorecObjec13;

    const itemData = (_effect$data$flags$au2 = (_effect$data3 = effect.data) === null || _effect$data3 === void 0 ? void 0 : (_effect$data3$flags = _effect$data3.flags) === null || _effect$data3$flags === void 0 ? void 0 : _effect$data3$flags.autoanimations) !== null && _effect$data$flags$au2 !== void 0 ? _effect$data$flags$au2 : {};
    const aeToken = canvas.tokens.get(itemData.aaAeTokenId);
    const data = {
      token: aeToken,
      targets: [],
      item: effect
    }; // Compile data for the system handler

    const handler = await systemData.make(null, null, data);
    const macroData = {};

    if (handler.isCustomized && handler.macroOnly || handler.isDisabled && handler.macroOnly) {
      var _itemData$macro$name2, _itemData$macro5, _itemData$macro6;

      //Sets macro data if it is defined on the Item and is active
      macroData.shouldRun = true;
      macroData.name = (_itemData$macro$name2 = (_itemData$macro5 = itemData.macro) === null || _itemData$macro5 === void 0 ? void 0 : _itemData$macro5.name) !== null && _itemData$macro$name2 !== void 0 ? _itemData$macro$name2 : "";
      macroData.args = (_itemData$macro6 = itemData.macro) !== null && _itemData$macro6 !== void 0 && _itemData$macro6.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } else if (handler.autorecObject && (_handler$autorecObjec10 = handler.autorecObject) !== null && _handler$autorecObjec10 !== void 0 && (_handler$autorecObjec11 = _handler$autorecObjec10.macro) !== null && _handler$autorecObjec11 !== void 0 && _handler$autorecObjec11.enable && (_handler$autorecObjec12 = handler.autorecObject) !== null && _handler$autorecObjec12 !== void 0 && (_handler$autorecObjec13 = _handler$autorecObjec12.macro) !== null && _handler$autorecObjec13 !== void 0 && _handler$autorecObjec13.name) {
      var _handler$autorecObjec14, _handler$autorecObjec15, _handler$autorecObjec16, _handler$autorecObjec17, _handler$autorecObjec18;

      //Sets macro data if none is defined/active on the item and it is present in the Automatic Recognition Menu
      macroData.shouldRun = true;
      macroData.name = (_handler$autorecObjec14 = (_handler$autorecObjec15 = handler.autorecObject) === null || _handler$autorecObjec15 === void 0 ? void 0 : (_handler$autorecObjec16 = _handler$autorecObjec15.macro) === null || _handler$autorecObjec16 === void 0 ? void 0 : _handler$autorecObjec16.name) !== null && _handler$autorecObjec14 !== void 0 ? _handler$autorecObjec14 : "";
      macroData.args = (_handler$autorecObjec17 = handler.autorecObject) !== null && _handler$autorecObjec17 !== void 0 && (_handler$autorecObjec18 = _handler$autorecObjec17.macro) !== null && _handler$autorecObjec18 !== void 0 && _handler$autorecObjec18.args ? macroData.args.split(',').map(s => s.trim()) : "";
    } // If no Item or Source Token was found, exit early with Debug


    if (!handler.item || !handler.sourceToken) {
      if (aaDebug) {
        aaDebugger("Failed to find the Item or Source Token", handler);
      }

      return;
    } // If a Macro was defined, it will run here with "off" as args[0]


    if (macroData.shouldRun) {
      let userData = macroData.args;
      new Sequence().macro(macroData.name, "off", handler, ...userData).play();
    }
  }
}
/**
 * 
 * @param {Active Effect being updated} effect 
 * @param {Toggle Check On/Off for Effect} toggle 
 */

/*
export async function toggleActiveEffectsPF1(effect, toggle) {

    if (toggle.disabled === true) {
        deleteActiveEffects5e(effect)
    } else if (toggle.disabled === false) {
        createActiveEffects5e(effect);
    }
}

export async function checkConcentration(effect) {
    const aaDebug = game.settings.get("autoanimations", "debug")

    // Check effect label and return if it is not equal to "concentrating"
    const label = effect.data?.label || "";
    if (label.toLowerCase() !== "concentrating") { return; }

    // Get Originating Item. If no Origin, return
    const origin = effect.data?.origin
    if (!origin) {
        if (aaDebug) { aaDebugger("Failed to find an Origin for Concentration") }
        return;
    }

    // Get arrays of Background and Foreground Tiles with the A-A Origin flag UUID matching the Effect Origin
    const bgTiles = canvas.background.placeables.filter(i => i.data?.flags?.autoanimations?.origin === origin)
    const fgTiles = canvas.foreground.placeables.filter(i => i.data?.flags?.autoanimations?.origin === origin);
    if (bgTiles.length < 1 && fgTiles.length < 1) {
        if (aaDebug) { aaDebugger("Failed to find any Tiles tied to Concentration") }
        return;
    }
    let tileIdArray = []
    if (bgTiles.length || fgTiles.length) {
        //if (bgTiles.length) {
        for (let tile of bgTiles) {
            tileIdArray.push(tile.id)
        }
        //}
        //if (fgTiles.length) {
        for (let tile of fgTiles) {
            tileIdArray.push(tile.id)
        }
        //}
        socketlibSocket.executeAsGM("removeTile", tileIdArray)
    }

    //Sequencer.EffectManager.endEffects({ origin: origin })

}
*/

Hooks.once('aa.ready', async () => {
  menuLists();
});
const aaMenuLists = {};

function menuLists() {
  aaMenuLists.menuOptions = {
    "t1": ``,
    "melee": game.i18n.localize("AUTOANIM.melee"),
    "range": game.i18n.localize("AUTOANIM.ranged"),
    'static': game.i18n.localize("AUTOANIM.onToken"),
    "template": game.i18n.localize("AUTOANIM.templates"),
    "aura": game.i18n.localize("AUTOANIM.typeAuras"),
    "preset": game.i18n.localize("AUTOANIM.presets")
  };
  aaMenuLists.menuOptions3D = {
    "t1": ``,
    "melee": game.i18n.localize("AUTOANIM.melee"),
    "range": game.i18n.localize("AUTOANIM.ranged"),
    'static': game.i18n.localize("AUTOANIM.onToken"),
    "template": game.i18n.localize("AUTOANIM.templates"),
    "aura": game.i18n.localize("AUTOANIM.typeAuras"),
    "preset": game.i18n.localize("AUTOANIM.presets"),
    "menu3d": "3D Particles"
  };
  /*
  aaMenuLists.attackSpells = {
      "a1": ``,
      "chainlightning": game.i18n.localize("AUTOANIM.chainlightning"),
      "disintegrate": game.i18n.localize("AUTOANIM.itemDisintegrate"),
      "eldritchblast": game.i18n.localize("AUTOANIM.itemEldritchBlast"),
      "energystrand": game.i18n.localize("AUTOANIM.energystrand"),
      "energybeam": game.i18n.localize("AUTOANIM.energybeam"),
      "fireballbeam": game.i18n.localize("AUTOANIM.fireballbeam"),
      "firebolt": game.i18n.localize("AUTOANIM.itemFireBolt"),
      "magicmissile": game.i18n.localize("AUTOANIM.itemMagicMissile"),
      "rayoffrost": game.i18n.localize("AUTOANIM.itemRayFrost"),
      "scorchingray": game.i18n.localize("AUTOANIM.itemScorchingRay"),
      "witchbolt": game.i18n.localize("AUTOANIM.itemWitchBolt"),
      "guidingbolt": game.i18n.localize("AUTOANIM.itemGuidingBolt"),
  };
    aaMenuLists.healingSpells = {
      "a1": ``,
      "curewounds": game.i18n.localize("AUTOANIM.itemCureWounds"),
      "generichealing": game.i18n.localize("AUTOANIM.itemGenericHealing"),
  }
    aaMenuLists.meleeWeapons = {
      "a1": ``,
      "club": game.i18n.localize("AUTOANIM.club"),
      "dagger": game.i18n.localize("AUTOANIM.itemDagger"),
      "falchion": game.i18n.localize("AUTOANIM.falchion"),
      "flurryofblows": game.i18n.localize("AUTOANIM.itemFlurryBlows"),
      "glaive": game.i18n.localize("AUTOANIM.glaive"),
      "greataxe": game.i18n.localize("AUTOANIM.itemGreataxe"),
      "greatclub": game.i18n.localize("AUTOANIM.itemGreatclub"),
      "greatsword": game.i18n.localize("AUTOANIM.itemGreatsword"),
      "halberd": game.i18n.localize("AUTOANIM.halberd"),
      "hammer": game.i18n.localize("AUTOANIM.hammer"),
      "handaxe": game.i18n.localize("AUTOANIM.itemHandaxe"),
      "lasersword": game.i18n.localize("AUTOANIM.itemLaserSword"),
      "mace": game.i18n.localize("AUTOANIM.itemMace"),
      "maul": game.i18n.localize("AUTOANIM.itemMaul"),
      "quarterstaff": game.i18n.localize("AUTOANIM.quarterstaff"),
      "scimitar": game.i18n.localize("AUTOANIM.scimitar"),
      "shortsword": game.i18n.localize("AUTOANIM.shortsword"),
      "spear": game.i18n.localize("AUTOANIM.itemSpear"),
      "sword": game.i18n.localize("AUTOANIM.itemSword"),
      "rapier": game.i18n.localize("AUTOANIM.itemRapier"),
      "unarmedstrike": game.i18n.localize("AUTOANIM.itemUnarmedStrike"),
      "warhammer": game.i18n.localize("AUTOANIM.warhammer"),
      "wrench": game.i18n.localize("AUTOANIM.wrench"),
  };
    aaMenuLists.genericDmg = {
      "a1": ``,
      "1hs": game.i18n.localize("AUTOANIM.item1HS"),
      "1hp": game.i18n.localize("AUTOANIM.item1HP"),
      "1hb": game.i18n.localize("AUTOANIM.item1HB"),
      "2hs": game.i18n.localize("AUTOANIM.item2HS"),
      "2hp": game.i18n.localize("AUTOANIM.item2HP"),
      "2hb": game.i18n.localize("AUTOANIM.item2HB"),
  };
    aaMenuLists.rangeWeapons = {
      "a1": ``,
      "arrow": game.i18n.localize("AUTOANIM.itemArrow"),
      "bolt": game.i18n.localize("AUTOANIM.bolt"),
      "boulder": game.i18n.localize("AUTOANIM.itemBoulder"),
      "bullet": game.i18n.localize("AUTOANIM.bullet"),
      "chakram": game.i18n.localize("AUTOANIM.chakram"),
      "dagger": game.i18n.localize("AUTOANIM.itemDagger"),
      "greataxe": game.i18n.localize("AUTOANIM.itemGreataxe"),
      "greatsword": game.i18n.localize("AUTOANIM.itemGreatsword"),
      "handaxe": game.i18n.localize("AUTOANIM.itemHandaxe"),
      "javelin": game.i18n.localize("AUTOANIM.itemJavelin"),
      "lasershot": game.i18n.localize("AUTOANIM.itemLaserBlast"),
      "lasersword": game.i18n.localize("AUTOANIM.itemLaserSword"),
      "mace": game.i18n.localize("AUTOANIM.itemMace"),
      "pumpkin": game.i18n.localize("AUTOANIM.pumpkin"),
      "siegeboulder": game.i18n.localize("AUTOANIM.itemSiegeBoulder"),
      "sling": game.i18n.localize("AUTOANIM.itemSling"),
      "snipe": game.i18n.localize("AUTOANIM.snipe"),
      "snowball": game.i18n.localize("AUTOANIM.snow") + " " + game.i18n.localize("AUTOANIM.ball"),
      "spear": game.i18n.localize("AUTOANIM.itemSpear"),
      "sword": game.i18n.localize("AUTOANIM.itemSword"),
      "hammer": game.i18n.localize("AUTOANIM.itemThrowingHammer"),
  };
    aaMenuLists.rangeWeaponsFree = {
      "a1": ``,
      "arrow": game.i18n.localize("AUTOANIM.itemArrow"),
      "bolt": game.i18n.localize("AUTOANIM.bolt"),
      "bullet": game.i18n.localize("AUTOANIM.bullet"),
      "dagger": game.i18n.localize("AUTOANIM.itemDagger"),
      "lasershot": game.i18n.localize("AUTOANIM.itemLaserBlast"),
      "lasersword": game.i18n.localize("AUTOANIM.itemLaserSword"),
      "snipe": game.i18n.localize("AUTOANIM.snipe"),
  };
    aaMenuLists.conditions = {
      "a1": ``,
      "circleofstars": game.i18n.localize("AUTOANIM.circleofstars"),
      "drop": game.i18n.localize("AUTOANIM.drop"),
      "fear": game.i18n.localize("AUTOANIM.fear"),
      "heart": game.i18n.localize("AUTOANIM.heart"),
      "horror": game.i18n.localize("AUTOANIM.horror"),
      "light": game.i18n.localize("AUTOANIM.light"),
      "poison": game.i18n.localize("AUTOANIM.poison"),
      "runes": game.i18n.localize("AUTOANIM.runes"),
      "shields": game.i18n.localize("AUTOANIM.shield"),
      "crackedshield": game.i18n.localize("AUTOANIM.crackedshield"),
      "skull": game.i18n.localize("AUTOANIM.skull"),
      "snowflakes": game.i18n.localize("AUTOANIM.snowflakes"),
      "stun": game.i18n.localize("AUTOANIM.stun"),
  }
    aaMenuLists.creatureAttacks = {
      "a1": ``,
      "bite": game.i18n.localize("AUTOANIM.itemBite"),
      "claw": game.i18n.localize("AUTOANIM.itemClaw"),
  }
    aaMenuLists.explodeVariant = {
      "ex1": ``,
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "snowflake": game.i18n.localize("AUTOANIM.snowflake"),
      "outpulse01": game.i18n.localize("AUTOANIM.outpulse01"),
      "outpulse02": game.i18n.localize("AUTOANIM.outpulse02"),
      "impact": game.i18n.localize("AUTOANIM.impact"),
      "boulderimpact": game.i18n.localize("AUTOANIM.itemBoulder"),
      "shatter": game.i18n.localize("AUTOANIM.itemShatter"),
      "thunderwave": game.i18n.localize("AUTOANIM.itemThunderwave"),
      "tollthedead": game.i18n.localize("AUTOANIM.tollthedead"),
  }
    aaMenuLists.explosionMenu = {
      "a1": "",
      "antilifeshell": game.i18n.localize("AUTOANIM.animAntiLifeShell"),
      "boulderimpact": game.i18n.localize("AUTOANIM.itemBoulder"),
      "eruption": game.i18n.localize("AUTOANIM.eruption"),
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "fireballexplode": game.i18n.localize("AUTOANIM.fireball"),
      "impact": game.i18n.localize("AUTOANIM.impact"),
      "liquidsplash": game.i18n.localize("AUTOANIM.liquid") + " " + game.i18n.localize("AUTOANIM.splash"),
      "marker": game.i18n.localize("AUTOANIM.marker"),
      "outpulse01": game.i18n.localize("AUTOANIM.outpulse01"),
      "outpulse02": game.i18n.localize("AUTOANIM.outpulse02"),
      "shatter": game.i18n.localize("AUTOANIM.itemShatter"),
      "snowflake": game.i18n.localize("AUTOANIM.snowflake"),
      "thunderwave": game.i18n.localize("AUTOANIM.itemThunderwave"),
      "tollthedead": game.i18n.localize("AUTOANIM.tollthedead"),
  }
    aaMenuLists.staticSpells = {
      "a1": "",
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "curewounds": game.i18n.localize("AUTOANIM.itemCureWounds"),
      "divinesmite": game.i18n.localize("AUTOANIM.divineSmite"),
      "dodecahedron": game.i18n.localize("AUTOANIM.dodecahedron"),
      "generichealing": game.i18n.localize("AUTOANIM.itemGenericHealing"),
      "sneakattack": game.i18n.localize("AUTOANIM.sneakattack"),
      "tollthedead": game.i18n.localize("AUTOANIM.tollthedead"),
      "moonbeam": game.i18n.localize("AUTOANIM.moonbeam"),
      "staticelectricity": game.i18n.localize("AUTOANIM.staticelectricity"),
      "energystrand": game.i18n.localize("AUTOANIM.energystrands"),
      //"bless": game.i18n.localize("AUTOANIM.bless"),
  }
    aaMenuLists.explosionAnimations = {
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "impact": game.i18n.localize("AUTOANIM.impact"),
      "shatter": game.i18n.localize("AUTOANIM.itemShatter"),
      "thunderwave": game.i18n.localize("AUTOANIM.itemThunderwave"),
  }
    aaMenuLists.aura = {
      "a1": "",
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "calllightning": game.i18n.localize("AUTOANIM.animCallLightning"),
      "darkness": game.i18n.localize("AUTOANIM.animDarkness"),
      "detectmagic": game.i18n.localize("AUTOANIM.detectMagic"),
      "dodecahedron": game.i18n.localize("AUTOANIM.dodecahedron"),
      "energystrand": game.i18n.localize("AUTOANIM.energystrands"),
      "fogcloud": game.i18n.localize("AUTOANIM.animFogCloud"),
      "sleetstorm": game.i18n.localize("AUTOANIM.animSleetstorm"),
      "spiritguardians": game.i18n.localize("AUTOANIM.animSpiritGuardians"),
      "wallofforce": game.i18n.localize("AUTOANIM.animWallOfForce"),
      "whirlwind": game.i18n.localize("AUTOANIM.animWhirlwind"),
      "antilifeshell": game.i18n.localize("AUTOANIM.animAntiLifeShell"),
      "cloudofdaggers": game.i18n.localize("AUTOANIM.cloudOfDaggers"),
      "staticelectricity": game.i18n.localize("AUTOANIM.staticelectricity")
  }
    aaMenuLists.bardAnimType = {
      'a1': ``,
      'bardicinspiration': game.i18n.localize("AUTOANIM.bardicinspiration"),
      'music': game.i18n.localize("AUTOANIM.musicnote"),
  }
    aaMenuLists.templateType = {
      "a1": ``,
      "cone": game.i18n.localize("AUTOANIM.cone"),
      "rect": game.i18n.localize("AUTOANIM.square"),
      "circle": game.i18n.localize("AUTOANIM.circle"),
      "ray": game.i18n.localize("AUTOANIM.ray"),
  }
    aaMenuLists.coneAnimations = {
      "a1": ``,
      "coneofcold": game.i18n.localize("AUTOANIM.coneofcold"),
      "burninghands": game.i18n.localize("AUTOANIM.burninghands"),
      "breathweaponcone": game.i18n.localize("AUTOANIM.breathweaponcone"),
  }
    aaMenuLists.rayAnimations = {
      "a1": ``,
      "breathweaponline": game.i18n.localize("AUTOANIM.breathweaponline"),
      "lightningbolt": game.i18n.localize("AUTOANIM.lightningbolt"),
      "gustofwind": game.i18n.localize("AUTOANIM.gustofwind"),
  }
    aaMenuLists.circleAnimations = {
      "a1": ``,
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "calllightning": game.i18n.localize("AUTOANIM.animCallLightning"),
      "cloudofdaggers": game.i18n.localize("AUTOANIM.cloudOfDaggers"),
      "darkness": game.i18n.localize("AUTOANIM.animDarkness"),
      "detectmagic": game.i18n.localize("AUTOANIM.detectMagic"),
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "fireballexplode": game.i18n.localize("AUTOANIM.fireball"),
      "fireballloop": game.i18n.localize("AUTOANIM.fireball") + " " + game.i18n.localize("AUTOANIM.loop"),
      "fogcloud": game.i18n.localize("AUTOANIM.animFogCloud"),
      "moonbeam": game.i18n.localize("AUTOANIM.moonbeam"),
      "musicnotect": game.i18n.localize("AUTOANIM.musicNotes"),
      "outpulse01": game.i18n.localize("AUTOANIM.outpulse01"),
      "outpulse02": game.i18n.localize("AUTOANIM.outpulse02"),
      "snowflake": game.i18n.localize("AUTOANIM.snowflake"),
      "shatter": game.i18n.localize("AUTOANIM.itemShatter"),
      "sleetstorm": game.i18n.localize("AUTOANIM.animSleetstorm"),
      "dropct": game.i18n.localize("AUTOANIM.drop"),
      "fearct": game.i18n.localize("AUTOANIM.fear"),
      "heartct": game.i18n.localize("AUTOANIM.heart"),
      "horrorct": game.i18n.localize("AUTOANIM.horror"),
      "poisonct": game.i18n.localize("AUTOANIM.poison"),
      "runesct": game.i18n.localize("AUTOANIM.runes"),
      "shieldsct": game.i18n.localize("AUTOANIM.shield"),
      "crackedshieldct": game.i18n.localize("AUTOANIM.crackedshield"),
      "skullct": game.i18n.localize("AUTOANIM.skull"),
      "snowflakesct": game.i18n.localize("AUTOANIM.snowflakes"),
      "stun": game.i18n.localize("AUTOANIM.stun"),
  }
    aaMenuLists.rectangleAnimations = {
      "a1": ``,
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "entangle": game.i18n.localize("AUTOANIM.entangle"),
      "grease": game.i18n.localize("AUTOANIM.grease"),
      "thunderwave": game.i18n.localize("AUTOANIM.itemThunderwave"),
      "web": game.i18n.localize("AUTOANIM.web"),
      "dropct": game.i18n.localize("AUTOANIM.drop"),
      "fearct": game.i18n.localize("AUTOANIM.fear"),
      "heartct": game.i18n.localize("AUTOANIM.heart"),
      "horrorct": game.i18n.localize("AUTOANIM.horror"),
      "musicnotest": game.i18n.localize("AUTOANIM.musicNotes"),
      "poisonct": game.i18n.localize("AUTOANIM.poison"),
      "runesct": game.i18n.localize("AUTOANIM.runes"),
      "shieldsct": game.i18n.localize("AUTOANIM.shield"),
      "crackedshieldct": game.i18n.localize("AUTOANIM.crackedshield"),
      "skullct": game.i18n.localize("AUTOANIM.skull"),
      "snowflakesct": game.i18n.localize("AUTOANIM.snowflakes"),
      "stun": game.i18n.localize("AUTOANIM.stun"),
  }
    aaMenuLists.tokenAnimations = {
      "a1": ``,
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "divinesmite": game.i18n.localize("AUTOANIM.divineSmite"),
      "dizzystars": game.i18n.localize("AUTOANIM.stars"),
      "eruption": game.i18n.localize("AUTOANIM.eruption"),
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "icespikes": game.i18n.localize("AUTOANIM.iceSpikes"),
      "impact": game.i18n.localize("AUTOANIM.impact"),
      "liquidsplash": game.i18n.localize("AUTOANIM.liquid") + " " + game.i18n.localize("AUTOANIM.splash"),
      "magicSign": game.i18n.localize("AUTOANIM.magicSign"),
      "marker": game.i18n.localize("AUTOANIM.marker"),
      "snowflake": game.i18n.localize("AUTOANIM.snowflake"),
      "sneakattack": game.i18n.localize("AUTOANIM.sneakattack"),
      "tollthedead": game.i18n.localize("AUTOANIM.tollthedead"),
      "moonbeam": game.i18n.localize("AUTOANIM.moonbeam"),
  }
    aaMenuLists.autoself = {
      "a1": ``,
      "armsofhadar": game.i18n.localize("AUTOANIM.armsofhadar"),
      "blacktentacles": game.i18n.localize("AUTOANIM.blacktentacles"),
      "antilifeshell": game.i18n.localize("AUTOANIM.animAntiLifeShell"),
      "bite": game.i18n.localize("AUTOANIM.itemBite"),
      "boulderimpact": game.i18n.localize("AUTOANIM.itemBoulder"),
      "claw": game.i18n.localize("AUTOANIM.itemClaw"),
      "curewounds": game.i18n.localize("AUTOANIM.itemCureWounds"),
      "generichealing": game.i18n.localize("AUTOANIM.itemGenericHealing"),
      "explosion": game.i18n.localize("AUTOANIM.explosion"),
      "impact": game.i18n.localize("AUTOANIM.impact"),
      "marker": game.i18n.localize("AUTOANIM.marker"),
      "outpulse01": game.i18n.localize("AUTOANIM.outpulse01"),
      "outpulse02": game.i18n.localize("AUTOANIM.outpulse02"),
      "snowflake": game.i18n.localize("AUTOANIM.snowflake"),
      "shatter": game.i18n.localize("AUTOANIM.itemShatter"),
      "thunderwave": game.i18n.localize("AUTOANIM.itemThunderwave"),
      "tollthedead": game.i18n.localize("AUTOANIM.tollthedead"),
      "moonbeam": game.i18n.localize("AUTOANIM.moonbeam"),
  }
    aaMenuLists.shieldfx = {
      "a1": ``,
      "energyfieldtop": "Energy Shield",
      "shieldfiretop": game.i18n.localize("AUTOANIM.fire") + " " + game.i18n.localize("AUTOANIM.itemShield"),
      "shieldicetop": game.i18n.localize("AUTOANIM.ice") + " " + game.i18n.localize("AUTOANIM.itemShield"),
      "shieldearthtop": game.i18n.localize("AUTOANIM.earth") + " " + game.i18n.localize("AUTOANIM.itemShield"),
      "shieldeldritchwebtop": game.i18n.localize("AUTOANIM.eldritch") + " " + game.i18n.localize("AUTOANIM.web") + " " + game.i18n.localize("AUTOANIM.itemShield"),
  }
    aaMenuLists.tokenborder = {
      "a1": ``,
      "staticborder": game.i18n.localize("AUTOANIM.static"),
      "spinningborder": game.i18n.localize("AUTOANIM.spinning")
  }
    aaMenuLists.meleeTypes = {
      "a1": ``,
      "weapon": game.i18n.localize("AUTOANIM.itemWeapon"),
      "generic": game.i18n.localize("AUTOANIM.generic"),
  }
    aaMenuLists.meleeTypesFree = {
      "a1": ``,
      "weapon": game.i18n.localize("AUTOANIM.itemWeapon"),
  }
    aaMenuLists.genericProjectile = {
      "a1": ``,
      "heart": game.i18n.localize("AUTOANIM.heart"),
      "iceshard": game.i18n.localize("AUTOANIM.iceshard"),
      "musicnote": game.i18n.localize("AUTOANIM.musicNotes"),
      "skull": game.i18n.localize("AUTOANIM.skull"),
      "energyconduitsquare": game.i18n.localize("AUTOANIM.energy") + " " + game.i18n.localize("AUTOANIM.conduit") + " " + game.i18n.localize("AUTOANIM.square"),
      "energyconduitcircle": game.i18n.localize("AUTOANIM.energy") + " " + game.i18n.localize("AUTOANIM.conduit") + " " + game.i18n.localize("AUTOANIM.circle")
  }
    aaMenuLists.genericProjectileFree = {
      "a1": ``,
      "iceshard": game.i18n.localize("AUTOANIM.iceshard"),
  }
  */
}

class AATabFunctions {
  static animTemplates(templateType) {
    let templateChoices;

    switch (templateType) {
      case "circle":
        templateChoices = aaMenuLists.circleAnimations;
        break;

      case "ray":
        templateChoices = aaMenuLists.rayAnimations;
        break;

      case "rect":
        templateChoices = aaMenuLists.rectangleAnimations;
        break;

      case "cone":
        templateChoices = aaMenuLists.coneAnimations;
        break;
    }

    return templateChoices;
  }

  static _customPreview(itemFlags, patreon) {
    var _flags$options, _flags$options2;

    const flags = itemFlags === null || itemFlags === void 0 ? void 0 : itemFlags.autoanimations;
    const jb2a = patreon ? JB2APATREONDB : JB2AFREEDB;
    const colorMenu = aaColorMenu;
    const variantMenu = aaVariantMenu;

    if (!flags) {
      return;
    }

    const data = {
      newName: flags.animation,
      type: flags.animType || "",
      menuType: ((_flags$options = flags.options) === null || _flags$options === void 0 ? void 0 : _flags$options.menuType) || false,
      variant: (_flags$options2 = flags.options) === null || _flags$options2 === void 0 ? void 0 : _flags$options2.variant,
      color: flags.color,
      dbPath: this._dbPath(flags.animType)
    };
    let file = 'no preview';

    if (!data.menuType) {
      return file;
    }

    if (!variantMenu[data.dbPath][data.menuType]) {
      return file;
    }

    const variantChoices = variantMenu[data.dbPath][data.menuType][data.newName];

    if (!variantChoices) {
      return file;
    }

    const variantCheck = this._variantCheck(data, variantMenu, jb2a);

    data.variant = variantCheck.defaultVariant;
    const colorChoices = colorMenu[data.dbPath][data.menuType][data.newName][data.variant];

    if (!colorChoices) {
      return file;
    }

    const colorCheck = this._colorCheck(data, colorMenu, jb2a);

    data.color = colorCheck.defaultColor.toLowerCase();

    switch (true) {
      case data.type === 'range':
        try {
          file = jb2a[data.dbPath][data.menuType][data.newName][data.variant][data.color][Object.keys(jb2a[data.dbPath][data.menuType][data.newName][data.variant][data.color])[1]][0];
        } catch (exception) {}

        break;

      default:
        try {
          file = jb2a[data.dbPath][data.menuType][data.newName][data.variant][data.color][0];
        } catch (exception) {}

    }

    return file;
  }

  static _variantCheck(data, variantMenu, jb2a) {
    let defaultVariant = data.variant;
    let inPlace = true;

    if (!Object.keys(jb2a[data.dbPath][data.menuType][data.newName]).includes(data.variant)) {
      inPlace = false;
      defaultVariant = variantMenu[data.dbPath][data.menuType][data.newName][Object.keys(variantMenu[data.dbPath][data.menuType][data.newName])[0]];
    }

    return {
      inPlace,
      defaultVariant
    };
  }

  static _colorCheck(data, colorMenu, jb2a) {
    let defaultColor = data.color;
    let inPlace = true;

    if (!Object.keys(jb2a[data.dbPath][data.menuType][data.newName][data.variant]).includes(data.color)) {
      inPlace = false;
      defaultColor = colorMenu[data.dbPath][data.menuType][data.newName][data.variant][Object.keys(colorMenu[data.dbPath][data.menuType][data.newName][data.variant])[0]];
    }

    return {
      inPlace,
      defaultColor
    };
  }

  static _dbPath(type) {
    switch (type) {
      case 'melee':
        return 'melee';

      case 'range':
        return 'range';

      case 'template':
        return 'templatefx';

      default:
        return 'static';
    }
  }

}

class AAItemSettings extends FormApplication {
  constructor() {
    super(...arguments);
  }

  static get defaultOptions() {
    return mergeObject(super.defaultOptions, {
      template: './modules/autoanimations/src/item-sheet-handlers/aa-templates/item-central.html',
      id: 'AA-item-settings',
      class: 'AA-item-app',
      title: game.i18n.localize("AUTOANIM.tabTitle"),
      resizable: true,
      width: 700,
      height: "auto",
      closeOnSubmit: true,
      tabs: [{
        navSelector: ".tabs",
        contentSelector: "form",
        initial: "animations"
      }]
    });
  }

  getData() {
    var _this$object$name$toL, _this$object$name, _flags$autoanimations, _flags$autoanimations2, _flags$autoanimations3, _flags$autoanimations4, _flags$autoanimations5, _flags$autoanimations6, _flags$autoanimations7, _game$modules$get, _flags$autoanimations8, _flags$autoanimations9, _flags$autoanimations10, _flags$autoanimations11, _flags$autoanimations12, _flags$autoanimations13, _flags$autoanimations14, _flags$autoanimations15, _flags$autoanimations16, _flags$autoanimations17, _flags$autoanimations18, _flags$autoanimations19, _flags$autoanimations20, _flags$autoanimations21, _flags$autoanimations22, _flags$autoanimations23, _flags$autoanimations24, _flags$autoanimations25, _flags$autoanimations26, _flags$autoanimations27, _flags$autoanimations28, _flags$autoanimations29, _flags$autoanimations30, _flags$autoanimations31, _flags$autoanimations32, _flags$autoanimations33, _flags$autoanimations34, _flags$autoanimations35, _flags$autoanimations36, _flags$autoanimations37, _flags$autoanimations38, _flags$autoanimations39, _flags$autoanimations40, _flags$autoanimations41, _flags$autoanimations42, _flags$autoanimations43, _flags$autoanimations44, _flags$autoanimations45, _flags$autoanimations46, _flags$autoanimations47, _flags$autoanimations48, _flags$autoanimations49, _flags$autoanimations50, _flags$autoanimations51, _flags$autoanimations52, _flags$autoanimations53, _flags$autoanimations54, _flags$autoanimations55, _flags$autoanimations56, _flags$autoanimations57, _flags$autoanimations58, _flags$autoanimations59, _flags$autoanimations60, _flags$autoanimations61, _flags$autoanimations62, _flags$autoanimations63, _flags$autoanimations64, _flags$autoanimations65, _flags$autoanimations66, _flags$autoanimations67, _flags$autoanimations68, _flags$autoanimations69, _flags$autoanimations70, _flags$autoanimations71, _flags$autoanimations72, _flags$autoanimations73, _flags$autoanimations74, _flags$autoanimations75, _flags$autoanimations76, _flags$autoanimations77, _flags$autoanimations78, _flags$autoanimations79;

    const currentFlagVersion = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
    const flags = this.object.data.flags;
    const patreon = moduleIncludes$2("jb2a_patreon");
    (_this$object$name$toL = (_this$object$name = this.object.name) === null || _this$object$name === void 0 ? void 0 : _this$object$name.toLowerCase()) !== null && _this$object$name$toL !== void 0 ? _this$object$name$toL : "";
    const oldName = this.object.name || this.object.sourceName;
    (_flags$autoanimations = (_flags$autoanimations2 = flags.autoanimations) === null || _flags$autoanimations2 === void 0 ? void 0 : (_flags$autoanimations3 = _flags$autoanimations2.animation) === null || _flags$autoanimations3 === void 0 ? void 0 : _flags$autoanimations3.toLowerCase()) !== null && _flags$autoanimations !== void 0 ? _flags$autoanimations : "";
    const override = (_flags$autoanimations4 = flags.autoanimations) === null || _flags$autoanimations4 === void 0 ? void 0 : _flags$autoanimations4.override;

    (_flags$autoanimations5 = (_flags$autoanimations6 = flags.autoanimations) === null || _flags$autoanimations6 === void 0 ? void 0 : (_flags$autoanimations7 = _flags$autoanimations6.meleeSwitch) === null || _flags$autoanimations7 === void 0 ? void 0 : _flags$autoanimations7.animation) !== null && _flags$autoanimations5 !== void 0 ? _flags$autoanimations5 : "";
    const levels3d = (_game$modules$get = game.modules.get("levels-3d-preview")) === null || _game$modules$get === void 0 ? void 0 : _game$modules$get.active;
    const animType = (_flags$autoanimations8 = flags.autoanimations) === null || _flags$autoanimations8 === void 0 ? void 0 : _flags$autoanimations8.animType;
    const templateType = (_flags$autoanimations9 = (_flags$autoanimations10 = flags.autoanimations) === null || _flags$autoanimations10 === void 0 ? void 0 : (_flags$autoanimations11 = _flags$autoanimations10.options) === null || _flags$autoanimations11 === void 0 ? void 0 : _flags$autoanimations11.menuType) !== null && _flags$autoanimations9 !== void 0 ? _flags$autoanimations9 : ""; //const animationRepeat = flags.autoanimations?.options?.repeat > 50 ? 50 : flags.autoanimations?.options?.repeat;

    const autoCheck = AutorecFunctions._checkAutoRec(oldName);

    const autoObject = autoCheck ? AutorecFunctions._findObjectFromArray(game.settings.get('autoanimations', 'aaAutorec'), AutorecFunctions._rinseName(oldName)) : {};
    const videoPreview = override ? AATabFunctions._customPreview(flags, patreon) : AutorecFunctions._autoPreview(oldName, patreon, flags);
    let content = "";

    switch (true) {
      case videoPreview === "no preview":
      case !videoPreview:
        break;

      default:
        switch (game.settings.get("autoanimations", "videoLoop")) {
          case "0":
            break;

          case "1":
            content = `<video class="aa-video-previews" src="${videoPreview}" controls loop> </video>`;
            break;

          case "2":
            content = `<video class="aa-video-previews" src="${videoPreview}" autoplay="autoplay" controls loop> </video>`;
            break;
        }

    }

    return {
      flags: this.object.data.flags,
      isActiveEffect: false,
      OldName: oldName,
      menuTypes: aaTypeMenu,
      menuNames: aaNameMenu,
      menuVariants: aaVariantMenu,
      menuColors: aaColorMenu,
      showMacroOption: (_flags$autoanimations12 = flags.autoanimations) !== null && _flags$autoanimations12 !== void 0 && _flags$autoanimations12.killAnim || (_flags$autoanimations13 = flags.autoanimations) !== null && _flags$autoanimations13 !== void 0 && _flags$autoanimations13.override ? true : false,
      isMacroChecked: (_flags$autoanimations14 = flags.autoanimations) !== null && _flags$autoanimations14 !== void 0 && _flags$autoanimations14.killAnim || (_flags$autoanimations15 = flags.autoanimations) !== null && _flags$autoanimations15 !== void 0 && _flags$autoanimations15.override ? (_flags$autoanimations16 = flags.autoanimations) === null || _flags$autoanimations16 === void 0 ? void 0 : (_flags$autoanimations17 = _flags$autoanimations16.macro) === null || _flags$autoanimations17 === void 0 ? void 0 : _flags$autoanimations17.enable : false,
      autoObject: autoObject,
      autoRecognized: autoCheck,
      autoRecognizedNoOverride: autoCheck && !override,
      melee: override && animType === "melee",
      range: override && animType === "range",
      static: override && animType === "static",
      template: override && animType === "template",
      aura: override && animType === "aura",
      preset: override && animType === "preset",
      menu3d: override && animType === "menu3d",
      persistent: ((_flags$autoanimations18 = flags.autoanimations) === null || _flags$autoanimations18 === void 0 ? void 0 : (_flags$autoanimations19 = _flags$autoanimations18.options) === null || _flags$autoanimations19 === void 0 ? void 0 : _flags$autoanimations19.persistent) && ((_flags$autoanimations20 = flags.autoanimations) === null || _flags$autoanimations20 === void 0 ? void 0 : (_flags$autoanimations21 = _flags$autoanimations20.options) === null || _flags$autoanimations21 === void 0 ? void 0 : _flags$autoanimations21.persistType) === 'overheadtile',
      circRectPersist: (_flags$autoanimations22 = flags.autoanimations) !== null && _flags$autoanimations22 !== void 0 && (_flags$autoanimations23 = _flags$autoanimations22.options) !== null && _flags$autoanimations23 !== void 0 && _flags$autoanimations23.persistent && (templateType === 'circle' || templateType === 'square') ? true : false,
      animationType: levels3d ? aaMenuLists.menuOptions3D : aaMenuLists.menuOptions,
      content: content,
      ammo5e: game.system.id === "dnd5e" ? true : false,
      levels3d: levels3d ? true : false,
      color3D01Projectile: ((_flags$autoanimations24 = flags.autoanimations) === null || _flags$autoanimations24 === void 0 ? void 0 : (_flags$autoanimations25 = _flags$autoanimations24.levels3d) === null || _flags$autoanimations25 === void 0 ? void 0 : (_flags$autoanimations26 = _flags$autoanimations25.projectile) === null || _flags$autoanimations26 === void 0 ? void 0 : (_flags$autoanimations27 = _flags$autoanimations26.color01) === null || _flags$autoanimations27 === void 0 ? void 0 : _flags$autoanimations27.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D02Projectile: ((_flags$autoanimations28 = flags.autoanimations) === null || _flags$autoanimations28 === void 0 ? void 0 : (_flags$autoanimations29 = _flags$autoanimations28.levels3d) === null || _flags$autoanimations29 === void 0 ? void 0 : (_flags$autoanimations30 = _flags$autoanimations29.projectile) === null || _flags$autoanimations30 === void 0 ? void 0 : (_flags$autoanimations31 = _flags$autoanimations30.color02) === null || _flags$autoanimations31 === void 0 ? void 0 : _flags$autoanimations31.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D01Ray: ((_flags$autoanimations32 = flags.autoanimations) === null || _flags$autoanimations32 === void 0 ? void 0 : (_flags$autoanimations33 = _flags$autoanimations32.levels3d) === null || _flags$autoanimations33 === void 0 ? void 0 : (_flags$autoanimations34 = _flags$autoanimations33.ray) === null || _flags$autoanimations34 === void 0 ? void 0 : (_flags$autoanimations35 = _flags$autoanimations34.color01) === null || _flags$autoanimations35 === void 0 ? void 0 : _flags$autoanimations35.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D02Ray: ((_flags$autoanimations36 = flags.autoanimations) === null || _flags$autoanimations36 === void 0 ? void 0 : (_flags$autoanimations37 = _flags$autoanimations36.levels3d) === null || _flags$autoanimations37 === void 0 ? void 0 : (_flags$autoanimations38 = _flags$autoanimations37.ray) === null || _flags$autoanimations38 === void 0 ? void 0 : (_flags$autoanimations39 = _flags$autoanimations38.color02) === null || _flags$autoanimations39 === void 0 ? void 0 : _flags$autoanimations39.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D01Explosion: ((_flags$autoanimations40 = flags.autoanimations) === null || _flags$autoanimations40 === void 0 ? void 0 : (_flags$autoanimations41 = _flags$autoanimations40.levels3d) === null || _flags$autoanimations41 === void 0 ? void 0 : (_flags$autoanimations42 = _flags$autoanimations41.explosion) === null || _flags$autoanimations42 === void 0 ? void 0 : (_flags$autoanimations43 = _flags$autoanimations42.color01) === null || _flags$autoanimations43 === void 0 ? void 0 : _flags$autoanimations43.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D02Explosion: ((_flags$autoanimations44 = flags.autoanimations) === null || _flags$autoanimations44 === void 0 ? void 0 : (_flags$autoanimations45 = _flags$autoanimations44.levels3d) === null || _flags$autoanimations45 === void 0 ? void 0 : (_flags$autoanimations46 = _flags$autoanimations45.explosion) === null || _flags$autoanimations46 === void 0 ? void 0 : (_flags$autoanimations47 = _flags$autoanimations46.color02) === null || _flags$autoanimations47 === void 0 ? void 0 : _flags$autoanimations47.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D01AddExplosion: ((_flags$autoanimations48 = flags.autoanimations) === null || _flags$autoanimations48 === void 0 ? void 0 : (_flags$autoanimations49 = _flags$autoanimations48.levels3d) === null || _flags$autoanimations49 === void 0 ? void 0 : (_flags$autoanimations50 = _flags$autoanimations49.addexplosion) === null || _flags$autoanimations50 === void 0 ? void 0 : (_flags$autoanimations51 = _flags$autoanimations50.color01) === null || _flags$autoanimations51 === void 0 ? void 0 : _flags$autoanimations51.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D02AddExplosion: ((_flags$autoanimations52 = flags.autoanimations) === null || _flags$autoanimations52 === void 0 ? void 0 : (_flags$autoanimations53 = _flags$autoanimations52.levels3d) === null || _flags$autoanimations53 === void 0 ? void 0 : (_flags$autoanimations54 = _flags$autoanimations53.addexplosion) === null || _flags$autoanimations54 === void 0 ? void 0 : (_flags$autoanimations55 = _flags$autoanimations54.color02) === null || _flags$autoanimations55 === void 0 ? void 0 : _flags$autoanimations55.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      color3D01Sprite: ((_flags$autoanimations56 = flags.autoanimations) === null || _flags$autoanimations56 === void 0 ? void 0 : (_flags$autoanimations57 = _flags$autoanimations56.levels3d) === null || _flags$autoanimations57 === void 0 ? void 0 : (_flags$autoanimations58 = _flags$autoanimations57.sprite) === null || _flags$autoanimations58 === void 0 ? void 0 : (_flags$autoanimations59 = _flags$autoanimations58.color01) === null || _flags$autoanimations59 === void 0 ? void 0 : _flags$autoanimations59.toString(16).padStart(6, '0').toUpperCase()) || "#FFFFFF",
      sprite3DProjectile: (_flags$autoanimations60 = (_flags$autoanimations61 = flags.autoanimations) === null || _flags$autoanimations61 === void 0 ? void 0 : (_flags$autoanimations62 = _flags$autoanimations61.levels3d) === null || _flags$autoanimations62 === void 0 ? void 0 : (_flags$autoanimations63 = _flags$autoanimations62.projectile) === null || _flags$autoanimations63 === void 0 ? void 0 : _flags$autoanimations63.sprite) !== null && _flags$autoanimations60 !== void 0 ? _flags$autoanimations60 : "modules/levels-3d-preview/assets/particles/emberssmall.png",
      sprite3DRay: (_flags$autoanimations64 = (_flags$autoanimations65 = flags.autoanimations) === null || _flags$autoanimations65 === void 0 ? void 0 : (_flags$autoanimations66 = _flags$autoanimations65.levels3d) === null || _flags$autoanimations66 === void 0 ? void 0 : (_flags$autoanimations67 = _flags$autoanimations66.projectile) === null || _flags$autoanimations67 === void 0 ? void 0 : _flags$autoanimations67.sprite) !== null && _flags$autoanimations64 !== void 0 ? _flags$autoanimations64 : "modules/levels-3d-preview/assets/particles/emberssmall.png",
      sprite3DExplosion: (_flags$autoanimations68 = (_flags$autoanimations69 = flags.autoanimations) === null || _flags$autoanimations69 === void 0 ? void 0 : (_flags$autoanimations70 = _flags$autoanimations69.levels3d) === null || _flags$autoanimations70 === void 0 ? void 0 : (_flags$autoanimations71 = _flags$autoanimations70.explosion) === null || _flags$autoanimations71 === void 0 ? void 0 : _flags$autoanimations71.sprite) !== null && _flags$autoanimations68 !== void 0 ? _flags$autoanimations68 : "modules/levels-3d-preview/assets/particles/dust.png",
      sprite3DAddExplosion: (_flags$autoanimations72 = (_flags$autoanimations73 = flags.autoanimations) === null || _flags$autoanimations73 === void 0 ? void 0 : (_flags$autoanimations74 = _flags$autoanimations73.levels3d) === null || _flags$autoanimations74 === void 0 ? void 0 : (_flags$autoanimations75 = _flags$autoanimations74.addexplosion) === null || _flags$autoanimations75 === void 0 ? void 0 : _flags$autoanimations75.sprite) !== null && _flags$autoanimations72 !== void 0 ? _flags$autoanimations72 : "modules/levels-3d-preview/assets/particles/dust.png",
      sprite3DSprite: (_flags$autoanimations76 = (_flags$autoanimations77 = flags.autoanimations) === null || _flags$autoanimations77 === void 0 ? void 0 : (_flags$autoanimations78 = _flags$autoanimations77.levels3d) === null || _flags$autoanimations78 === void 0 ? void 0 : (_flags$autoanimations79 = _flags$autoanimations78.sprite) === null || _flags$autoanimations79 === void 0 ? void 0 : _flags$autoanimations79.sprite) !== null && _flags$autoanimations76 !== void 0 ? _flags$autoanimations76 : "modules/levels-3d-preview/assets/particles/emberssmall.png",
      //currentVersion: !flags.autoanimations?.version ? this.object.setFlag('autoanimations', 'version', currentFlagVersion) : "",
      currentVersion: currentFlagVersion,
      isGM: game.user.isGM ? true : false
    };
  }

  activateListeners(html) {
    super.activateListeners(html);
    html.find('.kill-animation').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-checkbox-label input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-menus input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-disabled input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled input[type="Number"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled input[type="color"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.pre-post-animations select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.pre-post-animations input[type="Number"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.pre-post-animations input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.files').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    /*
    html.find('.aa-audio-checkbox input[type="checkbox"]').click(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    html.find('.aa-audio-checkbox input[type="Number"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    */

    html.find('.sourceOptions input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.sourceOptions select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.sourceOptions input[type="Number"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.particles input[type="color"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.particles input[type="Number"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.particles select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.particles input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
  }

  async _updateObject(event, formData) {
    formData = expandObject(formData);
    if (!formData.changes) formData.changes = [];
    formData.changes = Object.values(formData.changes);

    for (let c of formData.changes) {
      //@ts-ignore
      if (Number.isNumeric(c.value)) c.value = parseFloat(c.value);
    }

    return this.object.update(formData);
  }

}

function moduleIncludes$2(test) {
  return !!game.modules.get(test);
}

class AAActiveEffectMenu extends FormApplication {
  constructor() {
    super(...arguments);
  }

  static get defaultOptions() {
    return mergeObject(super.defaultOptions, {
      template: './modules/autoanimations/src/active-effects/aeMenus/ae-central.html',
      id: 'AA-item-settings',
      class: 'AA-item-app',
      title: game.i18n.localize("AUTOANIM.tabTitle"),
      resizable: true,
      width: 700,
      height: "auto",
      closeOnSubmit: true,
      tabs: [{
        navSelector: ".tabs",
        contentSelector: "form",
        initial: "animations"
      }]
    });
  }

  getData() {
    var _this$object$name$toL, _this$object$name, _this$object$data, _flags$autoanimations, _flags$autoanimations2, _flags$autoanimations3, _flags$autoanimations4, _flags$autoanimations5, _flags$autoanimations6, _flags$autoanimations7, _flags$autoanimations8, _flags$autoanimations9, _flags$autoanimations10, _flags$autoanimations11;

    const currentFlagVersion = Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0];
    const flags = this.object.data.flags;
    const patreon = moduleIncludes$1("jb2a_patreon");
    (_this$object$name$toL = (_this$object$name = this.object.name) === null || _this$object$name === void 0 ? void 0 : _this$object$name.toLowerCase()) !== null && _this$object$name$toL !== void 0 ? _this$object$name$toL : "";
    const oldName = (_this$object$data = this.object.data) === null || _this$object$data === void 0 ? void 0 : _this$object$data.label;
    (_flags$autoanimations = (_flags$autoanimations2 = flags.autoanimations) === null || _flags$autoanimations2 === void 0 ? void 0 : (_flags$autoanimations3 = _flags$autoanimations2.animation) === null || _flags$autoanimations3 === void 0 ? void 0 : _flags$autoanimations3.toLowerCase()) !== null && _flags$autoanimations !== void 0 ? _flags$autoanimations : "";
    const override = (_flags$autoanimations4 = flags.autoanimations) === null || _flags$autoanimations4 === void 0 ? void 0 : _flags$autoanimations4.override;

    const animType = (_flags$autoanimations5 = flags.autoanimations) === null || _flags$autoanimations5 === void 0 ? void 0 : _flags$autoanimations5.animType;

    const autoCheck = AutorecFunctions._checkAutoRecAefx(oldName);

    const autoObject = autoCheck ? AutorecFunctions._findObjectFromAefx(game.settings.get('autoanimations', 'aaAutorec'), AutorecFunctions._rinseName(oldName)) : {};
    const videoPreview = override ? AATabFunctions._customPreview(flags, patreon) : AutorecFunctions._autoPreviewAefx(oldName, patreon, flags);
    let content = "";

    switch (true) {
      case videoPreview === "no preview":
      case !videoPreview:
        break;

      default:
        switch (game.settings.get("autoanimations", "videoLoop")) {
          case "0":
            break;

          case "1":
            content = `<video class="aa-video-previews" src="${videoPreview}" controls loop> </video>`;
            break;

          case "2":
            content = `<video class="aa-video-previews" src="${videoPreview}" autoplay="autoplay" controls loop> </video>`;
            break;
        }

    }

    return {
      flags: this.object.data.flags,
      isActiveEffect: true,
      OldName: oldName,
      menuTypes: aaTypeMenu,
      menuNames: aaNameMenu,
      menuVariants: aaVariantMenu,
      menuColors: aaColorMenu,
      showMacroOption: (_flags$autoanimations6 = flags.autoanimations) !== null && _flags$autoanimations6 !== void 0 && _flags$autoanimations6.killAnim || (_flags$autoanimations7 = flags.autoanimations) !== null && _flags$autoanimations7 !== void 0 && _flags$autoanimations7.override ? true : false,
      isMacroChecked: (_flags$autoanimations8 = flags.autoanimations) !== null && _flags$autoanimations8 !== void 0 && _flags$autoanimations8.killAnim || (_flags$autoanimations9 = flags.autoanimations) !== null && _flags$autoanimations9 !== void 0 && _flags$autoanimations9.override ? (_flags$autoanimations10 = flags.autoanimations) === null || _flags$autoanimations10 === void 0 ? void 0 : (_flags$autoanimations11 = _flags$autoanimations10.macro) === null || _flags$autoanimations11 === void 0 ? void 0 : _flags$autoanimations11.enable : false,
      autoObject: autoObject,
      autoRecognized: autoCheck,
      autoRecognizedNoOverride: autoCheck && !override,
      melee: override && animType === "melee",
      range: override && animType === "range",
      static: override && animType === "static",
      template: override && animType === "template",
      aura: override && animType === "aura",
      preset: override && animType === "preset",
      menu3d: override && animType === "menu3d",
      content: content,
      //currentVersion: !flags.autoanimations?.version ? this.object.setFlag('autoanimations', 'version', currentFlagVersion) : "",
      currentVersion: currentFlagVersion,
      isGM: game.user.isGM ? true : false
    };
  }

  activateListeners(html) {
    super.activateListeners(html);
    html.find('.kill-animation').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.animation-not-disabled input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-checkbox-label input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-itemSection-divider select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-itemSection-divider input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    /*
    html.find('.aa-menus input[type="checkbox"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    html.find('.animation-disabled input[type="checkbox"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    })*/

    html.find('.animation-not-disabled input[type="Number"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    /*
    html.find('.animation-not-disabled input[type="color"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    })
    html.find('.pre-post-animations select').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    html.find('.pre-post-animations input[type="Number"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    html.find('.pre-post-animations input[type="checkbox"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    */

    html.find('.files').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    /*
    html.find('.aa-audio-checkbox input[type="checkbox"]').click(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    html.find('.aa-audio-checkbox input[type="Number"]').change(evt => {
        this.submit({ preventClose: true }).then(() => this.render());
    });
    */
  }

  async _updateObject(event, formData) {
    formData = expandObject(formData);
    if (!formData.changes) formData.changes = [];
    formData.changes = Object.values(formData.changes);

    for (let c of formData.changes) {
      //@ts-ignore
      if (Number.isNumeric(c.value)) c.value = parseFloat(c.value);
    }

    return this.object.update(formData);
  }

}

function moduleIncludes$1(test) {
  return !!game.modules.get(test);
}

function noop() {}

const identity = x => x;

function assign(tar, src) {
  // @ts-ignore
  for (const k in src) tar[k] = src[k];

  return tar;
}

function run(fn) {
  return fn();
}

function blank_object() {
  return Object.create(null);
}

function run_all(fns) {
  fns.forEach(run);
}

function is_function(thing) {
  return typeof thing === 'function';
}

function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === 'object' || typeof a === 'function';
}

let src_url_equal_anchor;

function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement('a');
  }

  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}

function is_empty(obj) {
  return Object.keys(obj).length === 0;
}

function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }

  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}

function get_store_value(store) {
  let value;
  subscribe(store, _ => value = _)();
  return value;
}

function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}

function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}

function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}

function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));

    if ($$scope.dirty === undefined) {
      return lets;
    }

    if (typeof lets === 'object') {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);

      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }

      return merged;
    }

    return $$scope.dirty | lets;
  }

  return $$scope.dirty;
}

function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}

function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;

    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }

    return dirty;
  }

  return -1;
}

function null_to_empty(value) {
  return value == null ? '' : value;
}

function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client ? () => window.performance.now() : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop; // used internally for testing

const tasks = new Set();

function run_tasks(now) {
  tasks.forEach(task => {
    if (!task.c(now)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0) raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */


function loop(callback) {
  let task;
  if (tasks.size === 0) raf(run_tasks);
  return {
    promise: new Promise(fulfill => {
      tasks.add(task = {
        c: callback,
        f: fulfill
      });
    }),

    abort() {
      tasks.delete(task);
    }

  };
} // Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM

function append(target, node) {
  target.appendChild(node);
}

function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);

  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element('style');
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}

function get_root_for_style(node) {
  if (!node) return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;

  if (root && root.host) {
    return root;
  }

  return node.ownerDocument;
}

function append_empty_stylesheet(node) {
  const style_element = element('style');
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}

function append_stylesheet(node, style) {
  append(node.head || node, style);
}

function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}

function detach(node) {
  node.parentNode.removeChild(node);
}

function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i]) iterations[i].d(detaching);
  }
}

function element(name) {
  return document.createElement(name);
}

function text(data) {
  return document.createTextNode(data);
}

function space() {
  return text(' ');
}

function empty() {
  return text('');
}

function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}

function prevent_default(fn) {
  return function (event) {
    event.preventDefault(); // @ts-ignore

    return fn.call(this, event);
  };
}

function stop_propagation(fn) {
  return function (event) {
    event.stopPropagation(); // @ts-ignore

    return fn.call(this, event);
  };
}

function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}

function to_number(value) {
  return value === '' ? null : +value;
}

function children(element) {
  return Array.from(element.childNodes);
}

function set_data(text, data) {
  data = '' + data;
  if (text.wholeText !== data) text.data = data;
}

function set_input_value(input, value) {
  input.value = value == null ? '' : value;
}

function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? 'important' : '');
  }
}

function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];

    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }

  select.selectedIndex = -1; // no option should be selected
}

function select_value(select) {
  const selected_option = select.querySelector(':checked') || select.options[0];
  return selected_option && selected_option.__value;
}

function toggle_class(element, name, toggle) {
  element.classList[toggle ? 'add' : 'remove'](name);
}

function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent('CustomEvent');
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}

class HtmlTag {
  constructor() {
    this.e = this.n = null;
  }

  c(html) {
    this.h(html);
  }

  m(html, target, anchor = null) {
    if (!this.e) {
      this.e = element(target.nodeName);
      this.t = target;
      this.c(html);
    }

    this.i(anchor);
  }

  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }

  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }

  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }

  d() {
    this.n.forEach(detach);
  }

}
// https://github.com/sveltejs/svelte/issues/3624


const managed_styles = new Map();
let active = 0; // https://github.com/darkskyapp/string-hash/blob/master/index.js

function hash(str) {
  let hash = 5381;
  let i = str.length;

  while (i--) hash = (hash << 5) - hash ^ str.charCodeAt(i);

  return hash >>> 0;
}

function create_style_information(doc, node) {
  const info = {
    stylesheet: append_empty_stylesheet(node),
    rules: {}
  };
  managed_styles.set(doc, info);
  return info;
}

function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = '{\n';

  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
  }

  const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const {
    stylesheet,
    rules
  } = managed_styles.get(doc) || create_style_information(doc, node);

  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }

  const animation = node.style.animation || '';
  node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}

function delete_rule(node, name) {
  const previous = (node.style.animation || '').split(', ');
  const next = previous.filter(name ? anim => anim.indexOf(name) < 0 // remove specific animation
  : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
  );
  const deleted = previous.length - next.length;

  if (deleted) {
    node.style.animation = next.join(', ');
    active -= deleted;
    if (!active) clear_rules();
  }
}

function clear_rules() {
  raf(() => {
    if (active) return;
    managed_styles.forEach(info => {
      const {
        stylesheet
      } = info;
      let i = stylesheet.cssRules.length;

      while (i--) stylesheet.deleteRule(i);

      info.rules = {};
    });
    managed_styles.clear();
  });
}

let current_component;

function set_current_component(component) {
  current_component = component;
}

function get_current_component() {
  if (!current_component) throw new Error('Function called outside component initialization');
  return current_component;
}

function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}

function getContext(key) {
  return get_current_component().$$.context.get(key);
}
// shorthand events, or if we want to implement
// a real bubbling mechanism


function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];

  if (callbacks) {
    // @ts-ignore
    callbacks.slice().forEach(fn => fn.call(this, event));
  }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;

function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}

function add_render_callback(fn) {
  render_callbacks.push(fn);
}

function add_flush_callback(fn) {
  flush_callbacks.push(fn);
} // flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.


const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function

function flush() {
  const saved_component = current_component;

  do {
    // first, call beforeUpdate functions
    // and update components
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }

    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;

    while (binding_callbacks.length) binding_callbacks.pop()(); // then, once components are updated, call
    // afterUpdate functions. This may cause
    // subsequent updates...


    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];

      if (!seen_callbacks.has(callback)) {
        // ...so guard against infinite loops
        seen_callbacks.add(callback);
        callback();
      }
    }

    render_callbacks.length = 0;
  } while (dirty_components.length);

  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }

  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}

function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}

let promise;

function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }

  return promise;
}

function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}

const outroing = new Set();
let outros;

function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros // parent group

  };
}

function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }

  outros = outros.p;
}

function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}

function transition_out(block, local, detach, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);

      if (callback) {
        if (detach) block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}

const null_transition = {
  duration: 0
};

function create_in_transition(node, fn, params) {
  let config = fn(node, params);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;

  function cleanup() {
    if (animation_name) delete_rule(node, animation_name);
  }

  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task) task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, 'start'));
    task = loop(now => {
      if (running) {
        if (now >= end_time) {
          tick(1, 0);
          dispatch(node, true, 'end');
          cleanup();
          return running = false;
        }

        if (now >= start_time) {
          const t = easing((now - start_time) / duration);
          tick(t, 1 - t);
        }
      }

      return running;
    });
  }

  let started = false;
  return {
    start() {
      if (started) return;
      started = true;
      delete_rule(node);

      if (is_function(config)) {
        config = config();
        wait().then(go);
      } else {
        go();
      }
    },

    invalidate() {
      started = false;
    },

    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }

  };
}

function create_out_transition(node, fn, params) {
  let config = fn(node, params);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;

  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch(node, false, 'start'));
    loop(now => {
      if (running) {
        if (now >= end_time) {
          tick(0, 1);
          dispatch(node, false, 'end');

          if (! --group.r) {
            // this will result in `end()` being called,
            // so we don't need to clean up here
            run_all(group.c);
          }

          return false;
        }

        if (now >= start_time) {
          const t = easing((now - start_time) / duration);
          tick(1 - t, t);
        }
      }

      return running;
    });
  }

  if (is_function(config)) {
    wait().then(() => {
      // @ts-ignore
      config = config();
      go();
    });
  } else {
    go();
  }

  return {
    end(reset) {
      if (reset && config.tick) {
        config.tick(1, 0);
      }

      if (running) {
        if (animation_name) delete_rule(node, animation_name);
        running = false;
      }
    }

  };
}

function create_bidirectional_transition(node, fn, params, intro) {
  let config = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;

  function clear_animation() {
    if (animation_name) delete_rule(node, animation_name);
  }

  function init(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }

  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };

    if (!b) {
      // @ts-ignore todo: improve typings
      program.group = outros;
      outros.r += 1;
    }

    if (running_program || pending_program) {
      pending_program = program;
    } else {
      // if this is an intro, and there's a delay, we need to do
      // an initial tick and/or apply CSS animation immediately
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }

      if (b) tick(0, 1);
      running_program = init(program, duration);
      add_render_callback(() => dispatch(node, b, 'start'));
      loop(now => {
        if (pending_program && now > pending_program.start) {
          running_program = init(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, 'start');

          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }

        if (running_program) {
          if (now >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, 'end');

            if (!pending_program) {
              // we're done
              if (running_program.b) {
                // intro — we can tidy up immediately
                clear_animation();
              } else {
                // outro — needs to be coordinated
                if (! --running_program.group.r) run_all(running_program.group.c);
              }
            }

            running_program = null;
          } else if (now >= running_program.start) {
            const p = now - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }

        return !!(running_program || pending_program);
      });
    }
  }

  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          // @ts-ignore
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },

    end() {
      clear_animation();
      running_program = pending_program = null;
    }

  };
}

function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}

function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};

  while (i--) old_indexes[old_blocks[i].key] = i;

  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;

  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);

    if (!block) {
      block = create_each_block(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }

    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
  }

  const will_move = new Set();
  const did_move = new Set();

  function insert(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }

  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;

    if (new_block === old_block) {
      // do nothing
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      // remove old block
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }

  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
  }

  while (n) insert(new_blocks[n - 1]);

  return new_blocks;
}

function get_spread_update(levels, updates) {
  const update = {};
  const to_null_out = {};
  const accounted_for = {
    $$scope: 1
  };
  let i = levels.length;

  while (i--) {
    const o = levels[i];
    const n = updates[i];

    if (n) {
      for (const key in o) {
        if (!(key in n)) to_null_out[key] = 1;
      }

      for (const key in n) {
        if (!accounted_for[key]) {
          update[key] = n[key];
          accounted_for[key] = 1;
        }
      }

      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }

  for (const key in to_null_out) {
    if (!(key in update)) update[key] = undefined;
  }

  return update;
}

function get_spread_object(spread_props) {
  return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
} // source: https://html.spec.whatwg.org/multipage/indices.html

function bind(component, name, callback) {
  const index = component.$$.props[name];

  if (index !== undefined) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}

function create_component(block) {
  block && block.c();
}

function mount_component(component, target, anchor, customElement) {
  const {
    fragment,
    on_mount,
    on_destroy,
    after_update
  } = component.$$;
  fragment && fragment.m(target, anchor);

  if (!customElement) {
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);

      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        // Edge case - component was destroyed immediately,
        // most likely as a result of a binding initialising
        run_all(new_on_destroy);
      }

      component.$$.on_mount = [];
    });
  }

  after_update.forEach(add_render_callback);
}

function destroy_component(component, detaching) {
  const $$ = component.$$;

  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
    // preserve final state?)

    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}

function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }

  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}

function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance ? instance(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;

    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
      if (ready) make_dirty(component, i);
    }

    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update); // `false` as a special case of no DOM component

  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      $$.fragment && $$.fragment.c();
    }

    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }

  set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */


class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }

  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1) callbacks.splice(index, 1);
    };
  }

  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }

}

function cubicOut(t) {
  const f = t - 1.0;
  return f * f * f + 1.0;
}

/**
 * Performs linear interpolation between a start & end value by given amount between 0 - 1 inclusive.
 *
 * @param {number}   start - Start value.
 *
 * @param {number}   end - End value.
 *
 * @param {number}   amount - Current amount between 0 - 1 inclusive.
 *
 * @returns {number} Linear interpolated value between start & end.
 */
function lerp$5(start, end, amount) {
  return (1 - amount) * start + amount * end;
}
/**
 * Converts the given number from degrees to radians.
 *
 * @param {number}   deg - Degree number to convert
 *
 * @returns {number} Degree as radians.
 */


function degToRad(deg) {
  return deg * (Math.PI / 180.0);
}
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants


var EPSILON$1 = 0.000001;
var ARRAY_TYPE$1 = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;

if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};
/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create$6$1() {
  var out = new ARRAY_TYPE$1(9);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create$5() {
  var out = new ARRAY_TYPE$1(16);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */


function clone$5(a) {
  var out = new ARRAY_TYPE$1(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */


function copy$5(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */


function fromValues$5(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE$1(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */


function set$5(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */


function identity$2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */


function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */


function invert$2(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */


function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */


function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */


function multiply$5(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */


function translate$1(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/


function scale$5(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */


function rotate$1(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < EPSILON$1) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function rotateX$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function rotateY$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function rotateZ$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */


function fromTranslation$1(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */


function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */


function fromRotation$1(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < EPSILON$1) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */


function fromRotationTranslation$1(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */


function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE$1(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation$1(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */


function getTranslation$1(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */


function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */


function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE$1(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */


function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */


function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */


function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */


function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */


function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */


var perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */


function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */


function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */


var ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */


function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < EPSILON$1 && Math.abs(eyey - centery) < EPSILON$1 && Math.abs(eyez - centerz) < EPSILON$1) {
    return identity$2(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */


function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */


function str$5(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */


function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */


function add$5(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */


function subtract$3(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */


function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */


function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


function exactEquals$5(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


function equals$5(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON$1 * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON$1 * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON$1 * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON$1 * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON$1 * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON$1 * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON$1 * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON$1 * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON$1 * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON$1 * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON$1 * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON$1 * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */


var mul$5 = multiply$5;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub$3 = subtract$3;
var mat4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create$5,
  clone: clone$5,
  copy: copy$5,
  fromValues: fromValues$5,
  set: set$5,
  identity: identity$2,
  transpose: transpose,
  invert: invert$2,
  adjoint: adjoint,
  determinant: determinant,
  multiply: multiply$5,
  translate: translate$1,
  scale: scale$5,
  rotate: rotate$1,
  rotateX: rotateX$3,
  rotateY: rotateY$3,
  rotateZ: rotateZ$3,
  fromTranslation: fromTranslation$1,
  fromScaling: fromScaling,
  fromRotation: fromRotation$1,
  fromXRotation: fromXRotation,
  fromYRotation: fromYRotation,
  fromZRotation: fromZRotation,
  fromRotationTranslation: fromRotationTranslation$1,
  fromQuat2: fromQuat2,
  getTranslation: getTranslation$1,
  getScaling: getScaling,
  getRotation: getRotation,
  fromRotationTranslationScale: fromRotationTranslationScale,
  fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
  fromQuat: fromQuat,
  frustum: frustum,
  perspectiveNO: perspectiveNO,
  perspective: perspective,
  perspectiveZO: perspectiveZO,
  perspectiveFromFieldOfView: perspectiveFromFieldOfView,
  orthoNO: orthoNO,
  ortho: ortho,
  orthoZO: orthoZO,
  lookAt: lookAt,
  targetTo: targetTo,
  str: str$5,
  frob: frob,
  add: add$5,
  subtract: subtract$3,
  multiplyScalar: multiplyScalar,
  multiplyScalarAndAdd: multiplyScalarAndAdd,
  exactEquals: exactEquals$5,
  equals: equals$5,
  mul: mul$5,
  sub: sub$3
});
/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create$4$1() {
  var out = new ARRAY_TYPE$1(3);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */


function clone$4(a) {
  var out = new ARRAY_TYPE$1(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */


function length$4$1(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */


function fromValues$4$1(x, y, z) {
  var out = new ARRAY_TYPE$1(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */


function copy$4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */


function set$4(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function add$4(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function subtract$2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function multiply$4(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function divide$2(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */


function ceil$2(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */


function floor$2(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function min$2(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function max$2(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */


function round$2(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */


function scale$4(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */


function scaleAndAdd$2(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */


function distance$2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */


function squaredDistance$2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */


function squaredLength$4(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */


function negate$2(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */


function inverse$2(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */


function normalize$4$1(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */


function dot$4$1(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function cross$2$1(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */


function lerp$4(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */


function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */


function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */


function random$3(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */


function transformMat4$2(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */


function transformMat3$1(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */


function transformQuat$1(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */


function rotateX$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */


function rotateY$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */


function rotateZ$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */


function angle$1(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot$4$1(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */


function zero$2(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */


function str$4(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


function exactEquals$4(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


function equals$4(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */


var sub$2 = subtract$2;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul$4 = multiply$4;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div$2 = divide$2;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist$2 = distance$2;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist$2 = squaredDistance$2;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len$4$1 = length$4$1;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen$4 = squaredLength$4;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach$2 = function () {
  var vec = create$4$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

var vec3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create$4$1,
  clone: clone$4,
  length: length$4$1,
  fromValues: fromValues$4$1,
  copy: copy$4,
  set: set$4,
  add: add$4,
  subtract: subtract$2,
  multiply: multiply$4,
  divide: divide$2,
  ceil: ceil$2,
  floor: floor$2,
  min: min$2,
  max: max$2,
  round: round$2,
  scale: scale$4,
  scaleAndAdd: scaleAndAdd$2,
  distance: distance$2,
  squaredDistance: squaredDistance$2,
  squaredLength: squaredLength$4,
  negate: negate$2,
  inverse: inverse$2,
  normalize: normalize$4$1,
  dot: dot$4$1,
  cross: cross$2$1,
  lerp: lerp$4,
  hermite: hermite,
  bezier: bezier,
  random: random$3,
  transformMat4: transformMat4$2,
  transformMat3: transformMat3$1,
  transformQuat: transformQuat$1,
  rotateX: rotateX$2,
  rotateY: rotateY$2,
  rotateZ: rotateZ$2,
  angle: angle$1,
  zero: zero$2,
  str: str$4,
  exactEquals: exactEquals$4,
  equals: equals$4,
  sub: sub$2,
  mul: mul$4,
  div: div$2,
  dist: dist$2,
  sqrDist: sqrDist$2,
  len: len$4$1,
  sqrLen: sqrLen$4,
  forEach: forEach$2
});
/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create$3$1() {
  var out = new ARRAY_TYPE$1(4);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */


function normalize$3$1(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$3$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
})();
/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create$2$1() {
  var out = new ARRAY_TYPE$1(4);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/


function setAxisAngle$1(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */


function slerp$1(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON$1) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */


function fromMat3$1(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize$2$1 = normalize$3$1;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

(function () {
  var tmpvec3 = create$4$1();
  var xUnitVec3 = fromValues$4$1(1, 0, 0);
  var yUnitVec3 = fromValues$4$1(0, 1, 0);
  return function (out, a, b) {
    var dot = dot$4$1(a, b);

    if (dot < -0.999999) {
      cross$2$1(tmpvec3, xUnitVec3, a);
      if (len$4$1(tmpvec3) < 0.000001) cross$2$1(tmpvec3, yUnitVec3, a);
      normalize$4$1(tmpvec3, tmpvec3);
      setAxisAngle$1(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross$2$1(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize$2$1(out, out);
    }
  };
})();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */


(function () {
  var temp1 = create$2$1();
  var temp2 = create$2$1();
  return function (out, a, b, c, d, t) {
    slerp$1(temp1, a, d, t);
    slerp$1(temp2, b, c, t);
    slerp$1(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
})();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */


(function () {
  var matr = create$6$1();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize$2$1(out, fromMat3$1(out, matr));
  };
})();
/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create$1() {
  var out = new ARRAY_TYPE$1(2);

  if (ARRAY_TYPE$1 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
})();

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */

function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */


function writable(value, start = noop) {
  let stop;
  const subscribers = new Set();

  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;

      if (stop) {
        // store is ready
        const run_queue = !subscriber_queue.length;

        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }

        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }

          subscriber_queue.length = 0;
        }
      }
    }
  }

  function update(fn) {
    set(fn(value));
  }

  function subscribe(run, invalidate = noop) {
    const subscriber = [run, invalidate];
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }

    run(value);
    return () => {
      subscribers.delete(subscriber);

      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }

  return {
    set,
    update,
    subscribe
  };
}

function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  const auto = fn.length < 2;
  return readable(initial_value, set => {
    let inited = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;

    const sync = () => {
      if (pending) {
        return;
      }

      cleanup();
      const result = fn(single ? values[0] : values, set);

      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };

    const unsubscribers = stores_array.map((store, i) => subscribe(store, value => {
      values[i] = value;
      pending &= ~(1 << i);

      if (inited) {
        sync();
      }
    }, () => {
      pending |= 1 << i;
    }));
    inited = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
    };
  });
}

/**
 * Provides a method to determine if the passed in Svelte component has a getter accessor.
 *
 * @param {*}        component - Svelte component.
 *
 * @param {string}   accessor - Accessor to test.
 *
 * @returns {boolean} Whether the component has the getter for accessor.
 */


function hasGetter(component, accessor) {
  if (component === null || component === void 0) {
    return false;
  } // Get the prototype which is the parent SvelteComponent that has any getter / setters.


  const prototype = Object.getPrototypeOf(component);
  const descriptor = Object.getOwnPropertyDescriptor(prototype, accessor);
  return !(descriptor === void 0 || descriptor.get === void 0);
}

const s_REGEX$1 = /(\d+)\s*px/;
/**
 * Parses a pixel string / computed styles. Ex. `100px` returns `100`.
 *
 * @param {string}   value - Value to parse.
 *
 * @returns {number|undefined} The integer component of a pixel string.
 */

function styleParsePixels$1(value) {
  if (typeof value !== 'string') {
    return void 0;
  }

  const isPixels = s_REGEX$1.test(value);
  const number = parseInt(value);
  return isPixels && Number.isFinite(number) ? number : void 0;
}
/**
 * Defines the application shell contract. If Svelte components export getter / setters for the following properties
 * then that component is considered an application shell.
 *
 * @type {string[]}
 */


const applicationShellContract$1 = ['elementRoot'];
Object.freeze(applicationShellContract$1);
/**
 * Provides a method to determine if the passed in object is ApplicationShell or TJSApplicationShell.
 *
 * @param {*}  component - Object / component to test.
 *
 * @returns {boolean} Whether the component is a ApplicationShell or TJSApplicationShell.
 */

function isApplicationShell(component) {
  if (component === null || component === void 0) {
    return false;
  } // Get the prototype which is the parent SvelteComponent that has any getter / setters.


  const prototype = Object.getPrototypeOf(component); // Verify the application shell contract. If the accessors (getters / setters) are defined for
  // `applicationShellContract`.

  for (const accessor of applicationShellContract$1) {
    const descriptor = Object.getOwnPropertyDescriptor(prototype, accessor);

    if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) {
      return false;
    }
  }

  return true;
}
/**
 * Provides basic duck typing to determine if the provided function is a constructor function for a Svelte component.
 *
 * @param {*}  comp - Data to check as a Svelte component.
 *
 * @returns {boolean} Whether basic duck typing succeeds.
 */


function isSvelteComponent(comp) {
  if (comp === null || comp === void 0 || typeof comp !== 'function') {
    return false;
  }

  return typeof window !== void 0 ? typeof comp.prototype.$destroy === 'function' && typeof comp.prototype.$on === 'function' : // client-side
  typeof comp.render === 'function'; // server-side
}
/**
 * Runs outro transition then destroys Svelte component.
 *
 * Workaround for https://github.com/sveltejs/svelte/issues/4056
 *
 * @param {*}  instance - A Svelte component.
 */


async function outroAndDestroy(instance) {
  return new Promise(resolve => {
    if (instance.$$.fragment && instance.$$.fragment.o) {
      group_outros();
      transition_out(instance.$$.fragment, 0, 0, () => {
        instance.$destroy();
        resolve();
      });
      check_outros();
    } else {
      instance.$destroy();
      resolve();
    }
  });
}
/**
 * Parses a TyphonJS Svelte config object ensuring that classes specified are Svelte components and props are set
 * correctly.
 *
 * @param {object}   config - Svelte config object.
 *
 * @param {*}        [thisArg] - `This` reference to set for invoking any props function.
 *
 * @returns {object} The processed Svelte config object.
 */


function parseSvelteConfig(config, thisArg = void 0) {
  if (typeof config !== 'object') {
    throw new TypeError(`parseSvelteConfig - 'config' is not an object:\n${JSON.stringify(config)}.`);
  }

  if (!isSvelteComponent(config.class)) {
    throw new TypeError(`parseSvelteConfig - 'class' is not a Svelte component constructor for config:\n${JSON.stringify(config)}.`);
  }

  if (config.hydrate !== void 0 && typeof config.hydrate !== 'boolean') {
    throw new TypeError(`parseSvelteConfig - 'hydrate' is not a boolean for config:\n${JSON.stringify(config)}.`);
  }

  if (config.intro !== void 0 && typeof config.intro !== 'boolean') {
    throw new TypeError(`parseSvelteConfig - 'intro' is not a boolean for config:\n${JSON.stringify(config)}.`);
  }

  if (config.target !== void 0 && typeof config.target !== 'string' && !(config.target instanceof HTMLElement) && !(config.target instanceof ShadowRoot) && !(config.target instanceof DocumentFragment)) {
    throw new TypeError(`parseSvelteConfig - 'target' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\n${JSON.stringify(config)}.`);
  }

  if (config.anchor !== void 0 && typeof config.anchor !== 'string' && !(config.anchor instanceof HTMLElement) && !(config.anchor instanceof ShadowRoot) && !(config.anchor instanceof DocumentFragment)) {
    throw new TypeError(`parseSvelteConfig - 'anchor' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\n${JSON.stringify(config)}.`);
  }

  if (config.context !== void 0 && typeof config.context !== 'function' && !(config.context instanceof Map) && typeof config.context !== 'object') {
    throw new TypeError(`parseSvelteConfig - 'context' is not a Map, function or object for config:\n${JSON.stringify(config)}.`);
  } // Validate extra TyphonJS options --------------------------------------------------------------------------------
  // `selectorTarget` optionally stores a target element found in main element.


  if (config.selectorTarget !== void 0 && typeof config.selectorTarget !== 'string') {
    throw new TypeError(`parseSvelteConfig - 'selectorTarget' is not a string for config:\n${JSON.stringify(config)}.`);
  } // `options` stores `injectApp`, `injectEventbus`, and `selectorElement`.


  if (config.options !== void 0 && typeof config.options !== 'object') {
    throw new TypeError(`parseSvelteConfig - 'options' is not an object for config:\n${JSON.stringify(config)}.`);
  } // Validate TyphonJS standard options.


  if (config.options !== void 0) {
    if (config.options.injectApp !== void 0 && typeof config.options.injectApp !== 'boolean') {
      throw new TypeError(`parseSvelteConfig - 'options.injectApp' is not a boolean for config:\n${JSON.stringify(config)}.`);
    }

    if (config.options.injectEventbus !== void 0 && typeof config.options.injectEventbus !== 'boolean') {
      throw new TypeError(`parseSvelteConfig - 'options.injectEventbus' is not a boolean for config:\n${JSON.stringify(config)}.`);
    } // `selectorElement` optionally stores a main element selector to be found in a HTMLElement target.


    if (config.options.selectorElement !== void 0 && typeof config.options.selectorElement !== 'string') {
      throw new TypeError(`parseSvelteConfig - 'selectorElement' is not a string for config:\n${JSON.stringify(config)}.`);
    }
  }

  const svelteConfig = _objectSpread2({}, config); // Delete extra Svelte options.


  delete svelteConfig.options;
  let externalContext = {}; // If a context callback function is provided then invoke it with `this` being the Foundry app.
  // If an object is returned it adds the entries to external context.

  if (typeof svelteConfig.context === 'function') {
    const contextFunc = svelteConfig.context;
    delete svelteConfig.context;
    const result = contextFunc.call(thisArg);

    if (typeof result === 'object') {
      externalContext = _objectSpread2({}, result);
    } else {
      throw new Error(`parseSvelteConfig - 'context' is a function that did not return an object for config:\n${JSON.stringify(config)}`);
    }
  } else if (svelteConfig.context instanceof Map) {
    externalContext = Object.fromEntries(svelteConfig.context);
    delete svelteConfig.context;
  } else if (typeof svelteConfig.context === 'object') {
    externalContext = svelteConfig.context;
    delete svelteConfig.context;
  } // If a props is a function then invoke it with `this` being the Foundry app.
  // If an object is returned set it as the props.


  svelteConfig.props = s_PROCESS_PROPS(svelteConfig.props, thisArg, config); // Process children components attaching to external context.

  if (Array.isArray(svelteConfig.children)) {
    const children = [];

    for (let cntr = 0; cntr < svelteConfig.children.length; cntr++) {
      const child = svelteConfig.children[cntr];

      if (!isSvelteComponent(child.class)) {
        throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for child[${cntr}] for config:\n${JSON.stringify(config)}`);
      }

      child.props = s_PROCESS_PROPS(child.props, thisArg, config);
      children.push(child);
    }

    if (children.length > 0) {
      externalContext.children = children;
    }

    delete svelteConfig.children;
  } else if (typeof svelteConfig.children === 'object') {
    if (!isSvelteComponent(svelteConfig.children.class)) {
      throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for children object for config:\n${JSON.stringify(config)}`);
    }

    svelteConfig.children.props = s_PROCESS_PROPS(svelteConfig.children.props, thisArg, config);
    externalContext.children = [svelteConfig.children];
    delete svelteConfig.children;
  }

  if (!(svelteConfig.context instanceof Map)) {
    svelteConfig.context = new Map();
  }

  svelteConfig.context.set('external', externalContext);
  return svelteConfig;
}
/**
 * Processes Svelte props. Potentially props can be a function to invoke with `thisArg`.
 *
 * @param {object|Function}   props - Svelte props.
 *
 * @param {*}                 thisArg - `This` reference to set for invoking any props function.
 *
 * @param {object}            config - Svelte config
 *
 * @returns {object|void}     Svelte props.
 */


function s_PROCESS_PROPS(props, thisArg, config) {
  // If a props is a function then invoke it with `this` being the Foundry app.
  // If an object is returned set it as the props.
  if (typeof props === 'function') {
    const result = props.call(thisArg);

    if (typeof result === 'object') {
      return result;
    } else {
      throw new Error(`parseSvelteConfig - 'props' is a function that did not return an object for config:\n${JSON.stringify(config)}`);
    }
  } else if (typeof props === 'object') {
    return props;
  } else if (props !== void 0) {
    throw new Error(`parseSvelteConfig - 'props' is not a function or an object for config:\n${JSON.stringify(config)}`);
  }

  return {};
}
/**
 * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /
 * equality tests, and validation.
 */


const s_TAG_OBJECT = '[object Object]';
/**
 * Recursively deep merges all source objects into the target object in place. Like `Object.assign` if you provide `{}`
 * as the target a copy is produced. If the target and source property are object literals they are merged.
 * Deleting keys is supported by specifying a property starting with `-=`.
 *
 * @param {object}      target - Target object.
 *
 * @param {...object}   sourceObj - One or more source objects.
 *
 * @returns {object}    Target object.
 */

function deepMerge(target = {}, ...sourceObj) {
  if (Object.prototype.toString.call(target) !== s_TAG_OBJECT) {
    throw new TypeError(`deepMerge error: 'target' is not an 'object'.`);
  }

  for (let cntr = 0; cntr < sourceObj.length; cntr++) {
    if (Object.prototype.toString.call(sourceObj[cntr]) !== s_TAG_OBJECT) {
      throw new TypeError(`deepMerge error: 'sourceObj[${cntr}]' is not an 'object'.`);
    }
  }

  return _deepMerge(target, ...sourceObj);
}
/**
 * Tests for whether an object is iterable.
 *
 * @param {object} object - An object.
 *
 * @returns {boolean} Whether object is iterable.
 */


function isIterable(object) {
  if (object === null || object === void 0 || typeof object !== 'object') {
    return false;
  }

  return typeof object[Symbol.iterator] === 'function';
}
/**
 * Tests for whether object is not null and a typeof object.
 *
 * @param {object} object - An object.
 *
 * @returns {boolean} Is it an object.
 */


function isObject(object) {
  return object !== null && typeof object === 'object';
}
/**
 * Provides a way to safely access an objects data / entries given an accessor string which describes the
 * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
 * to walk.
 *
 * @param {object}   data - An object to access entry data.
 *
 * @param {string}   accessor - A string describing the entries to access.
 *
 * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.
 *
 * @returns {object} The data object.
 */


function safeAccess(data, accessor, defaultValue = void 0) {
  if (typeof data !== 'object') {
    return defaultValue;
  }

  if (typeof accessor !== 'string') {
    return defaultValue;
  }

  const access = accessor.split('.'); // Walk through the given object by the accessor indexes.

  for (let cntr = 0; cntr < access.length; cntr++) {
    // If the next level of object access is undefined or null then return the empty string.
    if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) {
      return defaultValue;
    }

    data = data[access[cntr]];
  }

  return data;
}
/**
 * Provides a way to safely set an objects data / entries given an accessor string which describes the
 * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
 * to walk.
 *
 * @param {object}   data - An object to access entry data.
 *
 * @param {string}   accessor - A string describing the entries to access.
 *
 * @param {*}        value - A new value to set if an entry for accessor is found.
 *
 * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',
 *                                       'set-undefined', 'sub'.
 *
 * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects
 *                                          automatically.
 *
 * @returns {boolean} True if successful.
 */


function safeSet(data, accessor, value, operation = 'set', createMissing = true) {
  if (typeof data !== 'object') {
    throw new TypeError(`safeSet Error: 'data' is not an 'object'.`);
  }

  if (typeof accessor !== 'string') {
    throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`);
  }

  const access = accessor.split('.'); // Walk through the given object by the accessor indexes.

  for (let cntr = 0; cntr < access.length; cntr++) {
    // If data is an array perform validation that the accessor is a positive integer otherwise quit.
    if (Array.isArray(data)) {
      const number = +access[cntr];

      if (!Number.isInteger(number) || number < 0) {
        return false;
      }
    }

    if (cntr === access.length - 1) {
      switch (operation) {
        case 'add':
          data[access[cntr]] += value;
          break;

        case 'div':
          data[access[cntr]] /= value;
          break;

        case 'mult':
          data[access[cntr]] *= value;
          break;

        case 'set':
          data[access[cntr]] = value;
          break;

        case 'set-undefined':
          if (typeof data[access[cntr]] === 'undefined') {
            data[access[cntr]] = value;
          }

          break;

        case 'sub':
          data[access[cntr]] -= value;
          break;
      }
    } else {
      // If createMissing is true and the next level of object access is undefined then create a new object entry.
      if (createMissing && typeof data[access[cntr]] === 'undefined') {
        data[access[cntr]] = {};
      } // Abort if the next level is null or not an object and containing a value.


      if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') {
        return false;
      }

      data = data[access[cntr]];
    }
  }

  return true;
}
/**
 * Internal implementation for `deepMerge`.
 *
 * @param {object}      target - Target object.
 *
 * @param {...object}   sourceObj - One or more source objects.
 *
 * @returns {object}    Target object.
 */


function _deepMerge(target = {}, ...sourceObj) {
  // Iterate and merge all source objects into target.
  for (let cntr = 0; cntr < sourceObj.length; cntr++) {
    const obj = sourceObj[cntr];

    for (const prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        var _target$prop, _obj$prop;

        // Handle the special property starting with '-=' to delete keys.
        if (prop.startsWith('-=')) {
          delete target[prop.slice(2)];
          continue;
        } // If target already has prop and both target[prop] and obj[prop] are object literals then merge them
        // otherwise assign obj[prop] to target[prop].


        target[prop] = Object.prototype.hasOwnProperty.call(target, prop) && ((_target$prop = target[prop]) === null || _target$prop === void 0 ? void 0 : _target$prop.constructor) === Object && ((_obj$prop = obj[prop]) === null || _obj$prop === void 0 ? void 0 : _obj$prop.constructor) === Object ? _deepMerge({}, target[prop], obj[prop]) : obj[prop];
      }
    }
  }

  return target;
}

/**
 * Subscribes to the given store with the update function provided and ignores the first automatic
 * update. All future updates are dispatched to the update function.
 *
 * @param {import('svelte/store').Readable | import('svelte/store').Writable} store -
 *  Store to subscribe to...
 *
 * @param {import('svelte/store').Updater} update - function to receive future updates.
 *
 * @returns {import('svelte/store').Unsubscriber} Store unsubscribe function.
 */


function subscribeIgnoreFirst(store, update) {
  let firedFirst = false;
  return store.subscribe(value => {
    if (!firedFirst) {
      firedFirst = true;
    } else {
      update(value);
    }
  });
}
/**
 * @external Store
 * @see [Svelte stores](https://svelte.dev/docs#Store_contract)
 */

/**
 * Create a store similar to [Svelte's `derived`](https://svelte.dev/docs#derived), but which
 * has its own `set` and `update` methods and can send values back to the origin stores.
 * [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#default-export-writablederived)
 * 
 * @param {Store|Store[]} origins One or more stores to derive from. Same as
 * [`derived`](https://svelte.dev/docs#derived)'s 1st parameter.
 * @param {!Function} derive The callback to determine the derived value. Same as
 * [`derived`](https://svelte.dev/docs#derived)'s 2nd parameter.
 * @param {!Function|{withOld: !Function}} reflect Called when the
 * derived store gets a new value via its `set` or `update` methods, and determines new values for
 * the origin stores. [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#new-parameter-reflect)
 * @param [initial] The new store's initial value. Same as
 * [`derived`](https://svelte.dev/docs#derived)'s 3rd parameter.
 * 
 * @returns {Store} A writable store.
 */


function writableDerived(origins, derive, reflect, initial) {
  var childDerivedSetter,
      originValues,
      allowDerive = true;
  var reflectOldValues = ("withOld" in reflect);

  var wrappedDerive = (got, set) => {
    childDerivedSetter = set;

    if (reflectOldValues) {
      originValues = got;
    }

    if (allowDerive) {
      let returned = derive(got, set);

      if (derive.length < 2) {
        set(returned);
      } else {
        return returned;
      }
    }
  };

  var childDerived = derived(origins, wrappedDerive, initial);
  var singleOrigin = !Array.isArray(origins);

  var sendUpstream = setWith => {
    allowDerive = false;

    if (singleOrigin) {
      origins.set(setWith);
    } else {
      setWith.forEach((value, i) => {
        origins[i].set(value);
      });
    }

    allowDerive = true;
  };

  if (reflectOldValues) {
    reflect = reflect.withOld;
  }

  var reflectIsAsync = reflect.length >= (reflectOldValues ? 3 : 2);
  var cleanup = null;

  function doReflect(reflecting) {
    if (cleanup) {
      cleanup();
      cleanup = null;
    }

    if (reflectOldValues) {
      var returned = reflect(reflecting, originValues, sendUpstream);
    } else {
      var returned = reflect(reflecting, sendUpstream);
    }

    if (reflectIsAsync) {
      if (typeof returned == "function") {
        cleanup = returned;
      }
    } else {
      sendUpstream(returned);
    }
  }

  var tryingSet = false;

  function update(fn) {
    var isUpdated, mutatedBySubscriptions, oldValue, newValue;

    if (tryingSet) {
      newValue = fn(get_store_value(childDerived));
      childDerivedSetter(newValue);
      return;
    }

    var unsubscribe = childDerived.subscribe(value => {
      if (!tryingSet) {
        oldValue = value;
      } else if (!isUpdated) {
        isUpdated = true;
      } else {
        mutatedBySubscriptions = true;
      }
    });
    newValue = fn(oldValue);
    tryingSet = true;
    childDerivedSetter(newValue);
    unsubscribe();
    tryingSet = false;

    if (mutatedBySubscriptions) {
      newValue = get_store_value(childDerived);
    }

    if (isUpdated) {
      doReflect(newValue);
    }
  }

  return {
    subscribe: childDerived.subscribe,

    set(value) {
      update(() => value);
    },

    update
  };
}
/**
 * Create a store for a property value in an object contained in another store.
 * [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#named-export-propertystore)
 * 
 * @param {Store} origin The store containing the object to get/set from.
 * @param {string|number|symbol|Array<string|number|symbol>} propName The property to get/set, or a path of
 * properties in nested objects.
 *
 * @returns {Store} A writable store.
 */


function propertyStore(origin, propName) {
  if (!Array.isArray(propName)) {
    return writableDerived(origin, object => object[propName], {
      withOld(reflecting, object) {
        object[propName] = reflecting;
        return object;
      }

    });
  } else {
    let props = propName.concat();
    return writableDerived(origin, value => {
      for (let i = 0; i < props.length; ++i) {
        value = value[props[i]];
      }

      return value;
    }, {
      withOld(reflecting, object) {
        let target = object;

        for (let i = 0; i < props.length - 1; ++i) {
          target = target[props[i]];
        }

        target[props[props.length - 1]] = reflecting;
        return object;
      }

    });
  }
}

const storeState = writable(void 0);
/**
 * @type {GameState} Provides a Svelte store wrapping the Foundry runtime / global game state.
 */

const gameState = {
  subscribe: storeState.subscribe,
  get: () => game
};
Object.freeze(gameState);
Hooks.once('ready', () => storeState.set(game));

/**
 * Awaits `requestAnimationFrame` calls by the counter specified. This allows asynchronous applications for direct /
 * inline style modification amongst other direct animation techniques.
 *
 * @param {number}   [cntr=1] - A positive integer greater than 0 for amount of requestAnimationFrames to wait.
 *
 * @returns {Promise<number>} Returns current time equivalent to `performance.now()`.
 */
async function nextAnimationFrame$1(cntr = 1) {
  if (!Number.isInteger(cntr) || cntr < 1) {
    throw new TypeError(`nextAnimationFrame error: 'cntr' must be a positive integer greater than 0.`);
  }

  let currentTime = performance.now();

  for (; --cntr >= 0;) {
    currentTime = await new Promise(resolve => requestAnimationFrame(resolve));
  }

  return currentTime;
}

let s_PROMISE$1;
const s_LIST = [];
let s_LIST_CNTR = 0;
/**
 * Decouples updates to any parent target HTMLElement inline styles. Invoke {@link Position.elementUpdated} to await
 * on the returned promise that is resolved with the current render time via `nextAnimationFrame` /
 * `requestAnimationFrame`. This allows the underlying data model to be updated immediately while updates to the
 * element are in sync with the browser and potentially in the future be further throttled.
 *
 * @param {HTMLElement} el - The target HTMLElement.
 */

class UpdateElementManager {
  static get promise() {
    return s_PROMISE$1;
  }
  /**
   * Potentially adds the given element and callback to the map.
   *
   * @param {HTMLElement}       el - An HTMLElement instance.
   *
   * @param {UpdateElementData} updateData - An UpdateElementData instance.
   *
   * @returns {Promise<number>} The unified next frame update promise. Returns `currentTime`.
   */


  static add(el, updateData) {
    if (s_LIST_CNTR < s_LIST.length) {
      const entry = s_LIST[s_LIST_CNTR];
      entry[0] = el;
      entry[1] = updateData;
    } else {
      s_LIST.push([el, updateData]);
    }

    s_LIST_CNTR++;
    updateData.queued = true;

    if (!s_PROMISE$1) {
      s_PROMISE$1 = this.wait();
    }

    return s_PROMISE$1;
  }
  /**
   * Await on `nextAnimationFrame` and iterate over map invoking callback function.s
   *
   * @returns {Promise<number>} The next frame Promise / currentTime from nextAnimationFrame.
   */


  static async wait() {
    // Await the next animation frame. In the future this can be extended to multiple frames to divide update rate.
    const currentTime = await nextAnimationFrame$1();
    s_PROMISE$1 = void 0;

    for (let cntr = s_LIST_CNTR; --cntr >= 0;) {
      // Obtain data for entry.
      const entry = s_LIST[cntr];
      const el = entry[0];
      const updateData = entry[1]; // Clear entry data.

      entry[0] = void 0;
      entry[1] = void 0; // Reset queued state.

      updateData.queued = false; // Early out if the element is no longer connected to the DOM / shadow root.
      // if (!el.isConnected || !updateData.changeSet.hasChange()) { continue; }

      if (!el.isConnected) {
        continue;
      }

      if (updateData.options.ortho) {
        s_UPDATE_ELEMENT_ORTHO(el, updateData);
      } else {
        s_UPDATE_ELEMENT(el, updateData);
      } // If calculate transform options is enabled then update the transform data and set the readable store.


      if (updateData.options.calculateTransform || updateData.options.transformSubscribed) {
        s_UPDATE_TRANSFORM(el, updateData);
      } // Update all subscribers with changed data.


      this.updateSubscribers(updateData);
    }

    s_LIST_CNTR = 0;
    return currentTime;
  }
  /**
   * @param {UpdateElementData} updateData - Data change set.
   */


  static updateSubscribers(updateData) {
    const data = updateData.data;
    const changeSet = updateData.changeSet;

    if (!changeSet.hasChange()) {
      return;
    } // Make a copy of the data.


    const output = updateData.dataSubscribers.copy(data);
    const subscriptions = updateData.subscriptions; // Early out if there are no subscribers.

    if (subscriptions.length > 0) {
      for (let cntr = 0; cntr < subscriptions.length; cntr++) {
        subscriptions[cntr](output);
      }
    } // Update dimension data if width / height has changed.


    if (changeSet.width || changeSet.height) {
      updateData.dimensionData.width = data.width;
      updateData.dimensionData.height = data.height;
      updateData.storeDimension.set(updateData.dimensionData);
    }

    changeSet.set(false);
  }

}
/**
 * Decouples updates to any parent target HTMLElement inline styles. Invoke {@link Position.elementUpdated} to await
 * on the returned promise that is resolved with the current render time via `nextAnimationFrame` /
 * `requestAnimationFrame`. This allows the underlying data model to be updated immediately while updates to the
 * element are in sync with the browser and potentially in the future be further throttled.
 *
 * @param {HTMLElement} el - The target HTMLElement.
 *
 * @param {UpdateElementData} updateData - Update data.
 */

function s_UPDATE_ELEMENT(el, updateData) {
  const changeSet = updateData.changeSet;
  const data = updateData.data;

  if (changeSet.left) {
    el.style.left = `${data.left}px`;
  }

  if (changeSet.top) {
    el.style.top = `${data.top}px`;
  }

  if (changeSet.zIndex) {
    el.style.zIndex = typeof data.zIndex === 'number' ? `${data.zIndex}` : null;
  }

  if (changeSet.width) {
    el.style.width = typeof data.width === 'number' ? `${data.width}px` : data.width;
  }

  if (changeSet.height) {
    el.style.height = typeof data.height === 'number' ? `${data.height}px` : data.height;
  }

  if (changeSet.transformOrigin) {
    // When set to 'center' we can simply set the transform to null which is center by default.
    el.style.transformOrigin = data.transformOrigin === 'center' ? null : data.transformOrigin;
  } // Update all transforms in order added to transforms object.


  if (changeSet.transform) {
    el.style.transform = updateData.transforms.isActive ? updateData.transforms.getCSS() : null;
  }
}
/**
 * Decouples updates to any parent target HTMLElement inline styles. Invoke {@link Position.elementUpdated} to await
 * on the returned promise that is resolved with the current render time via `nextAnimationFrame` /
 * `requestAnimationFrame`. This allows the underlying data model to be updated immediately while updates to the
 * element are in sync with the browser and potentially in the future be further throttled.
 *
 * @param {HTMLElement} el - The target HTMLElement.
 *
 * @param {UpdateElementData} updateData - Update data.
 */


function s_UPDATE_ELEMENT_ORTHO(el, updateData) {
  const changeSet = updateData.changeSet;
  const data = updateData.data;

  if (changeSet.zIndex) {
    el.style.zIndex = typeof data.zIndex === 'number' ? `${data.zIndex}` : null;
  }

  if (changeSet.width) {
    el.style.width = typeof data.width === 'number' ? `${data.width}px` : data.width;
  }

  if (changeSet.height) {
    el.style.height = typeof data.height === 'number' ? `${data.height}px` : data.height;
  }

  if (changeSet.transformOrigin) {
    // When set to 'center' we can simply set the transform to null which is center by default.
    el.style.transformOrigin = data.transformOrigin === 'center' ? null : data.transformOrigin;
  } // Update all transforms in order added to transforms object.


  if (changeSet.left || changeSet.top || changeSet.transform) {
    el.style.transform = updateData.transforms.getCSSOrtho(data);
  }
}
/**
 * Updates the applied transform data and sets the readble `transform` store.
 *
 * @param {HTMLElement} el - The target HTMLElement.
 *
 * @param {UpdateElementData} updateData - Update element data.
 */


function s_UPDATE_TRANSFORM(el, updateData) {
  s_VALIDATION_DATA$1.height = updateData.data.height !== 'auto' ? updateData.data.height : updateData.styleCache.offsetHeight;
  s_VALIDATION_DATA$1.width = updateData.data.width !== 'auto' ? updateData.data.width : updateData.styleCache.offsetWidth;
  s_VALIDATION_DATA$1.marginLeft = updateData.styleCache.marginLeft;
  s_VALIDATION_DATA$1.marginTop = updateData.styleCache.marginTop; // Get transform data. First set constraints including any margin top / left as offsets and width / height. Used
  // when position width / height is 'auto'.

  updateData.transforms.getData(updateData.data, updateData.transformData, s_VALIDATION_DATA$1);
  updateData.storeTransform.set(updateData.transformData);
}

const s_VALIDATION_DATA$1 = {
  height: void 0,
  width: void 0,
  marginLeft: void 0,
  marginTop: void 0
};

const s_ACTIVE_LIST = [];
const s_NEW_LIST = [];
let s_PROMISE;
/**
 * Provides animation management and scheduling allowing all Position instances to utilize one micro-task.
 */

class AnimationManager {
  /**
   * Add animation data.
   *
   * @param {object}   data -
   */
  static add(data) {
    s_NEW_LIST.push(data);

    if (!s_PROMISE) {
      s_PROMISE = this.animate();
    }
  }
  /**
   * Manage all animation
   *
   * @returns {Promise<void>}
   */


  static async animate() {
    let current = await nextAnimationFrame$1();

    while (s_ACTIVE_LIST.length || s_NEW_LIST.length) {
      if (s_NEW_LIST.length) {
        // Process new data
        for (let cntr = s_NEW_LIST.length; --cntr >= 0;) {
          const data = s_NEW_LIST[cntr];
          data.start = current;
          data.current = 0;
          s_ACTIVE_LIST.push(data);
        }

        s_NEW_LIST.length = 0;
      } // Process existing data.


      for (let cntr = s_ACTIVE_LIST.length; --cntr >= 0;) {
        const data = s_ACTIVE_LIST[cntr]; // Ensure that the element is still connected otherwise remove it from active list and continue.

        if (!data.el.isConnected) {
          s_ACTIVE_LIST.splice(cntr, 1);
          data.currentAnimationKeys.clear();
          data.resolve();
          continue;
        }

        data.current = current - data.start; // Remove this animation instance.

        if (data.current >= data.duration) {
          // Prepare final update with end position data and remove keys from `currentAnimationKeys`.
          for (let dataCntr = data.keys.length; --dataCntr >= 0;) {
            const key = data.keys[dataCntr];
            data.newData[key] = data.destination[key];
            data.currentAnimationKeys.delete(key);
          }

          data.position.set(data.newData);
          s_ACTIVE_LIST.splice(cntr, 1);
          data.resolve();
          continue;
        }

        const easedTime = data.easing(data.current / data.duration);

        for (let dataCntr = data.keys.length; --dataCntr >= 0;) {
          const key = data.keys[dataCntr];
          data.newData[key] = data.interpolate(data.initial[key], data.destination[key], easedTime);
        }

        data.position.set(data.newData);
      }

      const newCurrent = await UpdateElementManager.promise; // Must check that time has passed otherwise likely the element has been removed.

      if (newCurrent === void 0 || newCurrent <= current) {
        // TODO: Temporary warning message
        // console.warn(`TRL - AnimationManager Warning - quitting animation: newCurrent <= current.`);
        for (let cntr = s_ACTIVE_LIST.length; --cntr >= 0;) {
          const data = s_ACTIVE_LIST[cntr];

          if (!data.el.isConnected) {
            data.currentAnimationKeys.clear();
            data.resolve();
            continue;
          }

          for (let dataCntr = data.keys.length; --dataCntr >= 0;) {
            const key = data.keys[dataCntr];
            data.newData[key] = data.destination[key];
            data.currentAnimationKeys.delete(key);
          }

          data.position.set(data.newData);
          data.resolve();
        }

        s_ACTIVE_LIST.length = 0;
        break;
      }

      current = newCurrent;
    }

    s_PROMISE = void 0;
  }

}

/**
 * Defines the keys of PositionData that are transform keys.
 *
 * @type {string[]}
 */
const transformKeys = ['rotateX', 'rotateY', 'rotateZ', 'scale', 'translateX', 'translateY', 'translateZ'];
Object.freeze(transformKeys);
/**
 * Defines bitwise keys for transforms used in {@link Transforms.getMat4}.
 *
 * @type {object}
 */

const transformKeysBitwise = {
  rotateX: 1,
  rotateY: 2,
  rotateZ: 4,
  scale: 8,
  translateX: 16,
  translateY: 32,
  translateZ: 64
};
Object.freeze(transformKeysBitwise);
/**
 * Defines the default transform origin.
 *
 * @type {string}
 */

const transformOriginDefault = 'top left';
/**
 * Defines the valid transform origins.
 *
 * @type {string[]}
 */

const transformOrigins = ['top left', 'top center', 'top right', 'center left', 'center', 'center right', 'bottom left', 'bottom center', 'bottom right'];
Object.freeze(transformOrigins);

var _element$2 = /*#__PURE__*/new WeakMap();

var _height$2 = /*#__PURE__*/new WeakMap();

var _lock$2 = /*#__PURE__*/new WeakMap();

var _width$2 = /*#__PURE__*/new WeakMap();

class Centered {
  /**
   * @type {HTMLElement}
   */

  /**
   * Provides a manual setting of the element height. As things go `offsetHeight` causes a browser layout and is not
   * performance oriented. If manually set this height is used instead of `offsetHeight`.
   *
   * @type {number}
   */

  /**
   * Set from an optional value in the constructor to lock accessors preventing modification.
   */

  /**
   * Provides a manual setting of the element width. As things go `offsetWidth` causes a browser layout and is not
   * performance oriented. If manually set this width is used instead of `offsetWidth`.
   *
   * @type {number}
   */
  constructor({
    element,
    lock = false,
    width,
    height
  } = {}) {
    _classPrivateFieldInitSpec(this, _element$2, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _height$2, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _lock$2, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _width$2, {
      writable: true,
      value: void 0
    });

    this.element = element;
    this.width = width;
    this.height = height;

    _classPrivateFieldSet(this, _lock$2, typeof lock === 'boolean' ? lock : false);
  }

  get element() {
    return _classPrivateFieldGet(this, _element$2);
  }

  get height() {
    return _classPrivateFieldGet(this, _height$2);
  }

  get width() {
    return _classPrivateFieldGet(this, _width$2);
  }

  set element(element) {
    if (_classPrivateFieldGet(this, _lock$2)) {
      return;
    }

    if (element === void 0 || element === null || element instanceof HTMLElement) {
      _classPrivateFieldSet(this, _element$2, element);
    } else {
      throw new TypeError(`'element' is not a HTMLElement, undefined, or null.`);
    }
  }

  set height(height) {
    if (_classPrivateFieldGet(this, _lock$2)) {
      return;
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height$2, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }

  set width(width) {
    if (_classPrivateFieldGet(this, _lock$2)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width$2, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }
  }

  setDimension(width, height) {
    if (_classPrivateFieldGet(this, _lock$2)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width$2, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height$2, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }

  getLeft(width) {
    var _ref, _classPrivateFieldGet2, _classPrivateFieldGet3;

    // Determine containing bounds from manual values; or any element; lastly the browser width / height.
    const boundsWidth = (_ref = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _width$2)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _element$2)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.offsetWidth) !== null && _ref !== void 0 ? _ref : globalThis.innerWidth;
    return (boundsWidth - width) / 2;
  }

  getTop(height) {
    var _ref2, _classPrivateFieldGet4, _classPrivateFieldGet5;

    const boundsHeight = (_ref2 = (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _height$2)) !== null && _classPrivateFieldGet4 !== void 0 ? _classPrivateFieldGet4 : (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _element$2)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.offsetHeight) !== null && _ref2 !== void 0 ? _ref2 : globalThis.innerHeight;
    return (boundsHeight - height) / 2;
  }

}

const browserCentered = new Centered();

var positionInitial = /*#__PURE__*/Object.freeze({
  __proto__: null,
  browserCentered: browserCentered,
  Centered: Centered
});

class PositionChangeSet {
  constructor() {
    this.left = false;
    this.top = false;
    this.width = false;
    this.height = false;
    this.maxHeight = false;
    this.maxWidth = false;
    this.minHeight = false;
    this.minWidth = false;
    this.zIndex = false;
    this.transform = false;
    this.transformOrigin = false;
  }

  hasChange() {
    return this.left || this.top || this.width || this.height || this.maxHeight || this.maxWidth || this.minHeight || this.minWidth || this.zIndex || this.transform || this.transformOrigin;
  }

  set(value) {
    this.left = value;
    this.top = value;
    this.width = value;
    this.height = value;
    this.maxHeight = value;
    this.maxWidth = value;
    this.minHeight = value;
    this.minWidth = value;
    this.zIndex = value;
    this.transform = value;
    this.transformOrigin = value;
  }

}

/**
 * Defines stored positional data.
 */
class PositionData {
  constructor({
    height = null,
    left = null,
    maxHeight = null,
    maxWidth = null,
    minHeight = null,
    minWidth = null,
    rotateX = null,
    rotateY = null,
    rotateZ = null,
    scale = null,
    translateX = null,
    translateY = null,
    translateZ = null,
    top = null,
    transformOrigin = null,
    width = null,
    zIndex = null
  } = {}) {
    /**
     * @type {number|'auto'|null}
     */
    this.height = height;
    /**
     * @type {number|null}
     */

    this.left = left;
    /**
     * @type {number|null}
     */

    this.maxHeight = maxHeight;
    /**
     * @type {number|null}
     */

    this.maxWidth = maxWidth;
    /**
     * @type {number|null}
     */

    this.minHeight = minHeight;
    /**
     * @type {number|null}
     */

    this.minWidth = minWidth;
    /**
     * @type {number|null}
     */

    this.rotateX = rotateX;
    /**
     * @type {number|null}
     */

    this.rotateY = rotateY;
    /**
     * @type {number|null}
     */

    this.rotateZ = rotateZ;
    /**
     * @type {number|null}
     */

    this.scale = scale;
    /**
     * @type {number|null}
     */

    this.top = top;
    /**
     * @type {string|null}
     */

    this.transformOrigin = transformOrigin;
    /**
     * @type {number|null}
     */

    this.translateX = translateX;
    /**
     * @type {number|null}
     */

    this.translateY = translateY;
    /**
     * @type {number|null}
     */

    this.translateZ = translateZ;
    /**
     * @type {number|'auto'|null}
     */

    this.width = width;
    /**
     * @type {number|null}
     */

    this.zIndex = zIndex;
    Object.seal(this);
  }
  /**
   * Copies given data to this instance.
   *
   * @param {PositionData}   data - Copy from this instance.
   *
   * @returns {PositionData} This instance.
   */


  copy(data) {
    this.height = data.height;
    this.left = data.left;
    this.maxHeight = data.maxHeight;
    this.maxWidth = data.maxWidth;
    this.minHeight = data.minHeight;
    this.minWidth = data.minWidth;
    this.rotateX = data.rotateX;
    this.rotateY = data.rotateY;
    this.rotateZ = data.rotateZ;
    this.scale = data.scale;
    this.top = data.top;
    this.transformOrigin = data.transformOrigin;
    this.translateX = data.translateX;
    this.translateY = data.translateY;
    this.translateZ = data.translateZ;
    this.width = data.width;
    this.zIndex = data.zIndex;
    return this;
  }

}

class StyleCache {
  constructor() {
    /** @type {HTMLElement|undefined} */
    this.el = void 0;
    /** @type {CSSStyleDeclaration} */

    this.computed = void 0;
    /** @type {number|undefined} */

    this.marginLeft = void 0;
    /** @type {number|undefined} */

    this.marginTop = void 0;
    /** @type {number|undefined} */

    this.maxHeight = void 0;
    /** @type {number|undefined} */

    this.maxWidth = void 0;
    /** @type {number|undefined} */

    this.minHeight = void 0;
    /** @type {number|undefined} */

    this.minWidth = void 0;
    /** @type {boolean} */

    this.hasWillChange = false;
    /**
     * @type {ResizeObserverData}
     */

    this.resizeObserved = {
      contentHeight: void 0,
      contentWidth: void 0,
      offsetHeight: void 0,
      offsetWidth: void 0
    };
    /**
     * Provides a writable store to track offset & content width / height from an associated `resizeObserver` action.
     *
     * @type {Writable<ResizeObserverData>}
     */

    const storeResizeObserved = writable(this.resizeObserved);
    this.stores = {
      element: writable(this.el),
      resizeContentHeight: propertyStore(storeResizeObserved, 'contentHeight'),
      resizeContentWidth: propertyStore(storeResizeObserved, 'contentWidth'),
      resizeObserved: storeResizeObserved,
      resizeOffsetHeight: propertyStore(storeResizeObserved, 'offsetHeight'),
      resizeOffsetWidth: propertyStore(storeResizeObserved, 'offsetWidth')
    };
  }
  /**
   * Returns the cached offsetHeight from any attached `resizeObserver` action otherwise gets the offsetHeight from
   * the element directly. The more optimized path is using `resizeObserver` as getting it from the element
   * directly is more expensive and alters the execution order of an animation frame.
   *
   * @returns {number} The element offsetHeight.
   */


  get offsetHeight() {
    if (this.el instanceof HTMLElement) {
      return this.resizeObserved.offsetHeight !== void 0 ? this.resizeObserved.offsetHeight : this.el.offsetHeight;
    }

    throw new Error(`StyleCache - get offsetHeight error: no element assigned.`);
  }
  /**
   * Returns the cached offsetWidth from any attached `resizeObserver` action otherwise gets the offsetWidth from
   * the element directly. The more optimized path is using `resizeObserver` as getting it from the element
   * directly is more expensive and alters the execution order of an animation frame.
   *
   * @returns {number} The element offsetHeight.
   */


  get offsetWidth() {
    if (this.el instanceof HTMLElement) {
      return this.resizeObserved.offsetWidth !== void 0 ? this.resizeObserved.offsetWidth : this.el.offsetWidth;
    }

    throw new Error(`StyleCache - get offsetWidth error: no element assigned.`);
  }
  /**
   * @param {HTMLElement} el -
   *
   * @returns {boolean} Does element match cached element.
   */


  hasData(el) {
    return this.el === el;
  }
  /**
   * Resets the style cache.
   */


  reset() {
    // Remove will-change inline style from previous element if it is still connected.
    if (this.el instanceof HTMLElement && this.el.isConnected && !this.hasWillChange) {
      this.el.style.willChange = null;
    }

    this.el = void 0;
    this.computed = void 0;
    this.marginLeft = void 0;
    this.marginTop = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.minHeight = void 0;
    this.minWidth = void 0;
    this.hasWillChange = false; // Silently reset `resizedObserved`; With proper usage the `resizeObserver` action issues an update on removal.

    this.resizeObserved.contentHeight = void 0;
    this.resizeObserved.contentWidth = void 0;
    this.resizeObserved.offsetHeight = void 0;
    this.resizeObserved.offsetWidth = void 0; // Reset the tracked element this Position instance is modifying.

    this.stores.element.set(void 0);
  }
  /**
   * Updates the style cache with new data from the given element.
   *
   * @param {HTMLElement} el - An HTML element.
   */


  update(el) {
    var _styleParsePixels, _styleParsePixels2, _styleParsePixels3, _styleParsePixels4, _styleParsePixels5, _styleParsePixels6, _;

    this.el = el;
    this.computed = globalThis.getComputedStyle(el);
    this.marginLeft = (_styleParsePixels = styleParsePixels$1(el.style.marginLeft)) !== null && _styleParsePixels !== void 0 ? _styleParsePixels : styleParsePixels$1(this.computed.marginLeft);
    this.marginTop = (_styleParsePixels2 = styleParsePixels$1(el.style.marginTop)) !== null && _styleParsePixels2 !== void 0 ? _styleParsePixels2 : styleParsePixels$1(this.computed.marginTop);
    this.maxHeight = (_styleParsePixels3 = styleParsePixels$1(el.style.maxHeight)) !== null && _styleParsePixels3 !== void 0 ? _styleParsePixels3 : styleParsePixels$1(this.computed.maxHeight);
    this.maxWidth = (_styleParsePixels4 = styleParsePixels$1(el.style.maxWidth)) !== null && _styleParsePixels4 !== void 0 ? _styleParsePixels4 : styleParsePixels$1(this.computed.maxWidth); // Note that the computed styles for below will always be 0px / 0 when no style is active.

    this.minHeight = (_styleParsePixels5 = styleParsePixels$1(el.style.minHeight)) !== null && _styleParsePixels5 !== void 0 ? _styleParsePixels5 : styleParsePixels$1(this.computed.minHeight);
    this.minWidth = (_styleParsePixels6 = styleParsePixels$1(el.style.minWidth)) !== null && _styleParsePixels6 !== void 0 ? _styleParsePixels6 : styleParsePixels$1(this.computed.minWidth); // Tracks if there already is a will-change property on the inline or computed styles.

    const willChange = el.style.willChange !== '' ? el.style.willChange : (_ = void 0) !== null && _ !== void 0 ? _ : this.computed.willChange;
    this.hasWillChange = willChange !== '' && willChange !== 'auto'; // Update the tracked element this Position instance is modifying.

    this.stores.element.set(el);
  }

}

/**
 * Provides the output data for {@link Transforms.getData}.
 */

var _boundingRect = /*#__PURE__*/new WeakMap();

var _corners = /*#__PURE__*/new WeakMap();

var _mat = /*#__PURE__*/new WeakMap();

var _originTranslations = /*#__PURE__*/new WeakMap();

class TransformData {
  constructor() {
    _classPrivateFieldInitSpec(this, _boundingRect, {
      writable: true,
      value: new DOMRect()
    });

    _classPrivateFieldInitSpec(this, _corners, {
      writable: true,
      value: [vec3.create(), vec3.create(), vec3.create(), vec3.create()]
    });

    _classPrivateFieldInitSpec(this, _mat, {
      writable: true,
      value: mat4.create()
    });

    _classPrivateFieldInitSpec(this, _originTranslations, {
      writable: true,
      value: [mat4.create(), mat4.create()]
    });

    Object.seal(this);
  }
  /**
   * Stores the calculated bounding rectangle.
   *
   * @type {DOMRect}
   */


  /**
   * @returns {DOMRect} The bounding rectangle.
   */
  get boundingRect() {
    return _classPrivateFieldGet(this, _boundingRect);
  }
  /**
   * @returns {Vector3[]} The transformed corner points as vec3 in screen space.
   */


  get corners() {
    return _classPrivateFieldGet(this, _corners);
  }
  /**
   * @returns {string} Returns the CSS style string for the transform matrix.
   */


  get css() {
    return `matrix3d(${this.mat4.join(',')})`;
  }
  /**
   * @returns {Matrix4} The transform matrix.
   */


  get mat4() {
    return _classPrivateFieldGet(this, _mat);
  }
  /**
   * @returns {Matrix4[]} The pre / post translation matrices for origin translation.
   */


  get originTranslations() {
    return _classPrivateFieldGet(this, _originTranslations);
  }

}
/**
 * @typedef {Float32Array} Vector3 - 3 Dimensional Vector.
 *
 * @see https://glmatrix.net/docs/module-vec3.html
 */

/**
 * @typedef {Float32Array} Matrix4 - 4x4 Matrix; Format: column-major, when typed out it looks like row-major.
 *
 * @see https://glmatrix.net/docs/module-mat4.html
 */

let _Symbol$iterator;

var _validatorData$1 = /*#__PURE__*/new WeakMap();

var _mapUnsubscribe = /*#__PURE__*/new WeakMap();

_Symbol$iterator = Symbol.iterator;

/**
 * Provides the storage and sequencing of managed position validators. Each validator added may be a bespoke function or
 * a {@link ValidatorData} object containing an `id`, `validator`, and `weight` attributes; `validator` is the only
 * required attribute.
 *
 * The `id` attribute can be anything that creates a unique ID for the validator; recommended strings or numbers. This
 * allows validators to be removed by ID easily.
 *
 * The `weight` attribute is a number between 0 and 1 inclusive that allows validators to be added in a
 * predictable order which is especially handy if they are manipulated at runtime. A lower weighted validator always
 * runs before a higher weighted validator. If no weight is specified the default of '1' is assigned and it is appended
 * to the end of the validators list.
 *
 * This class forms the public API which is accessible from the `.validators` getter in the main Position instance.
 * ```
 * const position = new Position(<PositionData>);
 * position.validators.add(...);
 * position.validators.clear();
 * position.validators.length;
 * position.validators.remove(...);
 * position.validators.removeBy(...);
 * position.validators.removeById(...);
 * ```
 */
class AdapterValidators {
  /**
   * @type {ValidatorData[]}
   */

  /**
   * @returns {[AdapterValidators, ValidatorData[]]} Returns this and internal storage for validator adapter.
   */
  constructor() {
    _classPrivateFieldInitSpec(this, _validatorData$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _mapUnsubscribe, {
      writable: true,
      value: new Map()
    });

    _classPrivateFieldSet(this, _validatorData$1, []);

    Object.seal(this);
    return [this, _classPrivateFieldGet(this, _validatorData$1)];
  }
  /**
   * @returns {number} Returns the length of the validators array.
   */


  get length() {
    return _classPrivateFieldGet(this, _validatorData$1).length;
  }
  /**
   * Provides an iterator for validators.
   *
   * @returns {Generator<ValidatorData|undefined>} Generator / iterator of validators.
   * @yields {ValidatorData<T>}
   */


  *[_Symbol$iterator]() {
    if (_classPrivateFieldGet(this, _validatorData$1).length === 0) {
      return;
    }

    for (const entry of _classPrivateFieldGet(this, _validatorData$1)) {
      yield _objectSpread2({}, entry);
    }
  }
  /**
   * @param {...(ValidatorFn<T>|ValidatorData<T>)}   validators -
   */


  add(...validators) {
    var _validator$validator$;

    for (const validator of validators) {
      const validatorType = typeof validator;

      if (validatorType !== 'function' && validatorType !== 'object' || validator === null) {
        throw new TypeError(`AdapterValidator error: 'validator' is not a function or object.`);
      }

      let data = void 0;
      let subscribeFn = void 0;

      switch (validatorType) {
        case 'function':
          data = {
            id: void 0,
            validator,
            weight: 1
          };
          subscribeFn = validator.subscribe;
          break;

        case 'object':
          if (typeof validator.validator !== 'function') {
            throw new TypeError(`AdapterValidator error: 'validator' attribute is not a function.`);
          }

          if (validator.weight !== void 0 && typeof validator.weight !== 'number' || validator.weight < 0 || validator.weight > 1) {
            throw new TypeError(`AdapterValidator error: 'weight' attribute is not a number between '0 - 1' inclusive.`);
          }

          data = {
            id: validator.id !== void 0 ? validator.id : void 0,
            validator: validator.validator.bind(validator),
            weight: validator.weight || 1,
            instance: validator
          };
          subscribeFn = (_validator$validator$ = validator.validator.subscribe) !== null && _validator$validator$ !== void 0 ? _validator$validator$ : validator.subscribe;
          break;
      } // Find the index to insert where data.weight is less than existing values weight.


      const index = _classPrivateFieldGet(this, _validatorData$1).findIndex(value => {
        return data.weight < value.weight;
      }); // If an index was found insert at that location.


      if (index >= 0) {
        _classPrivateFieldGet(this, _validatorData$1).splice(index, 0, data);
      } else // push to end of validators.
        {
          _classPrivateFieldGet(this, _validatorData$1).push(data);
        }

      if (typeof subscribeFn === 'function') {
        // TODO: consider how to handle validator updates.
        const unsubscribe = subscribeFn(); // Ensure that unsubscribe is a function.

        if (typeof unsubscribe !== 'function') {
          throw new TypeError('AdapterValidator error: Filter has subscribe function, but no unsubscribe function is returned.');
        } // Ensure that the same validator is not subscribed to multiple times.


        if (_classPrivateFieldGet(this, _mapUnsubscribe).has(data.validator)) {
          throw new Error('AdapterValidator error: Filter added already has an unsubscribe function registered.');
        }

        _classPrivateFieldGet(this, _mapUnsubscribe).set(data.validator, unsubscribe);
      }
    } // Filters with subscriber functionality are assumed to immediately invoke the `subscribe` callback. If the
    // subscriber count is less than the amount of validators added then automatically trigger an index update
    // manually.
    // TODO: handle validator updates.
    // if (subscribeCount < validators.length) { this.#indexUpdate(); }

  }

  clear() {
    _classPrivateFieldGet(this, _validatorData$1).length = 0; // Unsubscribe from all validators with subscription support.

    for (const unsubscribe of _classPrivateFieldGet(this, _mapUnsubscribe).values()) {
      unsubscribe();
    }

    _classPrivateFieldGet(this, _mapUnsubscribe).clear(); // TODO: handle validator updates.
    // this.#indexUpdate();

  }
  /**
   * @param {...(ValidatorFn<T>|ValidatorData<T>)}   validators -
   */


  remove(...validators) {
    const length = _classPrivateFieldGet(this, _validatorData$1).length;

    if (length === 0) {
      return;
    }

    for (const data of validators) {
      // Handle the case that the validator may either be a function or a validator entry / object.
      const actualValidator = typeof data === 'function' ? data : data !== null && typeof data === 'object' ? data.validator : void 0;

      if (!actualValidator) {
        continue;
      }

      for (let cntr = _classPrivateFieldGet(this, _validatorData$1).length; --cntr >= 0;) {
        if (_classPrivateFieldGet(this, _validatorData$1)[cntr].validator === actualValidator) {
          _classPrivateFieldGet(this, _validatorData$1).splice(cntr, 1); // Invoke any unsubscribe function for given validator then remove from tracking.


          let unsubscribe = void 0;

          if (typeof (unsubscribe = _classPrivateFieldGet(this, _mapUnsubscribe).get(actualValidator)) === 'function') {
            unsubscribe();

            _classPrivateFieldGet(this, _mapUnsubscribe).delete(actualValidator);
          }
        }
      }
    } // Update the index a validator was removed.
    // TODO: handle validator updates.
    // if (length !== this.#validatorData.length) { this.#indexUpdate(); }

  }
  /**
   * Remove validators by the provided callback. The callback takes 3 parameters: `id`, `validator`, and `weight`.
   * Any truthy value returned will remove that validator.
   *
   * @param {function(*, ValidatorFn<T>, number): boolean} callback - Callback function to evaluate each validator
   *                                                                  entry.
   */


  removeBy(callback) {
    const length = _classPrivateFieldGet(this, _validatorData$1).length;

    if (length === 0) {
      return;
    }

    if (typeof callback !== 'function') {
      throw new TypeError(`AdapterValidator error: 'callback' is not a function.`);
    }

    _classPrivateFieldSet(this, _validatorData$1, _classPrivateFieldGet(this, _validatorData$1).filter(data => {
      const remove = callback.call(callback, _objectSpread2({}, data));

      if (remove) {
        let unsubscribe;

        if (typeof (unsubscribe = _classPrivateFieldGet(this, _mapUnsubscribe).get(data.validator)) === 'function') {
          unsubscribe();

          _classPrivateFieldGet(this, _mapUnsubscribe).delete(data.validator);
        }
      } // Reverse remove boolean to properly validator / remove this validator.


      return !remove;
    })); // TODO: handle validator updates.
    // if (length !== this.#validatorData.length) { this.#indexUpdate(); }

  }

  removeById(...ids) {
    const length = _classPrivateFieldGet(this, _validatorData$1).length;

    if (length === 0) {
      return;
    }

    _classPrivateFieldSet(this, _validatorData$1, _classPrivateFieldGet(this, _validatorData$1).filter(data => {
      let remove = false;

      for (const id of ids) {
        remove |= data.id === id;
      } // If not keeping invoke any unsubscribe function for given validator then remove from tracking.


      if (remove) {
        let unsubscribe;

        if (typeof (unsubscribe = _classPrivateFieldGet(this, _mapUnsubscribe).get(data.validator)) === 'function') {
          unsubscribe();

          _classPrivateFieldGet(this, _mapUnsubscribe).delete(data.validator);
        }
      }

      return !remove; // Swap here to actually remove the item via array validator method.
    })); // TODO: handle validator updates.
    // if (length !== this.#validatorData.length) { this.#indexUpdate(); }

  }

}
/**
 * @callback ValidatorFn - Position validator function that takes a {@link PositionData} instance potentially
 *                             modifying it or returning null if invalid.
 *
 * @param {ValidationData} valData - Validation data.
 *
 * @returns {PositionData|null} The validated position data or null to cancel position update.
 *
 */

/**
 * @typedef {object} ValidatorData
 *
 * @property {*}           [id=undefined] - An ID associated with this validator. Can be used to remove the validator.
 *
 * @property {ValidatorFn} validator - Position validator function that takes a {@link PositionData} instance
 *                                     potentially modifying it or returning null if invalid.
 *
 * @property {number}      [weight=1] - A number between 0 and 1 inclusive to position this validator against others.
 *
 * @property {Function}    [subscribe] - Optional subscribe function following the Svelte store / subscribe pattern.
 */

var _constrain$1 = /*#__PURE__*/new WeakMap();

var _element$1 = /*#__PURE__*/new WeakMap();

var _enabled$1 = /*#__PURE__*/new WeakMap();

var _height$1 = /*#__PURE__*/new WeakMap();

var _lock$1 = /*#__PURE__*/new WeakMap();

var _width$1 = /*#__PURE__*/new WeakMap();

class BasicBounds {
  /**
   * When true constrains the min / max width or height to element.
   *
   * @type {boolean}
   */

  /**
   * @type {HTMLElement}
   */

  /**
   * When true the validator is active.
   *
   * @type {boolean}
   */

  /**
   * Provides a manual setting of the element height. As things go `offsetHeight` causes a browser layout and is not
   * performance oriented. If manually set this height is used instead of `offsetHeight`.
   *
   * @type {number}
   */

  /**
   * Set from an optional value in the constructor to lock accessors preventing modification.
   */

  /**
   * Provides a manual setting of the element width. As things go `offsetWidth` causes a browser layout and is not
   * performance oriented. If manually set this width is used instead of `offsetWidth`.
   *
   * @type {number}
   */
  constructor({
    constrain = true,
    element,
    enabled = true,
    lock = false,
    width,
    height
  } = {}) {
    _classPrivateFieldInitSpec(this, _constrain$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _element$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _enabled$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _height$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _lock$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _width$1, {
      writable: true,
      value: void 0
    });

    this.element = element;
    this.constrain = constrain;
    this.enabled = enabled;
    this.width = width;
    this.height = height;

    _classPrivateFieldSet(this, _lock$1, typeof lock === 'boolean' ? lock : false);
  }

  get constrain() {
    return _classPrivateFieldGet(this, _constrain$1);
  }

  get element() {
    return _classPrivateFieldGet(this, _element$1);
  }

  get enabled() {
    return _classPrivateFieldGet(this, _enabled$1);
  }

  get height() {
    return _classPrivateFieldGet(this, _height$1);
  }

  get width() {
    return _classPrivateFieldGet(this, _width$1);
  }

  set constrain(constrain) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (typeof constrain !== 'boolean') {
      throw new TypeError(`'constrain' is not a boolean.`);
    }

    _classPrivateFieldSet(this, _constrain$1, constrain);
  }

  set element(element) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (element === void 0 || element === null || element instanceof HTMLElement) {
      _classPrivateFieldSet(this, _element$1, element);
    } else {
      throw new TypeError(`'element' is not a HTMLElement, undefined, or null.`);
    }
  }

  set enabled(enabled) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (typeof enabled !== 'boolean') {
      throw new TypeError(`'enabled' is not a boolean.`);
    }

    _classPrivateFieldSet(this, _enabled$1, enabled);
  }

  set height(height) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height$1, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }

  set width(width) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width$1, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }
  }

  setDimension(width, height) {
    if (_classPrivateFieldGet(this, _lock$1)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width$1, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height$1, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }
  /**
   * Provides a validator that respects transforms in positional data constraining the position to within the target
   * elements bounds.
   *
   * @param {ValidationData}   valData - The associated validation data for position updates.
   *
   * @returns {PositionData} Potentially adjusted position data.
   */


  validator(valData) {
    var _ref, _classPrivateFieldGet2, _classPrivateFieldGet3, _ref2, _classPrivateFieldGet4, _classPrivateFieldGet5;

    // Early out if element is undefined or local enabled state is false.
    if (!_classPrivateFieldGet(this, _enabled$1)) {
      return valData.position;
    } // Determine containing bounds from manual values; or any element; lastly the browser width / height.


    const boundsWidth = (_ref = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _width$1)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _element$1)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.offsetWidth) !== null && _ref !== void 0 ? _ref : globalThis.innerWidth;
    const boundsHeight = (_ref2 = (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _height$1)) !== null && _classPrivateFieldGet4 !== void 0 ? _classPrivateFieldGet4 : (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _element$1)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.offsetHeight) !== null && _ref2 !== void 0 ? _ref2 : globalThis.innerHeight;

    if (valData.position.width !== 'auto') {
      var _valData$maxWidth;

      const maxW = (_valData$maxWidth = valData.maxWidth) !== null && _valData$maxWidth !== void 0 ? _valData$maxWidth : _classPrivateFieldGet(this, _constrain$1) ? boundsWidth : Number.MAX_SAFE_INTEGER;
      valData.position.width = valData.width = Math.clamped(valData.position.width, valData.minWidth, maxW);

      if (valData.width + valData.position.left + valData.marginLeft > boundsWidth) {
        valData.position.left = boundsWidth - valData.width - valData.marginLeft;
      }
    }

    if (valData.position.height !== 'auto') {
      var _valData$maxHeight;

      const maxH = (_valData$maxHeight = valData.maxHeight) !== null && _valData$maxHeight !== void 0 ? _valData$maxHeight : _classPrivateFieldGet(this, _constrain$1) ? boundsHeight : Number.MAX_SAFE_INTEGER;
      valData.position.height = valData.height = Math.clamped(valData.position.height, valData.minHeight, maxH);

      if (valData.height + valData.position.top + valData.marginTop > boundsHeight) {
        valData.position.top = boundsHeight - valData.height - valData.marginTop;
      }
    }

    const maxL = Math.max(boundsWidth - valData.width - valData.marginLeft, 0);
    valData.position.left = Math.round(Math.clamped(valData.position.left, 0, maxL));
    const maxT = Math.max(boundsHeight - valData.height - valData.marginTop, 0);
    valData.position.top = Math.round(Math.clamped(valData.position.top, 0, maxT));
    return valData.position;
  }

}

const s_TRANSFORM_DATA = new TransformData();

var _constrain = /*#__PURE__*/new WeakMap();

var _element = /*#__PURE__*/new WeakMap();

var _enabled = /*#__PURE__*/new WeakMap();

var _height = /*#__PURE__*/new WeakMap();

var _lock = /*#__PURE__*/new WeakMap();

var _width = /*#__PURE__*/new WeakMap();

class TransformBounds {
  /**
   * When true constrains the min / max width or height to element.
   *
   * @type {boolean}
   */

  /**
   * @type {HTMLElement}
   */

  /**
   * When true the validator is active.
   *
   * @type {boolean}
   */

  /**
   * Provides a manual setting of the element height. As things go `offsetHeight` causes a browser layout and is not
   * performance oriented. If manually set this height is used instead of `offsetHeight`.
   *
   * @type {number}
   */

  /**
   * Set from an optional value in the constructor to lock accessors preventing modification.
   */

  /**
   * Provides a manual setting of the element width. As things go `offsetWidth` causes a browser layout and is not
   * performance oriented. If manually set this width is used instead of `offsetWidth`.
   *
   * @type {number}
   */
  constructor({
    constrain = true,
    element,
    enabled = true,
    lock = false,
    width,
    height
  } = {}) {
    _classPrivateFieldInitSpec(this, _constrain, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _element, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _enabled, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _height, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _lock, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _width, {
      writable: true,
      value: void 0
    });

    this.element = element;
    this.constrain = constrain;
    this.enabled = enabled;
    this.width = width;
    this.height = height;

    _classPrivateFieldSet(this, _lock, typeof lock === 'boolean' ? lock : false);
  }

  get constrain() {
    return _classPrivateFieldGet(this, _constrain);
  }

  get element() {
    return _classPrivateFieldGet(this, _element);
  }

  get enabled() {
    return _classPrivateFieldGet(this, _enabled);
  }

  get height() {
    return _classPrivateFieldGet(this, _height);
  }

  get width() {
    return _classPrivateFieldGet(this, _width);
  }

  set constrain(constrain) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (typeof constrain !== 'boolean') {
      throw new TypeError(`'constrain' is not a boolean.`);
    }

    _classPrivateFieldSet(this, _constrain, constrain);
  }

  set element(element) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (element === void 0 || element === null || element instanceof HTMLElement) {
      _classPrivateFieldSet(this, _element, element);
    } else {
      throw new TypeError(`'element' is not a HTMLElement, undefined, or null.`);
    }
  }

  set enabled(enabled) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (typeof enabled !== 'boolean') {
      throw new TypeError(`'enabled' is not a boolean.`);
    }

    _classPrivateFieldSet(this, _enabled, enabled);
  }

  set height(height) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }

  set width(width) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }
  }

  setDimension(width, height) {
    if (_classPrivateFieldGet(this, _lock)) {
      return;
    }

    if (width === void 0 || Number.isFinite(width)) {
      _classPrivateFieldSet(this, _width, width);
    } else {
      throw new TypeError(`'width' is not a finite number or undefined.`);
    }

    if (height === void 0 || Number.isFinite(height)) {
      _classPrivateFieldSet(this, _height, height);
    } else {
      throw new TypeError(`'height' is not a finite number or undefined.`);
    }
  }
  /**
   * Provides a validator that respects transforms in positional data constraining the position to within the target
   * elements bounds.
   *
   * @param {ValidationData}   valData - The associated validation data for position updates.
   *
   * @returns {PositionData} Potentially adjusted position data.
   */


  validator(valData) {
    var _ref, _classPrivateFieldGet2, _classPrivateFieldGet3, _ref2, _classPrivateFieldGet4, _classPrivateFieldGet5;

    // Early out if element is undefined or local enabled state is false.
    if (!_classPrivateFieldGet(this, _enabled)) {
      return valData.position;
    } // Determine containing bounds from manual values; or any element; lastly the browser width / height.


    const boundsWidth = (_ref = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _width)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _element)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.offsetWidth) !== null && _ref !== void 0 ? _ref : globalThis.innerWidth;
    const boundsHeight = (_ref2 = (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _height)) !== null && _classPrivateFieldGet4 !== void 0 ? _classPrivateFieldGet4 : (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _element)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.offsetHeight) !== null && _ref2 !== void 0 ? _ref2 : globalThis.innerHeight; // Ensure min / max width constraints when position width is not 'auto'. If constrain is true cap width bounds.

    if (valData.position.width !== 'auto') {
      var _valData$maxWidth;

      const maxW = (_valData$maxWidth = valData.maxWidth) !== null && _valData$maxWidth !== void 0 ? _valData$maxWidth : _classPrivateFieldGet(this, _constrain) ? boundsWidth : Number.MAX_SAFE_INTEGER;
      valData.position.width = Math.clamped(valData.width, valData.minWidth, maxW);
    } // Ensure min / max height constraints when position height is not 'auto'. If constrain is true cap height bounds.


    if (valData.position.height !== 'auto') {
      var _valData$maxHeight;

      const maxH = (_valData$maxHeight = valData.maxHeight) !== null && _valData$maxHeight !== void 0 ? _valData$maxHeight : _classPrivateFieldGet(this, _constrain) ? boundsHeight : Number.MAX_SAFE_INTEGER;
      valData.position.height = Math.clamped(valData.height, valData.minHeight, maxH);
    } // Get transform data. First set constraints including any margin top / left as offsets and width / height. Used
    // when position width / height is 'auto'.


    const data = valData.transforms.getData(valData.position, s_TRANSFORM_DATA, valData); // Check the bounding rectangle against browser height / width. Adjust position based on how far the overlap of
    // the bounding rect is outside the bounds height / width. The order below matters as the constraints are top /
    // left oriented, so perform those checks last.

    const initialX = data.boundingRect.x;
    const initialY = data.boundingRect.y;

    if (data.boundingRect.bottom + valData.marginTop > boundsHeight) {
      data.boundingRect.y += boundsHeight - data.boundingRect.bottom - valData.marginTop;
    }

    if (data.boundingRect.right + valData.marginLeft > boundsWidth) {
      data.boundingRect.x += boundsWidth - data.boundingRect.right - valData.marginLeft;
    }

    if (data.boundingRect.top - valData.marginTop < 0) {
      data.boundingRect.y += Math.abs(data.boundingRect.top - valData.marginTop);
    }

    if (data.boundingRect.left - valData.marginLeft < 0) {
      data.boundingRect.x += Math.abs(data.boundingRect.left - valData.marginLeft);
    }

    valData.position.left -= initialX - data.boundingRect.x;
    valData.position.top -= initialY - data.boundingRect.y;
    return valData.position;
  }

}

const basicWindow = new BasicBounds({
  lock: true
});
const transformWindow = new TransformBounds({
  lock: true
});

var positionValidators = /*#__PURE__*/Object.freeze({
  __proto__: null,
  basicWindow: basicWindow,
  BasicBounds: BasicBounds,
  transformWindow: transformWindow,
  TransformBounds: TransformBounds
});

/** @type {number[]} */

const s_SCALE_VECTOR = [1, 1, 1];
/** @type {number[]} */

const s_TRANSLATE_VECTOR = [0, 0, 0];
/** @type {Matrix4} */

const s_MAT4_RESULT = mat4.create();
/** @type {Matrix4} */

const s_MAT4_TEMP = mat4.create();
/** @type {Vector3} */

const s_VEC3_TEMP = vec3.create();

var _orderList = /*#__PURE__*/new WeakMap();

class Transforms {
  /**
   * Stores the transform keys in the order added.
   *
   * @type {string[]}
   */
  constructor() {
    _classPrivateFieldInitSpec(this, _orderList, {
      writable: true,
      value: []
    });

    this._data = {};
  }
  /**
   * @returns {boolean} Whether there are active transforms in local data.
   */


  get isActive() {
    return _classPrivateFieldGet(this, _orderList).length > 0;
  }
  /**
   * @returns {number|undefined} Any local rotateX data.
   */


  get rotateX() {
    return this._data.rotateX;
  }
  /**
   * @returns {number|undefined} Any local rotateY data.
   */


  get rotateY() {
    return this._data.rotateY;
  }
  /**
   * @returns {number|undefined} Any local rotateZ data.
   */


  get rotateZ() {
    return this._data.rotateZ;
  }
  /**
   * @returns {number|undefined} Any local rotateZ scale.
   */


  get scale() {
    return this._data.scale;
  }
  /**
   * @returns {number|undefined} Any local translateZ data.
   */


  get translateX() {
    return this._data.translateX;
  }
  /**
   * @returns {number|undefined} Any local translateZ data.
   */


  get translateY() {
    return this._data.translateY;
  }
  /**
   * @returns {number|undefined} Any local translateZ data.
   */


  get translateZ() {
    return this._data.translateZ;
  }
  /**
   * Sets the local rotateX data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set rotateX(value) {
    if (Number.isFinite(value)) {
      if (this._data.rotateX === void 0) {
        _classPrivateFieldGet(this, _orderList).push('rotateX');
      }

      this._data.rotateX = value;
    } else {
      if (this._data.rotateX !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'rotateX');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.rotateX;
    }
  }
  /**
   * Sets the local rotateY data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set rotateY(value) {
    if (Number.isFinite(value)) {
      if (this._data.rotateY === void 0) {
        _classPrivateFieldGet(this, _orderList).push('rotateY');
      }

      this._data.rotateY = value;
    } else {
      if (this._data.rotateY !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'rotateY');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.rotateY;
    }
  }
  /**
   * Sets the local rotateZ data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set rotateZ(value) {
    if (Number.isFinite(value)) {
      if (this._data.rotateZ === void 0) {
        _classPrivateFieldGet(this, _orderList).push('rotateZ');
      }

      this._data.rotateZ = value;
    } else {
      if (this._data.rotateZ !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'rotateZ');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.rotateZ;
    }
  }
  /**
   * Sets the local scale data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set scale(value) {
    if (Number.isFinite(value)) {
      if (this._data.scale === void 0) {
        _classPrivateFieldGet(this, _orderList).push('scale');
      }

      this._data.scale = value;
    } else {
      if (this._data.scale !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'scale');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.scale;
    }
  }
  /**
   * Sets the local translateX data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set translateX(value) {
    if (Number.isFinite(value)) {
      if (this._data.translateX === void 0) {
        _classPrivateFieldGet(this, _orderList).push('translateX');
      }

      this._data.translateX = value;
    } else {
      if (this._data.translateX !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'translateX');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.translateX;
    }
  }
  /**
   * Sets the local translateY data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set translateY(value) {
    if (Number.isFinite(value)) {
      if (this._data.translateY === void 0) {
        _classPrivateFieldGet(this, _orderList).push('translateY');
      }

      this._data.translateY = value;
    } else {
      if (this._data.translateY !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'translateY');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.translateY;
    }
  }
  /**
   * Sets the local translateZ data if the value is a finite number otherwise removes the local data.
   *
   * @param {number|null|undefined}   value - A value to set.
   */


  set translateZ(value) {
    if (Number.isFinite(value)) {
      if (this._data.translateZ === void 0) {
        _classPrivateFieldGet(this, _orderList).push('translateZ');
      }

      this._data.translateZ = value;
    } else {
      if (this._data.translateZ !== void 0) {
        const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === 'translateZ');

        if (index >= 0) {
          _classPrivateFieldGet(this, _orderList).splice(index, 1);
        }
      }

      delete this._data.translateZ;
    }
  }
  /**
   * Returns the matrix3d CSS transform for the given position / transform data.
   *
   * @param {object} [data] - Optional position data otherwise use local stored transform data.
   *
   * @returns {string} The CSS matrix3d string.
   */


  getCSS(data = this._data) {
    return `matrix3d(${this.getMat4(data, s_MAT4_RESULT).join(',')})`;
  }
  /**
   * Returns the matrix3d CSS transform for the given position / transform data.
   *
   * @param {object} [data] - Optional position data otherwise use local stored transform data.
   *
   * @returns {string} The CSS matrix3d string.
   */


  getCSSOrtho(data = this._data) {
    return `matrix3d(${this.getMat4Ortho(data, s_MAT4_RESULT).join(',')})`;
  }
  /**
   * Collects all data including a bounding rect, transform matrix, and points array of the given {@link PositionData}
   * instance with the applied local transform data.
   *
   * @param {PositionData} position - The position data to process.
   *
   * @param {TransformData} [output] - Optional TransformData output instance.
   *
   * @param {object} [validationData] - Optional validation data for adjustment parameters.
   *
   * @returns {TransformData} The output TransformData instance.
   */


  getData(position, output = new TransformData(), validationData = {}) {
    var _validationData$width, _validationData$heigh, _ref, _validationData$offse, _ref2, _validationData$offse2;

    const valWidth = (_validationData$width = validationData.width) !== null && _validationData$width !== void 0 ? _validationData$width : 0;
    const valHeight = (_validationData$heigh = validationData.height) !== null && _validationData$heigh !== void 0 ? _validationData$heigh : 0;
    const valOffsetTop = (_ref = (_validationData$offse = validationData.offsetTop) !== null && _validationData$offse !== void 0 ? _validationData$offse : validationData.marginTop) !== null && _ref !== void 0 ? _ref : 0;
    const valOffsetLeft = (_ref2 = (_validationData$offse2 = validationData.offsetLeft) !== null && _validationData$offse2 !== void 0 ? _validationData$offse2 : validationData.offsetLeft) !== null && _ref2 !== void 0 ? _ref2 : 0;
    position.top += valOffsetTop;
    position.left += valOffsetLeft;
    const width = Number.isFinite(position.width) ? position.width : valWidth;
    const height = Number.isFinite(position.height) ? position.height : valHeight;
    const rect = output.corners;

    if (this.hasTransform(position)) {
      rect[0][0] = rect[0][1] = rect[0][2] = 0;
      rect[1][0] = width;
      rect[1][1] = rect[1][2] = 0;
      rect[2][0] = width;
      rect[2][1] = height;
      rect[2][2] = 0;
      rect[3][0] = 0;
      rect[3][1] = height;
      rect[3][2] = 0;
      const matrix = this.getMat4(position, output.mat4);
      const translate = s_GET_ORIGIN_TRANSLATION(position.transformOrigin, width, height, output.originTranslations);

      if (transformOriginDefault === position.transformOrigin) {
        vec3.transformMat4(rect[0], rect[0], matrix);
        vec3.transformMat4(rect[1], rect[1], matrix);
        vec3.transformMat4(rect[2], rect[2], matrix);
        vec3.transformMat4(rect[3], rect[3], matrix);
      } else {
        vec3.transformMat4(rect[0], rect[0], translate[0]);
        vec3.transformMat4(rect[0], rect[0], matrix);
        vec3.transformMat4(rect[0], rect[0], translate[1]);
        vec3.transformMat4(rect[1], rect[1], translate[0]);
        vec3.transformMat4(rect[1], rect[1], matrix);
        vec3.transformMat4(rect[1], rect[1], translate[1]);
        vec3.transformMat4(rect[2], rect[2], translate[0]);
        vec3.transformMat4(rect[2], rect[2], matrix);
        vec3.transformMat4(rect[2], rect[2], translate[1]);
        vec3.transformMat4(rect[3], rect[3], translate[0]);
        vec3.transformMat4(rect[3], rect[3], matrix);
        vec3.transformMat4(rect[3], rect[3], translate[1]);
      }

      rect[0][0] = position.left + rect[0][0];
      rect[0][1] = position.top + rect[0][1];
      rect[1][0] = position.left + rect[1][0];
      rect[1][1] = position.top + rect[1][1];
      rect[2][0] = position.left + rect[2][0];
      rect[2][1] = position.top + rect[2][1];
      rect[3][0] = position.left + rect[3][0];
      rect[3][1] = position.top + rect[3][1];
    } else {
      rect[0][0] = position.left;
      rect[0][1] = position.top;
      rect[1][0] = position.left + width;
      rect[1][1] = position.top;
      rect[2][0] = position.left + width;
      rect[2][1] = position.top + height;
      rect[3][0] = position.left;
      rect[3][1] = position.top + height;
      mat4.identity(output.mat4);
    }

    let maxX = Number.MIN_SAFE_INTEGER;
    let maxY = Number.MIN_SAFE_INTEGER;
    let minX = Number.MAX_SAFE_INTEGER;
    let minY = Number.MAX_SAFE_INTEGER;

    for (let cntr = 4; --cntr >= 0;) {
      if (rect[cntr][0] > maxX) {
        maxX = rect[cntr][0];
      }

      if (rect[cntr][0] < minX) {
        minX = rect[cntr][0];
      }

      if (rect[cntr][1] > maxY) {
        maxY = rect[cntr][1];
      }

      if (rect[cntr][1] < minY) {
        minY = rect[cntr][1];
      }
    }

    const boundingRect = output.boundingRect;
    boundingRect.x = minX;
    boundingRect.y = minY;
    boundingRect.width = maxX - minX;
    boundingRect.height = maxY - minY;
    position.top -= valOffsetTop;
    position.left -= valOffsetLeft;
    return output;
  }
  /**
   * Creates a transform matrix based on local data applied in order it was added.
   *
   * If no data object is provided then the source is the local transform data. If another data object is supplied
   * then the stored local transform order is applied then all remaining transform keys are applied. This allows the
   * construction of a transform matrix in advance of setting local data and is useful in collision detection.
   *
   * @param {object}   [data] - PositionData instance or local transform data.
   *
   * @param {Matrix4}  [output] - The output mat4 instance.
   *
   * @returns {Matrix4} Transform matrix.
   */


  getMat4(data = this._data, output = mat4.create()) {
    const matrix = mat4.identity(output); // Bitwise tracks applied transform keys from local transform data.

    let seenKeys = 0;

    const orderList = _classPrivateFieldGet(this, _orderList); // First apply ordered transforms from local transform data.


    for (let cntr = 0; cntr < orderList.length; cntr++) {
      const key = orderList[cntr];

      switch (key) {
        case 'rotateX':
          seenKeys |= transformKeysBitwise.rotateX;
          mat4.multiply(matrix, matrix, mat4.fromXRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;

        case 'rotateY':
          seenKeys |= transformKeysBitwise.rotateY;
          mat4.multiply(matrix, matrix, mat4.fromYRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;

        case 'rotateZ':
          seenKeys |= transformKeysBitwise.rotateZ;
          mat4.multiply(matrix, matrix, mat4.fromZRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;

        case 'scale':
          seenKeys |= transformKeysBitwise.scale;
          s_SCALE_VECTOR[0] = s_SCALE_VECTOR[1] = data[key];
          mat4.multiply(matrix, matrix, mat4.fromScaling(s_MAT4_TEMP, s_SCALE_VECTOR));
          break;

        case 'translateX':
          seenKeys |= transformKeysBitwise.translateX;
          s_TRANSLATE_VECTOR[0] = data.translateX;
          s_TRANSLATE_VECTOR[1] = 0;
          s_TRANSLATE_VECTOR[2] = 0;
          mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
          break;

        case 'translateY':
          seenKeys |= transformKeysBitwise.translateY;
          s_TRANSLATE_VECTOR[0] = 0;
          s_TRANSLATE_VECTOR[1] = data.translateY;
          s_TRANSLATE_VECTOR[2] = 0;
          mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
          break;

        case 'translateZ':
          seenKeys |= transformKeysBitwise.translateZ;
          s_TRANSLATE_VECTOR[0] = 0;
          s_TRANSLATE_VECTOR[1] = 0;
          s_TRANSLATE_VECTOR[2] = data.translateZ;
          mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
          break;
      }
    } // Now apply any new keys not set in local transform data that have not been applied yet.


    if (data !== this._data) {
      for (let cntr = 0; cntr < transformKeys.length; cntr++) {
        const key = transformKeys[cntr]; // Reject bad / no data or if the key has already been applied.

        if (data[key] === null || (seenKeys & transformKeysBitwise[key]) > 0) {
          continue;
        }

        switch (key) {
          case 'rotateX':
            mat4.multiply(matrix, matrix, mat4.fromXRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;

          case 'rotateY':
            mat4.multiply(matrix, matrix, mat4.fromYRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;

          case 'rotateZ':
            mat4.multiply(matrix, matrix, mat4.fromZRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;

          case 'scale':
            s_SCALE_VECTOR[0] = s_SCALE_VECTOR[1] = data[key];
            mat4.multiply(matrix, matrix, mat4.fromScaling(s_MAT4_TEMP, s_SCALE_VECTOR));
            break;

          case 'translateX':
            s_TRANSLATE_VECTOR[0] = data[key];
            s_TRANSLATE_VECTOR[1] = 0;
            s_TRANSLATE_VECTOR[2] = 0;
            mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
            break;

          case 'translateY':
            s_TRANSLATE_VECTOR[0] = 0;
            s_TRANSLATE_VECTOR[1] = data[key];
            s_TRANSLATE_VECTOR[2] = 0;
            mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
            break;

          case 'translateZ':
            s_TRANSLATE_VECTOR[0] = 0;
            s_TRANSLATE_VECTOR[1] = 0;
            s_TRANSLATE_VECTOR[2] = data[key];
            mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR));
            break;
        }
      }
    }

    return matrix;
  }
  /**
   * Provides an orthographic enhancement to convert left / top positional data to a translate operation.
   *
   * This transform matrix takes into account that the remaining operations are , but adds any left / top attributes from passed in data to
   * translate X / Y.
   *
   * If no data object is provided then the source is the local transform data. If another data object is supplied
   * then the stored local transform order is applied then all remaining transform keys are applied. This allows the
   * construction of a transform matrix in advance of setting local data and is useful in collision detection.
   *
   * @param {object}   [data] - PositionData instance or local transform data.
   *
   * @param {Matrix4}  [output] - The output mat4 instance.
   *
   * @returns {Matrix4} Transform matrix.
   */


  getMat4Ortho(data = this._data, output = mat4.create()) {
    var _data$left, _data$translateX, _data$top, _data$translateY, _data$translateZ;

    const matrix = mat4.identity(output); // Attempt to retrieve values from passed in data otherwise default to 0.
    // Always perform the translation last regardless of order added to local transform data.
    // Add data.left to translateX and data.top to translateY.

    s_TRANSLATE_VECTOR[0] = ((_data$left = data.left) !== null && _data$left !== void 0 ? _data$left : 0) + ((_data$translateX = data.translateX) !== null && _data$translateX !== void 0 ? _data$translateX : 0);
    s_TRANSLATE_VECTOR[1] = ((_data$top = data.top) !== null && _data$top !== void 0 ? _data$top : 0) + ((_data$translateY = data.translateY) !== null && _data$translateY !== void 0 ? _data$translateY : 0);
    s_TRANSLATE_VECTOR[2] = (_data$translateZ = data.translateZ) !== null && _data$translateZ !== void 0 ? _data$translateZ : 0;
    mat4.multiply(matrix, matrix, mat4.fromTranslation(s_MAT4_TEMP, s_TRANSLATE_VECTOR)); // Scale can also be applied out of order.

    if (data.scale !== null) {
      s_SCALE_VECTOR[0] = s_SCALE_VECTOR[1] = data.scale;
      mat4.multiply(matrix, matrix, mat4.fromScaling(s_MAT4_TEMP, s_SCALE_VECTOR));
    } // Early out if there is not rotation data.


    if (data.rotateX === null && data.rotateY === null && data.rotateZ === null) {
      return matrix;
    } // Rotation transforms must be applied in the order they are added.
    // Bitwise tracks applied transform keys from local transform data.


    let seenKeys = 0;

    const orderList = _classPrivateFieldGet(this, _orderList); // First apply ordered transforms from local transform data.


    for (let cntr = 0; cntr < orderList.length; cntr++) {
      const key = orderList[cntr];

      switch (key) {
        case 'rotateX':
          seenKeys |= transformKeysBitwise.rotateX;
          mat4.multiply(matrix, matrix, mat4.fromXRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;

        case 'rotateY':
          seenKeys |= transformKeysBitwise.rotateY;
          mat4.multiply(matrix, matrix, mat4.fromYRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;

        case 'rotateZ':
          seenKeys |= transformKeysBitwise.rotateZ;
          mat4.multiply(matrix, matrix, mat4.fromZRotation(s_MAT4_TEMP, degToRad(data[key])));
          break;
      }
    } // Now apply any new keys not set in local transform data that have not been applied yet.


    if (data !== this._data) {
      for (let cntr = 0; cntr < transformKeys.length; cntr++) {
        const key = transformKeys[cntr]; // Reject bad / no data or if the key has already been applied.

        if (data[key] === null || (seenKeys & transformKeysBitwise[key]) > 0) {
          continue;
        }

        switch (key) {
          case 'rotateX':
            mat4.multiply(matrix, matrix, mat4.fromXRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;

          case 'rotateY':
            mat4.multiply(matrix, matrix, mat4.fromYRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;

          case 'rotateZ':
            mat4.multiply(matrix, matrix, mat4.fromZRotation(s_MAT4_TEMP, degToRad(data[key])));
            break;
        }
      }
    }

    return matrix;
  }
  /**
   * Tests an object if it contains transform keys and the values are finite numbers.
   *
   * @param {object} data - An object to test for transform data.
   *
   * @returns {boolean} Whether the given PositionData has transforms.
   */


  hasTransform(data) {
    for (const key of transformKeys) {
      if (Number.isFinite(data[key])) {
        return true;
      }
    }

    return false;
  }
  /**
   * Resets internal data from the given object containing valid transform keys.
   *
   * @param {object}   data - An object with transform data.
   */


  reset(data) {
    for (const key in data) {
      if (transformKeys.includes(key)) {
        if (Number.isFinite(data[key])) {
          this._data[key] = data[key];
        } else {
          const index = _classPrivateFieldGet(this, _orderList).findIndex(entry => entry === key);

          if (index >= 0) {
            _classPrivateFieldGet(this, _orderList).splice(index, 1);
          }

          delete this._data[key];
        }
      }
    }
  }

}
/**
 * Returns the translations necessary to translate a matrix operation based on the `transformOrigin` parameter of the
 * given position instance. The first entry / index 0 is the pre-translation and last entry / index 1 is the post-
 * translation.
 *
 * This method is used internally, but may be useful if you need the origin translation matrices to transform
 * bespoke points based on any `transformOrigin` set in {@link PositionData}.
 *
 * @param {string}   transformOrigin - The transform origin attribute from PositionData.
 *
 * @param {number}   width - The PositionData width or validation data width when 'auto'.
 *
 * @param {number}   height - The PositionData height or validation data height when 'auto'.
 *
 * @param {Matrix4[]}   output - Output Mat4 array.
 *
 * @returns {Matrix4[]} Output Mat4 array.
 */

function s_GET_ORIGIN_TRANSLATION(transformOrigin, width, height, output) {
  const vector = s_VEC3_TEMP;

  switch (transformOrigin) {
    case 'top left':
      vector[0] = vector[1] = 0;
      mat4.fromTranslation(output[0], vector);
      mat4.fromTranslation(output[1], vector);
      break;

    case 'top center':
      vector[0] = -width * 0.5;
      vector[1] = 0;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width * 0.5;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'top right':
      vector[0] = -width;
      vector[1] = 0;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'center left':
      vector[0] = 0;
      vector[1] = -height * 0.5;
      mat4.fromTranslation(output[0], vector);
      vector[1] = height * 0.5;
      mat4.fromTranslation(output[1], vector);
      break;

    case null: // By default null / no transform is center.

    case 'center':
      vector[0] = -width * 0.5;
      vector[1] = -height * 0.5;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width * 0.5;
      vector[1] = height * 0.5;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'center right':
      vector[0] = -width;
      vector[1] = -height * 0.5;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width;
      vector[1] = height * 0.5;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'bottom left':
      vector[0] = 0;
      vector[1] = -height;
      mat4.fromTranslation(output[0], vector);
      vector[1] = height;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'bottom center':
      vector[0] = -width * 0.5;
      vector[1] = -height;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width * 0.5;
      vector[1] = height;
      mat4.fromTranslation(output[1], vector);
      break;

    case 'bottom right':
      vector[0] = -width;
      vector[1] = -height;
      mat4.fromTranslation(output[0], vector);
      vector[0] = width;
      vector[1] = height;
      mat4.fromTranslation(output[1], vector);
      break;
    // No valid transform origin parameter; set identity.

    default:
      mat4.identity(output[0]);
      mat4.identity(output[1]);
      break;
  }

  return output;
}

class UpdateElementData {
  constructor() {
    /**
     * Stores the private data from Position.
     *
     * @type {PositionData}
     */
    this.data = void 0;
    /**
     * Provides a copy of local data sent to subscribers.
     *
     * @type {PositionData}
     */

    this.dataSubscribers = new PositionData();
    /**
     * Stores the current dimension data used for the readable `dimension` store.
     *
     * @type {{width: number | 'auto', height: number | 'auto'}}
     */

    this.dimensionData = {
      width: 0,
      height: 0
    };
    /**
     * @type {PositionChangeSet}
     */

    this.changeSet = void 0;
    /**
     * @type {PositionOptions}
     */

    this.options = void 0;
    /**
     * Stores if this Position / update data is queued for update.
     *
     * @type {boolean}
     */

    this.queued = false;
    /**
     * @type {StyleCache}
     */

    this.styleCache = void 0;
    /**
     * @type {Transforms}
     */

    this.transforms = void 0;
    /**
     * Stores the current transform data used for the readable `transform` store. It is only active when there are
     * subscribers to the store or calculateTransform options is true.
     *
     * @type {TransformData}
     */

    this.transformData = new TransformData();
    /**
     * @type {(function(PositionData): void)[]}
     */

    this.subscriptions = void 0;
    /**
     * @type {Writable<{width: (number|"auto"), height: (number|"auto")}>}
     */

    this.storeDimension = writable(this.dimensionData); // When there are subscribers set option to calculate transform updates; set to false when no subscribers.

    /**
     * @type {Writable<TransformData>}
     */

    this.storeTransform = writable(this.transformData, () => {
      this.options.transformSubscribed = true;
      return () => this.options.transformSubscribed = false;
    });
    /**
     * Stores the queued state for update element processing.
     *
     * @type {boolean}
     */

    this.queued = false; // Seal data backing readable stores.

    Object.seal(this.dimensionData);
  }

}

const _excluded$1 = ["name"],
      _excluded2 = ["left", "top", "maxWidth", "maxHeight", "minWidth", "minHeight", "width", "height", "rotateX", "rotateY", "rotateZ", "scale", "transformOrigin", "translateX", "translateY", "translateZ", "zIndex"];
/**
 * Provides a store for position following the subscriber protocol in addition to providing individual writable derived
 * stores for each independent variable.
 */

var _data$1 = /*#__PURE__*/new WeakMap();

var _currentAnimationKeys = /*#__PURE__*/new WeakMap();

var _dataSaved$1 = /*#__PURE__*/new WeakMap();

var _defaultData = /*#__PURE__*/new WeakMap();

var _positionChangeSet = /*#__PURE__*/new WeakMap();

var _options = /*#__PURE__*/new WeakMap();

var _parent = /*#__PURE__*/new WeakMap();

var _stores$1 = /*#__PURE__*/new WeakMap();

var _styleCache = /*#__PURE__*/new WeakMap();

var _subscriptions = /*#__PURE__*/new WeakMap();

var _transforms = /*#__PURE__*/new WeakMap();

var _updateElementData = /*#__PURE__*/new WeakMap();

var _updateElementPromise = /*#__PURE__*/new WeakMap();

var _validators = /*#__PURE__*/new WeakMap();

var _validatorData = /*#__PURE__*/new WeakMap();

var _updatePosition = /*#__PURE__*/new WeakSet();

class Position {
  /**
   * @type {PositionData}
   */

  /**
   * Stores current animation keys.
   *
   * @type {Set<string>}
   */

  /**
   * @type {Map<string, PositionData>}
   */

  /**
   * @type {PositionData}
   */

  /**
   * Stores the style attributes that changed on update.
   *
   * @type {PositionChangeSet}
   */

  /**
   * Stores ongoing options that are set in the constructor or by transform store subscription.
   *
   * @type {PositionOptions}
   */

  /**
   * The associated parent for positional data tracking. Used in validators.
   *
   * @type {PositionParent}
   */

  /**
   * @type {StorePosition}
   */

  /**
   * Stores an instance of the computer styles for the target element.
   *
   * @type {StyleCache}
   */

  /**
   * Stores the subscribers.
   *
   * @type {(function(PositionData): void)[]}
   */

  /**
   * @type {Transforms}
   */

  /**
   * @type {UpdateElementData}
   */

  /**
   * Stores the UpdateElementManager wait promise.
   *
   * @type {Promise}
   */

  /**
   * @type {AdapterValidators}
   */

  /**
   * @type {ValidatorData[]}
   */

  /**
   * @returns {{browserCentered?: Centered, Centered?: *}} Initial position helpers.
   */
  static get Initial() {
    return positionInitial;
  }
  /**
   * Returns TransformData class / constructor.
   *
   * @returns {TransformData} TransformData class / constructor.
   */


  static get TransformData() {
    return TransformData;
  }
  /**
   * Returns default validators.
   *
   * Note: `basicWindow` and `BasicBounds` will eventually be removed.
   *
   * @returns {{basicWindow?: BasicBounds, transformWindow?: TransformBounds, TransformBounds?: *, BasicBounds?: *}}
   *  Available validators.
   */


  static get Validators() {
    return positionValidators;
  }
  /**
   * @param {PositionParent} parent - The associated parent for positional data tracking. Used in validators.
   *
   * @param {object}         options - Default values.
   */


  constructor(_parent2, options = {}) {
    _classPrivateMethodInitSpec(this, _updatePosition);

    _classPrivateFieldInitSpec(this, _data$1, {
      writable: true,
      value: new PositionData()
    });

    _classPrivateFieldInitSpec(this, _currentAnimationKeys, {
      writable: true,
      value: new Set()
    });

    _classPrivateFieldInitSpec(this, _dataSaved$1, {
      writable: true,
      value: new Map()
    });

    _classPrivateFieldInitSpec(this, _defaultData, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _positionChangeSet, {
      writable: true,
      value: new PositionChangeSet()
    });

    _classPrivateFieldInitSpec(this, _options, {
      writable: true,
      value: {
        calculateTransform: false,
        initialHelper: void 0,
        ortho: false,
        transformSubscribed: false
      }
    });

    _classPrivateFieldInitSpec(this, _parent, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _stores$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _styleCache, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _subscriptions, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec(this, _transforms, {
      writable: true,
      value: new Transforms()
    });

    _classPrivateFieldInitSpec(this, _updateElementData, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _updateElementPromise, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _validators, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _validatorData, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _parent, _parent2);

    const data = _classPrivateFieldGet(this, _data$1);

    const transforms = _classPrivateFieldGet(this, _transforms);

    _classPrivateFieldSet(this, _styleCache, new StyleCache());

    const updateData = new UpdateElementData();
    updateData.changeSet = _classPrivateFieldGet(this, _positionChangeSet);
    updateData.data = _classPrivateFieldGet(this, _data$1);
    updateData.options = _classPrivateFieldGet(this, _options);
    updateData.styleCache = _classPrivateFieldGet(this, _styleCache);
    updateData.subscriptions = _classPrivateFieldGet(this, _subscriptions);
    updateData.transforms = _classPrivateFieldGet(this, _transforms);

    _classPrivateFieldSet(this, _updateElementData, updateData);

    if (typeof options === 'object') {
      // Set Position options
      if (typeof options.calculateTransform === 'boolean') {
        _classPrivateFieldGet(this, _options).calculateTransform = options.calculateTransform;
      }

      if (typeof options.ortho === 'boolean') {
        _classPrivateFieldGet(this, _options).ortho = options.ortho;
      } // Set default values from options.


      if (Number.isFinite(options.height) || options.height === 'auto' || options.height === null) {
        data.height = updateData.dimensionData.height = typeof options.height === 'number' ? Math.round(options.height) : options.height;
      }

      if (Number.isFinite(options.left) || options.left === null) {
        data.left = typeof options.left === 'number' ? Math.round(options.left) : options.left;
      }

      if (Number.isFinite(options.maxHeight) || options.maxHeight === null) {
        data.maxHeight = typeof options.maxHeight === 'number' ? Math.round(options.maxHeight) : options.maxHeight;
      }

      if (Number.isFinite(options.maxWidth) || options.maxWidth === null) {
        data.maxWidth = typeof options.maxWidth === 'number' ? Math.round(options.maxWidth) : options.maxWidth;
      }

      if (Number.isFinite(options.minHeight) || options.minHeight === null) {
        data.minHeight = typeof options.minHeight === 'number' ? Math.round(options.minHeight) : options.minHeight;
      }

      if (Number.isFinite(options.minWidth) || options.minWidth === null) {
        data.minWidth = typeof options.minWidth === 'number' ? Math.round(options.minWidth) : options.minWidth;
      }

      if (Number.isFinite(options.rotateX) || options.rotateX === null) {
        transforms.rotateX = data.rotateX = options.rotateX;
      }

      if (Number.isFinite(options.rotateY) || options.rotateY === null) {
        transforms.rotateY = data.rotateY = options.rotateY;
      }

      if (Number.isFinite(options.rotateZ) || options.rotateZ === null) {
        transforms.rotateZ = data.rotateZ = options.rotateZ;
      }

      if (Number.isFinite(options.scale) || options.scale === null) {
        transforms.scale = data.scale = options.scale;
      }

      if (Number.isFinite(options.top) || options.top === null) {
        data.top = typeof options.top === 'number' ? Math.round(options.top) : options.top;
      }

      if (typeof options.transformOrigin === 'string' || options.transformOrigin === null) {
        data.transformOrigin = transformOrigins.includes(options.transformOrigin) ? options.transformOrigin : null;
      }

      if (Number.isFinite(options.translateX) || options.translateX === null) {
        transforms.translateX = data.translateX = options.translateX;
      }

      if (Number.isFinite(options.translateY) || options.translateY === null) {
        transforms.translateY = data.translateY = options.translateY;
      }

      if (Number.isFinite(options.translateZ) || options.translateZ === null) {
        transforms.translateZ = data.translateZ = options.translateZ;
      }

      if (Number.isFinite(options.width) || options.width === 'auto' || options.width === null) {
        data.width = updateData.dimensionData.width = typeof options.width === 'number' ? Math.round(options.width) : options.width;
      }

      if (Number.isFinite(options.zIndex) || options.zIndex === null) {
        data.zIndex = typeof options.zIndex === 'number' ? Math.round(options.zIndex) : options.zIndex;
      }
    }

    _classPrivateFieldSet(this, _stores$1, {
      // The main properties for manipulating Position.
      height: propertyStore(this, 'height'),
      left: propertyStore(this, 'left'),
      rotateX: propertyStore(this, 'rotateX'),
      rotateY: propertyStore(this, 'rotateY'),
      rotateZ: propertyStore(this, 'rotateZ'),
      scale: propertyStore(this, 'scale'),
      top: propertyStore(this, 'top'),
      transformOrigin: propertyStore(this, 'transformOrigin'),
      translateX: propertyStore(this, 'translateX'),
      translateY: propertyStore(this, 'translateY'),
      translateZ: propertyStore(this, 'translateZ'),
      width: propertyStore(this, 'width'),
      zIndex: propertyStore(this, 'zIndex'),
      // Stores that control validation when width / height is not `auto`.
      maxHeight: propertyStore(this, 'maxHeight'),
      maxWidth: propertyStore(this, 'maxWidth'),
      minHeight: propertyStore(this, 'minHeight'),
      minWidth: propertyStore(this, 'minWidth'),
      // Readable stores based on updates or from resize observer changes.
      dimension: {
        subscribe: updateData.storeDimension.subscribe
      },
      element: {
        subscribe: _classPrivateFieldGet(this, _styleCache).stores.element.subscribe
      },
      resizeContentHeight: {
        subscribe: _classPrivateFieldGet(this, _styleCache).stores.resizeContentHeight.subscribe
      },
      resizeContentWidth: {
        subscribe: _classPrivateFieldGet(this, _styleCache).stores.resizeContentWidth.subscribe
      },
      resizeOffsetHeight: {
        subscribe: _classPrivateFieldGet(this, _styleCache).stores.resizeOffsetHeight.subscribe
      },
      resizeOffsetWidth: {
        subscribe: _classPrivateFieldGet(this, _styleCache).stores.resizeOffsetWidth.subscribe
      },
      transform: {
        subscribe: updateData.storeTransform.subscribe
      },
      // Protected store that should only be set by resizeObserver action.
      resizeObserved: _classPrivateFieldGet(this, _styleCache).stores.resizeObserved
    }); // When resize change from any applied resizeObserver action automatically set data for new validation run.
    // A resizeObserver prop should be set to true for ApplicationShell components or usage of resizeObserver action
    // to monitor for changes. This should only be used on elements that have 'auto' for width or height.


    subscribeIgnoreFirst(_classPrivateFieldGet(this, _stores$1).resizeObserved, resizeData => {
      const parent = _classPrivateFieldGet(this, _parent);

      const el = parent instanceof HTMLElement ? parent : parent === null || parent === void 0 ? void 0 : parent.elementTarget; // Only invoke set if there is a target element and the resize data has a valid offset width & height.

      if (el instanceof HTMLElement && Number.isFinite(resizeData === null || resizeData === void 0 ? void 0 : resizeData.offsetWidth) && Number.isFinite(resizeData === null || resizeData === void 0 ? void 0 : resizeData.offsetHeight)) {
        this.set(data);
      }
    });
    _classPrivateFieldGet(this, _stores$1).transformOrigin.values = transformOrigins;
    Object.freeze(_classPrivateFieldGet(this, _stores$1));
    [_classPrivateFieldDestructureSet(this, _validators).value, _classPrivateFieldDestructureSet(this, _validatorData).value] = new AdapterValidators();

    if (options !== null && options !== void 0 && options.initial || options !== null && options !== void 0 && options.positionInitial) {
      var _options$initial;

      const initialHelper = (_options$initial = options.initial) !== null && _options$initial !== void 0 ? _options$initial : options.positionInitial;

      if (typeof (initialHelper === null || initialHelper === void 0 ? void 0 : initialHelper.getLeft) !== 'function' || typeof (initialHelper === null || initialHelper === void 0 ? void 0 : initialHelper.getTop) !== 'function') {
        throw new Error(`'options.initial' position helper does not contain 'getLeft' and / or 'getTop' functions.`);
      }

      _classPrivateFieldGet(this, _options).initialHelper = options.initial;
    }

    if (options !== null && options !== void 0 && options.validator) {
      if (isIterable(options === null || options === void 0 ? void 0 : options.validator)) {
        this.validators.add(...options.validator);
      } else {
        this.validators.add(options.validator);
      }
    }
  }
  /**
   * Returns the dimension data for the readable store.
   *
   * @returns {{width: number | 'auto', height: number | 'auto'}} Dimension data.
   */


  get dimension() {
    return _classPrivateFieldGet(this, _updateElementData).dimensionData;
  }
  /**
   * Returns the current HTMLElement being positioned.
   *
   * @returns {HTMLElement|undefined} Current HTMLElement being positioned.
   */


  get element() {
    return _classPrivateFieldGet(this, _styleCache).el;
  }
  /**
   * Returns a promise that is resolved on the next element update with the time of the update.
   *
   * @returns {Promise<number>} Promise resolved on element update.
   */


  get elementUpdated() {
    return _classPrivateFieldGet(this, _updateElementPromise);
  }
  /**
   * Returns the associated {@link PositionParent} instance.
   *
   * @returns {PositionParent} The PositionParent instance.
   */


  get parent() {
    return _classPrivateFieldGet(this, _parent);
  }
  /**
   * Returns the derived writable stores for individual data variables.
   *
   * @returns {StorePosition} Derived / writable stores.
   */


  get stores() {
    return _classPrivateFieldGet(this, _stores$1);
  }
  /**
   * Returns the transform data for the readable store.
   *
   * @returns {TransformData} Transform Data.
   */


  get transform() {
    return _classPrivateFieldGet(this, _updateElementData).transformData;
  }
  /**
   * Returns the validators.
   *
   * @returns {AdapterValidators} validators.
   */


  get validators() {
    return _classPrivateFieldGet(this, _validators);
  }
  /**
   * Sets the associated {@link PositionParent} instance. Resets the style cache and default data.
   *
   * @param {PositionParent} parent - A PositionParent instance.
   */


  set parent(parent) {
    _classPrivateFieldSet(this, _parent, parent); // Reset any stored default data & the style cache.


    _classPrivateFieldSet(this, _defaultData, void 0);

    _classPrivateFieldGet(this, _styleCache).reset();

    this.set(_classPrivateFieldGet(this, _data$1));
  } // Data accessors ----------------------------------------------------------------------------------------------------

  /**
   * @returns {number|'auto'|null} height
   */


  get height() {
    return _classPrivateFieldGet(this, _data$1).height;
  }
  /**
   * @returns {number|null} left
   */


  get left() {
    return _classPrivateFieldGet(this, _data$1).left;
  }
  /**
   * @returns {number|null} maxHeight
   */


  get maxHeight() {
    return _classPrivateFieldGet(this, _data$1).maxHeight;
  }
  /**
   * @returns {number|null} maxWidth
   */


  get maxWidth() {
    return _classPrivateFieldGet(this, _data$1).maxWidth;
  }
  /**
   * @returns {number|null} minHeight
   */


  get minHeight() {
    return _classPrivateFieldGet(this, _data$1).minHeight;
  }
  /**
   * @returns {number|null} minWidth
   */


  get minWidth() {
    return _classPrivateFieldGet(this, _data$1).minWidth;
  }
  /**
   * @returns {number|null} rotateX
   */


  get rotateX() {
    return _classPrivateFieldGet(this, _data$1).rotateX;
  }
  /**
   * @returns {number|null} rotateY
   */


  get rotateY() {
    return _classPrivateFieldGet(this, _data$1).rotateY;
  }
  /**
   * @returns {number|null} rotateZ
   */


  get rotateZ() {
    return _classPrivateFieldGet(this, _data$1).rotateZ;
  }
  /**
   * @returns {number|null} scale
   */


  get scale() {
    return _classPrivateFieldGet(this, _data$1).scale;
  }
  /**
   * @returns {number|null} top
   */


  get top() {
    return _classPrivateFieldGet(this, _data$1).top;
  }
  /**
   * @returns {string} transformOrigin
   */


  get transformOrigin() {
    return _classPrivateFieldGet(this, _data$1).transformOrigin;
  }
  /**
   * @returns {number|null} translateX
   */


  get translateX() {
    return _classPrivateFieldGet(this, _data$1).translateX;
  }
  /**
   * @returns {number|null} translateY
   */


  get translateY() {
    return _classPrivateFieldGet(this, _data$1).translateY;
  }
  /**
   * @returns {number|null} translateZ
   */


  get translateZ() {
    return _classPrivateFieldGet(this, _data$1).translateZ;
  }
  /**
   * @returns {number|'auto'|null} width
   */


  get width() {
    return _classPrivateFieldGet(this, _data$1).width;
  }
  /**
   * @returns {number|null} z-index
   */


  get zIndex() {
    return _classPrivateFieldGet(this, _data$1).zIndex;
  }
  /**
   * @param {number|'auto'|null} height -
   */


  set height(height) {
    _classPrivateFieldGet(this, _stores$1).height.set(height);
  }
  /**
   * @param {number|null} left -
   */


  set left(left) {
    _classPrivateFieldGet(this, _stores$1).left.set(left);
  }
  /**
   * @param {number|null} maxHeight -
   */


  set maxHeight(maxHeight) {
    _classPrivateFieldGet(this, _stores$1).maxHeight.set(maxHeight);
  }
  /**
   * @param {number|null} maxWidth -
   */


  set maxWidth(maxWidth) {
    _classPrivateFieldGet(this, _stores$1).maxWidth.set(maxWidth);
  }
  /**
   * @param {number|null} minHeight -
   */


  set minHeight(minHeight) {
    _classPrivateFieldGet(this, _stores$1).minHeight.set(minHeight);
  }
  /**
   * @param {number|null} minWidth -
   */


  set minWidth(minWidth) {
    _classPrivateFieldGet(this, _stores$1).minWidth.set(minWidth);
  }
  /**
   * @param {number|null} rotateX -
   */


  set rotateX(rotateX) {
    _classPrivateFieldGet(this, _stores$1).rotateX.set(rotateX);
  }
  /**
   * @param {number|null} rotateY -
   */


  set rotateY(rotateY) {
    _classPrivateFieldGet(this, _stores$1).rotateY.set(rotateY);
  }
  /**
   * @param {number|null} rotateZ -
   */


  set rotateZ(rotateZ) {
    _classPrivateFieldGet(this, _stores$1).rotateZ.set(rotateZ);
  }
  /**
   * @param {number|null} scale -
   */


  set scale(scale) {
    _classPrivateFieldGet(this, _stores$1).scale.set(scale);
  }
  /**
   * @param {number|null} top -
   */


  set top(top) {
    _classPrivateFieldGet(this, _stores$1).top.set(top);
  }
  /**
   * @param {string} transformOrigin -
   */


  set transformOrigin(transformOrigin) {
    if (transformOrigins.includes(transformOrigin)) {
      _classPrivateFieldGet(this, _stores$1).transformOrigin.set(transformOrigin);
    }
  }
  /**
   * @param {number|null} translateX -
   */


  set translateX(translateX) {
    _classPrivateFieldGet(this, _stores$1).translateX.set(translateX);
  }
  /**
   * @param {number|null} translateY -
   */


  set translateY(translateY) {
    _classPrivateFieldGet(this, _stores$1).translateY.set(translateY);
  }
  /**
   * @param {number|null} translateZ -
   */


  set translateZ(translateZ) {
    _classPrivateFieldGet(this, _stores$1).translateZ.set(translateZ);
  }
  /**
   * @param {number|'auto'|null} width -
   */


  set width(width) {
    _classPrivateFieldGet(this, _stores$1).width.set(width);
  }
  /**
   * @param {number|null} zIndex -
   */


  set zIndex(zIndex) {
    _classPrivateFieldGet(this, _stores$1).zIndex.set(zIndex);
  }
  /**
   * Provides animation
   *
   * @param {PositionData}   position - The destination position.
   *
   * @param {object}         [opts] - Optional parameters.
   *
   * @param {number}         [opts.duration] - Duration in milliseconds.
   *
   * @param {Function}       [opts.easing=linear] - Easing function.
   *
   * @param {Function}       [opts.interpolate=lerp] - Interpolation function.
   *
   * @returns {Promise<void>} Promise that is resolved when animation completes.
   */


  async animateTo(position, {
    duration = 1000,
    easing = identity,
    interpolate = lerp$5
  } = {}) {
    var _parent$options, _parent$options2;

    if (typeof position !== 'object') {
      throw new TypeError(`Position - animateTo error: 'position' is not an object.`);
    } // Early out if the application is not positionable.


    const parent = _classPrivateFieldGet(this, _parent);

    if (parent !== void 0 && typeof (parent === null || parent === void 0 ? void 0 : (_parent$options = parent.options) === null || _parent$options === void 0 ? void 0 : _parent$options.positionable) === 'boolean' && !(parent !== null && parent !== void 0 && (_parent$options2 = parent.options) !== null && _parent$options2 !== void 0 && _parent$options2.positionable)) {
      return;
    }

    const targetEl = parent instanceof HTMLElement ? parent : parent === null || parent === void 0 ? void 0 : parent.elementTarget;
    const el = targetEl instanceof HTMLElement && targetEl.isConnected ? targetEl : void 0;

    if (!el) {
      return;
    }

    if (!Number.isInteger(duration) || duration < 0) {
      throw new TypeError(`Position - animateTo error: 'duration' is not a positive integer.`);
    }

    if (typeof easing !== 'function') {
      throw new TypeError(`Position - animateTo error: 'easing' is not a function.`);
    }

    if (typeof interpolate !== 'function') {
      throw new TypeError(`Position - animateTo error: 'interpolate' is not a function.`);
    }

    const data = _classPrivateFieldGet(this, _data$1);

    const currentAnimationKeys = _classPrivateFieldGet(this, _currentAnimationKeys);

    const initial = {};
    const destination = {}; // Set initial data if the key / data is defined and the end position is not equal to current data.

    for (const key in position) {
      if (data[key] !== void 0 && position[key] !== data[key]) {
        destination[key] = position[key];
        initial[key] = data[key];
      }
    } // Set initial data for transform values that are often null by default.


    if (initial.rotateX === null) {
      initial.rotateX = 0;
    }

    if (initial.rotateY === null) {
      initial.rotateY = 0;
    }

    if (initial.rotateZ === null) {
      initial.rotateZ = 0;
    }

    if (initial.translateX === null) {
      initial.translateX = 0;
    }

    if (initial.translateY === null) {
      initial.translateY = 0;
    }

    if (initial.translateZ === null) {
      initial.translateZ = 0;
    }

    if (initial.scale === null) {
      initial.scale = 1;
    }

    if (destination.rotateX === null) {
      destination.rotateX = 0;
    }

    if (destination.rotateY === null) {
      destination.rotateY = 0;
    }

    if (destination.rotateZ === null) {
      destination.rotateZ = 0;
    }

    if (destination.translateX === null) {
      destination.translateX = 0;
    }

    if (destination.translateY === null) {
      destination.translateY = 0;
    }

    if (destination.translateZ === null) {
      destination.translateZ = 0;
    }

    if (destination.scale === null) {
      destination.scale = 1;
    } // Reject all initial data that is not a number or is current animating.
    // Add all keys that pass to `currentAnimationKeys`.


    for (const key in initial) {
      if (!Number.isFinite(initial[key]) || currentAnimationKeys.has(key)) {
        delete initial[key];
      } else {
        currentAnimationKeys.add(key);
      }
    }

    const newData = Object.assign({}, initial);
    const keys = Object.keys(newData); // Nothing to animate, so return now.

    if (keys.length === 0) {
      return;
    }

    const animationData = {
      current: 0,
      currentAnimationKeys,
      destination,
      duration,
      easing,
      el,
      initial,
      interpolate,
      keys,
      newData,
      position: this
    };
    const promise = new Promise(resolve => animationData.resolve = resolve);
    AnimationManager.add(animationData); // Schedule w/ animation manager.

    return promise;
  }
  /**
   * Assigns current position to object passed into method.
   *
   * @param {object|PositionData} [position] - Target to assign current position data.
   *
   * @returns {PositionData} Passed in object with current position data.
   */


  get(position = {}) {
    return Object.assign(position, _classPrivateFieldGet(this, _data$1));
  }
  /**
   * Returns any stored save state by name.
   *
   * @param {string}   name - Saved data set name.
   *
   * @returns {PositionData} The saved data set.
   */


  getSave({
    name
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`Position - getSave error: 'name' is not a string.`);
    }

    return _classPrivateFieldGet(this, _dataSaved$1).get(name);
  }
  /**
   * @returns {PositionData} Current position data.
   */


  toJSON() {
    return Object.assign({}, _classPrivateFieldGet(this, _data$1));
  }
  /**
   * Resets data to default values and invokes set. Check options, but by default current z-index is maintained.
   *
   * @param {object}   [opts] - Optional parameters.
   *
   * @param {boolean}  [opts.keepZIndex=false] - When true keeps current z-index.
   *
   * @param {boolean}  [opts.invokeSet=true] - When true invokes set method.
   *
   * @returns {boolean} Operation successful.
   */


  reset({
    keepZIndex = false,
    invokeSet = true
  } = {}) {
    var _classPrivateFieldGet2, _classPrivateFieldGet3;

    if (typeof _classPrivateFieldGet(this, _defaultData) !== 'object') {
      return false;
    }

    if (_classPrivateFieldGet(this, _currentAnimationKeys).size) {
      return false;
    }

    const zIndex = _classPrivateFieldGet(this, _data$1).zIndex;

    const data = Object.assign({}, _classPrivateFieldGet(this, _defaultData));

    if (keepZIndex) {
      data.zIndex = zIndex;
    } // Remove any keys that are currently animating.


    for (const key of _classPrivateFieldGet(this, _currentAnimationKeys)) {
      delete data[key];
    } // Reset the transform data.


    _classPrivateFieldGet(this, _transforms).reset(data); // If current minimized invoke `maximize`.


    if ((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _parent)) !== null && _classPrivateFieldGet2 !== void 0 && (_classPrivateFieldGet3 = _classPrivateFieldGet2.reactive) !== null && _classPrivateFieldGet3 !== void 0 && _classPrivateFieldGet3.minimized) {
      var _classPrivateFieldGet4, _classPrivateFieldGet5;

      (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _parent)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : (_classPrivateFieldGet5 = _classPrivateFieldGet4.maximize) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.call(_classPrivateFieldGet4, {
        animate: false,
        duration: 0
      });
    }

    if (invokeSet) {
      this.set(data);
    }

    return true;
  }
  /**
   * Removes and returns any position state by name.
   *
   * @param {object}   options - Options.
   *
   * @param {string}   options.name - Name to remove and retrieve.
   *
   * @returns {PositionData} Saved position data.
   */


  remove({
    name
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`Position - remove: 'name' is not a string.`);
    }

    const data = _classPrivateFieldGet(this, _dataSaved$1).get(name);

    _classPrivateFieldGet(this, _dataSaved$1).delete(name);

    return data;
  }
  /**
   * Restores a saved positional state returning the data. Several optional parameters are available
   * to control whether the restore action occurs silently (no store / inline styles updates), animates
   * to the stored data, or simply sets the stored data. Restoring via {@link Position.animateTo} allows
   * specification of the duration, easing, and interpolate functions along with configuring a Promise to be
   * returned if awaiting the end of the animation.
   *
   * @param {object}            params - Parameters
   *
   * @param {string}            params.name - Saved data set name.
   *
   * @param {boolean}           [params.remove=false] - Remove data set.
   *
   * @param {Iterable<string>}  [params.properties] - Specific properties to set / animate.
   *
   * @param {boolean}           [params.silent] - Set position data directly; no store or style updates.
   *
   * @param {boolean}           [params.async=false] - If animating return a Promise that resolves with any saved data.
   *
   * @param {boolean}           [params.animateTo=false] - Animate to restore data.
   *
   * @param {number}            [params.duration=100] - Duration in milliseconds.
   *
   * @param {Function}          [params.easing=linear] - Easing function.
   *
   * @param {Function}          [params.interpolate=lerp] - Interpolation function.
   *
   * @returns {PositionData} Saved position data.
   */


  restore({
    name,
    remove = false,
    properties,
    silent = false,
    async = false,
    animateTo = false,
    duration = 100,
    easing = identity,
    interpolate = lerp$5
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`Position - restore error: 'name' is not a string.`);
    }

    const dataSaved = _classPrivateFieldGet(this, _dataSaved$1).get(name);

    if (dataSaved) {
      if (remove) {
        _classPrivateFieldGet(this, _dataSaved$1).delete(name);
      }

      let data = dataSaved;

      if (isIterable(properties)) {
        data = {};

        for (const property of properties) {
          data[property] = dataSaved[property];
        }
      } // Update data directly with no store or inline style updates.


      if (silent) {
        for (const property in data) {
          _classPrivateFieldGet(this, _data$1)[property] = data[property];
        }

        return dataSaved;
      } else if (animateTo) // Animate to saved data.
        {
          // Provide special handling to potentially change transform origin as this parameter is not animated.
          if (data.transformOrigin !== this.transformOrigin) {
            this.transformOrigin = data.transformOrigin;
          } // Return a Promise with saved data that resolves after animation ends.


          if (async) {
            return this.animateTo(data, {
              duration,
              easing,
              interpolate
            }).then(() => dataSaved);
          } else // Animate synchronously.
            {
              this.animateTo(data, {
                duration,
                easing,
                interpolate
              });
            }
        } else {
        // Default options is to set data for an immediate update.
        this.set(data);
      }
    }

    return dataSaved;
  }
  /**
   * Saves current position state with the opportunity to add extra data to the saved state.
   *
   * @param {object}   options - Options.
   *
   * @param {string}   options.name - name to index this saved data.
   *
   * @param {...*}     [options.extra] - Extra data to add to saved data.
   *
   * @returns {PositionData} Current position data
   */


  save(_ref) {
    let {
      name
    } = _ref,
        extra = _objectWithoutProperties(_ref, _excluded$1);

    if (typeof name !== 'string') {
      throw new TypeError(`Position - save error: 'name' is not a string.`);
    }

    const data = this.get(extra);

    _classPrivateFieldGet(this, _dataSaved$1).set(name, data);

    return data;
  }
  /**
   * All calculation and updates of position are implemented in {@link Position}. This allows position to be fully
   * reactive and in control of updating inline styles for the application.
   *
   * Note: the logic for updating position is improved and changes a few aspects from the default
   * {@link Application.setPosition}. The gate on `popOut` is removed, so to ensure no positional application occurs
   * popOut applications can set `this.options.positionable` to false ensuring no positional inline styles are
   * applied.
   *
   * The initial set call on an application with a target element will always set width / height as this is
   * necessary for correct calculations.
   *
   * When a target element is present updated styles are applied after validation. To modify the behavior of set
   * implement one or more validator functions and add them from the application via
   * `this.position.validators.add(<Function>)`.
   *
   * Updates to any target element are decoupled from the underlying Position data. This method returns this instance
   * that you can then await on the target element inline style update by using {@link Position.elementUpdated}.
   *
   * @param {PositionData}   [position] - Position data to set.
   *
   * @returns {Position} This Position instance.
   */


  set(position = {}) {
    var _parent$options3, _parent$options4;

    if (typeof position !== 'object') {
      throw new TypeError(`Position - set error: 'position' is not an object.`);
    }

    const parent = _classPrivateFieldGet(this, _parent); // An early out to prevent `set` from taking effect if options `positionable` is false.


    if (parent !== void 0 && typeof (parent === null || parent === void 0 ? void 0 : (_parent$options3 = parent.options) === null || _parent$options3 === void 0 ? void 0 : _parent$options3.positionable) === 'boolean' && !(parent !== null && parent !== void 0 && (_parent$options4 = parent.options) !== null && _parent$options4 !== void 0 && _parent$options4.positionable)) {
      return this;
    }

    const data = _classPrivateFieldGet(this, _data$1);

    const transforms = _classPrivateFieldGet(this, _transforms); // Find the target HTML element and verify that it is connected storing it in `el`.


    const targetEl = parent instanceof HTMLElement ? parent : parent === null || parent === void 0 ? void 0 : parent.elementTarget;
    const el = targetEl instanceof HTMLElement && targetEl.isConnected ? targetEl : void 0;

    const changeSet = _classPrivateFieldGet(this, _positionChangeSet);

    const styleCache = _classPrivateFieldGet(this, _styleCache);

    if (el) {
      // Cache the computed styles of the element.
      if (!styleCache.hasData(el)) {
        styleCache.update(el); // Add will-change property if not already set in inline or computed styles.

        if (!styleCache.hasWillChange) {
          el.style.willChange = _classPrivateFieldGet(this, _options).ortho ? 'transform' : 'top, left, transform';
        } // Update all properties / clear queued state.


        changeSet.set(true);
        _classPrivateFieldGet(this, _updateElementData).queued = false;
      }

      position = _classPrivateMethodGet(this, _updatePosition, _updatePosition2).call(this, position, parent, el, styleCache); // Check if a validator cancelled the update.

      if (position === null) {
        return this;
      }
    }

    if (Number.isFinite(position.left)) {
      position.left = Math.round(position.left);

      if (data.left !== position.left) {
        data.left = position.left;
        changeSet.left = true;
      }
    }

    if (Number.isFinite(position.top)) {
      position.top = Math.round(position.top);

      if (data.top !== position.top) {
        data.top = position.top;
        changeSet.top = true;
      }
    }

    if (Number.isFinite(position.maxHeight) || position.maxHeight === null) {
      position.maxHeight = typeof position.maxHeight === 'number' ? Math.round(position.maxHeight) : null;

      if (data.maxHeight !== position.maxHeight) {
        data.maxHeight = position.maxHeight;
        changeSet.maxHeight = true;
      }
    }

    if (Number.isFinite(position.maxWidth) || position.maxWidth === null) {
      position.maxWidth = typeof position.maxWidth === 'number' ? Math.round(position.maxWidth) : null;

      if (data.maxWidth !== position.maxWidth) {
        data.maxWidth = position.maxWidth;
        changeSet.maxWidth = true;
      }
    }

    if (Number.isFinite(position.minHeight) || position.minHeight === null) {
      position.minHeight = typeof position.minHeight === 'number' ? Math.round(position.minHeight) : null;

      if (data.minHeight !== position.minHeight) {
        data.minHeight = position.minHeight;
        changeSet.minHeight = true;
      }
    }

    if (Number.isFinite(position.minWidth) || position.minWidth === null) {
      position.minWidth = typeof position.minWidth === 'number' ? Math.round(position.minWidth) : null;

      if (data.minWidth !== position.minWidth) {
        data.minWidth = position.minWidth;
        changeSet.minWidth = true;
      }
    }

    if (Number.isFinite(position.rotateX) || position.rotateX === null) {
      if (data.rotateX !== position.rotateX) {
        data.rotateX = transforms.rotateX = position.rotateX;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.rotateY) || position.rotateY === null) {
      if (data.rotateY !== position.rotateY) {
        data.rotateY = transforms.rotateY = position.rotateY;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.rotateZ) || position.rotateZ === null) {
      if (data.rotateZ !== position.rotateZ) {
        data.rotateZ = transforms.rotateZ = position.rotateZ;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.scale) || position.scale === null) {
      position.scale = typeof position.scale === 'number' ? Math.max(0, Math.min(position.scale, 1000)) : null;

      if (data.scale !== position.scale) {
        data.scale = transforms.scale = position.scale;
        changeSet.transform = true;
      }
    }

    if (typeof position.transformOrigin === 'string' && transformOrigins.includes(position.transformOrigin) || position.transformOrigin === null) {
      if (data.transformOrigin !== position.transformOrigin) {
        data.transformOrigin = position.transformOrigin;
        changeSet.transformOrigin = true;
      }
    }

    if (Number.isFinite(position.translateX) || position.translateX === null) {
      if (data.translateX !== position.translateX) {
        data.translateX = transforms.translateX = position.translateX;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.translateY) || position.translateY === null) {
      if (data.translateY !== position.translateY) {
        data.translateY = transforms.translateY = position.translateY;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.translateZ) || position.translateZ === null) {
      if (data.translateZ !== position.translateZ) {
        data.translateZ = transforms.translateZ = position.translateZ;
        changeSet.transform = true;
      }
    }

    if (Number.isFinite(position.zIndex)) {
      position.zIndex = Math.round(position.zIndex);

      if (data.zIndex !== position.zIndex) {
        data.zIndex = position.zIndex;
        changeSet.zIndex = true;
      }
    }

    if (Number.isFinite(position.width) || position.width === 'auto' || position.width === null) {
      position.width = typeof position.width === 'number' ? Math.round(position.width) : position.width;

      if (data.width !== position.width) {
        data.width = position.width;
        changeSet.width = true;
      }
    }

    if (Number.isFinite(position.height) || position.height === 'auto' || position.height === null) {
      position.height = typeof position.height === 'number' ? Math.round(position.height) : position.height;

      if (data.height !== position.height) {
        data.height = position.height;
        changeSet.height = true;
      }
    }

    if (el) {
      // Set default data after first set operation that has a target element.
      if (typeof _classPrivateFieldGet(this, _defaultData) !== 'object') {
        _classPrivateFieldSet(this, _defaultData, Object.assign({}, data));
      } // Add update element data to UpdateElementManager if not already queued.


      if (!_classPrivateFieldGet(this, _updateElementData).queued) {
        _classPrivateFieldSet(this, _updateElementPromise, UpdateElementManager.add(el, _classPrivateFieldGet(this, _updateElementData)));
      }
    } else {
      // Notify main store subscribers.
      UpdateElementManager.updateSubscribers(_classPrivateFieldGet(this, _updateElementData));
    }

    return this;
  }
  /**
   *
   * @param {function(PositionData): void} handler - Callback function that is invoked on update / changes. Receives
   *                                                 a copy of the PositionData.
   *
   * @returns {(function(): void)} Unsubscribe function.
   */


  subscribe(handler) {
    _classPrivateFieldGet(this, _subscriptions).push(handler); // add handler to the array of subscribers


    handler(Object.assign({}, _classPrivateFieldGet(this, _data$1))); // call handler with current value
    // Return unsubscribe function.

    return () => {
      const index = _classPrivateFieldGet(this, _subscriptions).findIndex(sub => sub === handler);

      if (index >= 0) {
        _classPrivateFieldGet(this, _subscriptions).splice(index, 1);
      }
    };
  }
  /**
   * @param {object} opts -
   *
   * @param {number|null} opts.left -
   *
   * @param {number|null} opts.top -
   *
   * @param {number|null} opts.maxHeight -
   *
   * @param {number|null} opts.maxWidth -
   *
   * @param {number|null} opts.minHeight -
   *
   * @param {number|null} opts.minWidth -
   *
   * @param {number|'auto'|null} opts.width -
   *
   * @param {number|'auto'|null} opts.height -
   *
   * @param {number|null} opts.rotateX -
   *
   * @param {number|null} opts.rotateY -
   *
   * @param {number|null} opts.rotateZ -
   *
   * @param {number|null} opts.scale -
   *
   * @param {string} opts.transformOrigin -
   *
   * @param {number|null} opts.translateX -
   *
   * @param {number|null} opts.translateY -
   *
   * @param {number|null} opts.translateZ -
   *
   * @param {number|null} opts.zIndex -
   *
   * @param {*} opts.rest -
   *
   * @param {object} parent -
   *
   * @param {HTMLElement} el -
   *
   * @param {StyleCache} styleCache -
   *
   * @returns {null|PositionData} Updated position data or null if validation fails.
   */


}

function _updatePosition2(_ref2 = {}, parent, el, styleCache) {
  let {
    left,
    top,
    maxWidth,
    maxHeight,
    minWidth,
    minHeight,
    width,
    height,
    rotateX,
    rotateY,
    rotateZ,
    scale,
    transformOrigin,
    translateX,
    translateY,
    translateZ,
    zIndex
  } = _ref2,
      rest = _objectWithoutProperties(_ref2, _excluded2);

  let currentPosition = s_DATA_UPDATE.copy(_classPrivateFieldGet(this, _data$1)); // Update width if an explicit value is passed, or if no width value is set on the element.

  if (el.style.width === '' || width !== void 0) {
    if (width === 'auto' || currentPosition.width === 'auto' && width !== null) {
      currentPosition.width = 'auto';
      width = styleCache.offsetWidth;
    } else {
      const newWidth = Number.isFinite(width) ? width : currentPosition.width;
      currentPosition.width = width = Number.isFinite(newWidth) ? Math.round(newWidth) : styleCache.offsetWidth;
    }
  } else {
    width = Number.isFinite(currentPosition.width) ? currentPosition.width : styleCache.offsetWidth;
  } // Update height if an explicit value is passed, or if no height value is set on the element.


  if (el.style.height === '' || height !== void 0) {
    if (height === 'auto' || currentPosition.height === 'auto' && height !== null) {
      currentPosition.height = 'auto';
      height = styleCache.offsetHeight;
    } else {
      const newHeight = Number.isFinite(height) ? height : currentPosition.height;
      currentPosition.height = height = Number.isFinite(newHeight) ? Math.round(newHeight) : styleCache.offsetHeight;
    }
  } else {
    height = Number.isFinite(currentPosition.height) ? currentPosition.height : styleCache.offsetHeight;
  } // Update left


  if (Number.isFinite(left)) {
    currentPosition.left = left;
  } else if (!Number.isFinite(currentPosition.left)) {
    var _classPrivateFieldGet6;

    // Potentially use any initial position helper if available or set to 0.
    currentPosition.left = typeof ((_classPrivateFieldGet6 = _classPrivateFieldGet(this, _options).initialHelper) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.getLeft) === 'function' ? _classPrivateFieldGet(this, _options).initialHelper.getLeft(width) : 0;
  } // Update top


  if (Number.isFinite(top)) {
    currentPosition.top = top;
  } else if (!Number.isFinite(currentPosition.top)) {
    var _classPrivateFieldGet7;

    // Potentially use any initial position helper if available or set to 0.
    currentPosition.top = typeof ((_classPrivateFieldGet7 = _classPrivateFieldGet(this, _options).initialHelper) === null || _classPrivateFieldGet7 === void 0 ? void 0 : _classPrivateFieldGet7.getTop) === 'function' ? _classPrivateFieldGet(this, _options).initialHelper.getTop(height) : 0;
  }

  if (Number.isFinite(maxHeight) || maxHeight === null) {
    currentPosition.maxHeight = Number.isFinite(maxHeight) ? Math.round(maxHeight) : null;
  }

  if (Number.isFinite(maxWidth) || maxWidth === null) {
    currentPosition.maxWidth = Number.isFinite(maxWidth) ? Math.round(maxWidth) : null;
  }

  if (Number.isFinite(minHeight) || minHeight === null) {
    currentPosition.minHeight = Number.isFinite(minHeight) ? Math.round(minHeight) : null;
  }

  if (Number.isFinite(minWidth) || minWidth === null) {
    currentPosition.minWidth = Number.isFinite(minWidth) ? Math.round(minWidth) : null;
  } // Update rotate X/Y/Z, scale, z-index


  if (Number.isFinite(rotateX) || rotateX === null) {
    currentPosition.rotateX = rotateX;
  }

  if (Number.isFinite(rotateY) || rotateY === null) {
    currentPosition.rotateY = rotateY;
  }

  if (Number.isFinite(rotateZ) || rotateZ === null) {
    currentPosition.rotateZ = rotateZ;
  }

  if (Number.isFinite(translateX) || translateX === null) {
    currentPosition.translateX = translateX;
  }

  if (Number.isFinite(translateY) || translateY === null) {
    currentPosition.translateY = translateY;
  }

  if (Number.isFinite(translateZ) || translateZ === null) {
    currentPosition.translateZ = translateZ;
  }

  if (Number.isFinite(scale) || scale === null) {
    currentPosition.scale = typeof scale === 'number' ? Math.max(0, Math.min(scale, 1000)) : null;
  }

  if (typeof transformOrigin === 'string' || transformOrigin === null) {
    currentPosition.transformOrigin = transformOrigins.includes(transformOrigin) ? transformOrigin : null;
  }

  if (Number.isFinite(zIndex) || zIndex === null) {
    currentPosition.zIndex = typeof zIndex === 'number' ? Math.round(zIndex) : zIndex;
  }

  const validatorData = _classPrivateFieldGet(this, _validatorData); // If there are any validators allow them to potentially modify position data or reject the update.


  if (validatorData.length) {
    var _styleCache$maxHeight, _styleCache$maxWidth, _currentPosition$minH, _currentPosition$minW;

    s_VALIDATION_DATA.parent = parent;
    s_VALIDATION_DATA.el = el;
    s_VALIDATION_DATA.computed = styleCache.computed;
    s_VALIDATION_DATA.transforms = _classPrivateFieldGet(this, _transforms);
    s_VALIDATION_DATA.height = height;
    s_VALIDATION_DATA.width = width;
    s_VALIDATION_DATA.marginLeft = styleCache.marginLeft;
    s_VALIDATION_DATA.marginTop = styleCache.marginTop;
    s_VALIDATION_DATA.maxHeight = (_styleCache$maxHeight = styleCache.maxHeight) !== null && _styleCache$maxHeight !== void 0 ? _styleCache$maxHeight : currentPosition.maxHeight;
    s_VALIDATION_DATA.maxWidth = (_styleCache$maxWidth = styleCache.maxWidth) !== null && _styleCache$maxWidth !== void 0 ? _styleCache$maxWidth : currentPosition.maxWidth; // Note the use of || for accessing the style cache as the left hand is ignored w/ falsy values such as '0'.

    s_VALIDATION_DATA.minHeight = styleCache.minHeight || ((_currentPosition$minH = currentPosition.minHeight) !== null && _currentPosition$minH !== void 0 ? _currentPosition$minH : 0);
    s_VALIDATION_DATA.minWidth = styleCache.minWidth || ((_currentPosition$minW = currentPosition.minWidth) !== null && _currentPosition$minW !== void 0 ? _currentPosition$minW : 0);

    for (let cntr = 0; cntr < validatorData.length; cntr++) {
      s_VALIDATION_DATA.position = currentPosition;
      s_VALIDATION_DATA.rest = rest;
      currentPosition = validatorData[cntr].validator(s_VALIDATION_DATA);

      if (currentPosition === null) {
        return null;
      }
    }
  } // Return the updated position object.


  return currentPosition;
}

const s_DATA_UPDATE = new PositionData();
/**
 * @type {ValidationData}
 */

const s_VALIDATION_DATA = {
  position: void 0,
  parent: void 0,
  el: void 0,
  computed: void 0,
  transforms: void 0,
  height: void 0,
  width: void 0,
  marginLeft: void 0,
  marginTop: void 0,
  maxHeight: void 0,
  maxWidth: void 0,
  minHeight: void 0,
  minWidth: void 0,
  rest: void 0
};
Object.seal(s_VALIDATION_DATA);
/**
 * @typedef {object} InitialHelper
 *
 * @property {Function} getLeft - A function that takes the width parameter and returns the left position.
 *
 * @property {Function} getTop - A function that takes the height parameter and returns the top position.
 */

/**
 * @typedef {object} PositionOptions - Options set in constructor.
 *
 * @property {boolean} calculateTransform - When true always calculate transform data.
 *
 * @property {InitialHelper} initialHelper - Provides a helper for setting initial position data.
 *
 * @property {boolean} ortho - Sets Position to orthographic mode using just transform / matrix3d for positioning.
 *
 * @property {boolean} transformSubscribed - Set to true when there are subscribers to the readable transform store.
 */

/**
 * @typedef {HTMLElement | object} PositionParent
 *
 * @property {Function} [elementTarget] - Potentially returns any parent object.
 */

/**
 * @typedef {object} ResizeObserverData
 *
 * @property {number|undefined} contentHeight -
 *
 * @property {number|undefined} contentWidth -
 *
 * @property {number|undefined} offsetHeight -
 *
 * @property {number|undefined} offsetWidth -
 */

/**
 * @typedef {object} StorePosition - Provides individual writable stores for {@link Position}.
 *
 * @property {import('svelte/store').Readable<{width: number, height: number}>} dimension - Readable store for dimension
 *                                                                                          data.
 *
 * @property {import('svelte/store').Readable<HTMLElement>} element - Readable store for current element.
 *
 * @property {import('svelte/store').Writable<number|null>} left - Derived store for `left` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} top - Derived store for `top` updates.
 *
 * @property {import('svelte/store').Writable<number|'auto'|null>} width - Derived store for `width` updates.
 *
 * @property {import('svelte/store').Writable<number|'auto'|null>} height - Derived store for `height` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} maxHeight - Derived store for `maxHeight` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} maxWidth - Derived store for `maxWidth` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} minHeight - Derived store for `minHeight` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} minWidth - Derived store for `minWidth` updates.
 *
 * @property {import('svelte/store').Readable<number|undefined>} resizeContentHeight - Readable store for `contentHeight`.
 *
 * @property {import('svelte/store').Readable<number|undefined>} resizeContentWidth - Readable store for `contentWidth`.
 *
 * @property {import('svelte/store').Writable<ResizeObserverData>} resizeObserved - Protected store for resize observer updates.
 *
 * @property {import('svelte/store').Readable<number|undefined>} resizeOffsetHeight - Readable store for `offsetHeight`.
 *
 * @property {import('svelte/store').Readable<number|undefined>} resizeOffsetWidth - Readable store for `offsetWidth`.
 *
 * @property {import('svelte/store').Writable<number|null>} rotate - Derived store for `rotate` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} rotateX - Derived store for `rotateX` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} rotateY - Derived store for `rotateY` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} rotateZ - Derived store for `rotateZ` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} scale - Derived store for `scale` updates.
 *
 * @property {import('svelte/store').Readable<TransformData>} transform - Readable store for transform data.
 *
 * @property {import('svelte/store').Writable<string>} transformOrigin - Derived store for `transformOrigin`.
 *
 * @property {import('svelte/store').Writable<number|null>} translateX - Derived store for `translateX` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} translateY - Derived store for `translateY` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} translateZ - Derived store for `translateZ` updates.
 *
 * @property {import('svelte/store').Writable<number|null>} zIndex - Derived store for `zIndex` updates.
 */

/**
 * @typedef {object} ValidationData
 *
 * @property {PositionData} position -
 *
 * @property {PositionParent} parent -
 *
 * @property {HTMLElement} el -
 *
 * @property {CSSStyleDeclaration} computed -
 *
 * @property {Transforms} transforms -
 *
 * @property {number} height -
 *
 * @property {number} width -
 *
 * @property {number|undefined} marginLeft -
 *
 * @property {number|undefined} marginTop -
 *
 * @property {number|undefined} maxHeight -
 *
 * @property {number|undefined} maxWidth -
 *
 * @property {number|undefined} minHeight -
 *
 * @property {number|undefined} minWidth -
 *
 * @property {object} rest - The rest of any data submitted to {@link Position.set}
 */

const _excluded = ["name"];

var _application$2 = /*#__PURE__*/new WeakMap();

var _dataSaved = /*#__PURE__*/new WeakMap();

class ApplicationState {
  /**
   * @type {Map<string, ApplicationData>}
   */

  /**
   * @param {{ reactive: SvelteReactive, options: object }}   application - The application.
   */
  constructor(application) {
    _classPrivateFieldInitSpec(this, _application$2, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _dataSaved, {
      writable: true,
      value: new Map()
    });

    _classPrivateFieldSet(this, _application$2, application);
  }
  /**
   * Returns current application state along with any extra data passed into method.
   *
   * @param {object} [extra] - Extra data to add to application state.
   *
   * @returns {ApplicationData} Passed in object with current application state.
   */


  get(extra = {}) {
    var _classPrivateFieldGet2, _classPrivateFieldGet3, _classPrivateFieldGet4, _classPrivateFieldGet5, _classPrivateFieldGet6;

    return Object.assign(extra, {
      position: (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _application$2)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : (_classPrivateFieldGet3 = _classPrivateFieldGet2.position) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.get(),
      options: Object.assign({}, (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _application$2)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.options),
      ui: {
        minimized: (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _application$2)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : (_classPrivateFieldGet6 = _classPrivateFieldGet5.reactive) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.minimized
      }
    });
  }
  /**
   * Returns any stored save state by name.
   *
   * @param {string}   name - Saved data set name.
   *
   * @returns {ApplicationData} The saved data set.
   */


  getSave({
    name
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`ApplicationState - getSave error: 'name' is not a string.`);
    }

    return _classPrivateFieldGet(this, _dataSaved).get(name);
  }
  /**
   * Removes and returns any application state by name.
   *
   * @param {object}   options - Options.
   *
   * @param {string}   options.name - Name to remove and retrieve.
   *
   * @returns {ApplicationData} Saved position data.
   */


  remove({
    name
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`Position - remove: 'name' is not a string.`);
    }

    const data = _classPrivateFieldGet(this, _dataSaved).get(name);

    _classPrivateFieldGet(this, _dataSaved).delete(name);

    return data;
  }
  /**
   * Restores a saved application state returning the data. Several optional parameters are available
   * to control whether the restore action occurs silently (no store / inline styles updates), animates
   * to the stored data, or simply sets the stored data. Restoring via {@link Position.animateTo} allows
   * specification of the duration, easing, and interpolate functions along with configuring a Promise to be
   * returned if awaiting the end of the animation.
   *
   * @param {object}            params - Parameters
   *
   * @param {string}            params.name - Saved data set name.
   *
   * @param {boolean}           [params.remove=false] - Remove data set.
   *
   * @param {boolean}           [params.async=false] - If animating return a Promise that resolves with any saved data.
   *
   * @param {boolean}           [params.animateTo=false] - Animate to restore data.
   *
   * @param {number}            [params.duration=100] - Duration in milliseconds.
   *
   * @param {Function}          [params.easing=linear] - Easing function.
   *
   * @param {Function}          [params.interpolate=lerp] - Interpolation function.
   *
   * @returns {ApplicationData} Saved application data.
   */


  restore({
    name,
    remove = false,
    async = false,
    animateTo = false,
    duration = 100,
    easing = identity,
    interpolate = lerp$5
  }) {
    if (typeof name !== 'string') {
      throw new TypeError(`ApplicationState - restore error: 'name' is not a string.`);
    }

    const dataSaved = _classPrivateFieldGet(this, _dataSaved).get(name);

    if (dataSaved) {
      if (remove) {
        _classPrivateFieldGet(this, _dataSaved).delete(name);
      }

      return this.set(dataSaved, {
        async,
        animateTo,
        duration,
        easing,
        interpolate
      });
    }

    return dataSaved;
  }
  /**
   * Saves current application state with the opportunity to add extra data to the saved state.
   *
   * @param {object}   options - Options.
   *
   * @param {string}   options.name - name to index this saved data.
   *
   * @param {...*}     [options.extra] - Extra data to add to saved data.
   *
   * @returns {ApplicationData} Current position data
   */


  save(_ref) {
    let {
      name
    } = _ref,
        extra = _objectWithoutProperties(_ref, _excluded);

    if (typeof name !== 'string') {
      throw new TypeError(`ApplicationState - save error: 'name' is not a string.`);
    }

    const data = this.get(extra);

    _classPrivateFieldGet(this, _dataSaved).set(name, data);

    return data;
  }
  /**
   * Restores a saved positional state returning the data. Several optional parameters are available
   * to control whether the restore action occurs silently (no store / inline styles updates), animates
   * to the stored data, or simply sets the stored data. Restoring via {@link Position.animateTo} allows
   * specification of the duration, easing, and interpolate functions along with configuring a Promise to be
   * returned if awaiting the end of the animation.
   *
   * @param {ApplicationData}   data - Saved data set name.
   *
   * @param {object}            opts - Optional parameters
   *
   * @param {boolean}           [opts.async=false] - If animating return a Promise that resolves with any saved data.
   *
   * @param {boolean}           [opts.animateTo=false] - Animate to restore data.
   *
   * @param {number}            [opts.duration=100] - Duration in milliseconds.
   *
   * @param {Function}          [opts.easing=linear] - Easing function.
   *
   * @param {Function}          [opts.interpolate=lerp] - Interpolation function.
   *
   * @returns {Application} application.
   */


  set(data, {
    async = false,
    animateTo = false,
    duration = 100,
    easing = identity,
    interpolate = lerp$5
  }) {
    if (typeof data !== 'object') {
      throw new TypeError(`ApplicationState - restore error: 'data' is not an object.`);
    }

    const application = _classPrivateFieldGet(this, _application$2);

    if (data) {
      // Merge in saved options to application.
      if (typeof (data === null || data === void 0 ? void 0 : data.options) === 'object') {
        application === null || application === void 0 ? void 0 : application.reactive.mergeOptions(data.options);
      }

      if (typeof (data === null || data === void 0 ? void 0 : data.ui) === 'object') {
        var _data$ui, _application$reactive, _application$reactive2;

        const minimized = typeof ((_data$ui = data.ui) === null || _data$ui === void 0 ? void 0 : _data$ui.minimized) === 'boolean' ? data.ui.minimized : false; // Application is currently minimized and stored state is not, so reset minimized state without animationn.

        if (application !== null && application !== void 0 && (_application$reactive = application.reactive) !== null && _application$reactive !== void 0 && _application$reactive.minimized && !minimized) {
          application.maximize({
            animate: false,
            duration: 0
          });
        } else if (!(application !== null && application !== void 0 && (_application$reactive2 = application.reactive) !== null && _application$reactive2 !== void 0 && _application$reactive2.minimized) && minimized) {
          application.minimize({
            animate: false,
            duration
          });
        }
      }

      if (typeof (data === null || data === void 0 ? void 0 : data.position) === 'object') {
        // Update data directly with no store or inline style updates.
        if (animateTo) // Animate to saved data.
          {
            // Provide special handling to potentially change transform origin as this parameter is not animated.
            if (data.position.transformOrigin !== application.position.transformOrigin) {
              application.position.transformOrigin = data.position.transformOrigin;
            } // Return a Promise with saved data that resolves after animation ends.


            if (async) {
              return application.position.animateTo(data.position, {
                duration,
                easing,
                interpolate
              }).then(() => application);
            } else // Animate synchronously.
              {
                application.position.animateTo(data.position, {
                  duration,
                  easing,
                  interpolate
                });
              }
          } else {
          // Default options is to set data for an immediate update.
          application.position.set(data.position);
        }
      }
    }

    return application;
  }

}
/**
 * @typedef {object} ApplicationData
 *
 * @property {PositionData}   position - Application position.
 *
 * @property {object}         options - Application options.
 *
 * @property {object}         ui - Application UI state.
 */

var _applicationShellHolder$1 = /*#__PURE__*/new WeakMap();

var _svelteData$1 = /*#__PURE__*/new WeakMap();

/**
 * Provides a helper class for {@link SvelteApplication} by combining all methods that work on the {@link SvelteData[]}
 * of mounted components. This class is instantiated and can be retrieved by the getter `svelte` via SvelteApplication.
 */
class GetSvelteData {
  /**
   * @type {MountedAppShell[]|null[]}
   */

  /**
   * @type {SvelteData[]}
   */

  /**
   * Keep a direct reference to the SvelteData array in an associated {@link SvelteApplication}.
   *
   * @param {MountedAppShell[]|null[]}  applicationShellHolder - A reference to the MountedAppShell array.
   *
   * @param {SvelteData[]}  svelteData - A reference to the SvelteData array of mounted components.
   */
  constructor(applicationShellHolder, svelteData) {
    _classPrivateFieldInitSpec(this, _applicationShellHolder$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _svelteData$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _applicationShellHolder$1, applicationShellHolder);

    _classPrivateFieldSet(this, _svelteData$1, svelteData);
  }
  /**
   * Returns any mounted {@link MountedAppShell}.
   *
   * @returns {MountedAppShell|null} Any mounted application shell.
   */


  get applicationShell() {
    return _classPrivateFieldGet(this, _applicationShellHolder$1)[0];
  }
  /**
   * Returns the indexed Svelte component.
   *
   * @param {number}   index -
   *
   * @returns {object} The loaded Svelte component.
   */


  component(index) {
    const data = _classPrivateFieldGet(this, _svelteData$1)[index];

    return typeof data === 'object' ? data === null || data === void 0 ? void 0 : data.component : void 0;
  }
  /**
   * Returns the Svelte component entries iterator.
   *
   * @returns {Generator<Array<number|SvelteComponent>>} Svelte component entries iterator.
   * @yields
   */


  *componentEntries() {
    for (let cntr = 0; cntr < _classPrivateFieldGet(this, _svelteData$1).length; cntr++) {
      yield [cntr, _classPrivateFieldGet(this, _svelteData$1)[cntr].component];
    }
  }
  /**
   * Returns the Svelte component values iterator.
   *
   * @returns {Generator<SvelteComponent>} Svelte component values iterator.
   * @yields
   */


  *componentValues() {
    for (let cntr = 0; cntr < _classPrivateFieldGet(this, _svelteData$1).length; cntr++) {
      yield _classPrivateFieldGet(this, _svelteData$1)[cntr].component;
    }
  }
  /**
   * Returns the indexed SvelteData entry.
   *
   * @param {number}   index -
   *
   * @returns {SvelteData} The loaded Svelte config + component.
   */


  data(index) {
    return _classPrivateFieldGet(this, _svelteData$1)[index];
  }
  /**
   * Returns the {@link SvelteData} instance for a given component.
   *
   * @param {object} component - Svelte component.
   *
   * @returns {SvelteData} -  The loaded Svelte config + component.
   */


  dataByComponent(component) {
    for (const data of _classPrivateFieldGet(this, _svelteData$1)) {
      if (data.component === component) {
        return data;
      }
    }

    return void 0;
  }
  /**
   * Returns the SvelteData entries iterator.
   *
   * @returns {IterableIterator<[number, SvelteData]>} SvelteData entries iterator.
   */


  dataEntries() {
    return _classPrivateFieldGet(this, _svelteData$1).entries();
  }
  /**
   * Returns the SvelteData values iterator.
   *
   * @returns {IterableIterator<SvelteData>} SvelteData values iterator.
   */


  dataValues() {
    return _classPrivateFieldGet(this, _svelteData$1).values();
  }
  /**
   * Returns the length of the mounted Svelte component list.
   *
   * @returns {number} Length of mounted Svelte component list.
   */


  get length() {
    return _classPrivateFieldGet(this, _svelteData$1).length;
  }

}

/**
 * Instantiates and attaches a Svelte component to the main inserted HTML.
 *
 * @param {SvelteFormApplication} app - The application
 *
 * @param {JQuery}            html - The inserted HTML.
 *
 * @param {object}            config - Svelte component options
 *
 * @param {Function}          elementRootUpdate - A callback to assign to the external context.
 *
 * @returns {SvelteData} The config + instantiated Svelte component.
 */

function loadSvelteConfig(app, html, config, elementRootUpdate) {
  const svelteOptions = typeof config.options === 'object' ? config.options : {};
  let target;

  if (config.target instanceof HTMLElement) // A specific HTMLElement to append Svelte component.
    {
      target = config.target;
    } else if (typeof config.target === 'string') // A string target defines a selector to find in existing HTML.
    {
      target = html.find(config.target).get(0);
    } else // No target defined, create a document fragment.
    {
      target = document.createDocumentFragment();
    }

  if (target === void 0) {
    throw new Error(`SvelteFormApplication - s_LOAD_CONFIG - could not find target selector: ${config.target} for config:\n${JSON.stringify(config)}`);
  }

  const NewSvelteComponent = config.class;
  const svelteConfig = parseSvelteConfig(_objectSpread2(_objectSpread2({}, config), {}, {
    target
  }), app);
  const externalContext = svelteConfig.context.get('external'); // Inject the Foundry application instance and `elementRootUpdate` to the external context.

  externalContext.application = app;
  externalContext.elementRootUpdate = elementRootUpdate;
  let eventbus; // Potentially inject any TyphonJS eventbus and track the proxy in the SvelteData instance.

  if (typeof app._eventbus === 'object' && typeof app._eventbus.createProxy === 'function') {
    eventbus = app._eventbus.createProxy();
    externalContext.eventbus = eventbus;
  } // Create the Svelte component.

  /**
   * @type {import('svelte').SvelteComponent}
   */


  const component = new NewSvelteComponent(svelteConfig); // Set any eventbus to the config.

  svelteConfig.eventbus = eventbus;
  /**
   * @type {HTMLElement}
   */

  let element; // We can directly get the root element from components which follow the application store contract.

  if (isApplicationShell(component)) {
    element = component.elementRoot;
  } // Detect if target is a synthesized DocumentFragment with an child element. Child elements will be present
  // if the Svelte component mounts and renders initial content into the document fragment.


  if (config.target instanceof DocumentFragment && target.firstElementChild) {
    if (element === void 0) {
      element = target.firstElementChild;
    }

    html.append(target);
  } else if (config.target instanceof HTMLElement && element === void 0) {
    if (config.target instanceof HTMLElement && typeof svelteOptions.selectorElement !== 'string') {
      throw new Error(`SvelteFormApplication - s_LOAD_CONFIG - HTMLElement target with no 'selectorElement' defined for config:\n${JSON.stringify(config)}`);
    } // The target is an HTMLElement so find the Application element from `selectorElement` option.


    element = target.querySelector(svelteOptions.selectorElement);

    if (element === null || element === void 0) {
      throw new Error(`SvelteFormApplication - s_LOAD_CONFIG - HTMLElement target - could not find 'selectorElement' for config:\n${JSON.stringify(config)}`);
    }
  } // If the configuration / original target is an HTML element then do not inject HTML.


  const injectHTML = !(config.target instanceof HTMLElement);
  return {
    config: svelteConfig,
    component,
    element,
    injectHTML
  };
}

/**
 * Contains the reactive functionality / Svelte stores associated with SvelteApplication.
 */

var _application$1 = /*#__PURE__*/new WeakMap();

var _initialized = /*#__PURE__*/new WeakMap();

var _storeAppOptions = /*#__PURE__*/new WeakMap();

var _storeAppOptionsUpdate = /*#__PURE__*/new WeakMap();

var _dataUIState = /*#__PURE__*/new WeakMap();

var _storeUIState = /*#__PURE__*/new WeakMap();

var _storeUIStateUpdate = /*#__PURE__*/new WeakMap();

var _storeUnsubscribe = /*#__PURE__*/new WeakMap();

var _storesInitialize = /*#__PURE__*/new WeakSet();

var _storesSubscribe = /*#__PURE__*/new WeakSet();

var _storesUnsubscribe = /*#__PURE__*/new WeakSet();

class SvelteReactive {
  /**
   * @type {SvelteApplication}
   */

  /**
   * @type {boolean}
   */

  /**
   * The Application option store which is injected into mounted Svelte component context under the `external` key.
   *
   * @type {StoreAppOptions}
   */

  /**
   * Stores the update function for `#storeAppOptions`.
   *
   * @type {import('svelte/store').Writable.update}
   */

  /**
   * Stores the UI state data to make it accessible via getters.
   *
   * @type {object}
   */

  /**
   * The UI option store which is injected into mounted Svelte component context under the `external` key.
   *
   * @type {StoreUIOptions}
   */

  /**
   * Stores the update function for `#storeUIState`.
   *
   * @type {import('svelte/store').Writable.update}
   */

  /**
   * Stores the unsubscribe functions from local store subscriptions.
   *
   * @type {import('svelte/store').Unsubscriber[]}
   */

  /**
   * @param {SvelteApplication} application - The host Foundry application.
   */
  constructor(application) {
    _classPrivateMethodInitSpec(this, _storesUnsubscribe);

    _classPrivateMethodInitSpec(this, _storesSubscribe);

    _classPrivateMethodInitSpec(this, _storesInitialize);

    _classPrivateFieldInitSpec(this, _application$1, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _initialized, {
      writable: true,
      value: false
    });

    _classPrivateFieldInitSpec(this, _storeAppOptions, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _storeAppOptionsUpdate, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _dataUIState, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _storeUIState, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _storeUIStateUpdate, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _storeUnsubscribe, {
      writable: true,
      value: []
    });

    _classPrivateFieldSet(this, _application$1, application);
  }
  /**
   * Initializes reactive support. Package private for internal use.
   *
   * @returns {SvelteStores} Internal methods to interact with Svelte stores.
   * @package
   */


  initialize() {
    if (_classPrivateFieldGet(this, _initialized)) {
      return;
    }

    _classPrivateFieldSet(this, _initialized, true);

    _classPrivateMethodGet(this, _storesInitialize, _storesInitialize2).call(this);

    return {
      appOptionsUpdate: _classPrivateFieldGet(this, _storeAppOptionsUpdate),
      uiOptionsUpdate: _classPrivateFieldGet(this, _storeUIStateUpdate),
      subscribe: _classPrivateMethodGet(this, _storesSubscribe, _storesSubscribe2).bind(this),
      unsubscribe: _classPrivateMethodGet(this, _storesUnsubscribe, _storesUnsubscribe2).bind(this)
    };
  } // Only reactive getters ---------------------------------------------------------------------------------------------

  /**
   * Returns the current dragging UI state.
   *
   * @returns {boolean} Dragging UI state.
   */


  get dragging() {
    return _classPrivateFieldGet(this, _dataUIState).dragging;
  }
  /**
   * Returns the current minimized UI state.
   *
   * @returns {boolean} Minimized UI state.
   */


  get minimized() {
    return _classPrivateFieldGet(this, _dataUIState).minimized;
  }
  /**
   * Returns the current resizing UI state.
   *
   * @returns {boolean} Resizing UI state.
   */


  get resizing() {
    return _classPrivateFieldGet(this, _dataUIState).resizing;
  } // Reactive getter / setters -----------------------------------------------------------------------------------------

  /**
   * Returns the draggable app option.
   *
   * @returns {boolean} Draggable app option.
   */


  get draggable() {
    var _classPrivateFieldGet2, _classPrivateFieldGet3;

    return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : (_classPrivateFieldGet3 = _classPrivateFieldGet2.options) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.draggable;
  }
  /**
   * Returns the headerButtonNoClose app option.
   *
   * @returns {boolean} Remove the close the button in header app option.
   */


  get headerButtonNoClose() {
    var _classPrivateFieldGet4, _classPrivateFieldGet5;

    return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : (_classPrivateFieldGet5 = _classPrivateFieldGet4.options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.headerButtonNoClose;
  }
  /**
   * Returns the headerButtonNoLabel app option.
   *
   * @returns {boolean} Remove the labels from buttons in header app option.
   */


  get headerButtonNoLabel() {
    var _classPrivateFieldGet6, _classPrivateFieldGet7;

    return (_classPrivateFieldGet6 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet6 === void 0 ? void 0 : (_classPrivateFieldGet7 = _classPrivateFieldGet6.options) === null || _classPrivateFieldGet7 === void 0 ? void 0 : _classPrivateFieldGet7.headerButtonNoLabel;
  }
  /**
   * Returns the headerNoTitleMinimized app option.
   *
   * @returns {boolean} When true removes the header title when minimized.
   */


  get headerNoTitleMinimized() {
    var _classPrivateFieldGet8, _classPrivateFieldGet9;

    return (_classPrivateFieldGet8 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet8 === void 0 ? void 0 : (_classPrivateFieldGet9 = _classPrivateFieldGet8.options) === null || _classPrivateFieldGet9 === void 0 ? void 0 : _classPrivateFieldGet9.headerNoTitleMinimized;
  }
  /**
   * Returns the minimizable app option.
   *
   * @returns {boolean} Minimizable app option.
   */


  get minimizable() {
    var _classPrivateFieldGet10, _classPrivateFieldGet11;

    return (_classPrivateFieldGet10 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet10 === void 0 ? void 0 : (_classPrivateFieldGet11 = _classPrivateFieldGet10.options) === null || _classPrivateFieldGet11 === void 0 ? void 0 : _classPrivateFieldGet11.minimizable;
  }
  /**
   * @inheritDoc
   */


  get popOut() {
    return _classPrivateFieldGet(this, _application$1).popOut;
  }
  /**
   * Returns the resizable option.
   *
   * @returns {boolean} Resizable app option.
   */


  get resizable() {
    var _classPrivateFieldGet12, _classPrivateFieldGet13;

    return (_classPrivateFieldGet12 = _classPrivateFieldGet(this, _application$1)) === null || _classPrivateFieldGet12 === void 0 ? void 0 : (_classPrivateFieldGet13 = _classPrivateFieldGet12.options) === null || _classPrivateFieldGet13 === void 0 ? void 0 : _classPrivateFieldGet13.resizable;
  }
  /**
   * Returns the store for app options.
   *
   * @returns {StoreAppOptions} App options store.
   */


  get storeAppOptions() {
    return _classPrivateFieldGet(this, _storeAppOptions);
  }
  /**
   * Returns the store for UI options.
   *
   * @returns {StoreUIOptions} UI options store.
   */


  get storeUIState() {
    return _classPrivateFieldGet(this, _storeUIState);
  }
  /**
   * Returns the title accessor from the parent Application class.
   * TODO: Application v2; note that super.title localizes `this.options.title`; IMHO it shouldn't.
   *
   * @returns {string} Title.
   */


  get title() {
    return _classPrivateFieldGet(this, _application$1).title;
  }
  /**
   * Sets `this.options.draggable` which is reactive for application shells.
   *
   * @param {boolean}  draggable - Sets the draggable option.
   */


  set draggable(draggable) {
    if (typeof draggable === 'boolean') {
      this.setOptions('draggable', draggable);
    }
  }
  /**
   * Sets `this.options.headerButtonNoClose` which is reactive for application shells.
   *
   * @param {boolean}  headerButtonNoClose - Sets the headerButtonNoClose option.
   */


  set headerButtonNoClose(headerButtonNoClose) {
    if (typeof headerButtonNoClose === 'boolean') {
      this.setOptions('headerButtonNoClose', headerButtonNoClose);
    }
  }
  /**
   * Sets `this.options.headerButtonNoLabel` which is reactive for application shells.
   *
   * @param {boolean}  headerButtonNoLabel - Sets the headerButtonNoLabel option.
   */


  set headerButtonNoLabel(headerButtonNoLabel) {
    if (typeof headerButtonNoLabel === 'boolean') {
      this.setOptions('headerButtonNoLabel', headerButtonNoLabel);
    }
  }
  /**
   * Sets `this.options.headerNoTitleMinimized` which is reactive for application shells.
   *
   * @param {boolean}  headerNoTitleMinimized - Sets the headerNoTitleMinimized option.
   */


  set headerNoTitleMinimized(headerNoTitleMinimized) {
    if (typeof headerNoTitleMinimized === 'boolean') {
      this.setOptions('headerNoTitleMinimized', headerNoTitleMinimized);
    }
  }
  /**
   * Sets `this.options.minimizable` which is reactive for application shells that are also pop out.
   *
   * @param {boolean}  minimizable - Sets the minimizable option.
   */


  set minimizable(minimizable) {
    if (typeof minimizable === 'boolean') {
      this.setOptions('minimizable', minimizable);
    }
  }
  /**
   * Sets `this.options.popOut` which is reactive for application shells. This will add / remove this application
   * from `ui.windows`.
   *
   * @param {boolean}  popOut - Sets the popOut option.
   */


  set popOut(popOut) {
    if (typeof popOut === 'boolean') {
      this.setOptions('popOut', popOut);
    }
  }
  /**
   * Sets `this.options.resizable` which is reactive for application shells.
   *
   * @param {boolean}  resizable - Sets the resizable option.
   */


  set resizable(resizable) {
    if (typeof resizable === 'boolean') {
      this.setOptions('resizable', resizable);
    }
  }
  /**
   * Sets `this.options.title` which is reactive for application shells.
   *
   * @param {string}   title - Application title; will be localized, so a translation key is fine.
   */


  set title(title) {
    if (typeof title === 'string') {
      this.setOptions('title', title);
    }
  }
  /**
   * Provides a way to safely get this applications options given an accessor string which describes the
   * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
   * to walk.
   *
   * // TODO DOCUMENT the accessor in more detail.
   *
   * @param {string}   accessor - The path / key to set. You can set multiple levels.
   *
   * @param {*}        [defaultValue] - A default value returned if the accessor is not found.
   *
   * @returns {*} Value at the accessor.
   */


  getOptions(accessor, defaultValue) {
    return safeAccess(_classPrivateFieldGet(this, _application$1).options, accessor, defaultValue);
  }
  /**
   * Provides a way to merge `options` into this applications options and update the appOptions store.
   *
   * @param {object}   options - The options object to merge with `this.options`.
   */


  mergeOptions(options) {
    _classPrivateFieldGet(this, _storeAppOptionsUpdate).call(this, instanceOptions => deepMerge(instanceOptions, options));
  }
  /**
   * Provides a way to safely set this applications options given an accessor string which describes the
   * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
   * to walk.
   *
   * Additionally if an application shell Svelte component is mounted and exports the `appOptions` property then
   * the application options is set to `appOptions` potentially updating the application shell / Svelte component.
   *
   * // TODO DOCUMENT the accessor in more detail.
   *
   * @param {string}   accessor - The path / key to set. You can set multiple levels.
   *
   * @param {*}        value - Value to set.
   */


  setOptions(accessor, value) {
    const success = safeSet(_classPrivateFieldGet(this, _application$1).options, accessor, value); // If `this.options` modified then update the app options store.

    if (success) {
      _classPrivateFieldGet(this, _storeAppOptionsUpdate).call(this, () => _classPrivateFieldGet(this, _application$1).options);
    }
  }
  /**
   * Initializes the Svelte stores and derived stores for the application options and UI state.
   *
   * While writable stores are created the update method is stored in private variables locally and derived Readable
   * stores are provided for essential options which are commonly used.
   *
   * These stores are injected into all Svelte components mounted under the `external` context: `storeAppOptions` and
   * ` storeUIState`.
   */


  /**
   * Updates the UI Options store with the current header buttons. You may dynamically add / remove header buttons
   * if using an application shell Svelte component. In either overriding `_getHeaderButtons` or responding to the
   * Hooks fired return a new button array and the uiOptions store is updated and the application shell will render
   * the new buttons.
   *
   * Optionally you can set in the Foundry app options `headerButtonNoClose` to remove the close button and
   * `headerButtonNoLabel` to true and labels will be removed from the header buttons.
   *
   * @param {object} opts - Optional parameters (for internal use)
   *
   * @param {boolean} opts.headerButtonNoClose - The value for `headerButtonNoClose`.
   *
   * @param {boolean} opts.headerButtonNoLabel - The value for `headerButtonNoLabel`.
   */
  updateHeaderButtons({
    headerButtonNoClose = _classPrivateFieldGet(this, _application$1).options.headerButtonNoClose,
    headerButtonNoLabel = _classPrivateFieldGet(this, _application$1).options.headerButtonNoLabel
  } = {}) {
    let buttons = _classPrivateFieldGet(this, _application$1)._getHeaderButtons(); // Remove close button if this.options.headerButtonNoClose is true;


    if (typeof headerButtonNoClose === 'boolean' && headerButtonNoClose) {
      buttons = buttons.filter(button => button.class !== 'close');
    } // Remove labels if this.options.headerButtonNoLabel is true;


    if (typeof headerButtonNoLabel === 'boolean' && headerButtonNoLabel) {
      for (const button of buttons) {
        button.label = void 0;
      }
    }

    _classPrivateFieldGet(this, _storeUIStateUpdate).call(this, options => {
      options.headerButtons = buttons;
      return options;
    });
  }

}

function _storesInitialize2() {
  const writableAppOptions = writable(_classPrivateFieldGet(this, _application$1).options); // Keep the update function locally, but make the store essentially readable.

  _classPrivateFieldSet(this, _storeAppOptionsUpdate, writableAppOptions.update);
  /**
   * Create custom store. The main subscribe method for all app options changes is provided along with derived
   * writable stores for all reactive options.
   *
   * @type {StoreAppOptions}
   */


  const storeAppOptions = {
    subscribe: writableAppOptions.subscribe,
    draggable: propertyStore(writableAppOptions, 'draggable'),
    headerButtonNoClose: propertyStore(writableAppOptions, 'headerButtonNoClose'),
    headerButtonNoLabel: propertyStore(writableAppOptions, 'headerButtonNoLabel'),
    headerNoTitleMinimized: propertyStore(writableAppOptions, 'headerNoTitleMinimized'),
    minimizable: propertyStore(writableAppOptions, 'minimizable'),
    popOut: propertyStore(writableAppOptions, 'popOut'),
    resizable: propertyStore(writableAppOptions, 'resizable'),
    title: propertyStore(writableAppOptions, 'title')
  };
  Object.freeze(storeAppOptions);

  _classPrivateFieldSet(this, _storeAppOptions, storeAppOptions);

  _classPrivateFieldSet(this, _dataUIState, {
    dragging: false,
    headerButtons: [],
    minimized: _classPrivateFieldGet(this, _application$1)._minimized,
    resizing: false
  }); // Create a store for UI state data.


  const writableUIOptions = writable(_classPrivateFieldGet(this, _dataUIState)); // Keep the update function locally, but make the store essentially readable.

  _classPrivateFieldSet(this, _storeUIStateUpdate, writableUIOptions.update);
  /**
   * @type {StoreUIOptions}
   */


  const storeUIState = {
    subscribe: writableUIOptions.subscribe,
    dragging: propertyStore(writableUIOptions, 'dragging'),
    headerButtons: derived(writableUIOptions, ($options, set) => set($options.headerButtons)),
    minimized: derived(writableUIOptions, ($options, set) => set($options.minimized)),
    resizing: propertyStore(writableUIOptions, 'resizing')
  };
  Object.freeze(storeUIState); // Initialize the store with options set in the Application constructor.

  _classPrivateFieldSet(this, _storeUIState, storeUIState);
}

function _storesSubscribe2() {
  // Register local subscriptions.
  // Handles updating header buttons to add / remove the close button.
  _classPrivateFieldGet(this, _storeUnsubscribe).push(subscribeIgnoreFirst(_classPrivateFieldGet(this, _storeAppOptions).headerButtonNoClose, value => {
    this.updateHeaderButtons({
      headerButtonNoClose: value
    });
  })); // Handles updating header buttons to add / remove button labels.


  _classPrivateFieldGet(this, _storeUnsubscribe).push(subscribeIgnoreFirst(_classPrivateFieldGet(this, _storeAppOptions).headerButtonNoLabel, value => {
    this.updateHeaderButtons({
      headerButtonNoLabel: value
    });
  })); // Handles adding / removing this application from `ui.windows` when popOut changes.


  _classPrivateFieldGet(this, _storeUnsubscribe).push(subscribeIgnoreFirst(_classPrivateFieldGet(this, _storeAppOptions).popOut, value => {
    if (value && _classPrivateFieldGet(this, _application$1).rendered) {
      ui.windows[_classPrivateFieldGet(this, _application$1).appId] = _classPrivateFieldGet(this, _application$1);
    } else {
      delete ui.windows[_classPrivateFieldGet(this, _application$1).appId];
    }
  }));
}

function _storesUnsubscribe2() {
  _classPrivateFieldGet(this, _storeUnsubscribe).forEach(unsubscribe => unsubscribe());

  _classPrivateFieldSet(this, _storeUnsubscribe, []);
}

/**
 * Provides a Svelte aware extension to Application to control the app lifecycle appropriately. You can declaratively
 * load one or more components from `defaultOptions`.
 */

var _applicationShellHolder = /*#__PURE__*/new WeakMap();

var _applicationState = /*#__PURE__*/new WeakMap();

var _elementTarget = /*#__PURE__*/new WeakMap();

var _elementContent = /*#__PURE__*/new WeakMap();

var _initialZIndex = /*#__PURE__*/new WeakMap();

var _onMount = /*#__PURE__*/new WeakMap();

var _position = /*#__PURE__*/new WeakMap();

var _reactive = /*#__PURE__*/new WeakMap();

var _svelteData = /*#__PURE__*/new WeakMap();

var _getSvelteData = /*#__PURE__*/new WeakMap();

var _stores = /*#__PURE__*/new WeakMap();

var _updateApplicationShell = /*#__PURE__*/new WeakSet();

class SvelteApplication extends Application {
  /**
   * Stores the first mounted component which follows the application shell contract.
   *
   * @type {MountedAppShell[]|null[]} Application shell.
   */

  /**
   * Stores and manages application state for saving / restoring / serializing.
   *
   * @type {ApplicationState}
   */

  /**
   * Stores the target element which may not necessarily be the main element.
   *
   * @type {HTMLElement}
   */

  /**
   * Stores the content element which is set for application shells.
   *
   * @type {HTMLElement}
   */

  /**
   * Stores initial z-index from `_renderOuter` to set to target element / Svelte component.
   *
   * @type {number}
   */

  /**
   * Stores on mount state which is checked in _render to trigger onSvelteMount callback.
   *
   * @type {boolean}
   */

  /**
   * The position store.
   *
   * @type {Position}
   */

  /**
   * Contains the Svelte stores and reactive accessors.
   *
   * @type {SvelteReactive}
   */

  /**
   * Stores SvelteData entries with instantiated Svelte components.
   *
   * @type {SvelteData[]}
   */

  /**
   * Provides a helper class that combines multiple methods for interacting with the mounted components tracked in
   * {@link SvelteData}.
   *
   * @type {GetSvelteData}
   */

  /**
   * Contains methods to interact with the Svelte stores.
   *
   * @type {SvelteStores}
   */

  /**
   * @inheritDoc
   */
  constructor(options = {}) {
    super(options);

    _classPrivateMethodInitSpec(this, _updateApplicationShell);

    _classPrivateFieldInitSpec(this, _applicationShellHolder, {
      writable: true,
      value: [null]
    });

    _classPrivateFieldInitSpec(this, _applicationState, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _elementTarget, {
      writable: true,
      value: null
    });

    _classPrivateFieldInitSpec(this, _elementContent, {
      writable: true,
      value: null
    });

    _classPrivateFieldInitSpec(this, _initialZIndex, {
      writable: true,
      value: 95
    });

    _classPrivateFieldInitSpec(this, _onMount, {
      writable: true,
      value: false
    });

    _classPrivateFieldInitSpec(this, _position, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _reactive, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _svelteData, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec(this, _getSvelteData, {
      writable: true,
      value: new GetSvelteData(_classPrivateFieldGet(this, _applicationShellHolder), _classPrivateFieldGet(this, _svelteData))
    });

    _classPrivateFieldInitSpec(this, _stores, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _applicationState, new ApplicationState(this)); // Initialize Position with the position object set by Application.


    _classPrivateFieldSet(this, _position, new Position(this, _objectSpread2(_objectSpread2(_objectSpread2({}, this.position), this.options), {}, {
      initial: this.options.positionInitial,
      ortho: this.options.positionOrtho,
      validator: this.options.positionValidator
    }))); // Remove old position field.


    delete this.position;
    /**
     * Define accessors to retrieve Position by `this.position`.
     *
     * @member {PositionData} position - Adds accessors to SvelteApplication to get / set the position data.
     *
     * @memberof SvelteApplication#
     */

    Object.defineProperty(this, 'position', {
      get: () => _classPrivateFieldGet(this, _position),
      set: position => {
        if (typeof position === 'object') {
          _classPrivateFieldGet(this, _position).set(position);
        }
      }
    });

    _classPrivateFieldSet(this, _reactive, new SvelteReactive(this));

    _classPrivateFieldSet(this, _stores, _classPrivateFieldGet(this, _reactive).initialize());
  }
  /**
   * Specifies the default options that SvelteApplication supports.
   *
   * @returns {object} options - Application options.
   * @see https://foundryvtt.com/api/Application.html#options
   */


  static get defaultOptions() {
    return deepMerge(super.defaultOptions, {
      defaultCloseAnimation: true,
      // If false the default slide close animation is not run.
      draggable: true,
      // If true then application shells are draggable.
      headerButtonNoClose: false,
      // If true then the close header button is removed.
      headerButtonNoLabel: false,
      // If true then header button labels are removed for application shells.
      headerNoTitleMinimized: false,
      // If true then header title is hidden when application is minimized.
      minHeight: MIN_WINDOW_HEIGHT,
      // Assigned to position. Number specifying minimum window height.
      minWidth: MIN_WINDOW_WIDTH,
      // Assigned to position. Number specifying minimum window width.
      positionable: true,
      // If false then `position.set` does not take effect.
      positionInitial: Position.Initial.browserCentered,
      // A helper for initial position placement.
      positionOrtho: true,
      // When true Position is optimized for orthographic use.
      positionValidator: Position.Validators.transformWindow,
      // A function providing the default validator.
      transformOrigin: 'top left' // By default, 'top / left' respects rotation when minimizing.

    });
  }
  /**
   * Returns the content element if an application shell is mounted.
   *
   * @returns {HTMLElement} Content element.
   */


  get elementContent() {
    return _classPrivateFieldGet(this, _elementContent);
  }
  /**
   * Returns the target element or main element if no target defined.
   *
   * @returns {HTMLElement} Target element.
   */


  get elementTarget() {
    return _classPrivateFieldGet(this, _elementTarget);
  }
  /**
   * Returns the reactive accessors & Svelte stores for SvelteApplication.
   *
   * @returns {SvelteReactive} The reactive accessors & Svelte stores.
   */


  get reactive() {
    return _classPrivateFieldGet(this, _reactive);
  }
  /**
   * Returns the application state manager.
   *
   * @returns {ApplicationState} The application state manager.
   */


  get state() {
    return _classPrivateFieldGet(this, _applicationState);
  }
  /**
   * Returns the Svelte helper class w/ various methods to access mounted Svelte components.
   *
   * @returns {GetSvelteData} GetSvelteData
   */


  get svelte() {
    return _classPrivateFieldGet(this, _getSvelteData);
  }
  /**
   * In this case of when a template is defined in app options `html` references the inner HTML / template. However,
   * to activate classic v1 tabs for a Svelte component the element target is passed as an array simulating JQuery as
   * the element is retrieved immediately and the core listeners use standard DOM queries.
   *
   * @inheritDoc
   * @protected
   * @ignore
   */


  _activateCoreListeners(html) {
    super._activateCoreListeners(typeof this.options.template === 'string' ? html : [_classPrivateFieldGet(this, _elementTarget)]);
  }
  /**
   * Provide an override to set this application as the active window regardless of z-index. Changes behaviour from
   * Foundry core. This is important / used for instance in dialog key handling for left / right button selection.
   *
   * @param {object} [opts] - Optional parameters.
   *
   * @param {boolean} [opts.force=false] - Force bring to top; will increment z-index by popOut order.
   *
   */


  bringToTop({
    force = false
  } = {}) {
    if (force || this.popOut) {
      super.bringToTop();
    }

    ui.activeWindow = this;
  }
  /**
   * Note: This method is fully overridden and duplicated as Svelte components need to be destroyed manually and the
   * best visual result is to destroy them after the default slide up animation occurs, but before the element
   * is removed from the DOM.
   *
   * If you destroy the Svelte components before the slide up animation the Svelte elements are removed immediately
   * from the DOM. The purpose of overriding ensures the slide up animation is always completed before
   * the Svelte components are destroyed and then the element is removed from the DOM.
   *
   * Close the application and un-register references to it within UI mappings.
   * This function returns a Promise which resolves once the window closing animation concludes
   *
   * @param {object}   [options] - Optional parameters.
   *
   * @param {boolean}  [options.force] - Force close regardless of render state.
   *
   * @returns {Promise<void>}    A Promise which resolves once the application is closed.
   * @ignore
   */


  async close(options = {}) {
    const states = Application.RENDER_STATES;

    if (!options.force && ![states.RENDERED, states.ERROR].includes(this._state)) {
      return;
    } // Unsubscribe from any local stores.


    _classPrivateFieldGet(this, _stores).unsubscribe();
    /**
     * @ignore
     */


    this._state = states.CLOSING;
    /**
     * Get the element.
     *
     * @type {HTMLElement}
     */

    const el = _classPrivateFieldGet(this, _elementTarget);

    if (!el) {
      return this._state = states.CLOSED;
    } // Make any window content overflow hidden to avoid any scrollbars appearing in default or Svelte outro
    // transitions.


    const content = el.querySelector('.window-content');

    if (content) {
      content.style.overflow = 'hidden';
    } // Dispatch Hooks for closing the base and subclass applications


    for (const cls of this.constructor._getInheritanceChain()) {
      /**
       * A hook event that fires whenever this Application is closed.
       *
       * @param {Application} app                     The Application instance being closed
       *
       * @param {jQuery[]} html                       The application HTML when it is closed
       *
       * @function closeApplication
       *
       * @memberof hookEvents
       */
      Hooks.call(`close${cls.name}`, this, el);
    } // If options `defaultCloseAnimation` is false then do not execute the standard slide up animation.
    // This allows Svelte components to provide any out transition. Application shells will automatically set
    // `defaultCloseAnimation` based on any out transition set or unset.


    const animate = typeof this.options.defaultCloseAnimation === 'boolean' ? this.options.defaultCloseAnimation : true;

    if (animate) {
      // Set min height for full slide.
      el.style.minHeight = '0';
      const {
        paddingBottom,
        paddingTop
      } = globalThis.getComputedStyle(el); // Slide-up application.

      await el.animate([{
        maxHeight: `${el.clientHeight}px`,
        paddingTop,
        paddingBottom
      }, {
        maxHeight: 0,
        paddingTop: 0,
        paddingBottom: 0
      }], {
        duration: 250,
        easing: 'ease-in',
        fill: 'forwards'
      }).finished;
    } // Stores the Promises returned from running outro transitions and destroying each Svelte component.


    const svelteDestroyPromises = []; // Manually invoke the destroy callbacks for all Svelte components.

    for (const entry of _classPrivateFieldGet(this, _svelteData)) {
      // Use `outroAndDestroy` to run outro transitions before destroying.
      svelteDestroyPromises.push(outroAndDestroy(entry.component)); // If any proxy eventbus has been added then remove all event registrations from the component.

      const eventbus = entry.config.eventbus;

      if (typeof eventbus === 'object' && typeof eventbus.off === 'function') {
        eventbus.off();
        entry.config.eventbus = void 0;
      }
    } // Await all Svelte components to destroy.


    await Promise.all(svelteDestroyPromises); // Reset SvelteData like this to maintain reference to GetSvelteData / `this.svelte`.

    _classPrivateFieldGet(this, _svelteData).length = 0; // Remove element from the DOM. Most SvelteComponents have already removed it.

    el.remove(); // Silently restore any width / height state before minimized as applicable.

    this.position.restore({
      name: '#beforeMinimized',
      properties: ['width', 'height'],
      silent: true,
      remove: true
    }); // Clean up data

    _classPrivateFieldGet(this, _applicationShellHolder)[0] = null;
    /**
     * @ignore
     */

    this._element = null;

    _classPrivateFieldSet(this, _elementContent, null);

    _classPrivateFieldSet(this, _elementTarget, null);

    delete ui.windows[this.appId];
    /**
     * @ignore
     */

    this._minimized = false;
    /**
     * @ignore
     */

    this._scrollPositions = null;
    this._state = states.CLOSED;

    _classPrivateFieldSet(this, _onMount, false); // Update the minimized UI store options.


    _classPrivateFieldGet(this, _stores).uiOptionsUpdate(storeOptions => deepMerge(storeOptions, {
      minimized: this._minimized
    }));
  }
  /**
   * Inject the Svelte components defined in `this.options.svelte`. The Svelte component can attach to the existing
   * pop-out of Application or provide no template and render into a document fragment which is then attached to the
   * DOM.
   *
   * @param {JQuery} html -
   *
   * @inheritDoc
   * @ignore
   */


  _injectHTML(html) {
    if (this.popOut && html.length === 0 && Array.isArray(this.options.svelte)) {
      throw new Error('SvelteApplication - _injectHTML - A popout app with no template can only support one Svelte component.');
    } // Make sure the store is updated with the latest header buttons. Also allows filtering buttons before display.


    this.reactive.updateHeaderButtons(); // Create a function to generate a callback for Svelte components to invoke to update the tracked elements for
    // application shells in the rare cases that the main element root changes. The update is only trigged on
    // successive changes of `elementRoot`. Returns a boolean to indicate the element roots are updated.

    const elementRootUpdate = () => {
      let cntr = 0;
      return elementRoot => {
        if (elementRoot !== null && elementRoot !== void 0 && cntr++ > 0) {
          _classPrivateMethodGet(this, _updateApplicationShell, _updateApplicationShell2).call(this);

          return true;
        }

        return false;
      };
    };

    if (Array.isArray(this.options.svelte)) {
      for (const svelteConfig of this.options.svelte) {
        const svelteData = loadSvelteConfig(this, html, svelteConfig, elementRootUpdate);

        if (isApplicationShell(svelteData.component)) {
          if (this.svelte.applicationShell !== null) {
            throw new Error(`SvelteApplication - _injectHTML - An application shell is already mounted; offending config:
                    ${JSON.stringify(svelteConfig)}`);
          }

          _classPrivateFieldGet(this, _applicationShellHolder)[0] = svelteData.component;
        }

        _classPrivateFieldGet(this, _svelteData).push(svelteData);
      }
    } else if (typeof this.options.svelte === 'object') {
      const svelteData = loadSvelteConfig(this, html, this.options.svelte, elementRootUpdate);

      if (isApplicationShell(svelteData.component)) {
        // A sanity check as shouldn't hit this case as only one component is being mounted.
        if (this.svelte.applicationShell !== null) {
          throw new Error(`SvelteApplication - _injectHTML - An application shell is already mounted; offending config:
                 ${JSON.stringify(this.options.svelte)}`);
        }

        _classPrivateFieldGet(this, _applicationShellHolder)[0] = svelteData.component;
      }

      _classPrivateFieldGet(this, _svelteData).push(svelteData);
    } // Detect if this is a synthesized DocumentFragment.


    const isDocumentFragment = html.length && html[0] instanceof DocumentFragment; // If any of the Svelte components mounted directly targets an HTMLElement then do not inject HTML.

    let injectHTML = true;

    for (const svelteData of _classPrivateFieldGet(this, _svelteData)) {
      if (!svelteData.injectHTML) {
        injectHTML = false;
        break;
      }
    }

    if (injectHTML) {
      super._injectHTML(html);
    }

    if (this.svelte.applicationShell !== null) {
      this._element = $(this.svelte.applicationShell.elementRoot); // Detect if the application shell exports an `elementContent` accessor.

      _classPrivateFieldSet(this, _elementContent, hasGetter(this.svelte.applicationShell, 'elementContent') ? this.svelte.applicationShell.elementContent : null); // Detect if the application shell exports an `elementTarget` accessor.


      _classPrivateFieldSet(this, _elementTarget, hasGetter(this.svelte.applicationShell, 'elementTarget') ? this.svelte.applicationShell.elementTarget : null);
    } else if (isDocumentFragment) // Set the element of the app to the first child element in order of Svelte components mounted.
      {
        for (const svelteData of _classPrivateFieldGet(this, _svelteData)) {
          if (svelteData.element instanceof HTMLElement) {
            this._element = $(svelteData.element);
            break;
          }
        }
      } // Potentially retrieve a specific target element if `selectorTarget` is defined otherwise make the target the
    // main element.


    if (_classPrivateFieldGet(this, _elementTarget) === null) {
      const element = typeof this.options.selectorTarget === 'string' ? this._element.find(this.options.selectorTarget) : this._element;

      _classPrivateFieldSet(this, _elementTarget, element[0]);
    } // TODO VERIFY THIS CHECK ESPECIALLY `this.#elementTarget.length === 0`.


    if (_classPrivateFieldGet(this, _elementTarget) === null || _classPrivateFieldGet(this, _elementTarget) === void 0 || _classPrivateFieldGet(this, _elementTarget).length === 0) {
      throw new Error(`SvelteApplication - _injectHTML: Target element '${this.options.selectorTarget}' not found.`);
    } // The initial zIndex may be set in application options or for popOut applications is stored by `_renderOuter`
    // in `this.#initialZIndex`.


    if (typeof this.options.positionable === 'boolean' && this.options.positionable) {
      var _classPrivateFieldGet2;

      _classPrivateFieldGet(this, _elementTarget).style.zIndex = typeof this.options.zIndex === 'number' ? this.options.zIndex : (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _initialZIndex)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : 95;
    } // Subscribe to local store handling.


    _classPrivateFieldGet(this, _stores).subscribe();
  }
  /**
   * Provides a mechanism to update the UI options store for maximized.
   *
   * Note: the sanity check is duplicated from {@link Application.maximize} the store is updated _before_
   * performing the rest of animations. This allows application shells to remove / show any resize handlers
   * correctly. Extra constraint data is stored in a saved position state in {@link SvelteApplication.minimize}
   * to animate the content area.
   *
   * @param {object} [opts] - Optional parameters.
   *
   * @param {boolean}  [opts.animate=true] - When true perform default maximizing animation.
   *
   * @param {boolean}  [opts.duration=100] - Controls content area animation duration.
   */


  async maximize({
    animate = true,
    duration = 100
  } = {}) {
    var _this$options$minHeig, _this$options;

    if (!this.popOut || [false, null].includes(this._minimized)) {
      return;
    }

    _classPrivateFieldGet(this, _stores).uiOptionsUpdate(options => deepMerge(options, {
      minimized: false
    }));

    this._minimized = null; // Get content

    const element = this.elementTarget;
    const header = element.querySelector('.window-header');
    const content = element.querySelector('.window-content'); // First animate / restore width / async.

    if (animate) {
      await this.position.restore({
        name: '#beforeMinimized',
        async: true,
        animateTo: true,
        properties: ['width']
      });
    } // Reset display none on all children of header.


    for (let cntr = header.children.length; --cntr >= 0;) {
      header.children[cntr].style.display = null;
    }

    content.style.display = null;
    let constraints;

    if (animate) {
      // Next animate / restore height synchronously and remove key. Retrieve constraints data for slide up animation
      // below.
      ({
        constraints
      } = this.position.restore({
        name: '#beforeMinimized',
        animateTo: true,
        properties: ['height'],
        remove: true,
        duration: 100
      }));
    } else {
      ({
        constraints
      } = this.position.remove({
        name: '#beforeMinimized'
      }));
    } // Slide down content with stored constraints.


    await content.animate([{
      maxHeight: 0,
      paddingTop: 0,
      paddingBottom: 0,
      offset: 0
    }, _objectSpread2(_objectSpread2({}, constraints), {}, {
      offset: 1
    }), {
      maxHeight: '100%',
      offset: 1
    }], {
      duration,
      fill: 'forwards'
    }).finished; // minHeight needs to be adjusted to options or Foundry default window height.

    this.position.minHeight = (_this$options$minHeig = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.minHeight) !== null && _this$options$minHeig !== void 0 ? _this$options$minHeig : MIN_WINDOW_HEIGHT;
    element.classList.remove('minimized');
    this._minimized = false;
    element.style.minWidth = null;
    element.style.minHeight = null; // Using a 30ms timeout prevents any instantaneous display of scrollbars with the above maximize animation.

    setTimeout(() => content.style.overflow = null, 30);
  }
  /**
   * Provides a mechanism to update the UI options store for minimized.
   *
   * Note: the sanity check is duplicated from {@link Application.minimize} the store is updated _before_
   * performing the rest of animations. This allows application shells to remove / show any resize handlers
   * correctly. Extra constraint data is stored in a saved position state in {@link SvelteApplication.minimize}
   * to animate the content area.
   *
   * @param {object} [opts] - Optional parameters
   *
   * @param {boolean}  [opts.animate=true] - When true perform default minimizing animation.
   *
   * @param {boolean}  [opts.duration=100] - Controls content area animation duration.
   */


  async minimize({
    animate = true,
    duration = 100
  } = {}) {
    if (!this.rendered || !this.popOut || [true, null].includes(this._minimized)) {
      return;
    }

    _classPrivateFieldGet(this, _stores).uiOptionsUpdate(options => deepMerge(options, {
      minimized: true
    }));

    this._minimized = null;
    const element = this.elementTarget; // Get content

    const header = element.querySelector('.window-header');
    const content = element.querySelector('.window-content'); // Remove minimum width and height styling rules

    element.style.minWidth = '100px';
    element.style.minHeight = '30px';
    content.style.overflow = 'hidden';
    const {
      paddingBottom,
      paddingTop
    } = globalThis.getComputedStyle(content); // Extra data that is saved with the current position. Used during `maximize`.

    const constraints = {
      maxHeight: `${content.clientHeight}px`,
      paddingTop,
      paddingBottom
    }; // Slide-up content

    if (animate) {
      const animation = content.animate([constraints, {
        maxHeight: 0,
        paddingTop: 0,
        paddingBottom: 0
      }], {
        duration,
        fill: 'forwards'
      }); // Set display style to none when animation finishes.

      animation.finished.then(() => content.style.display = 'none');
    } else {
      setTimeout(() => content.style.display = 'none', duration);
    } // Save current position state and add the constraint data to use in `maximize`.


    this.position.save({
      name: '#beforeMinimized',
      constraints
    });
    const headerOffsetHeight = header.offsetHeight; // minHeight needs to be adjusted to header height.

    this.position.minHeight = headerOffsetHeight;

    if (animate) {
      // First await animation of height upward.
      await this.position.animateTo({
        height: headerOffsetHeight
      }, {
        duration: 100
      });
    } // Set all header buttons besides close and the window title to display none.


    for (let cntr = header.children.length; --cntr >= 0;) {
      const className = header.children[cntr].className;

      if (className.includes('window-title') || className.includes('close') || className.includes('keep-minimized')) {
        continue;
      }

      header.children[cntr].style.display = 'none';
    }

    if (animate) {
      // Await animation of width to the left / minimum width.
      await this.position.animateTo({
        width: MIN_WINDOW_WIDTH
      }, {
        duration: 100
      });
    }

    element.classList.add('minimized');
    this._minimized = true;
  }
  /**
   * Provides a callback after all Svelte components are initialized.
   *
   * @param {object}      [opts] - Optional parameters.
   *
   * @param {HTMLElement} [opts.element] - HTMLElement container for main application element.
   *
   * @param {HTMLElement} [opts.elementContent] - HTMLElement container for content area of application shells.
   *
   * @param {HTMLElement} [opts.elementTarget] - HTMLElement container for main application target element.
   */


  onSvelteMount({
    element,
    elementContent,
    elementTarget
  } = {}) {} // eslint-disable-line no-unused-vars

  /**
   * Override replacing HTML as Svelte components control the rendering process. Only potentially change the outer
   * application frame / title for pop-out applications.
   *
   * @inheritDoc
   * @ignore
   */


  _replaceHTML(element, html) // eslint-disable-line no-unused-vars
  {
    if (!element.length) {
      return;
    }

    this.reactive.updateHeaderButtons();
  }
  /**
   * Provides an override verifying that a new Application being rendered for the first time doesn't have a
   * corresponding DOM element already loaded. This is a check that only occurs when `this._state` is
   * `Application.RENDER_STATES.NONE`. It is useful in particular when SvelteApplication has a static ID
   * explicitly set in `this.options.id` and long intro / outro transitions are assigned. If a new application
   * sharing this static ID attempts to open / render for the first time while an existing DOM element sharing
   * this static ID exists then the initial render is cancelled below rather than crashing later in the render
   * cycle {@link Position.set}.
   *
   * @inheritDoc
   * @protected
   * @ignore
   */


  async _render(force = false, options = {}) {
    if (this._state === Application.RENDER_STATES.NONE && document.querySelector(`#${this.id}`) instanceof HTMLElement) {
      console.warn(`SvelteApplication - _render: A DOM element already exists for CSS ID '${this.id}'. Cancelling initial render for new application with appId '${this.appId}'.`);
      return;
    }

    await super._render(force, options);

    if (!_classPrivateFieldGet(this, _onMount)) {
      this.onSvelteMount({
        element: this._element[0],
        elementContent: _classPrivateFieldGet(this, _elementContent),
        elementTarget: _classPrivateFieldGet(this, _elementTarget)
      });

      _classPrivateFieldSet(this, _onMount, true);
    }
  }
  /**
   * Render the inner application content. Only render a template if one is defined otherwise provide an empty
   * JQuery element per the core Foundry API.
   *
   * @param {Object} data         The data used to render the inner template
   *
   * @returns {Promise.<JQuery>}   A promise resolving to the constructed jQuery object
   *
   * @protected
   * @ignore
   */


  async _renderInner(data) {
    const html = typeof this.template === 'string' ? await renderTemplate(this.template, data) : document.createDocumentFragment();
    return $(html);
  }
  /**
   * Stores the initial z-index set in `_renderOuter` which is used in `_injectHTML` to set the target element
   * z-index after the Svelte component is mounted.
   *
   * @returns {Promise<JQuery>} Outer frame / unused.
   * @protected
   * @ignore
   */


  async _renderOuter() {
    const html = await super._renderOuter();

    _classPrivateFieldSet(this, _initialZIndex, html[0].style.zIndex);

    return html;
  }
  /**
   * All calculation and updates of position are implemented in {@link Position.set}. This allows position to be fully
   * reactive and in control of updating inline styles for the application.
   *
   * This method remains for backward compatibility with Foundry. If you have a custom override quite likely you need
   * to update to using the {@link Position.validators} functionality.
   *
   * @param {PositionData}   [position] - Position data.
   *
   * @returns {PositionData} The updated position object for the application containing the new values
   */


  setPosition(position) {
    return this.position.set(position);
  }
  /**
   * This method is only invoked by the `elementRootUpdate` callback that is added to the external context passed to
   * Svelte components. When invoked it updates the local element roots tracked by SvelteApplication.
   */


}
/**
 * @typedef {object} SvelteData
 *
 * @property {object}                           config -
 *
 * @property {import('svelte').SvelteComponent} component -
 *
 * @property {HTMLElement}                      element -
 *
 * @property {boolean}                          injectHTML -
 */

/**
 * @typedef {object} SvelteStores
 *
 * @property {import('svelte/store').Writable.update} appOptionsUpdate - Update function for app options store.
 *
 * @property {Function} subscribe - Subscribes to local stores.
 *
 * @property {import('svelte/store').Writable.update} uiOptionsUpdate - Update function for UI options store.
 *
 * @property {Function} unsubscribe - Unsubscribes from local stores.
 */

function _updateApplicationShell2() {
  const applicationShell = this.svelte.applicationShell;

  if (applicationShell !== null) {
    this._element = $(applicationShell.elementRoot); // Detect if the application shell exports an `elementContent` accessor.

    _classPrivateFieldSet(this, _elementContent, hasGetter(applicationShell, 'elementContent') ? applicationShell.elementContent : null); // Detect if the application shell exports an `elementTarget` accessor.


    _classPrivateFieldSet(this, _elementTarget, hasGetter(applicationShell, 'elementTarget') ? applicationShell.elementTarget : null);

    if (_classPrivateFieldGet(this, _elementTarget) === null) {
      const element = typeof this.options.selectorTarget === 'string' ? this._element.find(this.options.selectorTarget) : this._element;

      _classPrivateFieldSet(this, _elementTarget, element[0]);
    } // The initial zIndex may be set in application options or for popOut applications is stored by `_renderOuter`
    // in `this.#initialZIndex`.


    if (typeof this.options.positionable === 'boolean' && this.options.positionable) {
      var _classPrivateFieldGet3;

      _classPrivateFieldGet(this, _elementTarget).style.zIndex = typeof this.options.zIndex === 'number' ? this.options.zIndex : (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _initialZIndex)) !== null && _classPrivateFieldGet3 !== void 0 ? _classPrivateFieldGet3 : 95;

      _get(_getPrototypeOf(SvelteApplication.prototype), "bringToTop", this).call(this); // Ensure that new root element has inline position styles set.


      this.position.set(this.position.get());
    }

    _get(_getPrototypeOf(SvelteApplication.prototype), "_activateCoreListeners", this).call(this, [_classPrivateFieldGet(this, _elementTarget)]);

    this.onSvelteMount({
      element: this._element[0],
      elementContent: _classPrivateFieldGet(this, _elementContent),
      elementTarget: _classPrivateFieldGet(this, _elementTarget)
    });
  }
}

function fade(node, {
  delay = 0,
  duration = 400,
  easing = identity
} = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: t => `opacity: ${t * o}`
  };
}

function fly(node, {
  delay = 0,
  duration = 400,
  easing = cubicOut,
  x = 0,
  y = 0,
  opacity = 0
} = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const transform = style.transform === 'none' ? '' : style.transform;
  const od = target_opacity * (1 - opacity);
  return {
    delay,
    duration,
    easing,
    css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - od * u}`
  };
}

function scale(node, {
  delay = 0,
  duration = 400,
  easing = cubicOut,
  start = 0,
  opacity = 0
} = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const transform = style.transform === 'none' ? '' : style.transform;
  const sd = 1 - start;
  const od = target_opacity * (1 - opacity);
  return {
    delay,
    duration,
    easing,
    css: (_t, u) => `
			transform: ${transform} scale(${1 - sd * u});
			opacity: ${target_opacity - od * u}
		`
  };
}

/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants


var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};
/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create$6() {
  var out = new ARRAY_TYPE(9);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */


function create$4() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */


function length$4(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */


function fromValues$4(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */


function normalize$4(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */


function dot$4(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */


function cross$2(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Alias for {@link vec3.length}
 * @function
 */


var len$4 = length$4;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$4();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
})();
/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */


function create$3() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */


function normalize$3(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */


(function () {
  var vec = create$3();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
})();
/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */


function create$2() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/


function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */


function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */


function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */


var normalize$2 = normalize$3;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

(function () {
  var tmpvec3 = create$4();
  var xUnitVec3 = fromValues$4(1, 0, 0);
  var yUnitVec3 = fromValues$4(0, 1, 0);
  return function (out, a, b) {
    var dot = dot$4(a, b);

    if (dot < -0.999999) {
      cross$2(tmpvec3, xUnitVec3, a);
      if (len$4(tmpvec3) < 0.000001) cross$2(tmpvec3, yUnitVec3, a);
      normalize$4(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross$2(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize$2(out, out);
    }
  };
})();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */


(function () {
  var temp1 = create$2();
  var temp2 = create$2();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
})();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */


(function () {
  var matr = create$6();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize$2(out, fromMat3(out, matr));
  };
})();
/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */


function create() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */


(function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
})();

const s_DEFAULT_TRANSITION = () => void 0;

const s_DEFAULT_TRANSITION_OPTIONS = {};

/**
 * Provides a basic test for a given variable to test if it has the shape of a writable store by having a `subscribe`
 * function and an `update` function.
 *
 * Note: functions are also objects, so test that the variable might be a function w/ a `subscribe` function.
 *
 * @param {*}  store - variable to test that might be a store.
 *
 * @returns {boolean} Whether the variable tested has the shape of a store.
 */

function isUpdatableStore(store) {
  if (store === null || store === void 0) {
    return false;
  }

  switch (typeof store) {
    case 'function':
    case 'object':
      return typeof store.subscribe === 'function' && typeof store.update === 'function';
  }

  return false;
}

const s_REGEX = /(\d+)\s*px/;
/**
 * Parses a pixel string / computed styles. Ex. `100px` returns `100`.
 *
 * @param {string}   value - Value to parse.
 *
 * @returns {number|undefined} The integer component of a pixel string.
 */

function styleParsePixels(value) {
  if (typeof value !== 'string') {
    return void 0;
  }

  const isPixels = s_REGEX.test(value);
  const number = parseInt(value);
  return isPixels && Number.isFinite(number) ? number : void 0;
}
/**
 * Defines the application shell contract. If Svelte components export getter / setters for the following properties
 * then that component is considered an application shell.
 *
 * @type {string[]}
 */


const applicationShellContract = ['elementRoot'];
Object.freeze(applicationShellContract);
/**
 * Provides an action to apply style properties provided as an object.
 *
 * @param {HTMLElement} node - Target element
 *
 * @param {object}      properties - Key / value object of properties to set.
 *
 * @returns {Function} Update function.
 */

function applyStyles(node, properties) {
  /** Sets properties on node. */
  function setProperties() {
    if (typeof properties !== 'object') {
      return;
    }

    for (const prop of Object.keys(properties)) {
      node.style.setProperty(`${prop}`, properties[prop]);
    }
  }

  setProperties();
  return {
    update(newProperties) {
      properties = newProperties;
      setProperties();
    }

  };
}
/**
 * Provides an action to monitor the given HTMLElement node with `ResizeObserver` posting width / height changes
 * to the target in various ways depending on the shape of the target. The target can be one of the following and the
 * precedence order is listed from top to bottom:
 *
 * - has a `resizeObserved` function as attribute; offset then content width / height are passed as parameters.
 * - has a `setContentBounds` function as attribute; content width / height are passed as parameters.
 * - has a `setDimension` function as attribute; offset width / height are passed as parameters.
 * - target is an object; offset and content width / height attributes are directly set on target.
 * - target is a function; the function is invoked with offset then content width / height parameters.
 * - has a writable store `resizeObserved` as an attribute; updated with offset & content width / height.
 * - has an object 'stores' that has a writable store `resizeObserved` as an attribute; updated with offset &
 *   content width / height.
 *
 * Note: Svelte currently uses an archaic IFrame based workaround to monitor offset / client width & height changes.
 * A more up to date way to do this is with ResizeObserver. To track when Svelte receives ResizeObserver support
 * monitor this issue: {@link https://github.com/sveltejs/svelte/issues/4233}
 *
 * Can-I-Use: {@link https://caniuse.com/resizeobserver}
 *
 * @param {HTMLElement}          node - The node associated with the action.
 *
 * @param {ResizeObserverTarget} target - An object or function to update with observed width & height changes.
 *
 * @returns {{update: Function, destroy: Function}} The action lifecycle methods.
 * @see {@link https://github.com/sveltejs/svelte/issues/4233}
 */


function resizeObserver(node, target) {
  ResizeObserverManager.add(node, target);
  return {
    update: newTarget => {
      ResizeObserverManager.remove(node, target);
      target = newTarget;
      ResizeObserverManager.add(node, target);
    },
    destroy: () => {
      ResizeObserverManager.remove(node, target);
    }
  };
}
/**
 * Provides a function that when invoked with an element updates the cached styles for each subscriber of the element.
 *
 * The style attributes cached to calculate offset height / width include border & padding dimensions. You only need
 * to update the cache if you change border or padding attributes of the element.
 *
 * @param {HTMLElement} el - An HTML element.
 */


resizeObserver.updateCache = function (el) {
  if (!(el instanceof HTMLElement)) {
    throw new TypeError(`resizeObserverUpdate error: 'el' is not an HTMLElement.`);
  }

  const subscribers = s_MAP.get(el);

  if (Array.isArray(subscribers)) {
    var _ref, _styleParsePixels, _ref2, _styleParsePixels2, _ref3, _styleParsePixels3, _ref4, _styleParsePixels4, _ref5, _styleParsePixels5, _ref6, _styleParsePixels6, _ref7, _styleParsePixels7, _ref8, _styleParsePixels8;

    const computed = globalThis.getComputedStyle(el); // Cache styles first from any inline styles then computed styles defaulting to 0 otherwise.
    // Used to create the offset width & height values from the context box ResizeObserver provides.

    const borderBottom = (_ref = (_styleParsePixels = styleParsePixels(el.style.borderBottom)) !== null && _styleParsePixels !== void 0 ? _styleParsePixels : styleParsePixels(computed.borderBottom)) !== null && _ref !== void 0 ? _ref : 0;
    const borderLeft = (_ref2 = (_styleParsePixels2 = styleParsePixels(el.style.borderLeft)) !== null && _styleParsePixels2 !== void 0 ? _styleParsePixels2 : styleParsePixels(computed.borderLeft)) !== null && _ref2 !== void 0 ? _ref2 : 0;
    const borderRight = (_ref3 = (_styleParsePixels3 = styleParsePixels(el.style.borderRight)) !== null && _styleParsePixels3 !== void 0 ? _styleParsePixels3 : styleParsePixels(computed.borderRight)) !== null && _ref3 !== void 0 ? _ref3 : 0;
    const borderTop = (_ref4 = (_styleParsePixels4 = styleParsePixels(el.style.borderTop)) !== null && _styleParsePixels4 !== void 0 ? _styleParsePixels4 : styleParsePixels(computed.borderTop)) !== null && _ref4 !== void 0 ? _ref4 : 0;
    const paddingBottom = (_ref5 = (_styleParsePixels5 = styleParsePixels(el.style.paddingBottom)) !== null && _styleParsePixels5 !== void 0 ? _styleParsePixels5 : styleParsePixels(computed.paddingBottom)) !== null && _ref5 !== void 0 ? _ref5 : 0;
    const paddingLeft = (_ref6 = (_styleParsePixels6 = styleParsePixels(el.style.paddingLeft)) !== null && _styleParsePixels6 !== void 0 ? _styleParsePixels6 : styleParsePixels(computed.paddingLeft)) !== null && _ref6 !== void 0 ? _ref6 : 0;
    const paddingRight = (_ref7 = (_styleParsePixels7 = styleParsePixels(el.style.paddingRight)) !== null && _styleParsePixels7 !== void 0 ? _styleParsePixels7 : styleParsePixels(computed.paddingRight)) !== null && _ref7 !== void 0 ? _ref7 : 0;
    const paddingTop = (_ref8 = (_styleParsePixels8 = styleParsePixels(el.style.paddingTop)) !== null && _styleParsePixels8 !== void 0 ? _styleParsePixels8 : styleParsePixels(computed.paddingTop)) !== null && _ref8 !== void 0 ? _ref8 : 0;
    const additionalWidth = borderLeft + borderRight + paddingLeft + paddingRight;
    const additionalHeight = borderTop + borderBottom + paddingTop + paddingBottom;

    for (const subscriber of subscribers) {
      subscriber.styles.additionalWidth = additionalWidth;
      subscriber.styles.additionalHeight = additionalHeight;
      s_UPDATE_SUBSCRIBER(subscriber, subscriber.contentWidth, subscriber.contentHeight);
    }
  }
}; // Below is the static ResizeObserverManager ------------------------------------------------------------------------


const s_MAP = new Map();
/**
 * Provides a static / single instance of ResizeObserver that can notify listeners in different ways.
 *
 * The action, {@link resizeObserver}, utilizes ResizeObserverManager for automatic registration and removal
 * via Svelte.
 */

class ResizeObserverManager {
  /**
   * Add an HTMLElement and ResizeObserverTarget instance for monitoring. Create cached style attributes for the
   * given element include border & padding dimensions for offset width / height calculations.
   *
   * @param {HTMLElement}    el - The element to observe.
   *
   * @param {ResizeObserverTarget} target - A target that contains one of several mechanisms for updating resize data.
   */
  static add(el, target) {
    var _ref9, _styleParsePixels9, _ref10, _styleParsePixels10, _ref11, _styleParsePixels11, _ref12, _styleParsePixels12, _ref13, _styleParsePixels13, _ref14, _styleParsePixels14, _ref15, _styleParsePixels15, _ref16, _styleParsePixels16;

    const updateType = s_GET_UPDATE_TYPE(target);

    if (updateType === 0) {
      throw new Error(`'target' does not match supported ResizeObserverManager update mechanisms.`);
    }

    const computed = globalThis.getComputedStyle(el); // Cache styles first from any inline styles then computed styles defaulting to 0 otherwise.
    // Used to create the offset width & height values from the context box ResizeObserver provides.

    const borderBottom = (_ref9 = (_styleParsePixels9 = styleParsePixels(el.style.borderBottom)) !== null && _styleParsePixels9 !== void 0 ? _styleParsePixels9 : styleParsePixels(computed.borderBottom)) !== null && _ref9 !== void 0 ? _ref9 : 0;
    const borderLeft = (_ref10 = (_styleParsePixels10 = styleParsePixels(el.style.borderLeft)) !== null && _styleParsePixels10 !== void 0 ? _styleParsePixels10 : styleParsePixels(computed.borderLeft)) !== null && _ref10 !== void 0 ? _ref10 : 0;
    const borderRight = (_ref11 = (_styleParsePixels11 = styleParsePixels(el.style.borderRight)) !== null && _styleParsePixels11 !== void 0 ? _styleParsePixels11 : styleParsePixels(computed.borderRight)) !== null && _ref11 !== void 0 ? _ref11 : 0;
    const borderTop = (_ref12 = (_styleParsePixels12 = styleParsePixels(el.style.borderTop)) !== null && _styleParsePixels12 !== void 0 ? _styleParsePixels12 : styleParsePixels(computed.borderTop)) !== null && _ref12 !== void 0 ? _ref12 : 0;
    const paddingBottom = (_ref13 = (_styleParsePixels13 = styleParsePixels(el.style.paddingBottom)) !== null && _styleParsePixels13 !== void 0 ? _styleParsePixels13 : styleParsePixels(computed.paddingBottom)) !== null && _ref13 !== void 0 ? _ref13 : 0;
    const paddingLeft = (_ref14 = (_styleParsePixels14 = styleParsePixels(el.style.paddingLeft)) !== null && _styleParsePixels14 !== void 0 ? _styleParsePixels14 : styleParsePixels(computed.paddingLeft)) !== null && _ref14 !== void 0 ? _ref14 : 0;
    const paddingRight = (_ref15 = (_styleParsePixels15 = styleParsePixels(el.style.paddingRight)) !== null && _styleParsePixels15 !== void 0 ? _styleParsePixels15 : styleParsePixels(computed.paddingRight)) !== null && _ref15 !== void 0 ? _ref15 : 0;
    const paddingTop = (_ref16 = (_styleParsePixels16 = styleParsePixels(el.style.paddingTop)) !== null && _styleParsePixels16 !== void 0 ? _styleParsePixels16 : styleParsePixels(computed.paddingTop)) !== null && _ref16 !== void 0 ? _ref16 : 0;
    const data = {
      updateType,
      target,
      // Stores most recent contentRect.width and contentRect.height values from ResizeObserver.
      contentWidth: 0,
      contentHeight: 0,
      // Convenience data for total border & padding for offset width & height calculations.
      styles: {
        additionalWidth: borderLeft + borderRight + paddingLeft + paddingRight,
        additionalHeight: borderTop + borderBottom + paddingTop + paddingBottom
      }
    };

    if (s_MAP.has(el)) {
      const subscribers = s_MAP.get(el);
      subscribers.push(data);
    } else {
      s_MAP.set(el, [data]);
    }

    s_RESIZE_OBSERVER.observe(el);
  }
  /**
   * Removes all targets from monitoring when just an element is provided otherwise removes a specific target
   * from the monitoring map. If no more targets remain then the element is removed from monitoring.
   *
   * @param {HTMLElement}          el - Element to remove from monitoring.
   *
   * @param {ResizeObserverTarget} [target] - A specific target to remove from monitoring.
   */


  static remove(el, target = void 0) {
    const subscribers = s_MAP.get(el);

    if (Array.isArray(subscribers)) {
      const index = subscribers.findIndex(entry => entry.target === target);

      if (index >= 0) {
        // Update target subscriber with undefined values.
        s_UPDATE_SUBSCRIBER(subscribers[index], void 0, void 0);
        subscribers.splice(index, 1);
      } // Remove element monitoring if last target removed.


      if (subscribers.length === 0) {
        s_MAP.delete(el);
        s_RESIZE_OBSERVER.unobserve(el);
      }
    }
  }

}
/**
 * Defines the various shape / update type of the given target.
 *
 * @type {Record<string, number>}
 */


const s_UPDATE_TYPES = {
  none: 0,
  attribute: 1,
  function: 2,
  resizeObserved: 3,
  setContentBounds: 4,
  setDimension: 5,
  storeObject: 6,
  storesObject: 7
};
const s_RESIZE_OBSERVER = new ResizeObserver(entries => {
  for (const entry of entries) {
    const subscribers = s_MAP.get(entry === null || entry === void 0 ? void 0 : entry.target);

    if (Array.isArray(subscribers)) {
      const contentWidth = entry.contentRect.width;
      const contentHeight = entry.contentRect.height;

      for (const subscriber of subscribers) {
        s_UPDATE_SUBSCRIBER(subscriber, contentWidth, contentHeight);
      }
    }
  }
});
/**
 * Determines the shape of the target instance regarding valid update mechanisms to set width & height changes.
 *
 * @param {*}  target - The target instance.
 *
 * @returns {number} Update type value.
 */

function s_GET_UPDATE_TYPE(target) {
  if ((target === null || target === void 0 ? void 0 : target.resizeObserved) instanceof Function) {
    return s_UPDATE_TYPES.resizeObserved;
  }

  if ((target === null || target === void 0 ? void 0 : target.setDimension) instanceof Function) {
    return s_UPDATE_TYPES.setDimension;
  }

  if ((target === null || target === void 0 ? void 0 : target.setContentBounds) instanceof Function) {
    return s_UPDATE_TYPES.setContentBounds;
  }

  const targetType = typeof target; // Does the target have resizeObserved writable store?

  if (targetType === 'object' || targetType === 'function') {
    if (isUpdatableStore(target.resizeObserved)) {
      return s_UPDATE_TYPES.storeObject;
    } // Now check for a child stores object which is a common TRL pattern for exposing stores.


    const stores = target === null || target === void 0 ? void 0 : target.stores;

    if (typeof stores === 'object' || typeof stores === 'function') {
      if (isUpdatableStore(stores.resizeObserved)) {
        return s_UPDATE_TYPES.storesObject;
      }
    }
  }

  if (targetType === 'object') {
    return s_UPDATE_TYPES.attribute;
  }

  if (targetType === 'function') {
    return s_UPDATE_TYPES.function;
  }

  return s_UPDATE_TYPES.none;
}
/**
 * Updates a subscriber target with given content width & height values. Offset width & height is calculated from
 * the content values + cached styles.
 *
 * @param {object}            subscriber - Internal data about subscriber.
 *
 * @param {number|undefined}  contentWidth - ResizeObserver contentRect.width value or undefined.
 *
 * @param {number|undefined}  contentHeight - ResizeObserver contentRect.height value or undefined.
 */


function s_UPDATE_SUBSCRIBER(subscriber, contentWidth, contentHeight) {
  var _target$resizeObserve, _target$setContentBou, _target$setDimension;

  const styles = subscriber.styles;
  subscriber.contentWidth = contentWidth;
  subscriber.contentHeight = contentHeight;
  const offsetWidth = Number.isFinite(contentWidth) ? contentWidth + styles.additionalWidth : void 0;
  const offsetHeight = Number.isFinite(contentHeight) ? contentHeight + styles.additionalHeight : void 0;
  const target = subscriber.target;

  switch (subscriber.updateType) {
    case s_UPDATE_TYPES.attribute:
      target.contentWidth = contentWidth;
      target.contentHeight = contentHeight;
      target.offsetWidth = offsetWidth;
      target.offsetHeight = offsetHeight;
      break;

    case s_UPDATE_TYPES.function:
      target === null || target === void 0 ? void 0 : target(offsetWidth, offsetHeight, contentWidth, contentHeight);
      break;

    case s_UPDATE_TYPES.resizeObserved:
      (_target$resizeObserve = target.resizeObserved) === null || _target$resizeObserve === void 0 ? void 0 : _target$resizeObserve.call(target, offsetWidth, offsetHeight, contentWidth, contentHeight);
      break;

    case s_UPDATE_TYPES.setContentBounds:
      (_target$setContentBou = target.setContentBounds) === null || _target$setContentBou === void 0 ? void 0 : _target$setContentBou.call(target, contentWidth, contentHeight);
      break;

    case s_UPDATE_TYPES.setDimension:
      (_target$setDimension = target.setDimension) === null || _target$setDimension === void 0 ? void 0 : _target$setDimension.call(target, offsetWidth, offsetHeight);
      break;

    case s_UPDATE_TYPES.storeObject:
      target.resizeObserved.update(object => {
        object.contentHeight = contentHeight;
        object.contentWidth = contentWidth;
        object.offsetHeight = offsetHeight;
        object.offsetWidth = offsetWidth;
        return object;
      });
      break;

    case s_UPDATE_TYPES.storesObject:
      target.stores.resizeObserved.update(object => {
        object.contentHeight = contentHeight;
        object.contentWidth = contentWidth;
        object.offsetHeight = offsetHeight;
        object.offsetWidth = offsetWidth;
        return object;
      });
      break;
  }
}
/**
 * Provides an action to enable pointer dragging of an HTMLElement and invoke `position.set` on a given {@link Position}
 * instance provided. When the attached boolean store state changes the draggable action is enabled or disabled.
 *
 * @param {HTMLElement}       node - The node associated with the action.
 *
 * @param {object}            params - Required parameters.
 *
 * @param {Position}          params.position - A position instance.
 *
 * @param {boolean}           [params.active=true] - A boolean value; attached to a readable store.
 *
 * @param {Writable<boolean>} [params.storeDragging] - A writable store that tracks "dragging" state.
 *
 * @returns {{update: Function, destroy: Function}} The action lifecycle methods.
 */


function draggable(node, {
  position,
  active = true,
  storeDragging = void 0
}) {
  /**
   * Duplicate the app / Positionable starting position to track differences.
   *
   * @type {object}
   */
  let initialPosition = null;
  /**
   * Stores the initial X / Y on drag down.
   *
   * @type {object}
   */

  let initialDragPoint = {};
  /**
   * Stores the current dragging state and gates the move pointer as the dragging store is not
   * set until the first pointer move.
   *
   * @type {boolean}
   */

  let dragging = false;
  /**
   * Remember event handlers associated with this action so they may be later unregistered.
   *
   * @type {object}
   */

  const handlers = {
    dragDown: ['pointerdown', e => onDragPointerDown(e), false],
    dragMove: ['pointermove', e => onDragPointerMove(e), false],
    dragUp: ['pointerup', e => onDragPointerUp(e), false]
  };
  /**
   * Activates listeners.
   */

  function activateListeners() {
    // Drag handlers
    node.addEventListener(...handlers.dragDown);
    node.classList.add('draggable');
  }
  /**
   * Removes listeners.
   */


  function removeListeners() {
    if (typeof (storeDragging === null || storeDragging === void 0 ? void 0 : storeDragging.set) === 'function') {
      storeDragging.set(false);
    } // Drag handlers


    node.removeEventListener(...handlers.dragDown);
    node.removeEventListener(...handlers.dragMove);
    node.removeEventListener(...handlers.dragUp);
    node.classList.remove('draggable');
  }

  if (active) {
    activateListeners();
  }
  /**
   * Handle the initial pointer down that activates dragging behavior for the positionable.
   *
   * @param {PointerEvent} event - The pointer down event.
   */


  function onDragPointerDown(event) {
    event.preventDefault();
    dragging = false; // Record initial position.

    initialPosition = position.get();
    initialDragPoint = {
      x: event.clientX,
      y: event.clientY
    }; // Add move and pointer up handlers.

    node.addEventListener(...handlers.dragMove);
    node.addEventListener(...handlers.dragUp);
    node.setPointerCapture(event.pointerId);
  }
  /**
   * Move the positionable.
   *
   * @param {PointerEvent} event - The pointer move event.
   */


  function onDragPointerMove(event) {
    event.preventDefault(); // Only set store dragging on first move event.

    if (!dragging && typeof (storeDragging === null || storeDragging === void 0 ? void 0 : storeDragging.set) === 'function') {
      dragging = true;
      storeDragging.set(true);
    } // Update application position.


    position.set({
      left: initialPosition.left + (event.clientX - initialDragPoint.x),
      top: initialPosition.top + (event.clientY - initialDragPoint.y)
    });
  }
  /**
   * Finish dragging and set the final position and removing listeners.
   *
   * @param {PointerEvent} event - The pointer up event.
   */


  function onDragPointerUp(event) {
    event.preventDefault();
    dragging = false;

    if (typeof (storeDragging === null || storeDragging === void 0 ? void 0 : storeDragging.set) === 'function') {
      storeDragging.set(false);
    }

    node.removeEventListener(...handlers.dragMove);
    node.removeEventListener(...handlers.dragUp);
  }

  return {
    // The default of active being true won't automatically add listeners twice.
    update: ({
      active: _active = true
    }) => // eslint-disable-line no-shadow
    {
      if (_active) {
        activateListeners();
      } else {
        removeListeners();
      }
    },
    destroy: () => removeListeners()
  };
}

/**
 * A helper to create a set of radio checkbox input elements in a named set.
 * The provided keys are the possible radio values while the provided values are human readable labels.
 *
 * @param {string} name         The radio checkbox field name
 *
 * @param {object} choices      A mapping of radio checkbox values to human readable labels
 *
 * @param {object} options      Options which customize the radio boxes creation
 *
 * @param {string} options.checked    Which key is currently checked?
 *
 * @param {boolean} options.localize  Pass each label through string localization?
 *
 * @returns {string} HTML for radio boxes.
 *
 * @example <caption>The provided input data</caption>
 * let groupName = "importantChoice";
 * let choices = {a: "Choice A", b: "Choice B"};
 * let chosen = "a";
 *
 * @example <caption>The template HTML structure</caption>
 * <div class="form-group">
 *   <label>Radio Group Label</label>
 *   <div class="form-fields">
 *     {@html radioBoxes(groupName, choices, { checked: chosen, localize: true})}
 *   </div>
 * </div>
 */
/**
 * Localize a string including variable formatting for input arguments. Provide a string ID which defines the localized
 * template. Variables can be included in the template enclosed in braces and will be substituted using those named
 * keys.
 *
 * @param {string}   stringId - The string ID to translate.
 *
 * @param {object}   [data] - Provided input data.
 *
 * @returns {string} The translated and formatted string
 */


function localize(stringId, data) {
  const result = typeof data !== 'object' ? game.i18n.localize(stringId) : game.i18n.format(stringId, data);
  return result !== void 0 ? result : '';
}

/* src\component\core\TJSContainer.svelte generated by Svelte v3.46.0 */

function add_css$4(target) {
  append_styles(target, "svelte-1s361pr", "p.svelte-1s361pr{color:red;font-size:18px}");
}

function get_each_context$2$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[2] = list[i];
  return child_ctx;
} // (12:15) 


function create_if_block_1$1$1(ctx) {
  let p;
  return {
    c() {
      p = element("p");
      p.textContent = "Container warning: No children.";
      attr(p, "class", "svelte-1s361pr");
    },

    m(target, anchor) {
      insert(target, p, anchor);
    },

    p: noop,
    i: noop,
    o: noop,

    d(detaching) {
      if (detaching) detach(p);
    }

  };
} // (8:0) {#if Array.isArray(children)}


function create_if_block$5$1(ctx) {
  let each_1_anchor;
  let current;
  let each_value =
  /*children*/
  ctx[1];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$2$1(get_each_context$2$1(ctx, each_value, i));
  }

  const out = i => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      each_1_anchor = empty();
    },

    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }

      insert(target, each_1_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*children*/
      2) {
        each_value =
        /*children*/
        ctx[1];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$2$1(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$2$1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }

        group_outros();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        check_outros();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching) detach(each_1_anchor);
    }

  };
} // (9:4) {#each children as child}


function create_each_block$2$1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
  /*child*/
  ctx[2].props];
  var switch_value =
  /*child*/
  ctx[2].class;

  function switch_props(ctx) {
    let switch_instance_props = {};

    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }

    return {
      props: switch_instance_props
    };
  }

  if (switch_value) {
    switch_instance = new switch_value(switch_props());
  }

  return {
    c() {
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },

    m(target, anchor) {
      if (switch_instance) {
        mount_component(switch_instance, target, anchor);
      }

      insert(target, switch_instance_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const switch_instance_changes = dirty &
      /*children*/
      2 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
      /*child*/
      ctx[2].props)]) : {};

      if (switch_value !== (switch_value =
      /*child*/
      ctx[2].class)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }

        if (switch_value) {
          switch_instance = new switch_value(switch_props());
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },

    i(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },

    o(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(switch_instance_anchor);
      if (switch_instance) destroy_component(switch_instance, detaching);
    }

  };
}

function create_fragment$a$1(ctx) {
  let show_if;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$5$1, create_if_block_1$1$1];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (dirty &
    /*children*/
    2) show_if = null;
    if (show_if == null) show_if = !!Array.isArray(
    /*children*/
    ctx[1]);
    if (show_if) return 0;
    if (
    /*warn*/
    ctx[0]) return 1;
    return -1;
  }

  if (~(current_block_type_index = select_block_type(ctx, -1))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }

  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },

    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }

      insert(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }

        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          } else {
            if_block.p(ctx, dirty);
          }

          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },

    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },

    o(local) {
      transition_out(if_block);
      current = false;
    },

    d(detaching) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }

      if (detaching) detach(if_block_anchor);
    }

  };
}

function instance$a$1($$self, $$props, $$invalidate) {
  let {
    warn = false
  } = $$props;
  let {
    children = void 0
  } = $$props;

  $$self.$$set = $$props => {
    if ('warn' in $$props) $$invalidate(0, warn = $$props.warn);
    if ('children' in $$props) $$invalidate(1, children = $$props.children);
  };

  return [warn, children];
}

class TJSContainer extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a$1, create_fragment$a$1, safe_not_equal, {
      warn: 0,
      children: 1
    }, add_css$4);
  }

  get warn() {
    return this.$$.ctx[0];
  }

  set warn(warn) {
    this.$$set({
      warn
    });
    flush();
  }

  get children() {
    return this.$$.ctx[1];
  }

  set children(children) {
    this.$$set({
      children
    });
    flush();
  }

}
/* src\component\core\TJSGlassPane.svelte generated by Svelte v3.46.0 */


function add_css$3(target) {
  append_styles(target, "svelte-71db55", ".tjs-glass-pane.svelte-71db55{position:absolute;overflow:inherit}");
}

function create_fragment$8$1(ctx) {
  let div;
  let div_intro;
  let div_outro;
  let current;
  let mounted;
  let dispose;
  const default_slot_template =
  /*#slots*/
  ctx[17].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[16], null);
  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      attr(div, "id",
      /*id*/
      ctx[4]);
      attr(div, "tabindex", "0");
      attr(div, "class", "tjs-glass-pane svelte-71db55");
    },

    m(target, anchor) {
      insert(target, div, anchor);

      if (default_slot) {
        default_slot.m(div, null);
      }
      /*div_binding*/


      ctx[18](div);
      current = true;

      if (!mounted) {
        dispose = listen(div, "keydown",
        /*swallow*/
        ctx[6]);
        mounted = true;
      }
    },

    p(new_ctx, [dirty]) {
      ctx = new_ctx;

      if (default_slot) {
        if (default_slot.p && (!current || dirty &
        /*$$scope*/
        65536)) {
          update_slot_base(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[16], !current ? get_all_dirty_from_scope(
          /*$$scope*/
          ctx[16]) : get_slot_changes(default_slot_template,
          /*$$scope*/
          ctx[16], dirty, null), null);
        }
      }

      if (!current || dirty &
      /*id*/
      16) {
        attr(div, "id",
        /*id*/
        ctx[4]);
      }
    },

    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      add_render_callback(() => {
        if (div_outro) div_outro.end(1);
        div_intro = create_in_transition(div,
        /*inTransition*/
        ctx[0],
        /*inTransitionOptions*/
        ctx[2]);
        div_intro.start();
      });
      current = true;
    },

    o(local) {
      transition_out(default_slot, local);
      if (div_intro) div_intro.invalidate();
      div_outro = create_out_transition(div,
      /*outTransition*/
      ctx[1],
      /*outTransitionOptions*/
      ctx[3]);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(div);
      if (default_slot) default_slot.d(detaching);
      /*div_binding*/

      ctx[18](null);
      if (detaching && div_outro) div_outro.end();
      mounted = false;
      dispose();
    }

  };
}

function instance$8$1($$self, $$props, $$invalidate) {
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  let {
    id = void 0
  } = $$props;
  let {
    zIndex = Number.MAX_SAFE_INTEGER
  } = $$props;
  let {
    background = '#50505080'
  } = $$props;
  let {
    captureInput = true
  } = $$props;
  let {
    preventDefault = true
  } = $$props;
  let {
    stopPropagation = true
  } = $$props;
  let glassPane;
  let {
    transition = void 0
  } = $$props;
  let {
    inTransition = s_DEFAULT_TRANSITION
  } = $$props;
  let {
    outTransition = s_DEFAULT_TRANSITION
  } = $$props;
  let {
    transitionOptions = void 0
  } = $$props;
  let {
    inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS
  } = $$props;
  let {
    outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS
  } = $$props; // Tracks last transition state.

  let oldTransition = void 0;
  let oldTransitionOptions = void 0; // ---------------------------------------------------------------------------------------------------------------

  function swallow(event) {
    if (captureInput) {
      if (preventDefault) {
        event.preventDefault();
      }

      if (stopPropagation) {
        event.stopPropagation();
      }
    }
  }

  function div_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      glassPane = $$value;
      (($$invalidate(5, glassPane), $$invalidate(9, captureInput)), $$invalidate(8, background)), $$invalidate(7, zIndex);
    });
  }

  $$self.$$set = $$props => {
    if ('id' in $$props) $$invalidate(4, id = $$props.id);
    if ('zIndex' in $$props) $$invalidate(7, zIndex = $$props.zIndex);
    if ('background' in $$props) $$invalidate(8, background = $$props.background);
    if ('captureInput' in $$props) $$invalidate(9, captureInput = $$props.captureInput);
    if ('preventDefault' in $$props) $$invalidate(10, preventDefault = $$props.preventDefault);
    if ('stopPropagation' in $$props) $$invalidate(11, stopPropagation = $$props.stopPropagation);
    if ('transition' in $$props) $$invalidate(12, transition = $$props.transition);
    if ('inTransition' in $$props) $$invalidate(0, inTransition = $$props.inTransition);
    if ('outTransition' in $$props) $$invalidate(1, outTransition = $$props.outTransition);
    if ('transitionOptions' in $$props) $$invalidate(13, transitionOptions = $$props.transitionOptions);
    if ('inTransitionOptions' in $$props) $$invalidate(2, inTransitionOptions = $$props.inTransitionOptions);
    if ('outTransitionOptions' in $$props) $$invalidate(3, outTransitionOptions = $$props.outTransitionOptions);
    if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*glassPane*/
    32) {
      if (glassPane) {
        $$invalidate(5, glassPane.style.maxWidth = '100%', glassPane);
        $$invalidate(5, glassPane.style.maxHeight = '100%', glassPane);
        $$invalidate(5, glassPane.style.width = '100%', glassPane);
        $$invalidate(5, glassPane.style.height = '100%', glassPane);
      }
    }

    if ($$self.$$.dirty &
    /*glassPane, captureInput*/
    544) {
      if (glassPane) {
        if (captureInput) {
          glassPane.focus();
        }

        $$invalidate(5, glassPane.style.pointerEvents = captureInput ? 'auto' : 'none', glassPane);
      }
    }

    if ($$self.$$.dirty &
    /*glassPane, background*/
    288) {
      if (glassPane) {
        $$invalidate(5, glassPane.style.background = background, glassPane);
      }
    }

    if ($$self.$$.dirty &
    /*glassPane, zIndex*/
    160) {
      if (glassPane) {
        $$invalidate(5, glassPane.style.zIndex = zIndex, glassPane);
      }
    }

    if ($$self.$$.dirty &
    /*oldTransition, transition*/
    20480) {
      // Run this reactive block when the last transition state is not equal to the current state.
      if (oldTransition !== transition) {
        // If transition is defined and not the default transition then set it to both in and out transition otherwise
        // set the default transition to both in & out transitions.
        const newTransition = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ? transition : s_DEFAULT_TRANSITION;
        $$invalidate(0, inTransition = newTransition);
        $$invalidate(1, outTransition = newTransition);
        $$invalidate(14, oldTransition = newTransition);
      }
    }

    if ($$self.$$.dirty &
    /*oldTransitionOptions, transitionOptions*/
    40960) {
      // Run this reactive block when the last transition options state is not equal to the current options state.
      if (oldTransitionOptions !== transitionOptions) {
        const newOptions = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS && typeof transitionOptions === 'object' ? transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;
        $$invalidate(2, inTransitionOptions = newOptions);
        $$invalidate(3, outTransitionOptions = newOptions);
        $$invalidate(15, oldTransitionOptions = newOptions);
      }
    }

    if ($$self.$$.dirty &
    /*inTransition*/
    1) {
      // Handle cases if inTransition is unset; assign noop default transition function.
      if (typeof inTransition !== 'function') {
        $$invalidate(0, inTransition = s_DEFAULT_TRANSITION);
      }
    }

    if ($$self.$$.dirty &
    /*outTransition*/
    2) {
      // Handle cases if outTransition is unset; assign noop default transition function.
      if (typeof outTransition !== 'function') {
        $$invalidate(1, outTransition = s_DEFAULT_TRANSITION);
      }
    }

    if ($$self.$$.dirty &
    /*inTransitionOptions*/
    4) {
      // Handle cases if inTransitionOptions is unset; assign empty default transition options.
      if (typeof inTransitionOptions !== 'object') {
        $$invalidate(2, inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS);
      }
    }

    if ($$self.$$.dirty &
    /*outTransitionOptions*/
    8) {
      // Handle cases if outTransitionOptions is unset; assign empty default transition options.
      if (typeof outTransitionOptions !== 'object') {
        $$invalidate(3, outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS);
      }
    }
  };

  return [inTransition, outTransition, inTransitionOptions, outTransitionOptions, id, glassPane, swallow, zIndex, background, captureInput, preventDefault, stopPropagation, transition, transitionOptions, oldTransition, oldTransitionOptions, $$scope, slots, div_binding];
}

class TJSGlassPane extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8$1, create_fragment$8$1, safe_not_equal, {
      id: 4,
      zIndex: 7,
      background: 8,
      captureInput: 9,
      preventDefault: 10,
      stopPropagation: 11,
      transition: 12,
      inTransition: 0,
      outTransition: 1,
      transitionOptions: 13,
      inTransitionOptions: 2,
      outTransitionOptions: 3
    }, add_css$3);
  }

  get id() {
    return this.$$.ctx[4];
  }

  set id(id) {
    this.$$set({
      id
    });
    flush();
  }

  get zIndex() {
    return this.$$.ctx[7];
  }

  set zIndex(zIndex) {
    this.$$set({
      zIndex
    });
    flush();
  }

  get background() {
    return this.$$.ctx[8];
  }

  set background(background) {
    this.$$set({
      background
    });
    flush();
  }

  get captureInput() {
    return this.$$.ctx[9];
  }

  set captureInput(captureInput) {
    this.$$set({
      captureInput
    });
    flush();
  }

  get preventDefault() {
    return this.$$.ctx[10];
  }

  set preventDefault(preventDefault) {
    this.$$set({
      preventDefault
    });
    flush();
  }

  get stopPropagation() {
    return this.$$.ctx[11];
  }

  set stopPropagation(stopPropagation) {
    this.$$set({
      stopPropagation
    });
    flush();
  }

  get transition() {
    return this.$$.ctx[12];
  }

  set transition(transition) {
    this.$$set({
      transition
    });
    flush();
  }

  get inTransition() {
    return this.$$.ctx[0];
  }

  set inTransition(inTransition) {
    this.$$set({
      inTransition
    });
    flush();
  }

  get outTransition() {
    return this.$$.ctx[1];
  }

  set outTransition(outTransition) {
    this.$$set({
      outTransition
    });
    flush();
  }

  get transitionOptions() {
    return this.$$.ctx[13];
  }

  set transitionOptions(transitionOptions) {
    this.$$set({
      transitionOptions
    });
    flush();
  }

  get inTransitionOptions() {
    return this.$$.ctx[2];
  }

  set inTransitionOptions(inTransitionOptions) {
    this.$$set({
      inTransitionOptions
    });
    flush();
  }

  get outTransitionOptions() {
    return this.$$.ctx[3];
  }

  set outTransitionOptions(outTransitionOptions) {
    this.$$set({
      outTransitionOptions
    });
    flush();
  }

}
/* src\component\core\application\TJSHeaderButton.svelte generated by Svelte v3.46.0 */


function create_fragment$7$1(ctx) {
  let a;
  let html_tag;
  let t;
  let a_class_value;
  let applyStyles_action;
  let mounted;
  let dispose;
  return {
    c() {
      a = element("a");
      html_tag = new HtmlTag();
      t = text(
      /*label*/
      ctx[2]);
      html_tag.a = t;
      attr(a, "class", a_class_value = "header-button " +
      /*button*/
      ctx[0].class);
    },

    m(target, anchor) {
      insert(target, a, anchor);
      html_tag.m(
      /*icon*/
      ctx[1], a);
      append(a, t);

      if (!mounted) {
        dispose = [listen(a, "click", stop_propagation(prevent_default(
        /*onClick*/
        ctx[4]))), listen(a, "pointerdown", stop_propagation(prevent_default(pointerdown_handler))), listen(a, "dblclick", stop_propagation(prevent_default(dblclick_handler))), action_destroyer(applyStyles_action = applyStyles.call(null, a,
        /*styles*/
        ctx[3]))];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*icon*/
      2) html_tag.p(
      /*icon*/
      ctx[1]);
      if (dirty &
      /*label*/
      4) set_data(t,
      /*label*/
      ctx[2]);

      if (dirty &
      /*button*/
      1 && a_class_value !== (a_class_value = "header-button " +
      /*button*/
      ctx[0].class)) {
        attr(a, "class", a_class_value);
      }

      if (applyStyles_action && is_function(applyStyles_action.update) && dirty &
      /*styles*/
      8) applyStyles_action.update.call(null,
      /*styles*/
      ctx[3]);
    },

    i: noop,
    o: noop,

    d(detaching) {
      if (detaching) detach(a);
      mounted = false;
      run_all(dispose);
    }

  };
}

const s_REGEX_HTML$1 = /^\s*<.*>$/;

const pointerdown_handler = () => null;

const dblclick_handler = () => null;

function instance$7$1($$self, $$props, $$invalidate) {
  let {
    button
  } = $$props;
  let icon, label, title, styles;

  function onClick() {
    var _button$callback;

    // Accept either callback or onclick as the function / data to invoke.
    const invoke = (_button$callback = button.callback) !== null && _button$callback !== void 0 ? _button$callback : button.onclick;

    if (typeof invoke === 'function') {
      invoke.call(button);
      $$invalidate(0, button); // This provides a reactive update if button data changes.
    }
  }

  $$self.$$set = $$props => {
    if ('button' in $$props) $$invalidate(0, button = $$props.button);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*button, title*/
    33) {
      if (button) {
        $$invalidate(5, title = typeof button.title === 'string' ? localize(button.title) : ''); // Handle icon and treat bare strings as the icon class; otherwise assume the icon is fully formed HTML.

        $$invalidate(1, icon = typeof button.icon !== 'string' ? void 0 : s_REGEX_HTML$1.test(button.icon) ? button.icon : `<i class="${button.icon}" title="${title}"></i>`);
        $$invalidate(2, label = typeof button.label === 'string' ? localize(button.label) : '');
        $$invalidate(3, styles = typeof button.styles === 'object' ? button.styles : void 0);
      }
    }
  };

  return [button, icon, label, styles, onClick, title];
}

class TJSHeaderButton extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7$1, create_fragment$7$1, safe_not_equal, {
      button: 0
    });
  }

  get button() {
    return this.$$.ctx[0];
  }

  set button(button) {
    this.$$set({
      button
    });
    flush();
  }

}
/* src\component\core\application\TJSApplicationHeader.svelte generated by Svelte v3.46.0 */


function get_each_context$1$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
} // (63:4) {#each buttons as button}


function create_each_block$1$1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
  /*button*/
  ctx[17].props];
  var switch_value =
  /*button*/
  ctx[17].class;

  function switch_props(ctx) {
    let switch_instance_props = {};

    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }

    return {
      props: switch_instance_props
    };
  }

  if (switch_value) {
    switch_instance = new switch_value(switch_props());
  }

  return {
    c() {
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },

    m(target, anchor) {
      if (switch_instance) {
        mount_component(switch_instance, target, anchor);
      }

      insert(target, switch_instance_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const switch_instance_changes = dirty &
      /*buttons*/
      2 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
      /*button*/
      ctx[17].props)]) : {};

      if (switch_value !== (switch_value =
      /*button*/
      ctx[17].class)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }

        if (switch_value) {
          switch_instance = new switch_value(switch_props());
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },

    i(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },

    o(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(switch_instance_anchor);
      if (switch_instance) destroy_component(switch_instance, detaching);
    }

  };
}

function create_fragment$6$1(ctx) {
  let header;
  let h4;
  let t0_value = localize(
  /*$storeTitle*/
  ctx[4]) + "";
  let t0;
  let t1;
  let draggable_action;
  let minimizable_action;
  let current;
  let mounted;
  let dispose;
  let each_value =
  /*buttons*/
  ctx[1];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1$1(get_each_context$1$1(ctx, each_value, i));
  }

  const out = i => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      header = element("header");
      h4 = element("h4");
      t0 = text(t0_value);
      t1 = space();

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      attr(h4, "class", "window-title");
      set_style(h4, "display",
      /*displayHeaderTitle*/
      ctx[0], false);
      attr(header, "class", "window-header flexrow");
    },

    m(target, anchor) {
      insert(target, header, anchor);
      append(header, h4);
      append(h4, t0);
      append(header, t1);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(header, null);
      }

      current = true;

      if (!mounted) {
        dispose = [action_destroyer(draggable_action = draggable.call(null, header, {
          position:
          /*application*/
          ctx[5].position,
          active:
          /*$storeDraggable*/
          ctx[2],
          storeDragging:
          /*storeDragging*/
          ctx[8]
        })), action_destroyer(minimizable_action =
        /*minimizable*/
        ctx[13].call(null, header,
        /*$storeMinimizable*/
        ctx[3]))];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if ((!current || dirty &
      /*$storeTitle*/
      16) && t0_value !== (t0_value = localize(
      /*$storeTitle*/
      ctx[4]) + "")) set_data(t0, t0_value);

      if (dirty &
      /*displayHeaderTitle*/
      1) {
        set_style(h4, "display",
        /*displayHeaderTitle*/
        ctx[0], false);
      }

      if (dirty &
      /*buttons*/
      2) {
        each_value =
        /*buttons*/
        ctx[1];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1$1(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$1$1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(header, null);
          }
        }

        group_outros();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        check_outros();
      }

      if (draggable_action && is_function(draggable_action.update) && dirty &
      /*$storeDraggable*/
      4) draggable_action.update.call(null, {
        position:
        /*application*/
        ctx[5].position,
        active:
        /*$storeDraggable*/
        ctx[2],
        storeDragging:
        /*storeDragging*/
        ctx[8]
      });
      if (minimizable_action && is_function(minimizable_action.update) && dirty &
      /*$storeMinimizable*/
      8) minimizable_action.update.call(null,
      /*$storeMinimizable*/
      ctx[3]);
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) detach(header);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }

  };
}

function instance$6$1($$self, $$props, $$invalidate) {
  let $storeHeaderButtons;
  let $storeMinimized;
  let $storeHeaderNoTitleMinimized;
  let $storeDraggable;
  let $storeMinimizable;
  let $storeTitle;
  const application = getContext('external').application;
  const storeTitle = application.reactive.storeAppOptions.title;
  component_subscribe($$self, storeTitle, value => $$invalidate(4, $storeTitle = value));
  const storeDraggable = application.reactive.storeAppOptions.draggable;
  component_subscribe($$self, storeDraggable, value => $$invalidate(2, $storeDraggable = value));
  const storeDragging = application.reactive.storeUIState.dragging;
  const storeHeaderButtons = application.reactive.storeUIState.headerButtons;
  component_subscribe($$self, storeHeaderButtons, value => $$invalidate(14, $storeHeaderButtons = value));
  const storeHeaderNoTitleMinimized = application.reactive.storeAppOptions.headerNoTitleMinimized;
  component_subscribe($$self, storeHeaderNoTitleMinimized, value => $$invalidate(16, $storeHeaderNoTitleMinimized = value));
  const storeMinimizable = application.reactive.storeAppOptions.minimizable;
  component_subscribe($$self, storeMinimizable, value => $$invalidate(3, $storeMinimizable = value));
  const storeMinimized = application.reactive.storeUIState.minimized;
  component_subscribe($$self, storeMinimized, value => $$invalidate(15, $storeMinimized = value));
  let displayHeaderTitle;
  let buttons;

  function minimizable(node, booleanStore) {
    const callback = application._onToggleMinimize.bind(application);

    function activateListeners() {
      node.addEventListener('dblclick', callback);
    }

    function removeListeners() {
      node.removeEventListener('dblclick', callback);
    }

    if (booleanStore) {
      activateListeners();
    }

    return {
      update: booleanStore => // eslint-disable-line no-shadow
      {
        if (booleanStore) {
          activateListeners();
        } else {
          removeListeners();
        }
      },
      destroy: () => removeListeners()
    };
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*$storeHeaderNoTitleMinimized, $storeMinimized*/
    98304) {
      $$invalidate(0, displayHeaderTitle = $storeHeaderNoTitleMinimized && $storeMinimized ? 'none' : null);
    }

    if ($$self.$$.dirty &
    /*$storeHeaderButtons*/
    16384) {
      {
        $$invalidate(1, buttons = $storeHeaderButtons.reduce((array, button) => {
          // If the button is a SvelteComponent set it as the class otherwise use `TJSHeaderButton` w/ button as props.
          array.push(isSvelteComponent(button) ? {
            class: button,
            props: {}
          } : {
            class: TJSHeaderButton,
            props: {
              button
            }
          });
          return array;
        }, []));
      }
    }
  };

  return [displayHeaderTitle, buttons, $storeDraggable, $storeMinimizable, $storeTitle, application, storeTitle, storeDraggable, storeDragging, storeHeaderButtons, storeHeaderNoTitleMinimized, storeMinimizable, storeMinimized, minimizable, $storeHeaderButtons, $storeMinimized, $storeHeaderNoTitleMinimized];
}

class TJSApplicationHeader extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6$1, create_fragment$6$1, safe_not_equal, {});
  }

}
/**
 * Awaits `requestAnimationFrame` calls by the counter specified. This allows asynchronous applications for direct /
 * inline style modification amongst other direct animation techniques.
 *
 * @param {number}   [cntr=1] - A positive integer greater than 0 for amount of requestAnimationFrames to wait.
 *
 * @returns {Promise<number>} Returns current time equivalent to `performance.now()`.
 */


async function nextAnimationFrame(cntr = 1) {
  if (!Number.isInteger(cntr) || cntr < 1) {
    throw new TypeError(`nextAnimationFrame error: 'cntr' must be a positive integer greater than 0.`);
  }

  let currentTime = performance.now();

  for (; --cntr >= 0;) {
    currentTime = await new Promise(resolve => requestAnimationFrame(resolve));
  }

  return currentTime;
}
/* src\component\core\application\ResizableHandle.svelte generated by Svelte v3.46.0 */


function create_fragment$5$1(ctx) {
  let div;
  let resizable_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<i class="fas fa-arrows-alt-h"></i>`;
      attr(div, "class", "window-resizable-handle");
    },

    m(target, anchor) {
      insert(target, div, anchor);
      /*div_binding*/

      ctx[10](div);

      if (!mounted) {
        dispose = action_destroyer(resizable_action =
        /*resizable*/
        ctx[6].call(null, div, {
          active:
          /*$storeResizable*/
          ctx[1],
          storeResizing:
          /*storeResizing*/
          ctx[5]
        }));
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (resizable_action && is_function(resizable_action.update) && dirty &
      /*$storeResizable*/
      2) resizable_action.update.call(null, {
        active:
        /*$storeResizable*/
        ctx[1],
        storeResizing:
        /*storeResizing*/
        ctx[5]
      });
    },

    i: noop,
    o: noop,

    d(detaching) {
      if (detaching) detach(div);
      /*div_binding*/

      ctx[10](null);
      mounted = false;
      dispose();
    }

  };
}

function instance$5$1($$self, $$props, $$invalidate) {
  let $storeElementRoot;
  let $storeMinimized;
  let $storeResizable;
  let {
    isResizable = false
  } = $$props;
  const application = getContext('external').application; // Allows retrieval of the element root at runtime.

  const storeElementRoot = getContext('storeElementRoot');
  component_subscribe($$self, storeElementRoot, value => $$invalidate(8, $storeElementRoot = value));
  const storeResizable = application.reactive.storeAppOptions.resizable;
  component_subscribe($$self, storeResizable, value => $$invalidate(1, $storeResizable = value));
  const storeMinimized = application.reactive.storeUIState.minimized;
  component_subscribe($$self, storeMinimized, value => $$invalidate(9, $storeMinimized = value));
  const storeResizing = application.reactive.storeUIState.resizing;
  let elementResize;
  /**
  * Provides an action to handle resizing the application shell based on the resizable app option.
  *
  * @param {HTMLElement}       node - The node associated with the action.
  *
  * @param {object}            [opts] - Optional parameters.
  *
  * @param {boolean}           [opts.active=true] - A boolean value; attached to a readable store.
  *
  * @param {Writable<boolean>} [opts.storeResizing] - A writable store that tracks "resizing" state.
  *
  * @returns {{update: Function, destroy: Function}} The action lifecycle methods.
  */

  function resizable(node, {
    active = true,
    storeResizing = void 0
  } = {}) {
    /**
    * Duplicate the app / Positionable starting position to track differences.
    *
    * @type {object}
    */
    let position = null;
    /**
    * Stores the initial X / Y on drag down.
    *
    * @type {object}
    */

    let initialPosition = {};
    /**
    * Stores the current resizing state and gates the move pointer as the resizing store is not
    * set until the first pointer move.
    *
    * @type {boolean}
    */

    let resizing = false;
    /**
    * Remember event handlers associated with this action so they may be later unregistered.
    *
    * @type {Object}
    */

    const handlers = {
      resizeDown: ['pointerdown', e => onResizePointerDown(e), false],
      resizeMove: ['pointermove', e => onResizePointerMove(e), false],
      resizeUp: ['pointerup', e => onResizePointerUp(e), false]
    };
    /**
    * Activates listeners.
    */

    function activateListeners() {
      // Resize handlers
      node.addEventListener(...handlers.resizeDown);
      $$invalidate(7, isResizable = true);
      node.style.display = 'block';
    }
    /**
    * Removes listeners.
    */


    function removeListeners() {
      if (typeof (storeResizing === null || storeResizing === void 0 ? void 0 : storeResizing.set) === 'function') {
        storeResizing.set(false);
      } // Resize handlers


      node.removeEventListener(...handlers.resizeDown);
      node.removeEventListener(...handlers.resizeMove);
      node.removeEventListener(...handlers.resizeUp);
      node.style.display = 'none';
      $$invalidate(7, isResizable = false);
    } // On mount if resizable is true then activate listeners otherwise set element display to `none`.


    if (active) {
      activateListeners();
    } else {
      node.style.display = 'none';
    }
    /**
    * Handle the initial pointer down that activates resizing capture.
    */


    function onResizePointerDown(event) {
      event.preventDefault();
      resizing = false; // Record initial position

      position = application.position.get();

      if (position.height === 'auto') {
        position.height = $storeElementRoot.clientHeight;
      }

      if (position.width === 'auto') {
        position.width = $storeElementRoot.clientWidth;
      }

      initialPosition = {
        x: event.clientX,
        y: event.clientY
      }; // Add temporary handlers

      node.addEventListener(...handlers.resizeMove);
      node.addEventListener(...handlers.resizeUp);
      node.setPointerCapture(event.pointerId);
    }
    /**
    * Sets the width / height of the positionable application.
    */


    async function onResizePointerMove(event) {
      event.preventDefault();
      await nextAnimationFrame();

      if (!resizing && typeof (storeResizing === null || storeResizing === void 0 ? void 0 : storeResizing.set) === 'function') {
        resizing = true;
        storeResizing.set(true);
      }

      application.position.set({
        width: position.width + (event.clientX - initialPosition.x),
        height: position.height + (event.clientY - initialPosition.y)
      });
    }
    /**
    * Conclude the dragging behavior when the pointer is released setting the final position and
    * removing listeners.
    */


    function onResizePointerUp(event) {
      resizing = false;

      if (typeof (storeResizing === null || storeResizing === void 0 ? void 0 : storeResizing.set) === 'function') {
        storeResizing.set(false);
      }

      event.preventDefault();
      node.removeEventListener(...handlers.resizeMove);
      node.removeEventListener(...handlers.resizeUp);

      application._onResize(event);
    }

    return {
      update: ({
        active
      }) => // eslint-disable-line no-shadow
      {
        if (active) {
          activateListeners();
        } else {
          removeListeners();
        }
      },
      destroy: () => removeListeners()
    };
  }

  function div_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      elementResize = $$value;
      (($$invalidate(0, elementResize), $$invalidate(7, isResizable)), $$invalidate(9, $storeMinimized)), $$invalidate(8, $storeElementRoot);
    });
  }

  $$self.$$set = $$props => {
    if ('isResizable' in $$props) $$invalidate(7, isResizable = $$props.isResizable);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*elementResize, isResizable, $storeMinimized, $storeElementRoot*/
    897) {
      if (elementResize) {
        // Instead of creating a derived store it is easier to use isResizable and the minimized store below.
        $$invalidate(0, elementResize.style.display = isResizable && !$storeMinimized ? 'block' : 'none', elementResize); // Add / remove `resizable` class from element root.

        const elementRoot = $storeElementRoot;

        if (elementRoot) {
          elementRoot.classList[isResizable ? 'add' : 'remove']('resizable');
        }
      }
    }
  };

  return [elementResize, $storeResizable, storeElementRoot, storeResizable, storeMinimized, storeResizing, resizable, isResizable, $storeElementRoot, $storeMinimized, div_binding];
}

class ResizableHandle extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5$1, create_fragment$5$1, safe_not_equal, {
      isResizable: 7
    });
  }

}
/* src\component\core\application\ApplicationShell.svelte generated by Svelte v3.46.0 */


function add_css$2(target) {
  append_styles(target, "svelte-3vt5in", ".window-app.svelte-3vt5in{overflow:inherit}");
} // (211:6) {:else}


function create_else_block$3(ctx) {
  let current;
  const default_slot_template =
  /*#slots*/
  ctx[25].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[24], null);
  return {
    c() {
      if (default_slot) default_slot.c();
    },

    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty &
        /*$$scope*/
        16777216)) {
          update_slot_base(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[24], !current ? get_all_dirty_from_scope(
          /*$$scope*/
          ctx[24]) : get_slot_changes(default_slot_template,
          /*$$scope*/
          ctx[24], dirty, null), null);
        }
      }
    },

    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },

    o(local) {
      transition_out(default_slot, local);
      current = false;
    },

    d(detaching) {
      if (default_slot) default_slot.d(detaching);
    }

  };
} // (209:6) {#if Array.isArray(allChildren)}


function create_if_block$4$1(ctx) {
  let tjscontainer;
  let current;
  tjscontainer = new TJSContainer({
    props: {
      children:
      /*allChildren*/
      ctx[12]
    }
  });
  return {
    c() {
      create_component(tjscontainer.$$.fragment);
    },

    m(target, anchor) {
      mount_component(tjscontainer, target, anchor);
      current = true;
    },

    p: noop,

    i(local) {
      if (current) return;
      transition_in(tjscontainer.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(tjscontainer.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(tjscontainer, detaching);
    }

  };
}

function create_fragment$4$1(ctx) {
  let div;
  let tjsapplicationheader;
  let t0;
  let section;
  let current_block_type_index;
  let if_block;
  let applyStyles_action;
  let t1;
  let resizablehandle;
  let div_id_value;
  let div_class_value;
  let div_data_appid_value;
  let applyStyles_action_1;
  let div_intro;
  let div_outro;
  let current;
  let mounted;
  let dispose;
  tjsapplicationheader = new TJSApplicationHeader({});
  const if_block_creators = [create_if_block$4$1, create_else_block$3];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (Array.isArray(
    /*allChildren*/
    ctx[12])) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  resizablehandle = new ResizableHandle({});
  return {
    c() {
      div = element("div");
      create_component(tjsapplicationheader.$$.fragment);
      t0 = space();
      section = element("section");
      if_block.c();
      t1 = space();
      create_component(resizablehandle.$$.fragment);
      attr(section, "class", "window-content");
      attr(div, "id", div_id_value =
      /*application*/
      ctx[8].id);
      attr(div, "class", div_class_value = "app window-app " +
      /*application*/
      ctx[8].options.classes.join(' ') + " svelte-3vt5in");
      attr(div, "data-appid", div_data_appid_value =
      /*application*/
      ctx[8].appId);
    },

    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(tjsapplicationheader, div, null);
      append(div, t0);
      append(div, section);
      if_blocks[current_block_type_index].m(section, null);
      /*section_binding*/

      ctx[26](section);
      append(div, t1);
      mount_component(resizablehandle, div, null);
      /*div_binding*/

      ctx[27](div);
      current = true;

      if (!mounted) {
        dispose = [action_destroyer(applyStyles_action = applyStyles.call(null, section,
        /*stylesContent*/
        ctx[7])), action_destroyer(
        /*contentResizeObserver*/
        ctx[10].call(null, section,
        /*resizeObservedContent*/
        ctx[13])), listen(div, "pointerdown",
        /*bringToTop*/
        ctx[11], true), action_destroyer(applyStyles_action_1 = applyStyles.call(null, div,
        /*stylesApp*/
        ctx[6])), action_destroyer(
        /*appResizeObserver*/
        ctx[9].call(null, div,
        /*resizeObservedApp*/
        ctx[14]))];
        mounted = true;
      }
    },

    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if_block.p(ctx, dirty);
      if (applyStyles_action && is_function(applyStyles_action.update) && dirty &
      /*stylesContent*/
      128) applyStyles_action.update.call(null,
      /*stylesContent*/
      ctx[7]);

      if (!current || dirty &
      /*application*/
      256 && div_id_value !== (div_id_value =
      /*application*/
      ctx[8].id)) {
        attr(div, "id", div_id_value);
      }

      if (!current || dirty &
      /*application*/
      256 && div_class_value !== (div_class_value = "app window-app " +
      /*application*/
      ctx[8].options.classes.join(' ') + " svelte-3vt5in")) {
        attr(div, "class", div_class_value);
      }

      if (!current || dirty &
      /*application*/
      256 && div_data_appid_value !== (div_data_appid_value =
      /*application*/
      ctx[8].appId)) {
        attr(div, "data-appid", div_data_appid_value);
      }

      if (applyStyles_action_1 && is_function(applyStyles_action_1.update) && dirty &
      /*stylesApp*/
      64) applyStyles_action_1.update.call(null,
      /*stylesApp*/
      ctx[6]);
    },

    i(local) {
      if (current) return;
      transition_in(tjsapplicationheader.$$.fragment, local);
      transition_in(if_block);
      transition_in(resizablehandle.$$.fragment, local);
      add_render_callback(() => {
        if (div_outro) div_outro.end(1);
        div_intro = create_in_transition(div,
        /*inTransition*/
        ctx[2],
        /*inTransitionOptions*/
        ctx[4]);
        div_intro.start();
      });
      current = true;
    },

    o(local) {
      transition_out(tjsapplicationheader.$$.fragment, local);
      transition_out(if_block);
      transition_out(resizablehandle.$$.fragment, local);
      if (div_intro) div_intro.invalidate();
      div_outro = create_out_transition(div,
      /*outTransition*/
      ctx[3],
      /*outTransitionOptions*/
      ctx[5]);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(div);
      destroy_component(tjsapplicationheader);
      if_blocks[current_block_type_index].d();
      /*section_binding*/

      ctx[26](null);
      destroy_component(resizablehandle);
      /*div_binding*/

      ctx[27](null);
      if (detaching && div_outro) div_outro.end();
      mounted = false;
      run_all(dispose);
    }

  };
}

function instance$4$1($$self, $$props, $$invalidate) {
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  let {
    elementContent
  } = $$props;
  let {
    elementRoot
  } = $$props;
  let {
    children = void 0
  } = $$props;
  let {
    stylesApp
  } = $$props;
  let {
    stylesContent
  } = $$props;
  let {
    appOffsetHeight = false
  } = $$props;
  let {
    appOffsetWidth = false
  } = $$props; // Set to `resizeObserver` if either of the above props are truthy otherwise a null operation.

  const appResizeObserver = !!appOffsetHeight || !!appOffsetWidth ? resizeObserver : () => null;
  let {
    contentOffsetHeight = false
  } = $$props;
  let {
    contentOffsetWidth = false
  } = $$props; // Set to `resizeObserver` if either of the above props are truthy otherwise a null operation.

  const contentResizeObserver = !!contentOffsetHeight || !!contentOffsetWidth ? resizeObserver : () => null; // If the application is a popOut application then when clicked bring to top. Bound to on pointerdown.

  const bringToTop = () => {
    var _ui;

    if (typeof application.options.popOut === 'boolean' && application.options.popOut && application !== ((_ui = ui) === null || _ui === void 0 ? void 0 : _ui.activeWindow)) {
      application.bringToTop.call(application);
    }
  }; // Use a writable store to make `elementContent` and `elementRoot` accessible. A store is used in the case when
  // One root component with an `elementRoot` is replaced with another. Due to timing issues and the onDestroy / outro
  // transitions either of these may be set to null. I will investigate more and file a bug against Svelte.


  if (!getContext('storeElementContent')) {
    setContext('storeElementContent', writable(elementContent));
  }

  if (!getContext('storeElementRoot')) {
    setContext('storeElementRoot', writable(elementRoot));
  }

  const context = getContext('external'); // Store Foundry Application reference.

  const application = context.application; // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object
  // that are potentially mounted in the content area. If no children defined then this component mounts any slotted
  // child.

  const allChildren = Array.isArray(children) ? children : typeof context === 'object' ? context.children : void 0;
  let {
    transition = void 0
  } = $$props;
  let {
    inTransition = s_DEFAULT_TRANSITION
  } = $$props;
  let {
    outTransition = s_DEFAULT_TRANSITION
  } = $$props;
  let {
    transitionOptions = void 0
  } = $$props;
  let {
    inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS
  } = $$props;
  let {
    outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS
  } = $$props; // Tracks last transition state.

  let oldTransition = void 0;
  let oldTransitionOptions = void 0; // ---------------------------------------------------------------------------------------------------------------

  /**
  * Callback for content resizeObserver action. This is enabled when contentOffsetHeight or contentOffsetWidth is
  * bound.
  *
  * @param {number}   offsetWidth - Observed offsetWidth.
  *
  * @param {number}   offsetHeight - Observed offsetHeight
  */

  function resizeObservedContent(offsetWidth, offsetHeight) {
    $$invalidate(18, contentOffsetWidth = offsetWidth);
    $$invalidate(17, contentOffsetHeight = offsetHeight);
  }
  /**
  * Callback for app resizeObserver action. This is enabled when appOffsetHeight or appOffsetWidth is
  * bound. Additionally, the Application position resizeObserved store is updated.
  *
  * @param {number}   contentWidth - Observed contentWidth.
  * @param {number}   contentHeight - Observed contentHeight
  * @param {number}   offsetWidth - Observed offsetWidth.
  * @param {number}   offsetHeight - Observed offsetHeight
  */


  function resizeObservedApp(offsetWidth, offsetHeight, contentWidth, contentHeight) {
    application.position.stores.resizeObserved.update(object => {
      object.contentWidth = contentWidth;
      object.contentHeight = contentHeight;
      object.offsetWidth = offsetWidth;
      object.offsetHeight = offsetHeight;
      return object;
    });
    $$invalidate(15, appOffsetHeight = offsetHeight);
    $$invalidate(16, appOffsetWidth = offsetWidth);
  }

  function section_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      elementContent = $$value;
      $$invalidate(0, elementContent);
    });
  }

  function div_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      elementRoot = $$value;
      $$invalidate(1, elementRoot);
    });
  }

  $$self.$$set = $$props => {
    if ('elementContent' in $$props) $$invalidate(0, elementContent = $$props.elementContent);
    if ('elementRoot' in $$props) $$invalidate(1, elementRoot = $$props.elementRoot);
    if ('children' in $$props) $$invalidate(19, children = $$props.children);
    if ('stylesApp' in $$props) $$invalidate(6, stylesApp = $$props.stylesApp);
    if ('stylesContent' in $$props) $$invalidate(7, stylesContent = $$props.stylesContent);
    if ('appOffsetHeight' in $$props) $$invalidate(15, appOffsetHeight = $$props.appOffsetHeight);
    if ('appOffsetWidth' in $$props) $$invalidate(16, appOffsetWidth = $$props.appOffsetWidth);
    if ('contentOffsetHeight' in $$props) $$invalidate(17, contentOffsetHeight = $$props.contentOffsetHeight);
    if ('contentOffsetWidth' in $$props) $$invalidate(18, contentOffsetWidth = $$props.contentOffsetWidth);
    if ('transition' in $$props) $$invalidate(20, transition = $$props.transition);
    if ('inTransition' in $$props) $$invalidate(2, inTransition = $$props.inTransition);
    if ('outTransition' in $$props) $$invalidate(3, outTransition = $$props.outTransition);
    if ('transitionOptions' in $$props) $$invalidate(21, transitionOptions = $$props.transitionOptions);
    if ('inTransitionOptions' in $$props) $$invalidate(4, inTransitionOptions = $$props.inTransitionOptions);
    if ('outTransitionOptions' in $$props) $$invalidate(5, outTransitionOptions = $$props.outTransitionOptions);
    if ('$$scope' in $$props) $$invalidate(24, $$scope = $$props.$$scope);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*elementContent*/
    1) {
      // Only update the `elementContent` store if the new `elementContent` is not null or undefined.
      if (elementContent !== void 0 && elementContent !== null) {
        getContext('storeElementContent').set(elementContent);
      }
    }

    if ($$self.$$.dirty &
    /*elementRoot*/
    2) {
      // Only update the `elementRoot` store if the new `elementRoot` is not null or undefined.
      if (elementRoot !== void 0 && elementRoot !== null) {
        getContext('storeElementRoot').set(elementRoot);
      }
    }

    if ($$self.$$.dirty &
    /*oldTransition, transition*/
    5242880) {
      // Run this reactive block when the last transition state is not equal to the current state.
      if (oldTransition !== transition) {
        // If transition is defined and not the default transition then set it to both in and out transition otherwise
        // set the default transition to both in & out transitions.
        const newTransition = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ? transition : s_DEFAULT_TRANSITION;
        $$invalidate(2, inTransition = newTransition);
        $$invalidate(3, outTransition = newTransition);
        $$invalidate(22, oldTransition = newTransition);
      }
    }

    if ($$self.$$.dirty &
    /*oldTransitionOptions, transitionOptions*/
    10485760) {
      // Run this reactive block when the last transition options state is not equal to the current options state.
      if (oldTransitionOptions !== transitionOptions) {
        const newOptions = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS && typeof transitionOptions === 'object' ? transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;
        $$invalidate(4, inTransitionOptions = newOptions);
        $$invalidate(5, outTransitionOptions = newOptions);
        $$invalidate(23, oldTransitionOptions = newOptions);
      }
    }

    if ($$self.$$.dirty &
    /*inTransition*/
    4) {
      // Handle cases if inTransition is unset; assign noop default transition function.
      if (typeof inTransition !== 'function') {
        $$invalidate(2, inTransition = s_DEFAULT_TRANSITION);
      }
    }

    if ($$self.$$.dirty &
    /*outTransition, application*/
    264) {
      {
        var _application$options;

        // Handle cases if outTransition is unset; assign noop default transition function.
        if (typeof outTransition !== 'function') {
          $$invalidate(3, outTransition = s_DEFAULT_TRANSITION);
        } // Set jquery close animation to either run or not when an out transition is changed.


        if (application && typeof (application === null || application === void 0 ? void 0 : (_application$options = application.options) === null || _application$options === void 0 ? void 0 : _application$options.defaultCloseAnimation) === 'boolean') {
          $$invalidate(8, application.options.defaultCloseAnimation = outTransition === s_DEFAULT_TRANSITION, application);
        }
      }
    }

    if ($$self.$$.dirty &
    /*inTransitionOptions*/
    16) {
      // Handle cases if inTransitionOptions is unset; assign empty default transition options.
      if (typeof inTransitionOptions !== 'object') {
        $$invalidate(4, inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS);
      }
    }

    if ($$self.$$.dirty &
    /*outTransitionOptions*/
    32) {
      // Handle cases if outTransitionOptions is unset; assign empty default transition options.
      if (typeof outTransitionOptions !== 'object') {
        $$invalidate(5, outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS);
      }
    }
  };

  return [elementContent, elementRoot, inTransition, outTransition, inTransitionOptions, outTransitionOptions, stylesApp, stylesContent, application, appResizeObserver, contentResizeObserver, bringToTop, allChildren, resizeObservedContent, resizeObservedApp, appOffsetHeight, appOffsetWidth, contentOffsetHeight, contentOffsetWidth, children, transition, transitionOptions, oldTransition, oldTransitionOptions, $$scope, slots, section_binding, div_binding];
}

class ApplicationShell extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4$1, create_fragment$4$1, safe_not_equal, {
      elementContent: 0,
      elementRoot: 1,
      children: 19,
      stylesApp: 6,
      stylesContent: 7,
      appOffsetHeight: 15,
      appOffsetWidth: 16,
      contentOffsetHeight: 17,
      contentOffsetWidth: 18,
      transition: 20,
      inTransition: 2,
      outTransition: 3,
      transitionOptions: 21,
      inTransitionOptions: 4,
      outTransitionOptions: 5
    }, add_css$2);
  }

  get elementContent() {
    return this.$$.ctx[0];
  }

  set elementContent(elementContent) {
    this.$$set({
      elementContent
    });
    flush();
  }

  get elementRoot() {
    return this.$$.ctx[1];
  }

  set elementRoot(elementRoot) {
    this.$$set({
      elementRoot
    });
    flush();
  }

  get children() {
    return this.$$.ctx[19];
  }

  set children(children) {
    this.$$set({
      children
    });
    flush();
  }

  get stylesApp() {
    return this.$$.ctx[6];
  }

  set stylesApp(stylesApp) {
    this.$$set({
      stylesApp
    });
    flush();
  }

  get stylesContent() {
    return this.$$.ctx[7];
  }

  set stylesContent(stylesContent) {
    this.$$set({
      stylesContent
    });
    flush();
  }

  get appOffsetHeight() {
    return this.$$.ctx[15];
  }

  set appOffsetHeight(appOffsetHeight) {
    this.$$set({
      appOffsetHeight
    });
    flush();
  }

  get appOffsetWidth() {
    return this.$$.ctx[16];
  }

  set appOffsetWidth(appOffsetWidth) {
    this.$$set({
      appOffsetWidth
    });
    flush();
  }

  get contentOffsetHeight() {
    return this.$$.ctx[17];
  }

  set contentOffsetHeight(contentOffsetHeight) {
    this.$$set({
      contentOffsetHeight
    });
    flush();
  }

  get contentOffsetWidth() {
    return this.$$.ctx[18];
  }

  set contentOffsetWidth(contentOffsetWidth) {
    this.$$set({
      contentOffsetWidth
    });
    flush();
  }

  get transition() {
    return this.$$.ctx[20];
  }

  set transition(transition) {
    this.$$set({
      transition
    });
    flush();
  }

  get inTransition() {
    return this.$$.ctx[2];
  }

  set inTransition(inTransition) {
    this.$$set({
      inTransition
    });
    flush();
  }

  get outTransition() {
    return this.$$.ctx[3];
  }

  set outTransition(outTransition) {
    this.$$set({
      outTransition
    });
    flush();
  }

  get transitionOptions() {
    return this.$$.ctx[21];
  }

  set transitionOptions(transitionOptions) {
    this.$$set({
      transitionOptions
    });
    flush();
  }

  get inTransitionOptions() {
    return this.$$.ctx[4];
  }

  set inTransitionOptions(inTransitionOptions) {
    this.$$set({
      inTransitionOptions
    });
    flush();
  }

  get outTransitionOptions() {
    return this.$$.ctx[5];
  }

  set outTransitionOptions(outTransitionOptions) {
    this.$$set({
      outTransitionOptions
    });
    flush();
  }

}
/* src\component\core\dialog\DialogContent.svelte generated by Svelte v3.46.0 */


function add_css(target) {
  append_styles(target, "svelte-14xg9ru", "div.dialog-buttons.svelte-14xg9ru{padding-top:8px}");
}

function get_each_context$4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[15] = list[i];
  return child_ctx;
} // (202:29) 


function create_if_block_3$6(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
  /*dialogProps*/
  ctx[5]];
  var switch_value =
  /*dialogComponent*/
  ctx[4];

  function switch_props(ctx) {
    let switch_instance_props = {};

    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }

    return {
      props: switch_instance_props
    };
  }

  if (switch_value) {
    switch_instance = new switch_value(switch_props());
    /*switch_instance_binding*/

    ctx[12](switch_instance);
  }

  return {
    c() {
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },

    m(target, anchor) {
      if (switch_instance) {
        mount_component(switch_instance, target, anchor);
      }

      insert(target, switch_instance_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const switch_instance_changes = dirty &
      /*dialogProps*/
      32 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
      /*dialogProps*/
      ctx[5])]) : {};

      if (switch_value !== (switch_value =
      /*dialogComponent*/
      ctx[4])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }

        if (switch_value) {
          switch_instance = new switch_value(switch_props());
          /*switch_instance_binding*/

          ctx[12](switch_instance);
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },

    i(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },

    o(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      /*switch_instance_binding*/
      ctx[12](null);
      if (detaching) detach(switch_instance_anchor);
      if (switch_instance) destroy_component(switch_instance, detaching);
    }

  };
} // (200:3) {#if typeof content === 'string'}


function create_if_block_2$6(ctx) {
  let html_tag;
  let html_anchor;
  return {
    c() {
      html_tag = new HtmlTag();
      html_anchor = empty();
      html_tag.a = html_anchor;
    },

    m(target, anchor) {
      html_tag.m(
      /*content*/
      ctx[2], target, anchor);
      insert(target, html_anchor, anchor);
    },

    p(ctx, dirty) {
      if (dirty &
      /*content*/
      4) html_tag.p(
      /*content*/
      ctx[2]);
    },

    i: noop,
    o: noop,

    d(detaching) {
      if (detaching) detach(html_anchor);
      if (detaching) html_tag.d();
    }

  };
} // (207:0) {#if buttons.length}


function create_if_block$1$1(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let each_value =
  /*buttons*/
  ctx[1];

  const get_key = ctx =>
  /*button*/
  ctx[15].id;

  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$4(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
  }

  return {
    c() {
      div = element("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      attr(div, "class", "dialog-buttons svelte-14xg9ru");
    },

    m(target, anchor) {
      insert(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*buttons, currentButtonId, onClick*/
      74) {
        each_value =
        /*buttons*/
        ctx[1];
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$4, null, get_each_context$4);
      }
    },

    d(detaching) {
      if (detaching) detach(div);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }

  };
} // (214:33) {#if button.icon}


function create_if_block_1$a(ctx) {
  let html_tag;
  let raw_value =
  /*button*/
  ctx[15].icon + "";
  let html_anchor;
  return {
    c() {
      html_tag = new HtmlTag();
      html_anchor = empty();
      html_tag.a = html_anchor;
    },

    m(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert(target, html_anchor, anchor);
    },

    p(ctx, dirty) {
      if (dirty &
      /*buttons*/
      2 && raw_value !== (raw_value =
      /*button*/
      ctx[15].icon + "")) html_tag.p(raw_value);
    },

    d(detaching) {
      if (detaching) detach(html_anchor);
      if (detaching) html_tag.d();
    }

  };
} // (209:3) {#each buttons as button (button.id)}


function create_each_block$4(key_1, ctx) {
  let button;
  let span;
  let t0_value =
  /*button*/
  ctx[15].label + "";
  let t0;
  let span_title_value;
  let t1;
  let button_class_value;
  let applyStyles_action;
  let mounted;
  let dispose;
  let if_block =
  /*button*/
  ctx[15].icon && create_if_block_1$a(ctx);

  function click_handler() {
    return (
      /*click_handler*/
      ctx[13](
      /*button*/
      ctx[15])
    );
  }

  return {
    key: key_1,
    first: null,

    c() {
      button = element("button");
      span = element("span");
      if (if_block) if_block.c();
      t0 = text(t0_value);
      t1 = space();
      attr(span, "title", span_title_value =
      /*button*/
      ctx[15].title);
      attr(button, "class", button_class_value = "dialog-button " +
      /*button*/
      ctx[15].id);
      toggle_class(button, "default",
      /*button*/
      ctx[15].id ===
      /*currentButtonId*/
      ctx[3]);
      this.first = button;
    },

    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      if (if_block) if_block.m(span, null);
      append(span, t0);
      append(button, t1);

      if (!mounted) {
        dispose = [listen(button, "click", click_handler), action_destroyer(applyStyles_action = applyStyles.call(null, button,
        /*button*/
        ctx[15].styles))];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;

      if (
      /*button*/
      ctx[15].icon) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_1$a(ctx);
          if_block.c();
          if_block.m(span, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }

      if (dirty &
      /*buttons*/
      2 && t0_value !== (t0_value =
      /*button*/
      ctx[15].label + "")) set_data(t0, t0_value);

      if (dirty &
      /*buttons*/
      2 && span_title_value !== (span_title_value =
      /*button*/
      ctx[15].title)) {
        attr(span, "title", span_title_value);
      }

      if (dirty &
      /*buttons*/
      2 && button_class_value !== (button_class_value = "dialog-button " +
      /*button*/
      ctx[15].id)) {
        attr(button, "class", button_class_value);
      }

      if (applyStyles_action && is_function(applyStyles_action.update) && dirty &
      /*buttons*/
      2) applyStyles_action.update.call(null,
      /*button*/
      ctx[15].styles);

      if (dirty &
      /*buttons, buttons, currentButtonId*/
      10) {
        toggle_class(button, "default",
        /*button*/
        ctx[15].id ===
        /*currentButtonId*/
        ctx[3]);
      }
    },

    d(detaching) {
      if (detaching) detach(button);
      if (if_block) if_block.d();
      mounted = false;
      run_all(dispose);
    }

  };
}

function create_fragment$1$1(ctx) {
  let t0;
  let div;
  let current_block_type_index;
  let if_block0;
  let t1;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_2$6, create_if_block_3$6];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (typeof
    /*content*/
    ctx[2] === 'string') return 0;
    if (
    /*dialogComponent*/
    ctx[4]) return 1;
    return -1;
  }

  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }

  let if_block1 =
  /*buttons*/
  ctx[1].length && create_if_block$1$1(ctx);
  return {
    c() {
      t0 = space();
      div = element("div");
      if (if_block0) if_block0.c();
      t1 = space();
      if (if_block1) if_block1.c();
      if_block1_anchor = empty();
      attr(div, "class", "dialog-content");
    },

    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, div, anchor);

      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }

      insert(target, t1, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;

      if (!mounted) {
        dispose = listen(document.body, "keydown",
        /*onKeydown*/
        ctx[7]);
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        }
      } else {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }

        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];

          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block0.c();
          } else {
            if_block0.p(ctx, dirty);
          }

          transition_in(if_block0, 1);
          if_block0.m(div, null);
        } else {
          if_block0 = null;
        }
      }

      if (
      /*buttons*/
      ctx[1].length) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block$1$1(ctx);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },

    i(local) {
      if (current) return;
      transition_in(if_block0);
      current = true;
    },

    o(local) {
      transition_out(if_block0);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(t0);
      if (detaching) detach(div);

      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }

      if (detaching) detach(t1);
      if (if_block1) if_block1.d(detaching);
      if (detaching) detach(if_block1_anchor);
      mounted = false;
      dispose();
    }

  };
}

const s_REGEX_HTML = /^\s*<.*>$/;

function instance$1$1($$self, $$props, $$invalidate) {
  let {
    data = {}
  } = $$props;
  let {
    autoClose = true
  } = $$props;
  let {
    preventDefault = false
  } = $$props;
  let {
    stopPropagation = false
  } = $$props;
  let {
    dialogInstance = void 0
  } = $$props;
  let buttons;
  let content = void 0;
  let dialogComponent;
  let dialogProps = {};
  let application = getContext('external').application;
  let currentButtonId = data.default;

  async function onClick(button) {
    try {
      var _button$callback2;

      let result = null; // Accept either callback or onclick as the function / data to invoke.

      const invoke = (_button$callback2 = button.callback) !== null && _button$callback2 !== void 0 ? _button$callback2 : button.onclick;

      switch (typeof invoke) {
        case 'function':
          // Passing back the HTML element is to keep with the existing Foundry API, however second parameter is
          // the Svelte component instance.
          result = await invoke(application.options.jQuery ? application.element : application.element[0], dialogInstance);
          break;

        case 'string':
          // Attempt lookup by function name in dialog instance component.
          if (dialogInstance !== void 0 && typeof dialogInstance[invoke] === 'function') {
            result = await dialogInstance[invoke](application.options.jQuery ? application.element : application.element[0], dialogInstance);
          }

          break;
      } // Delay closing to next clock tick to be able to return result.


      if (autoClose) {
        setTimeout(() => application.close(), 0);
      }

      return result;
    } catch (err) {
      ui.notifications.error(err);
      throw new Error(err);
    }
  }

  function onKeydown(event) {
    /**
    * If this dialog is not the activeWindow then return immediately. See {@link SvelteApplication.bringToTop} as
    * SvelteApplication overrides core Foundry and always sets the activeWindow when `bringToTop` is invoked.
    */
    if (event.key !== 'Escape' && ui.activeWindow !== application) {
      return;
    }

    switch (event.key) {
      case 'ArrowLeft':
        {
          event.preventDefault();
          event.stopPropagation();
          const currentIndex = buttons.findIndex(button => button.id === currentButtonId);

          if (buttons.length && currentIndex > 0) {
            $$invalidate(3, currentButtonId = buttons[currentIndex - 1].id);
          }

          break;
        }

      case 'ArrowRight':
        {
          event.preventDefault();
          event.stopPropagation();
          const currentIndex = buttons.findIndex(button => button.id === currentButtonId);

          if (buttons.length && currentIndex < buttons.length - 1) {
            $$invalidate(3, currentButtonId = buttons[currentIndex + 1].id);
          }

          break;
        }

      case 'Escape':
        event.preventDefault();
        event.stopPropagation();
        return application.close();

      case 'Enter':
        event.preventDefault();
        event.stopPropagation();

        if (currentButtonId && isObject(data.buttons) && currentButtonId in data.buttons) {
          onClick(data.buttons[currentButtonId]);
        }

        break;

      default:
        if (preventDefault) {
          event.preventDefault();
        }

        if (stopPropagation) {
          event.stopPropagation();
        }

        break;
    }
  }

  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      dialogInstance = $$value;
      $$invalidate(0, dialogInstance);
    });
  }

  const click_handler = button => onClick(button);

  $$self.$$set = $$props => {
    if ('data' in $$props) $$invalidate(8, data = $$props.data);
    if ('autoClose' in $$props) $$invalidate(9, autoClose = $$props.autoClose);
    if ('preventDefault' in $$props) $$invalidate(10, preventDefault = $$props.preventDefault);
    if ('stopPropagation' in $$props) $$invalidate(11, stopPropagation = $$props.stopPropagation);
    if ('dialogInstance' in $$props) $$invalidate(0, dialogInstance = $$props.dialogInstance);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*data*/
    256) {
      // If `data.buttons` is not an object then set an empty array otherwise reduce the button data.
      {
        $$invalidate(1, buttons = !isObject(data.buttons) ? [] : Object.keys(data.buttons).reduce((array, key) => {
          var _b$condition;

          const b = data.buttons[key]; // Handle icon and treat bare strings as the icon class; otherwise assume the icon is fully formed HTML.

          const icon = typeof b.icon !== 'string' ? void 0 : s_REGEX_HTML.test(b.icon) ? b.icon : `<i class="${b.icon}"></i>`;
          const label = typeof b.label === 'string' ? `${icon !== void 0 ? ' ' : ''}${localize(b.label)}` : '';
          const title = typeof b.title === 'string' ? localize(b.title) : void 0; // Test any condition supplied otherwise default to true.

          const condition = typeof b.condition === 'function' ? b.condition.call(b) : (_b$condition = b.condition) !== null && _b$condition !== void 0 ? _b$condition : true;

          if (condition) {
            array.push(_objectSpread2(_objectSpread2({}, b), {}, {
              id: key,
              icon,
              label,
              title
            }));
          }

          return array;
        }, []));
      }
    }

    if ($$self.$$.dirty &
    /*buttons, currentButtonId*/
    10) {
      /**
      * This reactivity block will trigger on arrow left / right key presses _and_ when buttons change. It is OK for it to
      * trigger on both.
      */
      if (!buttons.find(button => button.id === currentButtonId)) {
        $$invalidate(3, currentButtonId = void 0);
      }
    }

    if ($$self.$$.dirty &
    /*content, data*/
    260) {
      if (content !== data.content) {
        $$invalidate(2, content = data.content); // Only update the content if it has changed.

        try {
          if (isSvelteComponent(content)) {
            $$invalidate(4, dialogComponent = content);
            $$invalidate(5, dialogProps = {});
          } else if (typeof content === 'object') {
            var _svelteConfig$props, _svelteConfig$context, _svelteConfig$context2;

            const svelteConfig = parseSvelteConfig(content, application);
            $$invalidate(4, dialogComponent = svelteConfig.class);
            $$invalidate(5, dialogProps = (_svelteConfig$props = svelteConfig.props) !== null && _svelteConfig$props !== void 0 ? _svelteConfig$props : {}); // Check for any children parsed and added to the external context.

            const children = svelteConfig === null || svelteConfig === void 0 ? void 0 : (_svelteConfig$context = svelteConfig.context) === null || _svelteConfig$context === void 0 ? void 0 : (_svelteConfig$context2 = _svelteConfig$context.get('external')) === null || _svelteConfig$context2 === void 0 ? void 0 : _svelteConfig$context2.children; // If so add to dialogProps.

            if (Array.isArray(children)) {
              $$invalidate(5, dialogProps.children = children, dialogProps);
            }
          } else {
            $$invalidate(4, dialogComponent = void 0);
            $$invalidate(5, dialogProps = {});
          }
        } catch (err) {
          $$invalidate(4, dialogComponent = void 0);
          $$invalidate(5, dialogProps = {});
          $$invalidate(2, content = err.message);
          console.error(err);
        }
      }
    }
  };

  return [dialogInstance, buttons, content, currentButtonId, dialogComponent, dialogProps, onClick, onKeydown, data, autoClose, preventDefault, stopPropagation, switch_instance_binding, click_handler];
}

class DialogContent extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1$1, create_fragment$1$1, safe_not_equal, {
      data: 8,
      autoClose: 9,
      preventDefault: 10,
      stopPropagation: 11,
      dialogInstance: 0
    }, add_css);
  }

}
/* src\component\core\dialog\DialogShell.svelte generated by Svelte v3.46.0 */


function create_else_block$2(ctx) {
  let applicationshell;
  let updating_elementRoot;
  let updating_elementContent;
  let current;
  const applicationshell_spread_levels = [
  /*appProps*/
  ctx[6], {
    appOffsetHeight: true
  }];

  function applicationshell_elementRoot_binding_1(value) {
    /*applicationshell_elementRoot_binding_1*/
    ctx[16](value);
  }

  function applicationshell_elementContent_binding_1(value) {
    /*applicationshell_elementContent_binding_1*/
    ctx[17](value);
  }

  let applicationshell_props = {
    $$slots: {
      default: [create_default_slot_2]
    },
    $$scope: {
      ctx
    }
  };

  for (let i = 0; i < applicationshell_spread_levels.length; i += 1) {
    applicationshell_props = assign(applicationshell_props, applicationshell_spread_levels[i]);
  }

  if (
  /*elementRoot*/
  ctx[1] !== void 0) {
    applicationshell_props.elementRoot =
    /*elementRoot*/
    ctx[1];
  }

  if (
  /*elementContent*/
  ctx[0] !== void 0) {
    applicationshell_props.elementContent =
    /*elementContent*/
    ctx[0];
  }

  applicationshell = new ApplicationShell({
    props: applicationshell_props
  });
  binding_callbacks.push(() => bind(applicationshell, 'elementRoot', applicationshell_elementRoot_binding_1));
  binding_callbacks.push(() => bind(applicationshell, 'elementContent', applicationshell_elementContent_binding_1));
  return {
    c() {
      create_component(applicationshell.$$.fragment);
    },

    m(target, anchor) {
      mount_component(applicationshell, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const applicationshell_changes = dirty &
      /*appProps*/
      64 ? get_spread_update(applicationshell_spread_levels, [get_spread_object(
      /*appProps*/
      ctx[6]), applicationshell_spread_levels[1]]) : {};

      if (dirty &
      /*$$scope, data, autoClose, dialogComponent*/
      1049100) {
        applicationshell_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_elementRoot && dirty &
      /*elementRoot*/
      2) {
        updating_elementRoot = true;
        applicationshell_changes.elementRoot =
        /*elementRoot*/
        ctx[1];
        add_flush_callback(() => updating_elementRoot = false);
      }

      if (!updating_elementContent && dirty &
      /*elementContent*/
      1) {
        updating_elementContent = true;
        applicationshell_changes.elementContent =
        /*elementContent*/
        ctx[0];
        add_flush_callback(() => updating_elementContent = false);
      }

      applicationshell.$set(applicationshell_changes);
    },

    i(local) {
      if (current) return;
      transition_in(applicationshell.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(applicationshell.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(applicationshell, detaching);
    }

  };
} // (180:0) {#if modal}


function create_if_block$b(ctx) {
  let tjsglasspane;
  let current;
  const tjsglasspane_spread_levels = [{
    id: `${
    /*application*/
    ctx[4].id}-glasspane`
  }, {
    preventDefault: false
  }, {
    stopPropagation: false
  },
  /*modalProps*/
  ctx[7], {
    zIndex:
    /*zIndex*/
    ctx[8]
  }];
  let tjsglasspane_props = {
    $$slots: {
      default: [create_default_slot$1]
    },
    $$scope: {
      ctx
    }
  };

  for (let i = 0; i < tjsglasspane_spread_levels.length; i += 1) {
    tjsglasspane_props = assign(tjsglasspane_props, tjsglasspane_spread_levels[i]);
  }

  tjsglasspane = new TJSGlassPane({
    props: tjsglasspane_props
  });
  return {
    c() {
      create_component(tjsglasspane.$$.fragment);
    },

    m(target, anchor) {
      mount_component(tjsglasspane, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const tjsglasspane_changes = dirty &
      /*application, modalProps, zIndex*/
      400 ? get_spread_update(tjsglasspane_spread_levels, [dirty &
      /*application*/
      16 && {
        id: `${
        /*application*/
        ctx[4].id}-glasspane`
      }, tjsglasspane_spread_levels[1], tjsglasspane_spread_levels[2], dirty &
      /*modalProps*/
      128 && get_spread_object(
      /*modalProps*/
      ctx[7]), dirty &
      /*zIndex*/
      256 && {
        zIndex:
        /*zIndex*/
        ctx[8]
      }]) : {};

      if (dirty &
      /*$$scope, appProps, elementRoot, elementContent, data, autoClose, dialogComponent*/
      1049167) {
        tjsglasspane_changes.$$scope = {
          dirty,
          ctx
        };
      }

      tjsglasspane.$set(tjsglasspane_changes);
    },

    i(local) {
      if (current) return;
      transition_in(tjsglasspane.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(tjsglasspane.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(tjsglasspane, detaching);
    }

  };
} // (187:3) <ApplicationShell bind:elementRoot bind:elementContent {...appProps} appOffsetHeight={true}>


function create_default_slot_2(ctx) {
  let dialogcontent;
  let updating_autoClose;
  let updating_dialogInstance;
  let current;

  function dialogcontent_autoClose_binding_1(value) {
    /*dialogcontent_autoClose_binding_1*/
    ctx[14](value);
  }

  function dialogcontent_dialogInstance_binding_1(value) {
    /*dialogcontent_dialogInstance_binding_1*/
    ctx[15](value);
  }

  let dialogcontent_props = {
    data:
    /*data*/
    ctx[3]
  };

  if (
  /*autoClose*/
  ctx[9] !== void 0) {
    dialogcontent_props.autoClose =
    /*autoClose*/
    ctx[9];
  }

  if (
  /*dialogComponent*/
  ctx[2] !== void 0) {
    dialogcontent_props.dialogInstance =
    /*dialogComponent*/
    ctx[2];
  }

  dialogcontent = new DialogContent({
    props: dialogcontent_props
  });
  binding_callbacks.push(() => bind(dialogcontent, 'autoClose', dialogcontent_autoClose_binding_1));
  binding_callbacks.push(() => bind(dialogcontent, 'dialogInstance', dialogcontent_dialogInstance_binding_1));
  return {
    c() {
      create_component(dialogcontent.$$.fragment);
    },

    m(target, anchor) {
      mount_component(dialogcontent, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const dialogcontent_changes = {};
      if (dirty &
      /*data*/
      8) dialogcontent_changes.data =
      /*data*/
      ctx[3];

      if (!updating_autoClose && dirty &
      /*autoClose*/
      512) {
        updating_autoClose = true;
        dialogcontent_changes.autoClose =
        /*autoClose*/
        ctx[9];
        add_flush_callback(() => updating_autoClose = false);
      }

      if (!updating_dialogInstance && dirty &
      /*dialogComponent*/
      4) {
        updating_dialogInstance = true;
        dialogcontent_changes.dialogInstance =
        /*dialogComponent*/
        ctx[2];
        add_flush_callback(() => updating_dialogInstance = false);
      }

      dialogcontent.$set(dialogcontent_changes);
    },

    i(local) {
      if (current) return;
      transition_in(dialogcontent.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(dialogcontent.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(dialogcontent, detaching);
    }

  };
} // (182:6) <ApplicationShell bind:elementRoot bind:elementContent {...appProps} appOffsetHeight={true}>


function create_default_slot_1(ctx) {
  let dialogcontent;
  let updating_autoClose;
  let updating_dialogInstance;
  let current;

  function dialogcontent_autoClose_binding(value) {
    /*dialogcontent_autoClose_binding*/
    ctx[10](value);
  }

  function dialogcontent_dialogInstance_binding(value) {
    /*dialogcontent_dialogInstance_binding*/
    ctx[11](value);
  }

  let dialogcontent_props = {
    stopPropagation: true,
    data:
    /*data*/
    ctx[3]
  };

  if (
  /*autoClose*/
  ctx[9] !== void 0) {
    dialogcontent_props.autoClose =
    /*autoClose*/
    ctx[9];
  }

  if (
  /*dialogComponent*/
  ctx[2] !== void 0) {
    dialogcontent_props.dialogInstance =
    /*dialogComponent*/
    ctx[2];
  }

  dialogcontent = new DialogContent({
    props: dialogcontent_props
  });
  binding_callbacks.push(() => bind(dialogcontent, 'autoClose', dialogcontent_autoClose_binding));
  binding_callbacks.push(() => bind(dialogcontent, 'dialogInstance', dialogcontent_dialogInstance_binding));
  return {
    c() {
      create_component(dialogcontent.$$.fragment);
    },

    m(target, anchor) {
      mount_component(dialogcontent, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const dialogcontent_changes = {};
      if (dirty &
      /*data*/
      8) dialogcontent_changes.data =
      /*data*/
      ctx[3];

      if (!updating_autoClose && dirty &
      /*autoClose*/
      512) {
        updating_autoClose = true;
        dialogcontent_changes.autoClose =
        /*autoClose*/
        ctx[9];
        add_flush_callback(() => updating_autoClose = false);
      }

      if (!updating_dialogInstance && dirty &
      /*dialogComponent*/
      4) {
        updating_dialogInstance = true;
        dialogcontent_changes.dialogInstance =
        /*dialogComponent*/
        ctx[2];
        add_flush_callback(() => updating_dialogInstance = false);
      }

      dialogcontent.$set(dialogcontent_changes);
    },

    i(local) {
      if (current) return;
      transition_in(dialogcontent.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(dialogcontent.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(dialogcontent, detaching);
    }

  };
} // (181:3) <TJSGlassPane id={`${application.id}-glasspane`} preventDefault={false} stopPropagation={false} {...modalProps} {zIndex}>


function create_default_slot$1(ctx) {
  let applicationshell;
  let updating_elementRoot;
  let updating_elementContent;
  let current;
  const applicationshell_spread_levels = [
  /*appProps*/
  ctx[6], {
    appOffsetHeight: true
  }];

  function applicationshell_elementRoot_binding(value) {
    /*applicationshell_elementRoot_binding*/
    ctx[12](value);
  }

  function applicationshell_elementContent_binding(value) {
    /*applicationshell_elementContent_binding*/
    ctx[13](value);
  }

  let applicationshell_props = {
    $$slots: {
      default: [create_default_slot_1]
    },
    $$scope: {
      ctx
    }
  };

  for (let i = 0; i < applicationshell_spread_levels.length; i += 1) {
    applicationshell_props = assign(applicationshell_props, applicationshell_spread_levels[i]);
  }

  if (
  /*elementRoot*/
  ctx[1] !== void 0) {
    applicationshell_props.elementRoot =
    /*elementRoot*/
    ctx[1];
  }

  if (
  /*elementContent*/
  ctx[0] !== void 0) {
    applicationshell_props.elementContent =
    /*elementContent*/
    ctx[0];
  }

  applicationshell = new ApplicationShell({
    props: applicationshell_props
  });
  binding_callbacks.push(() => bind(applicationshell, 'elementRoot', applicationshell_elementRoot_binding));
  binding_callbacks.push(() => bind(applicationshell, 'elementContent', applicationshell_elementContent_binding));
  return {
    c() {
      create_component(applicationshell.$$.fragment);
    },

    m(target, anchor) {
      mount_component(applicationshell, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const applicationshell_changes = dirty &
      /*appProps*/
      64 ? get_spread_update(applicationshell_spread_levels, [get_spread_object(
      /*appProps*/
      ctx[6]), applicationshell_spread_levels[1]]) : {};

      if (dirty &
      /*$$scope, data, autoClose, dialogComponent*/
      1049100) {
        applicationshell_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_elementRoot && dirty &
      /*elementRoot*/
      2) {
        updating_elementRoot = true;
        applicationshell_changes.elementRoot =
        /*elementRoot*/
        ctx[1];
        add_flush_callback(() => updating_elementRoot = false);
      }

      if (!updating_elementContent && dirty &
      /*elementContent*/
      1) {
        updating_elementContent = true;
        applicationshell_changes.elementContent =
        /*elementContent*/
        ctx[0];
        add_flush_callback(() => updating_elementContent = false);
      }

      applicationshell.$set(applicationshell_changes);
    },

    i(local) {
      if (current) return;
      transition_in(applicationshell.$$.fragment, local);
      current = true;
    },

    o(local) {
      transition_out(applicationshell.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      destroy_component(applicationshell, detaching);
    }

  };
}

function create_fragment$l(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$b, create_else_block$2];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*modal*/
    ctx[5]) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },

    o(local) {
      transition_out(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) detach(if_block_anchor);
    }

  };
}

const s_MODAL_BACKGROUND = '#50505080';

function instance$l($$self, $$props, $$invalidate) {
  let {
    elementContent
  } = $$props;
  let {
    elementRoot
  } = $$props;
  let {
    data = {}
  } = $$props;
  let {
    dialogComponent = void 0
  } = $$props;
  const application = getContext('external').application;
  const s_MODAL_TRANSITION = fade;
  const s_MODAL_TRANSITION_OPTIONS = {
    duration: 200
  };
  let modal = void 0; // Stores props for the ApplicationShell.

  const appProps = {
    // Stores any transition functions.
    transition: void 0,
    inTransition: void 0,
    outTransition: void 0,
    // Stores properties to set for options for any transitions.
    transitionOptions: void 0,
    inTransitionOptions: void 0,
    outTransitionOptions: void 0,
    // Stores any style overrides for application shell.
    stylesApp: void 0,
    stylesContent: void 0
  };
  const modalProps = {
    // Background CSS style string.
    background: void 0,
    // Stores any transition functions.
    transition: void 0,
    inTransition: void 0,
    outTransition: void 0,
    // Stores properties to set for options for any transitions.
    transitionOptions: void 0,
    inTransitionOptions: void 0,
    outTransitionOptions: void 0
  };
  let zIndex = void 0; // Automatically close the dialog on button click handler completion.

  let autoClose = true; // Only set modal once on mount. You can't change between a modal an non-modal dialog during runtime.

  if (modal === void 0) {
    var _data;

    modal = typeof ((_data = data) === null || _data === void 0 ? void 0 : _data.modal) === 'boolean' ? data.modal : false;
  }

  function dialogcontent_autoClose_binding(value) {
    autoClose = value;
    ((($$invalidate(9, autoClose), $$invalidate(3, data)), $$invalidate(5, modal)), $$invalidate(8, zIndex)), $$invalidate(4, application);
  }

  function dialogcontent_dialogInstance_binding(value) {
    dialogComponent = value;
    $$invalidate(2, dialogComponent);
  }

  function applicationshell_elementRoot_binding(value) {
    elementRoot = value;
    $$invalidate(1, elementRoot);
  }

  function applicationshell_elementContent_binding(value) {
    elementContent = value;
    $$invalidate(0, elementContent);
  }

  function dialogcontent_autoClose_binding_1(value) {
    autoClose = value;
    ((($$invalidate(9, autoClose), $$invalidate(3, data)), $$invalidate(5, modal)), $$invalidate(8, zIndex)), $$invalidate(4, application);
  }

  function dialogcontent_dialogInstance_binding_1(value) {
    dialogComponent = value;
    $$invalidate(2, dialogComponent);
  }

  function applicationshell_elementRoot_binding_1(value) {
    elementRoot = value;
    $$invalidate(1, elementRoot);
  }

  function applicationshell_elementContent_binding_1(value) {
    elementContent = value;
    $$invalidate(0, elementContent);
  }

  $$self.$$set = $$props => {
    if ('elementContent' in $$props) $$invalidate(0, elementContent = $$props.elementContent);
    if ('elementRoot' in $$props) $$invalidate(1, elementRoot = $$props.elementRoot);
    if ('data' in $$props) $$invalidate(3, data = $$props.data);
    if ('dialogComponent' in $$props) $$invalidate(2, dialogComponent = $$props.dialogComponent);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*data, modal, zIndex, application*/
    312) {
      // Retrieve values from the DialogData object and also potentially set any SvelteApplication accessors.
      // Explicit checks are performed against existing local variables as the only externally reactive variable is `data`.
      // All of the checks below trigger when there are any external changes to the `data` prop.
      // Prevent any unnecessary changing of local & `application` variables unless actual changes occur.
      // Foundry App options --------------------------------------------------------------------------------------------
      if (typeof data === 'object') {
        var _data$draggable, _data$popOut, _data$resizable, _data$title, _application$options4;

        $$invalidate(9, autoClose = typeof data.autoClose === 'boolean' ? data.autoClose : true);
        const newZIndex = Number.isInteger(data.zIndex) || data.zIndex === null ? data.zIndex : modal ? Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER - 1;

        if (zIndex !== newZIndex) {
          $$invalidate(8, zIndex = newZIndex);
        } // Update the main foundry options when data changes. Perform explicit checks against existing data in `application`.


        const newDraggable = (_data$draggable = data.draggable) !== null && _data$draggable !== void 0 ? _data$draggable : true;

        if (application.reactive.draggable !== newDraggable) {
          $$invalidate(4, application.reactive.draggable = newDraggable, application);
        }

        const newPopOut = (_data$popOut = data.popOut) !== null && _data$popOut !== void 0 ? _data$popOut : true;

        if (application.reactive.popOut !== newPopOut) {
          $$invalidate(4, application.reactive.popOut = newPopOut, application);
        }

        const newResizable = (_data$resizable = data.resizable) !== null && _data$resizable !== void 0 ? _data$resizable : false;

        if (application.reactive.resizable !== newResizable) {
          $$invalidate(4, application.reactive.resizable = newResizable, application);
        } // Note application.title from Application localizes `options.title`, so compare with `application.options.title`.


        const newTitle = (_data$title = data.title) !== null && _data$title !== void 0 ? _data$title : 'Dialog';

        if (newTitle !== (application === null || application === void 0 ? void 0 : (_application$options4 = application.options) === null || _application$options4 === void 0 ? void 0 : _application$options4.title)) {
          $$invalidate(4, application.reactive.title = newTitle, application);
        }

        if (application.position.zIndex !== zIndex) {
          $$invalidate(4, application.position.zIndex = zIndex, application);
        }
      }
    }

    if ($$self.$$.dirty &
    /*data, appProps*/
    72) {
      var _data2;

      // ApplicationShell transition options ----------------------------------------------------------------------------
      if (typeof ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.transition) === 'object') {
        // Store data.transitions to shorten statements below.
        const d = data.transition;

        if ((d === null || d === void 0 ? void 0 : d.transition) !== appProps.transition) {
          $$invalidate(6, appProps.transition = d.transition, appProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.inTransition) !== appProps.inTransition) {
          $$invalidate(6, appProps.inTransition = d.inTransition, appProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.outTransition) !== appProps.outTransition) {
          $$invalidate(6, appProps.outTransition = d.outTransition, appProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.transitionOptions) !== appProps.transitionOptions) {
          $$invalidate(6, appProps.transitionOptions = d.transitionOptions, appProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.inTransitionOptions) !== appProps.inTransitionOptions) {
          $$invalidate(6, appProps.inTransitionOptions = d.inTransitionOptions, appProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.outTransitionOptions) !== appProps.outTransitionOptions) {
          $$invalidate(6, appProps.outTransitionOptions = d.outTransitionOptions, appProps);
        }
      }
    }

    if ($$self.$$.dirty &
    /*data, modalProps*/
    136) {
      // Modal options --------------------------------------------------------------------------------------------------
      {
        var _data3, _data3$modalOptions;

        const newModalBackground = typeof ((_data3 = data) === null || _data3 === void 0 ? void 0 : (_data3$modalOptions = _data3.modalOptions) === null || _data3$modalOptions === void 0 ? void 0 : _data3$modalOptions.background) === 'string' ? data.modalOptions.background : s_MODAL_BACKGROUND;

        if (newModalBackground !== modalProps.background) {
          $$invalidate(7, modalProps.background = newModalBackground, modalProps);
        }
      }
    }

    if ($$self.$$.dirty &
    /*data, modalProps*/
    136) {
      var _data4, _data4$modalOptions;

      if (typeof ((_data4 = data) === null || _data4 === void 0 ? void 0 : (_data4$modalOptions = _data4.modalOptions) === null || _data4$modalOptions === void 0 ? void 0 : _data4$modalOptions.transition) === 'object') {
        // Store data.transitions to shorten statements below.
        const d = data.modalOptions.transition;

        if ((d === null || d === void 0 ? void 0 : d.transition) !== modalProps.transition) {
          $$invalidate(7, modalProps.transition = typeof (d === null || d === void 0 ? void 0 : d.transition) === 'function' ? d.transition : s_MODAL_TRANSITION, modalProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.inTransition) !== modalProps.inTransition) {
          $$invalidate(7, modalProps.inTransition = d.inTransition, modalProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.outTransition) !== modalProps.outTransition) {
          $$invalidate(7, modalProps.outTransition = d.outTransition, modalProps);
        } // Provide default transition options if not defined.


        if ((d === null || d === void 0 ? void 0 : d.transitionOptions) !== modalProps.transitionOptions) {
          $$invalidate(7, modalProps.transitionOptions = typeof (d === null || d === void 0 ? void 0 : d.transitionOptions) === 'object' ? d.transitionOptions : s_MODAL_TRANSITION_OPTIONS, modalProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.inTransitionOptions) !== modalProps.inTransitionOptions) {
          $$invalidate(7, modalProps.inTransitionOptions = d.inTransitionOptions, modalProps);
        }

        if ((d === null || d === void 0 ? void 0 : d.outTransitionOptions) !== modalProps.outTransitionOptions) {
          $$invalidate(7, modalProps.outTransitionOptions = d.outTransitionOptions, modalProps);
        }
      } else // Provide a fallback / default glass pane transition when `data.modalOptions.transition` is not defined.
        {
          var _data5, _data5$modalOptions, _data5$modalOptions$t, _data6, _data6$modalOptions;

          const newModalTransition = typeof ((_data5 = data) === null || _data5 === void 0 ? void 0 : (_data5$modalOptions = _data5.modalOptions) === null || _data5$modalOptions === void 0 ? void 0 : (_data5$modalOptions$t = _data5$modalOptions.transition) === null || _data5$modalOptions$t === void 0 ? void 0 : _data5$modalOptions$t.transition) === 'function' ? data.modalOptions.transition.transition : s_MODAL_TRANSITION;

          if (newModalTransition !== modalProps.transition) {
            $$invalidate(7, modalProps.transition = newModalTransition, modalProps);
          }

          const newModalTransitionOptions = typeof ((_data6 = data) === null || _data6 === void 0 ? void 0 : (_data6$modalOptions = _data6.modalOptions) === null || _data6$modalOptions === void 0 ? void 0 : _data6$modalOptions.transitionOptions) === 'object' ? data.modalOptions.transitionOptions : s_MODAL_TRANSITION_OPTIONS;

          if (newModalTransitionOptions !== modalProps.transitionOptions) {
            $$invalidate(7, modalProps.transitionOptions = newModalTransitionOptions, modalProps);
          }
        }
    }
  };

  return [elementContent, elementRoot, dialogComponent, data, application, modal, appProps, modalProps, zIndex, autoClose, dialogcontent_autoClose_binding, dialogcontent_dialogInstance_binding, applicationshell_elementRoot_binding, applicationshell_elementContent_binding, dialogcontent_autoClose_binding_1, dialogcontent_dialogInstance_binding_1, applicationshell_elementRoot_binding_1, applicationshell_elementContent_binding_1];
}

class DialogShell extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$l, safe_not_equal, {
      elementContent: 0,
      elementRoot: 1,
      data: 3,
      dialogComponent: 2
    });
  }

  get elementContent() {
    return this.$$.ctx[0];
  }

  set elementContent(elementContent) {
    this.$$set({
      elementContent
    });
    flush();
  }

  get elementRoot() {
    return this.$$.ctx[1];
  }

  set elementRoot(elementRoot) {
    this.$$set({
      elementRoot
    });
    flush();
  }

  get data() {
    return this.$$.ctx[3];
  }

  set data(data) {
    this.$$set({
      data
    });
    flush();
  }

  get dialogComponent() {
    return this.$$.ctx[2];
  }

  set dialogComponent(dialogComponent) {
    this.$$set({
      dialogComponent
    });
    flush();
  }

}

var _application = /*#__PURE__*/new WeakMap();

class DialogData {
  /**
   * @type {SvelteApplication}
   */

  /**
   * @param {SvelteApplication} application - The host Foundry application.
   */
  constructor(application) {
    _classPrivateFieldInitSpec(this, _application, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _application, application);
  }
  /**
   * Provides a way to safely get this dialogs data given an accessor string which describes the
   * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
   * to walk.
   *
   * // TODO DOCUMENT the accessor in more detail.
   *
   * @param {string}   accessor - The path / key to set. You can set multiple levels.
   *
   * @param {*}        [defaultValue] - A default value returned if the accessor is not found.
   *
   * @returns {*} Value at the accessor.
   */


  get(accessor, defaultValue) {
    return safeAccess(this, accessor, defaultValue);
  }
  /**
   * @param {object} data - Merge provided data object into Dialog data.
   */


  merge(data) {
    deepMerge(this, data);

    const component = _classPrivateFieldGet(this, _application).svelte.component(0);

    if (component !== null && component !== void 0 && component.data) {
      component.data = this;
    }
  }
  /**
   * Provides a way to safely set this dialogs data given an accessor string which describes the
   * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries
   * to walk.
   *
   * Automatically the dialog data will be updated in the associated DialogShell Svelte component.
   *
   * // TODO DOCUMENT the accessor in more detail.
   *
   * @param {string}   accessor - The path / key to set. You can set multiple levels.
   *
   * @param {*}        value - Value to set.
   *
   * @returns {boolean} True if successful.
   */


  set(accessor, value) {
    const success = safeSet(this, accessor, value); // If `this.options` modified then update the app options store.

    if (success) {
      const component = _classPrivateFieldGet(this, _application).svelte.component(0);

      if (component !== null && component !== void 0 && component.data) {
        component.data = this;
      }
    }

    return success;
  }

}

/**
 * Provides a Foundry API compatible dialog alternative implemented w/ Svelte. There are several features including
 * a glasspane / modal option with various styling and transition capabilities.
 *
 * TODO: document all dialog data parameters; keep track of newly added like button -> styles, title; modal,
 * draggable, transition options, modal transitions
 */

var _data = /*#__PURE__*/new WeakMap();

class TJSDialog extends SvelteApplication {
  /**
   * @type {DialogData}
   */

  /**
   * @param {object}   data - Dialog data.
   *
   * @param {object}   [options] - SvelteApplication options.
   */
  constructor(data, options = {}) {
    super(options);

    _classPrivateFieldInitSpec(this, _data, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _data, new DialogData(this));

    this.data = data;
    /**
     * @member {object} dialogComponent - A getter to SvelteData to retrieve any mounted Svelte component as the
     *                                    dialog content.
     *
     * @memberof GetSvelteData#
     * @readonly
     */

    Object.defineProperty(this.svelte, 'dialogComponent', {
      get: () => {
        var _this$svelte, _this$svelte$applicat;

        return (_this$svelte = this.svelte) === null || _this$svelte === void 0 ? void 0 : (_this$svelte$applicat = _this$svelte.applicationShell) === null || _this$svelte$applicat === void 0 ? void 0 : _this$svelte$applicat.dialogComponent;
      }
    });
  }
  /**
   * Default options
   *
   * @returns {object} Default options
   */


  static get defaultOptions() {
    return deepMerge(super.defaultOptions, {
      classes: ['dialog'],
      width: 400,
      height: 'auto',
      jQuery: true,
      svelte: {
        class: DialogShell,
        intro: true,
        target: document.body,
        props: function () {
          return {
            data: _classPrivateFieldGet(this, _data)
          };
        } // this context is the SvelteApplication when invoked.

      }
    });
  }
  /**
   * Returns the dialog data.
   *
   * @returns {DialogData} Dialog data.
   */


  get data() {
    return _classPrivateFieldGet(this, _data);
  }
  /**
   * Sets the dialog data; this is reactive.
   *
   * @param {object}   data - Dialog data.
   */


  set data(data) {
    const descriptors = Object.getOwnPropertyDescriptors(_classPrivateFieldGet(this, _data)); // Remove old data for all configurable descriptors.

    for (const descriptor in descriptors) {
      if (descriptors[descriptor].configurable) {
        delete _classPrivateFieldGet(this, _data)[descriptor];
      }
    } // Merge new data and perform a reactive update.


    _classPrivateFieldGet(this, _data).merge(data);
  }
  /**
   * Implemented only for backwards compatibility w/ default Foundry {@link Dialog} API.
   *
   * @param {JQuery}   html - JQuery element for content area.
   */


  activateListeners(html) {
    super.activateListeners(html);

    if (this.data.render instanceof Function) {
      const actualHTML = typeof this.options.template === 'string' ? html : this.options.jQuery ? $(this.elementContent) : this.elementContent;
      this.data.render(this.options.jQuery ? actualHTML : actualHTML[0]);
    }
  }
  /**
   * Close the dialog and un-register references to it within UI mappings.
   * This function returns a Promise which resolves once the window closing animation concludes.
   *
   * @param {object}   [options] - Optional parameters.
   *
   * @param {boolean}  [options.force] - Force close regardless of render state.
   *
   * @returns {Promise<void>} A Promise which resolves once the application is closed.
   */


  async close(options) {
    /**
     * Implemented only for backwards compatibility w/ default Foundry {@link Dialog} API.
     */
    if (this.data.close instanceof Function) {
      this.data.close(this.options.jQuery ? this.element : this.element[0]);
    }

    return super.close(options);
  } // ---------------------------------------------------------------------------------------------------------------

  /**
   * A helper factory method to create simple confirmation dialog windows which consist of simple yes/no prompts.
   * If you require more flexibility, a custom Dialog instance is preferred.
   *
   * @param {TJSConfirmConfig} config - Confirm dialog options.
   *
   * @returns {Promise<*>} A promise which resolves once the user makes a choice or closes the window.
   *
   * @example
   * let d = TJSDialog.confirm({
   *  title: "A Yes or No Question",
   *  content: "<p>Choose wisely.</p>",
   *  yes: () => console.log("You chose ... wisely"),
   *  no: () => console.log("You chose ... poorly"),
   *  defaultYes: false
   * });
   */


  static async confirm({
    title,
    content,
    yes,
    no,
    render,
    defaultYes = true,
    rejectClose = false,
    options = {},
    buttons = {},
    draggable = true,
    modal = false,
    modalOptions = {},
    popOut = true,
    resizable = false,
    transition = {},
    zIndex
  } = {}) {
    // Allow overwriting of default icon and labels.
    const mergedButtons = deepMerge({
      yes: {
        icon: '<i class="fas fa-check"></i>',
        label: game.i18n.localize('Yes')
      },
      no: {
        icon: '<i class="fas fa-times"></i>',
        label: game.i18n.localize('No')
      }
    }, buttons);
    return new Promise((resolve, reject) => {
      const dialog = new this({
        title,
        content,
        render,
        draggable,
        modal,
        modalOptions,
        popOut,
        resizable,
        transition,
        zIndex,
        buttons: deepMerge(mergedButtons, {
          yes: {
            callback: html => {
              const result = yes ? yes(html) : true;
              resolve(result);
            }
          },
          no: {
            callback: html => {
              const result = no ? no(html) : false;
              resolve(result);
            }
          }
        }),
        default: defaultYes ? "yes" : "no",
        close: () => {
          if (rejectClose) {
            reject('The confirmation Dialog was closed without a choice being made.');
          } else {
            resolve(null);
          }
        }
      }, options);
      dialog.render(true);
    });
  }
  /**
   * A helper factory method to display a basic "prompt" style Dialog with a single button
   *
   * @param {TJSPromptConfig} config - Prompt dialog options.
   *
   * @returns {Promise<*>} The returned value from the provided callback function, if any
   */


  static async prompt({
    title,
    content,
    label,
    callback,
    render,
    rejectClose = false,
    options = {},
    draggable = true,
    icon = '<i class="fas fa-check"></i>',
    modal = false,
    modalOptions = {},
    popOut = true,
    resizable = false,
    transition = {},
    zIndex
  } = {}) {
    return new Promise((resolve, reject) => {
      const dialog = new this({
        title,
        content,
        render,
        draggable,
        modal,
        modalOptions,
        popOut,
        resizable,
        transition,
        zIndex,
        buttons: {
          ok: {
            icon,
            label,
            callback: html => {
              const result = callback ? callback(html) : null;
              resolve(result);
            }
          }
        },
        default: 'ok',
        close: () => {
          if (rejectClose) {
            reject(new Error('The Dialog prompt was closed without being accepted.'));
          } else {
            resolve(null);
          }
        }
      }, options);
      dialog.render(true);
    });
  }

}
/**
 * @typedef TJSConfirmConfig - Configuration options for the confirm dialog.
 *
 * @property {string}   title - The confirmation window title
 *
 * @property {string}   content - The confirmation message
 *
 * @property {Function} [yes] - Callback function upon yes
 *
 * @property {Function} [no] - Callback function upon no
 *
 * @property {Function} [render] - A function to call when the dialog is rendered
 *
 * @property {boolean}  [defaultYes=true] - Make "yes" the default choice?
 *
 * @property {boolean}  [rejectClose=false] - Reject the Promise if the Dialog is closed without making a choice.
 *
 * @property {object}   [options={}] - Additional rendering options passed to the Dialog
 *
 * @property {object}   [buttons={}] - Provides a button override that is merged with default buttons.
 *
 * @property {boolean}  [draggable=true] - The dialog is draggable when true.
 *
 * @property {boolean}  [modal=false] - When true a modal dialog is displayed.
 *
 * @property {object}   [modalOptions] - Additional options for modal dialog display.
 *
 * @property {boolean}  [popOut=true] - When true the dialog is a pop out Application.
 *
 * @property {boolean}  [resizable=false] - When true the dialog is resizable.
 *
 * @property {object}   [transition] - Transition options for the dialog.
 *
 * @property {number|null} [zIndex] - A specific z-index for the dialog.
 */

/**
 * @typedef TJSPromptConfig - Configuration options for the confirm dialog.
 *
 * @property {string}   title - The confirmation window title
 *
 * @property {string}   content - The confirmation message
 *
 * @property {string}   [label] - The confirmation button text.
 *
 * @property {Function} [callback] - A callback function to fire when the button is clicked.
 *
 * @property {Function} [render] - A function to call when the dialog is rendered.
 *
 * @property {boolean}  [rejectClose=false] - Reject the Promise if the Dialog is closed without making a choice.
 *
 * @property {object}   [options={}] - Additional application options passed to the TJSDialog.
 *
 * @property {boolean}  [draggable=true] - The dialog is draggable when true.
 *
 * @property {string}   [icon="<i class="fas fa-check"></i>"] - Set another icon besides `fa-check` for button.
 *
 * @property {boolean}  [modal=false] - When true a modal dialog is displayed.
 *
 * @property {object}   [modalOptions] - Additional options for modal dialog display.
 *
 * @property {boolean}  [popOut=true] - When true the dialog is a pop out Application.
 *
 * @property {boolean}  [resizable=false] - When true the dialog is resizable.
 *
 * @property {object}   [transition] - Transition options for the dialog.
 *
 * @property {number|null} [zIndex] - A specific z-index for the dialog.
 */

/* src\formApps\ItemMenu\components\customPicker.svelte generated by Svelte v3.47.0 */

function create_fragment$k(ctx) {
	let div2;
	let div0;
	let input0;
	let t0;
	let label;
	let t1;
	let t2_value = localize("AUTOANIM.custom") + "";
	let t2;
	let label_class_value;
	let t3;
	let div1;
	let input1;
	let input1_disabled_value;
	let input1_class_value;
	let t4;
	let button;
	let i;
	let button_disabled_value;
	let div1_class_value;
	let div2_intro;
	let div2_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			label = element("label");
			t1 = text("Set ");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			input1 = element("input");
			t4 = space();
			button = element("button");
			i = element("i");
			attr(input0, "type", "checkbox");
			attr(input0, "id", /*customId*/ ctx[2]);
			input0.hidden = true;
			attr(label, "for", /*customId*/ ctx[2]);
			attr(label, "class", label_class_value = "" + (null_to_empty(/*isCustom*/ ctx[1] ? "selected" : "notSelected") + " svelte-4m0ku7"));
			attr(div0, "class", "flexcol aa-button-labels");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "1/2");
			input1.disabled = input1_disabled_value = !/*isCustom*/ ctx[1];
			attr(input1, "type", "text");

			attr(input1, "class", input1_class_value = "" + (null_to_empty(/*isCustom*/ ctx[1] && /*customPath*/ ctx[0] != ""
			? "isPopulated"
			: "isNotPopulated opacityText") + " svelte-4m0ku7"));

			attr(i, "class", "fas fa-file-import fa-fw");
			button.disabled = button_disabled_value = !/*isCustom*/ ctx[1];
			attr(button, "class", "file-picker svelte-4m0ku7");
			attr(div1, "class", div1_class_value = "form-group " + (/*isCustom*/ ctx[1] ? '' : 'opacityBorder opacityButton') + " svelte-4m0ku7");
			set_style(div1, "grid-row", "1/2");
			set_style(div1, "grid-column", "2/5");
			attr(div2, "class", "aa-customAnim-container svelte-4m0ku7");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, input0);
			input0.checked = /*isCustom*/ ctx[1];
			append(div0, t0);
			append(div0, label);
			append(label, t1);
			append(label, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, input1);
			set_input_value(input1, /*customPath*/ ctx[0]);
			append(div1, t4);
			append(div1, button);
			append(button, i);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[6]),
					listen(input1, "input", /*input1_input_handler*/ ctx[7]),
					listen(button, "click", prevent_default(/*click_handler*/ ctx[8]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*customId*/ 4) {
				attr(input0, "id", /*customId*/ ctx[2]);
			}

			if (dirty & /*isCustom*/ 2) {
				input0.checked = /*isCustom*/ ctx[1];
			}

			if (!current || dirty & /*customId*/ 4) {
				attr(label, "for", /*customId*/ ctx[2]);
			}

			if (!current || dirty & /*isCustom*/ 2 && label_class_value !== (label_class_value = "" + (null_to_empty(/*isCustom*/ ctx[1] ? "selected" : "notSelected") + " svelte-4m0ku7"))) {
				attr(label, "class", label_class_value);
			}

			if (!current || dirty & /*isCustom*/ 2 && input1_disabled_value !== (input1_disabled_value = !/*isCustom*/ ctx[1])) {
				input1.disabled = input1_disabled_value;
			}

			if (!current || dirty & /*isCustom, customPath*/ 3 && input1_class_value !== (input1_class_value = "" + (null_to_empty(/*isCustom*/ ctx[1] && /*customPath*/ ctx[0] != ""
			? "isPopulated"
			: "isNotPopulated opacityText") + " svelte-4m0ku7"))) {
				attr(input1, "class", input1_class_value);
			}

			if (dirty & /*customPath*/ 1 && input1.value !== /*customPath*/ ctx[0]) {
				set_input_value(input1, /*customPath*/ ctx[0]);
			}

			if (!current || dirty & /*isCustom*/ 2 && button_disabled_value !== (button_disabled_value = !/*isCustom*/ ctx[1])) {
				button.disabled = button_disabled_value;
			}

			if (!current || dirty & /*isCustom*/ 2 && div1_class_value !== (div1_class_value = "form-group " + (/*isCustom*/ ctx[1] ? '' : 'opacityBorder opacityButton') + " svelte-4m0ku7")) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div2_outro) div2_outro.end(1);
				div2_intro = create_in_transition(div2, fade, { duration: 500 });
				div2_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div2_intro) div2_intro.invalidate();
			div2_outro = create_out_transition(div2, fade, { duration: 500 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching && div2_outro) div2_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	let { flagPath } = $$props;
	let root;
	let options;
	let { customPath } = $$props;
	let customId;

	switch (flagPath) {
		case "explosions":
			console.log("routing to explosions");
			root = flagData.explosions;
			options = flagData.explosions;
			customPath = flagData.explosions.customPath || "";
			flagData.explosions.enableCustom || false;
			customId = "customExplosion";
			break;
		case "sourceExtraFX":
			console.log("routing to Source Token");
			root = flagData.sourceToken;
			options = flagData.sourceToken;
			customPath = flagData.sourceToken.customPath || "";
			flagData.sourceToken.enableCustom;
			customId = "customSource";
			break;
		case "targetExtraFX":
			console.log("routing to Target Token");
			root = flagData.targetToken;
			options = flagData.targetToken;
			customPath = flagData.targetToken.customPath || "";
			flagData.targetToken.enableCustom;
			customId = "customTarget";
			break;
		default:
			console.log("routing to Primary");
			root = flagData.options;
			options = flagData.options;
			customPath = flagData.options.customPath || "";
			flagData.options.enableCustom || false;
			customId = "customPrimary";
	}

	let { isCustom = root.enableCustom || false } = $$props;

	async function selectCustom() {
		const current = customPath;

		const picker = new FilePicker({
				type: "imagevideo",
				current,
				callback: path => {
					$$invalidate(0, customPath = path);
				}
			});

		setTimeout(
			() => {
				picker.element[0].style.zIndex = `${Number.MAX_SAFE_INTEGER}`;
			},
			100
		);

		await picker.browse(current);
	}

	function input0_change_handler() {
		isCustom = this.checked;
		$$invalidate(1, isCustom);
	}

	function input1_input_handler() {
		customPath = this.value;
		$$invalidate(0, customPath);
	}

	const click_handler = () => selectCustom();

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(4, flagData = $$props.flagData);
		if ('flagPath' in $$props) $$invalidate(5, flagPath = $$props.flagPath);
		if ('customPath' in $$props) $$invalidate(0, customPath = $$props.customPath);
		if ('isCustom' in $$props) $$invalidate(1, isCustom = $$props.isCustom);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*customPath*/ 1) {
			//const options = flagData.options || {};
			//let customPath = options.customPath || "";
			$$invalidate(0, customPath);
		}

		if ($$self.$$.dirty & /*customPath*/ 1) {
			options.customPath = customPath;
		}

		if ($$self.$$.dirty & /*isCustom*/ 2) {
			$$invalidate(1, isCustom);
		}

		if ($$self.$$.dirty & /*isCustom*/ 2) {
			root.enableCustom = isCustom;
		}
	};

	return [
		customPath,
		isCustom,
		customId,
		selectCustom,
		flagData,
		flagPath,
		input0_change_handler,
		input1_input_handler,
		click_handler
	];
}

class CustomPicker extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
			flagData: 4,
			flagPath: 5,
			customPath: 0,
			isCustom: 1
		});
	}
}

let data = "";
const menuAnimType = writable(data);
let customPath01;
const customFilePath01 = writable(customPath01);
let isCustom01;
const customChecked01 = writable(isCustom01);
let fileData01;
const menuDBPath01 = writable(fileData01);
let customPath02;
const customFilePath02 = writable(customPath02);
let isCustom02;
const customChecked02 = writable(isCustom02);
let fileData02;
const menuDBPath02 = writable(fileData02);
let customPathSourceFX;
const customFilePathSourceFX = writable(customPathSourceFX);
let isCustomSourceFX;
const customCheckedSourceFX = writable(isCustomSourceFX);
let fileDataSourceFX;
const menuDBPathSourceFX = writable(fileDataSourceFX);
let customPathTargetFX;
const customFilePathTargetFX = writable(customPathTargetFX);
let isCustomTargetFX;
const customCheckedTargetFX = writable(isCustomTargetFX);
let fileDataTargetFX;
const menuDBPathTargetFX = writable(fileDataTargetFX);
let fileDataSwitch;
const menuDBPathSwitch = writable(fileDataSwitch);
let sourceEnabled;
const extraSource = writable(sourceEnabled);
let targetEnabled;
const extraTarget = writable(targetEnabled);

/* src\formApps\ItemMenu\videoPreviews\primaryApp.svelte generated by Svelte v3.47.0 */

function create_fragment$j(ctx) {
	let video;
	let track;
	let video_src_value;

	return {
		c() {
			video = element("video");
			track = element("track");
			attr(track, "kind", "captions");
			attr(video, "class", "aaVideoPreview svelte-9fs2jg");
			if (!src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) attr(video, "src", video_src_value);
			video.autoplay = "autoplay";
			video.controls = true;
			video.loop = true;
		},
		m(target, anchor) {
			insert(target, video, anchor);
			append(video, track);
		},
		p(ctx, [dirty]) {
			if (dirty & /*filePath*/ 1 && !src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
		}
	};
}

function getPreviewFile$2(data) {
	let seqFiles = Sequencer.Database.getEntry(data);

	if (Array.isArray(seqFiles)) {
		seqFiles = seqFiles[0].file;

		if (Array.isArray(seqFiles)) {
			return seqFiles[0].file;
		}

		if (isObject(seqFiles)) {
			if (Array.isArray(seqFiles["15ft"])) {
				seqFiles = seqFiles["15ft"];
				return seqFiles[0];
			}

			seqFiles = seqFiles["15ft"];
			return seqFiles[0];
		}

		return seqFiles;
	}

	if (isObject(seqFiles.file)) {
		if (Array.isArray(seqFiles.file["15ft"])) {
			seqFiles = seqFiles.file["15ft"];
			return seqFiles[0];
		}

		return seqFiles.file["15ft"];
	}

	return seqFiles.file;

	function isObject(test) {
		return typeof test === "object";
	}
}

function instance$j($$self, $$props, $$invalidate) {
	let databaseFile;
	let filePath;
	let dbPath;

	menuDBPath01.subscribe(value => {
		$$invalidate(1, dbPath = value);
	});

	let isCustom;

	customChecked01.subscribe(value => {
		$$invalidate(2, isCustom = value);
	});

	let customPath;

	customFilePath01.subscribe(value => {
		$$invalidate(3, customPath = value);
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dbPath*/ 2) {
			$$invalidate(4, databaseFile = getPreviewFile$2(dbPath));
		}

		if ($$self.$$.dirty & /*isCustom, customPath, databaseFile*/ 28) {
			$$invalidate(0, filePath = isCustom ? customPath : databaseFile);
		}
	};

	return [filePath, dbPath, isCustom, customPath, databaseFile];
}

class PrimaryApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\videoPreviews\explosionApp.svelte generated by Svelte v3.47.0 */

function create_fragment$i(ctx) {
	let video;
	let track;
	let video_src_value;

	return {
		c() {
			video = element("video");
			track = element("track");
			attr(track, "kind", "captions");
			attr(video, "class", "aaVideoPreview svelte-9fs2jg");
			if (!src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) attr(video, "src", video_src_value);
			video.autoplay = "autoplay";
			video.controls = true;
			video.loop = true;
		},
		m(target, anchor) {
			insert(target, video, anchor);
			append(video, track);
		},
		p(ctx, [dirty]) {
			if (dirty & /*filePath*/ 1 && !src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
		}
	};
}

function getPreviewFile$1(data) {
	let seqFiles = Sequencer.Database.getEntry(data);

	if (Array.isArray(seqFiles)) {
		seqFiles = seqFiles[0].file;

		if (Array.isArray(seqFiles)) {
			return seqFiles[0].file;
		}

		if (isObject(seqFiles)) {
			if (Array.isArray(seqFiles["15ft"])) {
				seqFiles = seqFiles["15ft"];
				return seqFiles[0];
			}

			seqFiles = seqFiles["15ft"];
			return seqFiles[0];
		}

		return seqFiles;
	}

	if (isObject(seqFiles.file)) {
		if (Array.isArray(seqFiles.file["15ft"])) {
			seqFiles = seqFiles.file["15ft"];
			return seqFiles[0];
		}

		return seqFiles.file["15ft"];
	}

	return seqFiles.file;

	function isObject(test) {
		return typeof test === "object";
	}
}

function instance$i($$self, $$props, $$invalidate) {
	let databaseFile;
	let filePath;
	let dbPath;

	menuDBPath02.subscribe(value => {
		$$invalidate(1, dbPath = value);
	});

	let isCustom;

	customChecked02.subscribe(value => {
		$$invalidate(2, isCustom = value);
	});

	let customPath;

	customFilePath02.subscribe(value => {
		$$invalidate(3, customPath = value);
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dbPath*/ 2) {
			$$invalidate(4, databaseFile = getPreviewFile$1(dbPath));
		}

		if ($$self.$$.dirty & /*isCustom, customPath, databaseFile*/ 28) {
			$$invalidate(0, filePath = isCustom ? customPath : databaseFile);
		}
	};

	return [filePath, dbPath, isCustom, customPath, databaseFile];
}

class ExplosionApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\chooseAnimation.svelte generated by Svelte v3.47.0 */

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i][0];
	child_ctx[33] = list[i][1];
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i][0];
	child_ctx[33] = list[i][1];
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i][0];
	child_ctx[33] = list[i][1];
	return child_ctx;
}

function get_each_context_3$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i][0];
	child_ctx[33] = list[i][1];
	return child_ctx;
}

// (186:16) {#if animType != ""}
function create_if_block_5$4(ctx) {
	let each_1_anchor;
	let each_value_3 = Object.entries(aaTypeMenu[/*menuSelection*/ ctx[7]]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection*/ 128) {
				each_value_3 = Object.entries(aaTypeMenu[/*menuSelection*/ ctx[7]]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (187:20) {#each Object.entries(aaTypeMenu[menuSelection]) as [key, name]}
function create_each_block_3$1(ctx) {
	let option;
	let t_value = /*name*/ ctx[33] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[32];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection*/ 128 && t_value !== (t_value = /*name*/ ctx[33] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuSelection*/ 128 && option_value_value !== (option_value_value = /*key*/ ctx[32])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (193:8) {#if animType === "static" && flagPath === "PrimaryAnimation"}
function create_if_block_4$4(ctx) {
	let div;
	let label;
	let t1;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.playOn")}`;
			t1 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.source")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.target")}`;
			option2 = element("option");
			option2.textContent = `${localize("AUTOANIM.targetDefault")}`;
			option3 = element("option");
			option3.textContent = `${localize("AUTOANIM.both")}`;
			attr(label, "for", "6");
			attr(label, "class", "svelte-j1vmj9");
			option0.__value = "source";
			option0.value = option0.__value;
			option1.__value = "target";
			option1.value = option1.__value;
			option2.__value = "targetDefault";
			option2.value = option2.__value;
			option3.__value = "sourcetarget";
			option3.value = option3.__value;
			attr(select, "name", "flags.autoanimations.options.staticType");
			attr(select, "id", "6");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-j1vmj9");
			if (/*staticType*/ ctx[11] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[18].call(select));
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "2 / 3");
			set_style(div, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t1);
			append(div, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			append(select, option3);
			select_option(select, /*staticType*/ ctx[11]);
			current = true;

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[18]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*staticType*/ 2048) {
				select_option(select, /*staticType*/ ctx[11]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				div_intro = create_in_transition(div, fly, { x: 200, duration: 500 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fly, { x: 200, duration: 500 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

// (237:16) {#if menuType != ""}
function create_if_block_3$5(ctx) {
	let each_1_anchor;
	let each_value_2 = Object.entries(aaNameMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]]);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType*/ 130) {
				each_value_2 = Object.entries(aaNameMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]]);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (238:20) {#each Object.entries(aaNameMenu[menuSelection][menuType]) as [key, name]}
function create_each_block_2$1(ctx) {
	let option;
	let t_value = /*name*/ ctx[33] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[32];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType*/ 130 && t_value !== (t_value = /*name*/ ctx[33] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuSelection, menuType*/ 130 && option_value_value !== (option_value_value = /*key*/ ctx[32])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (260:16) {#if (menuType != "") & (animation != "")}
function create_if_block_2$5(ctx) {
	let each_1_anchor;
	let each_value_1 = Object.entries(aaVariantMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]][/*animation*/ ctx[2]]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType, animation*/ 134) {
				each_value_1 = Object.entries(aaVariantMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]][/*animation*/ ctx[2]]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (261:20) {#each Object.entries(aaVariantMenu[menuSelection][menuType][animation]) as [key, name]}
function create_each_block_1$2(ctx) {
	let option;
	let t_value = /*name*/ ctx[33] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[32];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType, animation*/ 134 && t_value !== (t_value = /*name*/ ctx[33] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuSelection, menuType, animation*/ 134 && option_value_value !== (option_value_value = /*key*/ ctx[32])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (282:16) {#if menuType != "" && animation != "" && variant != ""}
function create_if_block_1$9(ctx) {
	let each_1_anchor;
	let each_value = Object.entries(aaColorMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]][/*animation*/ ctx[2]][/*variant*/ ctx[3]]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType, animation, variant*/ 142) {
				each_value = Object.entries(aaColorMenu[/*menuSelection*/ ctx[7]][/*menuType*/ ctx[1]][/*animation*/ ctx[2]][/*variant*/ ctx[3]]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (283:20) {#each Object.entries(aaColorMenu[menuSelection][menuType][animation][variant]) as [key, name]}
function create_each_block$3(ctx) {
	let option;
	let t_value = /*name*/ ctx[33] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[32];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuSelection, menuType, animation, variant*/ 142 && t_value !== (t_value = /*name*/ ctx[33] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuSelection, menuType, animation, variant*/ 142 && option_value_value !== (option_value_value = /*key*/ ctx[32])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (292:8) {#if animType === "range" && isCustom && flagPath === "PrimaryAnimation"}
function create_if_block$a(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1_value = localize("AUTOANIM.constantScaleY") + "";
	let t1;
	let label_class_value;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			attr(input, "type", "checkbox");
			attr(input, "id", "constantY");
			input.hidden = true;
			attr(label, "for", "constantY");
			attr(label, "class", label_class_value = "" + (null_to_empty(/*onlyX*/ ctx[10] ? "selected" : "notSelected") + " svelte-j1vmj9"));
			attr(div, "class", "flexcol aa-button-labels");
			set_style(div, "grid-row", "1 / 2");
			set_style(div, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			input.checked = /*onlyX*/ ctx[10];
			append(div, t0);
			append(div, label);
			append(label, t1);
			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[26]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*onlyX*/ 1024) {
				input.checked = /*onlyX*/ ctx[10];
			}

			if (!current || dirty[0] & /*onlyX*/ 1024 && label_class_value !== (label_class_value = "" + (null_to_empty(/*onlyX*/ ctx[10] ? "selected" : "notSelected") + " svelte-j1vmj9"))) {
				attr(label, "class", label_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 500 }, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 500 }, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$h(ctx) {
	let div6;
	let div4;
	let div0;
	let label0;
	let t1;
	let select0;
	let select0_class_value;
	let div0_class_value;
	let t2;
	let t3;
	let div1;
	let label1;
	let t5;
	let select1;
	let select1_class_value;
	let div1_class_value;
	let t6;
	let div2;
	let label2;
	let t8;
	let select2;
	let select2_class_value;
	let div2_class_value;
	let t9;
	let div3;
	let label3;
	let t11;
	let select3;
	let select3_class_value;
	let div3_class_value;
	let div4_transition;
	let t12;
	let custompicker;
	let updating_isCustom;
	let updating_customPath;
	let t13;
	let div5;
	let div6_transition;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*animType*/ ctx[0] != "" && create_if_block_5$4(ctx);
	let if_block1 = /*animType*/ ctx[0] === "static" && /*flagPath*/ ctx[9] === "PrimaryAnimation" && create_if_block_4$4(ctx);
	let if_block2 = /*menuType*/ ctx[1] != "" && create_if_block_3$5(ctx);
	let if_block3 = /*menuType*/ ctx[1] != "" & /*animation*/ ctx[2] != "" && create_if_block_2$5(ctx);
	let if_block4 = /*menuType*/ ctx[1] != "" && /*animation*/ ctx[2] != "" && /*variant*/ ctx[3] != "" && create_if_block_1$9(ctx);

	function custompicker_isCustom_binding(value) {
		/*custompicker_isCustom_binding*/ ctx[24](value);
	}

	function custompicker_customPath_binding(value) {
		/*custompicker_customPath_binding*/ ctx[25](value);
	}

	let custompicker_props = {
		flagPath: /*flagPath*/ ctx[9],
		flagData: /*flagData*/ ctx[8]
	};

	if (/*isCustom*/ ctx[5] !== void 0) {
		custompicker_props.isCustom = /*isCustom*/ ctx[5];
	}

	if (/*customPath*/ ctx[6] !== void 0) {
		custompicker_props.customPath = /*customPath*/ ctx[6];
	}

	custompicker = new CustomPicker({ props: custompicker_props });
	binding_callbacks.push(() => bind(custompicker, 'isCustom', custompicker_isCustom_binding));
	binding_callbacks.push(() => bind(custompicker, 'customPath', custompicker_customPath_binding));
	let if_block5 = /*animType*/ ctx[0] === "range" && /*isCustom*/ ctx[5] && /*flagPath*/ ctx[9] === "PrimaryAnimation" && create_if_block$a(ctx);

	return {
		c() {
			div6 = element("div");
			div4 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.type")}`;
			t1 = space();
			select0 = element("select");
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.animation")}`;
			t5 = space();
			select1 = element("select");
			if (if_block2) if_block2.c();
			t6 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.variant")}`;
			t8 = space();
			select2 = element("select");
			if (if_block3) if_block3.c();
			t9 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = `${localize("AUTOANIM.color")}`;
			t11 = space();
			select3 = element("select");
			if (if_block4) if_block4.c();
			t12 = space();
			create_component(custompicker.$$.fragment);
			t13 = space();
			div5 = element("div");
			if (if_block5) if_block5.c();
			attr(label0, "for", "2");
			attr(label0, "class", "svelte-j1vmj9");
			attr(select0, "name", "flags.autoanimations.options.menuType");
			attr(select0, "id", "2");
			select0.disabled = /*isCustom*/ ctx[5];

			attr(select0, "class", select0_class_value = "" + (null_to_empty(/*menuType*/ ctx[1] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"));

			if (/*menuType*/ ctx[1] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[16].call(select0));
			attr(div0, "class", div0_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9");
			set_style(div0, "grid-row", "2 / 3");
			set_style(div0, "grid-column", "2 / 3");
			attr(label1, "for", "3");
			attr(label1, "class", "svelte-j1vmj9");
			attr(select1, "name", "flags.autoanimations.animation");
			attr(select1, "id", "3");
			select1.disabled = /*isCustom*/ ctx[5];

			attr(select1, "class", select1_class_value = "" + (null_to_empty(/*animation*/ ctx[2] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"));

			if (/*animation*/ ctx[2] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[19].call(select1));
			attr(div1, "class", div1_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9");
			set_style(div1, "grid-row", "3 / 4");
			set_style(div1, "grid-column", "1 / 2");
			attr(label2, "for", "4");
			attr(label2, "class", "svelte-j1vmj9");
			attr(select2, "name", "flags.autoanimations.options.variant");
			attr(select2, "id", "4");
			select2.disabled = /*isCustom*/ ctx[5];

			attr(select2, "class", select2_class_value = "" + (null_to_empty(/*variant*/ ctx[3] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"));

			if (/*variant*/ ctx[3] === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[21].call(select2));
			attr(div2, "class", div2_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9");
			set_style(div2, "grid-row", "3 / 4");
			set_style(div2, "grid-column", "2 / 3");
			attr(label3, "for", "5");
			attr(label3, "class", "svelte-j1vmj9");
			attr(select3, "name", "flags.autoanimations.color");
			attr(select3, "id", "5");
			select3.disabled = /*isCustom*/ ctx[5];

			attr(select3, "class", select3_class_value = "" + (null_to_empty(/*color*/ ctx[4] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"));

			if (/*color*/ ctx[4] === void 0) add_render_callback(() => /*select3_change_handler*/ ctx[23].call(select3));
			attr(div3, "class", div3_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9");
			set_style(div3, "grid-row", "3 / 4");
			set_style(div3, "grid-column", "3 / 4");
			attr(div4, "class", "aa-3wide svelte-j1vmj9");
			attr(div5, "class", "aa-3wide svelte-j1vmj9");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div4);
			append(div4, div0);
			append(div0, label0);
			append(div0, t1);
			append(div0, select0);
			if (if_block0) if_block0.m(select0, null);
			select_option(select0, /*menuType*/ ctx[1]);
			append(div4, t2);
			if (if_block1) if_block1.m(div4, null);
			append(div4, t3);
			append(div4, div1);
			append(div1, label1);
			append(div1, t5);
			append(div1, select1);
			if (if_block2) if_block2.m(select1, null);
			select_option(select1, /*animation*/ ctx[2]);
			append(div4, t6);
			append(div4, div2);
			append(div2, label2);
			append(div2, t8);
			append(div2, select2);
			if (if_block3) if_block3.m(select2, null);
			select_option(select2, /*variant*/ ctx[3]);
			append(div4, t9);
			append(div4, div3);
			append(div3, label3);
			append(div3, t11);
			append(div3, select3);
			if (if_block4) if_block4.m(select3, null);
			select_option(select3, /*color*/ ctx[4]);
			append(div6, t12);
			mount_component(custompicker, div6, null);
			append(div6, t13);
			append(div6, div5);
			if (if_block5) if_block5.m(div5, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select0, "change", /*select0_change_handler*/ ctx[16]),
					listen(select0, "change", /*change_handler*/ ctx[17]),
					listen(select1, "change", /*select1_change_handler*/ ctx[19]),
					listen(select1, "change", /*change_handler_1*/ ctx[20]),
					listen(select2, "change", /*select2_change_handler*/ ctx[21]),
					listen(select2, "change", /*change_handler_2*/ ctx[22]),
					listen(select3, "change", /*select3_change_handler*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*animType*/ ctx[0] != "") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5$4(ctx);
					if_block0.c();
					if_block0.m(select0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*isCustom*/ 32) {
				select0.disabled = /*isCustom*/ ctx[5];
			}

			if (!current || dirty[0] & /*menuType, isCustom, menuSelection*/ 162 && select0_class_value !== (select0_class_value = "" + (null_to_empty(/*menuType*/ ctx[1] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"))) {
				attr(select0, "class", select0_class_value);
			}

			if (dirty[0] & /*menuType, menuSelection*/ 130) {
				select_option(select0, /*menuType*/ ctx[1]);
			}

			if (!current || dirty[0] & /*isCustom*/ 32 && div0_class_value !== (div0_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9")) {
				attr(div0, "class", div0_class_value);
			}

			if (/*animType*/ ctx[0] === "static" && /*flagPath*/ ctx[9] === "PrimaryAnimation") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*animType, flagPath*/ 513) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div4, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*menuType*/ ctx[1] != "") {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$5(ctx);
					if_block2.c();
					if_block2.m(select1, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!current || dirty[0] & /*isCustom*/ 32) {
				select1.disabled = /*isCustom*/ ctx[5];
			}

			if (!current || dirty[0] & /*animation, isCustom, menuSelection, menuType*/ 166 && select1_class_value !== (select1_class_value = "" + (null_to_empty(/*animation*/ ctx[2] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"))) {
				attr(select1, "class", select1_class_value);
			}

			if (dirty[0] & /*animation, menuSelection, menuType*/ 134) {
				select_option(select1, /*animation*/ ctx[2]);
			}

			if (!current || dirty[0] & /*isCustom*/ 32 && div1_class_value !== (div1_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9")) {
				attr(div1, "class", div1_class_value);
			}

			if (/*menuType*/ ctx[1] != "" & /*animation*/ ctx[2] != "") {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2$5(ctx);
					if_block3.c();
					if_block3.m(select2, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!current || dirty[0] & /*isCustom*/ 32) {
				select2.disabled = /*isCustom*/ ctx[5];
			}

			if (!current || dirty[0] & /*variant, isCustom, menuSelection, menuType, animation*/ 174 && select2_class_value !== (select2_class_value = "" + (null_to_empty(/*variant*/ ctx[3] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"))) {
				attr(select2, "class", select2_class_value);
			}

			if (dirty[0] & /*variant, menuSelection, menuType, animation*/ 142) {
				select_option(select2, /*variant*/ ctx[3]);
			}

			if (!current || dirty[0] & /*isCustom*/ 32 && div2_class_value !== (div2_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9")) {
				attr(div2, "class", div2_class_value);
			}

			if (/*menuType*/ ctx[1] != "" && /*animation*/ ctx[2] != "" && /*variant*/ ctx[3] != "") {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$9(ctx);
					if_block4.c();
					if_block4.m(select3, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (!current || dirty[0] & /*isCustom*/ 32) {
				select3.disabled = /*isCustom*/ ctx[5];
			}

			if (!current || dirty[0] & /*color, isCustom, menuSelection, menuType, animation, variant*/ 190 && select3_class_value !== (select3_class_value = "" + (null_to_empty(/*color*/ ctx[4] != "" && !/*isCustom*/ ctx[5]
			? "isPopulated"
			: "isNotPopulated") + " svelte-j1vmj9"))) {
				attr(select3, "class", select3_class_value);
			}

			if (dirty[0] & /*color, menuSelection, menuType, animation, variant*/ 158) {
				select_option(select3, /*color*/ ctx[4]);
			}

			if (!current || dirty[0] & /*isCustom*/ 32 && div3_class_value !== (div3_class_value = "flexcol " + (/*isCustom*/ ctx[5] ? 'aa-disabled' : '') + " svelte-j1vmj9")) {
				attr(div3, "class", div3_class_value);
			}

			const custompicker_changes = {};
			if (dirty[0] & /*flagPath*/ 512) custompicker_changes.flagPath = /*flagPath*/ ctx[9];
			if (dirty[0] & /*flagData*/ 256) custompicker_changes.flagData = /*flagData*/ ctx[8];

			if (!updating_isCustom && dirty[0] & /*isCustom*/ 32) {
				updating_isCustom = true;
				custompicker_changes.isCustom = /*isCustom*/ ctx[5];
				add_flush_callback(() => updating_isCustom = false);
			}

			if (!updating_customPath && dirty[0] & /*customPath*/ 64) {
				updating_customPath = true;
				custompicker_changes.customPath = /*customPath*/ ctx[6];
				add_flush_callback(() => updating_customPath = false);
			}

			custompicker.$set(custompicker_changes);

			if (/*animType*/ ctx[0] === "range" && /*isCustom*/ ctx[5] && /*flagPath*/ ctx[9] === "PrimaryAnimation") {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*animType, isCustom, flagPath*/ 545) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block$a(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(div5, null);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);

			add_render_callback(() => {
				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, true);
				div4_transition.run(1);
			});

			transition_in(custompicker.$$.fragment, local);
			transition_in(if_block5);

			add_render_callback(() => {
				if (!div6_transition) div6_transition = create_bidirectional_transition(div6, fade, {}, true);
				div6_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block1);
			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, false);
			div4_transition.run(0);
			transition_out(custompicker.$$.fragment, local);
			transition_out(if_block5);
			if (!div6_transition) div6_transition = create_bidirectional_transition(div6, fade, {}, false);
			div6_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (detaching && div4_transition) div4_transition.end();
			destroy_component(custompicker);
			if (if_block5) if_block5.d();
			if (detaching && div6_transition) div6_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	let { flagPath } = $$props;
	let { animType } = $$props;
	let { animTypeSwitched = false } = $$props;

	// Defines the initial Flag path depending on the Section calling this Component
	let rootPath;
	let flagOptions;

	switch (flagPath) {
		case "explosions":
			rootPath = flagData.explosions;
			flagOptions = flagData.explosions;
			break;
		case "PrimaryAnimation":
			rootPath = flagData;
			flagOptions = flagData.options;
			break;
		case "sourceExtraFX":
			rootPath = flagData.sourceToken;
			flagOptions = flagData.sourceToken;
			break;
		case "targetExtraFX":
			rootPath = flagData.targetToken;
			flagOptions = flagData.targetToken;
			break;
	}

	// Sets the Flag Path depending on the section
	const options = flagOptions;

	let { menuSelection = flagPath !== "PrimaryAnimation"
	? "static"
	: animType === "aura" ? "static" : animType } = $$props;

	let { menuType = options.menuType || Object.keys(aaTypeMenu[menuSelection])[0] } = $$props;
	let { animation = rootPath.animation || Object.keys(aaNameMenu[menuSelection][menuType])[0] } = $$props;
	let { variant = options.variant || Object.keys(aaVariantMenu[menuSelection][menuType][animation])[0] } = $$props;
	let { color = rootPath.color || Object.keys(aaColorMenu[menuSelection][menuType][animation][variant])[0] } = $$props;

	function animTypeChange() {
		if (flagPath !== "PrimaryAnimation") {
			return;
		}

		let menuSelection = flagPath !== "PrimaryAnimation"
		? "static"
		: animType === "aura" ? "static" : animType;

		$$invalidate(1, menuType = Object.keys(aaTypeMenu[menuSelection])[0]);
		$$invalidate(2, animation = Object.keys(aaNameMenu[menuSelection][menuType])[0]);
		$$invalidate(3, variant = Object.keys(aaVariantMenu[menuSelection][menuType][animation])[0]);
		$$invalidate(4, color = Object.keys(aaColorMenu[menuSelection][menuType][animation][variant])[0]);
	}

	let { isCustom } = $$props;
	let { customPath } = $$props;

	// Autopopulates Select Menus when they change
	async function menuTypeChange() {
		let newMenuType = menuType;
		$$invalidate(2, animation = Object.keys(aaNameMenu[menuSelection][newMenuType])[0]);
		$$invalidate(3, variant = Object.keys(aaVariantMenu[menuSelection][newMenuType][animation])[0]);
		$$invalidate(4, color = Object.keys(aaColorMenu[menuSelection][newMenuType][animation][variant])[0]);
	}

	async function animationChange() {
		let newAnimation = animation;
		$$invalidate(3, variant = Object.keys(aaVariantMenu[menuSelection][menuType][newAnimation])[0]);
		$$invalidate(4, color = Object.keys(aaColorMenu[menuSelection][menuType][newAnimation][variant])[0]);
	}

	async function variantChange() {
		let newVariant = variant;
		$$invalidate(4, color = Object.keys(aaColorMenu[menuSelection][menuType][animation][newVariant])[0]);
	}

	let onlyX = options.onlyX || false;

	// Handles the "Static Type" option for when On Token is selected
	let staticType = options.staticType || "source";

	function select0_change_handler() {
		menuType = select_value(this);
		$$invalidate(1, menuType);
		(($$invalidate(7, menuSelection), $$invalidate(9, flagPath)), $$invalidate(0, animType));
	}

	const change_handler = async () => await menuTypeChange();

	function select_change_handler() {
		staticType = select_value(this);
		$$invalidate(11, staticType);
	}

	function select1_change_handler() {
		animation = select_value(this);
		$$invalidate(2, animation);
		(($$invalidate(7, menuSelection), $$invalidate(9, flagPath)), $$invalidate(0, animType));
		$$invalidate(1, menuType);
	}

	const change_handler_1 = async () => await animationChange();

	function select2_change_handler() {
		variant = select_value(this);
		$$invalidate(3, variant);
		(($$invalidate(7, menuSelection), $$invalidate(9, flagPath)), $$invalidate(0, animType));
		$$invalidate(1, menuType);
		$$invalidate(2, animation);
	}

	const change_handler_2 = async () => await variantChange();

	function select3_change_handler() {
		color = select_value(this);
		$$invalidate(4, color);
		(($$invalidate(7, menuSelection), $$invalidate(9, flagPath)), $$invalidate(0, animType));
		$$invalidate(1, menuType);
		$$invalidate(2, animation);
		$$invalidate(3, variant);
	}

	function custompicker_isCustom_binding(value) {
		isCustom = value;
		$$invalidate(5, isCustom);
	}

	function custompicker_customPath_binding(value) {
		customPath = value;
		$$invalidate(6, customPath);
	}

	function input_change_handler() {
		onlyX = this.checked;
		$$invalidate(10, onlyX);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(8, flagData = $$props.flagData);
		if ('flagPath' in $$props) $$invalidate(9, flagPath = $$props.flagPath);
		if ('animType' in $$props) $$invalidate(0, animType = $$props.animType);
		if ('animTypeSwitched' in $$props) $$invalidate(15, animTypeSwitched = $$props.animTypeSwitched);
		if ('menuSelection' in $$props) $$invalidate(7, menuSelection = $$props.menuSelection);
		if ('menuType' in $$props) $$invalidate(1, menuType = $$props.menuType);
		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
		if ('color' in $$props) $$invalidate(4, color = $$props.color);
		if ('isCustom' in $$props) $$invalidate(5, isCustom = $$props.isCustom);
		if ('customPath' in $$props) $$invalidate(6, customPath = $$props.customPath);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*animType*/ 1) {
			{
				$$invalidate(0, animType);
			}
		}

		if ($$self.$$.dirty[0] & /*animTypeSwitched*/ 32768) {
			if (animTypeSwitched) {
				animTypeChange();
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, animType*/ 513) {
			$$invalidate(7, menuSelection = flagPath !== "PrimaryAnimation"
			? "static"
			: animType === "aura" ? "static" : animType);
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 2) {
			{
				$$invalidate(1, menuType);
			}
		}

		if ($$self.$$.dirty[0] & /*animation*/ 4) {
			{
				$$invalidate(2, animation);
			}
		}

		if ($$self.$$.dirty[0] & /*variant*/ 8) {
			{
				$$invalidate(3, variant);
			}
		}

		if ($$self.$$.dirty[0] & /*color*/ 16) {
			{
				$$invalidate(4, color);
			}
		}

		if ($$self.$$.dirty[0] & /*isCustom*/ 32) {
			$$invalidate(5, isCustom);
		}

		if ($$self.$$.dirty[0] & /*customPath*/ 64) {
			$$invalidate(6, customPath);
		}

		if ($$self.$$.dirty[0] & /*onlyX*/ 1024) {
			{
				$$invalidate(10, onlyX);
				options.onlyX = onlyX;
			}
		}

		if ($$self.$$.dirty[0] & /*staticType*/ 2048) {
			{
				$$invalidate(11, staticType);
				options.staticType = staticType;
			}
		}
	};

	return [
		animType,
		menuType,
		animation,
		variant,
		color,
		isCustom,
		customPath,
		menuSelection,
		flagData,
		flagPath,
		onlyX,
		staticType,
		menuTypeChange,
		animationChange,
		variantChange,
		animTypeSwitched,
		select0_change_handler,
		change_handler,
		select_change_handler,
		select1_change_handler,
		change_handler_1,
		select2_change_handler,
		change_handler_2,
		select3_change_handler,
		custompicker_isCustom_binding,
		custompicker_customPath_binding,
		input_change_handler
	];
}

class ChooseAnimation extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$h,
			create_fragment$h,
			safe_not_equal,
			{
				flagData: 8,
				flagPath: 9,
				animType: 0,
				animTypeSwitched: 15,
				menuSelection: 7,
				menuType: 1,
				animation: 2,
				variant: 3,
				color: 4,
				isCustom: 5,
				customPath: 6
			},
			null,
			[-1, -1]
		);
	}

	get flagData() {
		return this.$$.ctx[8];
	}

	set flagData(flagData) {
		this.$$set({ flagData });
		flush();
	}

	get flagPath() {
		return this.$$.ctx[9];
	}

	set flagPath(flagPath) {
		this.$$set({ flagPath });
		flush();
	}

	get animType() {
		return this.$$.ctx[0];
	}

	set animType(animType) {
		this.$$set({ animType });
		flush();
	}

	get animTypeSwitched() {
		return this.$$.ctx[15];
	}

	set animTypeSwitched(animTypeSwitched) {
		this.$$set({ animTypeSwitched });
		flush();
	}

	get menuSelection() {
		return this.$$.ctx[7];
	}

	set menuSelection(menuSelection) {
		this.$$set({ menuSelection });
		flush();
	}

	get menuType() {
		return this.$$.ctx[1];
	}

	set menuType(menuType) {
		this.$$set({ menuType });
		flush();
	}

	get animation() {
		return this.$$.ctx[2];
	}

	set animation(animation) {
		this.$$set({ animation });
		flush();
	}

	get variant() {
		return this.$$.ctx[3];
	}

	set variant(variant) {
		this.$$set({ variant });
		flush();
	}

	get color() {
		return this.$$.ctx[4];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get isCustom() {
		return this.$$.ctx[5];
	}

	set isCustom(isCustom) {
		this.$$set({ isCustom });
		flush();
	}

	get customPath() {
		return this.$$.ctx[6];
	}

	set customPath(customPath) {
		this.$$set({ customPath });
		flush();
	}
}

/* src\formApps\ItemMenu\components\soundSettings.svelte generated by Svelte v3.47.0 */

function create_if_block_1$8(ctx) {
	let div;
	let i;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			i = element("i");
			attr(i, "class", "fas fa-music aa-video-preview");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "1/2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, i);

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler*/ ctx[10]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (80:4) {#if soundEnabled}
function create_if_block$9(ctx) {
	let div1;
	let div0;
	let input0;
	let input0_class_value;
	let t0;
	let button;
	let i;
	let button_class_value;
	let div1_class_value;
	let div1_transition;
	let t1;
	let div5;
	let div2;
	let label0;
	let t5;
	let input1;
	let t6;
	let div3;
	let label1;
	let t8;
	let input2;
	let t9;
	let div4;
	let label2;
	let t11;
	let input3;
	let div5_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			button = element("button");
			i = element("i");
			t1 = space();
			div5 = element("div");
			div2 = element("div");
			label0 = element("label");

			label0.textContent = `${localize("AUTOANIM.start")} 
                    ${localize("AUTOANIM.time")}`;

			t5 = space();
			input1 = element("input");
			t6 = space();
			div3 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.volume")}`;
			t8 = space();
			input2 = element("input");
			t9 = space();
			div4 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.delay")}`;
			t11 = space();
			input3 = element("input");
			attr(input0, "type", "text");

			attr(input0, "class", input0_class_value = "" + (null_to_empty(/*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-10uyrn6"));

			attr(i, "class", "fas fa-file-import fa-fw");

			attr(button, "class", button_class_value = "file-picker " + (/*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4] != ''
			? 'isPopulated'
			: 'isNotPopulated') + " svelte-10uyrn6");

			attr(div0, "class", "form-group");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "2/5");
			set_style(div0, "margin-right", "10%");
			set_style(div0, "margin-left", "10%");
			attr(div1, "class", div1_class_value = "aa-customAnim-container " + (!/*soundEnabled*/ ctx[0] ? 'opacityBorder' : '') + " svelte-10uyrn6");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-10uyrn6");
			attr(input1, "type", "Number");
			attr(input1, "placeholder", "0");
			attr(input1, "step", "0.01");
			attr(input1, "class", "svelte-10uyrn6");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "3 / 4");
			set_style(div2, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-10uyrn6");
			attr(input2, "type", "Number");
			attr(input2, "placeholder", "0.5");
			attr(input2, "step", "0.01");
			attr(input2, "class", "svelte-10uyrn6");
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "3 / 4");
			set_style(div3, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-10uyrn6");
			attr(input3, "type", "Number");
			attr(input3, "placeholder", "0");
			attr(input3, "step", "0.01");
			attr(input3, "class", "svelte-10uyrn6");
			attr(div4, "class", "flexcol");
			set_style(div4, "grid-row", "3 / 4");
			set_style(div4, "grid-column", "3 / 4");
			attr(div5, "class", "aa-3wide svelte-10uyrn6");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, input0);
			set_input_value(input0, /*soundPath*/ ctx[4]);
			append(div0, t0);
			append(div0, button);
			append(button, i);
			insert(target, t1, anchor);
			insert(target, div5, anchor);
			append(div5, div2);
			append(div2, label0);
			append(div2, t5);
			append(div2, input1);
			set_input_value(input1, /*startTime*/ ctx[1]);
			append(div5, t6);
			append(div5, div3);
			append(div3, label1);
			append(div3, t8);
			append(div3, input2);
			set_input_value(input2, /*volume*/ ctx[2]);
			append(div5, t9);
			append(div5, div4);
			append(div4, label2);
			append(div4, t11);
			append(div4, input3);
			set_input_value(input3, /*delay*/ ctx[3]);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[12]),
					listen(button, "click", prevent_default(/*click_handler_2*/ ctx[13])),
					listen(input1, "input", /*input1_input_handler*/ ctx[14]),
					listen(input2, "input", /*input2_input_handler*/ ctx[15]),
					listen(input3, "input", /*input3_input_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*soundEnabled, soundPath*/ 17 && input0_class_value !== (input0_class_value = "" + (null_to_empty(/*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-10uyrn6"))) {
				attr(input0, "class", input0_class_value);
			}

			if (dirty & /*soundPath*/ 16 && input0.value !== /*soundPath*/ ctx[4]) {
				set_input_value(input0, /*soundPath*/ ctx[4]);
			}

			if (!current || dirty & /*soundEnabled, soundPath*/ 17 && button_class_value !== (button_class_value = "file-picker " + (/*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4] != ''
			? 'isPopulated'
			: 'isNotPopulated') + " svelte-10uyrn6")) {
				attr(button, "class", button_class_value);
			}

			if (!current || dirty & /*soundEnabled*/ 1 && div1_class_value !== (div1_class_value = "aa-customAnim-container " + (!/*soundEnabled*/ ctx[0] ? 'opacityBorder' : '') + " svelte-10uyrn6")) {
				attr(div1, "class", div1_class_value);
			}

			if (dirty & /*startTime*/ 2) {
				set_input_value(input1, /*startTime*/ ctx[1]);
			}

			if (dirty & /*volume*/ 4) {
				set_input_value(input2, /*volume*/ ctx[2]);
			}

			if (dirty & /*delay*/ 8) {
				set_input_value(input3, /*delay*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			add_render_callback(() => {
				if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, {}, true);
				div5_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, {}, false);
			div5_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && div1_transition) div1_transition.end();
			if (detaching) detach(t1);
			if (detaching) detach(div5);
			if (detaching && div5_transition) div5_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$g(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let label;
	let t1;
	let t2;
	let div1;
	let i;
	let i_class_value;
	let t3;
	let div4_transition;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4] && create_if_block_1$8(ctx);
	let if_block1 = /*soundEnabled*/ ctx[0] && create_if_block$9(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.sound")}`;
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div1 = element("div");
			i = element("i");
			t3 = space();
			if (if_block1) if_block1.c();
			attr(label, "for", "");
			attr(label, "class", "svelte-10uyrn6");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "3/4");

			attr(i, "class", i_class_value = "" + (null_to_empty(/*soundEnabled*/ ctx[0]
			? "fas fa-minus aa-red"
			: "fas fa-plus aa-green") + " svelte-10uyrn6"));

			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1/2");
			set_style(div1, "grid-column", "5/6");
			attr(div2, "class", "aa-header svelte-10uyrn6");
			attr(div3, "class", "aa-header-section svelte-10uyrn6");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, label);
			append(div2, t1);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t2);
			append(div2, div1);
			append(div1, i);
			append(div4, t3);
			if (if_block1) if_block1.m(div4, null);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler_1*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*soundEnabled*/ ctx[0] && /*soundPath*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$8(ctx);
					if_block0.c();
					if_block0.m(div2, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty & /*soundEnabled*/ 1 && i_class_value !== (i_class_value = "" + (null_to_empty(/*soundEnabled*/ ctx[0]
			? "fas fa-minus aa-red"
			: "fas fa-plus aa-green") + " svelte-10uyrn6"))) {
				attr(i, "class", i_class_value);
			}

			if (/*soundEnabled*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*soundEnabled*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$9(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div4, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);

			add_render_callback(() => {
				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, true);
				div4_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block1);
			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, false);
			div4_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching && div4_transition) div4_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	let { audioPath } = $$props;

	flagData.audio[audioPath]
	? flagData.audio[audioPath]
	: flagData.audio[audioPath] = {};

	let section01 = flagData.audio[audioPath];
	let soundEnabled = section01.enable || false;

	function enableSound() {
		$$invalidate(0, soundEnabled = !soundEnabled);
	}

	let startTime = section01.startTime;
	let volume = section01.volume;
	let delay = section01.delay;
	let soundPath = section01.file || "";

	async function selectCustom() {
		const current = soundPath;

		const picker = new FilePicker({
				type: "audio",
				current,
				callback: path => {
					$$invalidate(4, soundPath = path);
				}
			});

		setTimeout(
			() => {
				picker.element[0].style.zIndex = `${Number.MAX_SAFE_INTEGER}`;
			},
			100
		);

		await picker.browse(current);
	}

	function playSound() {
		AudioHelper.play(
			{
				src: soundPath,
				volume,
				autoplay: true,
				loop: false
			},
			true
		);
	}

	const click_handler = () => playSound();
	const click_handler_1 = () => enableSound();

	function input0_input_handler() {
		soundPath = this.value;
		$$invalidate(4, soundPath);
	}

	const click_handler_2 = () => selectCustom();

	function input1_input_handler() {
		startTime = this.value;
		$$invalidate(1, startTime);
	}

	function input2_input_handler() {
		volume = this.value;
		$$invalidate(2, volume);
	}

	function input3_input_handler() {
		delay = this.value;
		$$invalidate(3, delay);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(8, flagData = $$props.flagData);
		if ('audioPath' in $$props) $$invalidate(9, audioPath = $$props.audioPath);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*soundEnabled*/ 1) {
			{
				$$invalidate(0, soundEnabled);
				section01.enable = soundEnabled;
			}
		}

		if ($$self.$$.dirty & /*soundEnabled*/ 1) {
			section01.enable = soundEnabled;
		}

		if ($$self.$$.dirty & /*startTime*/ 2) {
			$$invalidate(1, startTime);
		}

		if ($$self.$$.dirty & /*startTime*/ 2) {
			section01.startTime = startTime;
		}

		if ($$self.$$.dirty & /*volume*/ 4) {
			$$invalidate(2, volume);
		}

		if ($$self.$$.dirty & /*volume*/ 4) {
			section01.volume = volume;
		}

		if ($$self.$$.dirty & /*delay*/ 8) {
			$$invalidate(3, delay);
		}

		if ($$self.$$.dirty & /*delay*/ 8) {
			section01.delay = delay;
		}

		if ($$self.$$.dirty & /*soundPath*/ 16) {
			$$invalidate(4, soundPath);
		}

		if ($$self.$$.dirty & /*soundPath*/ 16) {
			section01.file = soundPath;
		}
	};

	return [
		soundEnabled,
		startTime,
		volume,
		delay,
		soundPath,
		enableSound,
		selectCustom,
		playSound,
		flagData,
		audioPath,
		click_handler,
		click_handler_1,
		input0_input_handler,
		click_handler_2,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler
	];
}

class SoundSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { flagData: 8, audioPath: 9 });
	}
}

/* src\formApps\ItemMenu\components\explosions.svelte generated by Svelte v3.47.0 */

function create_if_block_1$7(ctx) {
	let div;
	let i;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			i = element("i");
			attr(i, "class", "fas fa-video aa-video-preview");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "1/2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, i);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler*/ ctx[16]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

// (125:4) {#if enableSection}
function create_if_block$8(ctx) {
	let chooseanimation;
	let updating_menuType;
	let updating_animation;
	let updating_variant;
	let updating_color;
	let updating_isCustom;
	let updating_customPath;
	let t0;
	let h2;
	let h2_transition;
	let t2;
	let div3;
	let div0;
	let label0;
	let t4;
	let input0;
	let t5;
	let div1;
	let label1;
	let t7;
	let input1;
	let t8;
	let div2;
	let label2;
	let t10;
	let button;
	let t11;
	let div3_transition;
	let t12;
	let soundsettings;
	let current;
	let mounted;
	let dispose;

	function chooseanimation_menuType_binding(value) {
		/*chooseanimation_menuType_binding*/ ctx[18](value);
	}

	function chooseanimation_animation_binding(value) {
		/*chooseanimation_animation_binding*/ ctx[19](value);
	}

	function chooseanimation_variant_binding(value) {
		/*chooseanimation_variant_binding*/ ctx[20](value);
	}

	function chooseanimation_color_binding(value) {
		/*chooseanimation_color_binding*/ ctx[21](value);
	}

	function chooseanimation_isCustom_binding(value) {
		/*chooseanimation_isCustom_binding*/ ctx[22](value);
	}

	function chooseanimation_customPath_binding(value) {
		/*chooseanimation_customPath_binding*/ ctx[23](value);
	}

	let chooseanimation_props = {
		previewType: "explosion",
		flagPath: "explosions",
		flagData: /*flagData*/ ctx[0]
	};

	if (/*menuType*/ ctx[4] !== void 0) {
		chooseanimation_props.menuType = /*menuType*/ ctx[4];
	}

	if (/*animation*/ ctx[5] !== void 0) {
		chooseanimation_props.animation = /*animation*/ ctx[5];
	}

	if (/*variant*/ ctx[6] !== void 0) {
		chooseanimation_props.variant = /*variant*/ ctx[6];
	}

	if (/*color*/ ctx[7] !== void 0) {
		chooseanimation_props.color = /*color*/ ctx[7];
	}

	if (/*isCustom*/ ctx[8] !== void 0) {
		chooseanimation_props.isCustom = /*isCustom*/ ctx[8];
	}

	if (/*customPath*/ ctx[9] !== void 0) {
		chooseanimation_props.customPath = /*customPath*/ ctx[9];
	}

	chooseanimation = new ChooseAnimation({ props: chooseanimation_props });
	binding_callbacks.push(() => bind(chooseanimation, 'menuType', chooseanimation_menuType_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'animation', chooseanimation_animation_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'variant', chooseanimation_variant_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'color', chooseanimation_color_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'isCustom', chooseanimation_isCustom_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'customPath', chooseanimation_customPath_binding));

	soundsettings = new SoundSettings({
			props: {
				audioPath: "e01",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(chooseanimation.$$.fragment);
			t0 = space();
			h2 = element("h2");
			h2.textContent = "Options";
			t2 = space();
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.radius")}`;
			t4 = space();
			input0 = element("input");
			t5 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.delayMS")}`;
			t7 = space();
			input1 = element("input");
			t8 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Z-Index";
			t10 = space();
			button = element("button");
			t11 = text(/*aboveBelow*/ ctx[10]);
			t12 = space();
			create_component(soundsettings.$$.fragment);
			attr(h2, "class", "svelte-qam8l3");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-qam8l3");
			attr(input0, "type", "Number");
			attr(input0, "placeholder", "1.5");
			attr(input0, "class", "svelte-qam8l3");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 3");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-qam8l3");
			attr(input1, "type", "Number");
			attr(input1, "placeholder", "1");
			attr(input1, "class", "svelte-qam8l3");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "3 / 4");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-qam8l3");
			attr(button, "class", "oldCheck svelte-qam8l3");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "4 / 5");
			attr(div3, "class", "aa-3wide svelte-qam8l3");
		},
		m(target, anchor) {
			mount_component(chooseanimation, target, anchor);
			insert(target, t0, anchor);
			insert(target, h2, anchor);
			insert(target, t2, anchor);
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, label0);
			append(div0, t4);
			append(div0, input0);
			set_input_value(input0, /*radius*/ ctx[1]);
			append(div3, t5);
			append(div3, div1);
			append(div1, label1);
			append(div1, t7);
			append(div1, input1);
			set_input_value(input1, /*delay*/ ctx[2]);
			append(div3, t8);
			append(div3, div2);
			append(div2, label2);
			append(div2, t10);
			append(div2, button);
			append(button, t11);
			insert(target, t12, anchor);
			mount_component(soundsettings, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[24]),
					listen(input1, "input", /*input1_input_handler*/ ctx[25]),
					listen(button, "click", /*click_handler_2*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const chooseanimation_changes = {};
			if (dirty & /*flagData*/ 1) chooseanimation_changes.flagData = /*flagData*/ ctx[0];

			if (!updating_menuType && dirty & /*menuType*/ 16) {
				updating_menuType = true;
				chooseanimation_changes.menuType = /*menuType*/ ctx[4];
				add_flush_callback(() => updating_menuType = false);
			}

			if (!updating_animation && dirty & /*animation*/ 32) {
				updating_animation = true;
				chooseanimation_changes.animation = /*animation*/ ctx[5];
				add_flush_callback(() => updating_animation = false);
			}

			if (!updating_variant && dirty & /*variant*/ 64) {
				updating_variant = true;
				chooseanimation_changes.variant = /*variant*/ ctx[6];
				add_flush_callback(() => updating_variant = false);
			}

			if (!updating_color && dirty & /*color*/ 128) {
				updating_color = true;
				chooseanimation_changes.color = /*color*/ ctx[7];
				add_flush_callback(() => updating_color = false);
			}

			if (!updating_isCustom && dirty & /*isCustom*/ 256) {
				updating_isCustom = true;
				chooseanimation_changes.isCustom = /*isCustom*/ ctx[8];
				add_flush_callback(() => updating_isCustom = false);
			}

			if (!updating_customPath && dirty & /*customPath*/ 512) {
				updating_customPath = true;
				chooseanimation_changes.customPath = /*customPath*/ ctx[9];
				add_flush_callback(() => updating_customPath = false);
			}

			chooseanimation.$set(chooseanimation_changes);

			if (dirty & /*radius*/ 2) {
				set_input_value(input0, /*radius*/ ctx[1]);
			}

			if (dirty & /*delay*/ 4) {
				set_input_value(input1, /*delay*/ ctx[2]);
			}

			if (!current || dirty & /*aboveBelow*/ 1024) set_data(t11, /*aboveBelow*/ ctx[10]);
			const soundsettings_changes = {};
			if (dirty & /*flagData*/ 1) soundsettings_changes.flagData = /*flagData*/ ctx[0];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(chooseanimation.$$.fragment, local);

			add_render_callback(() => {
				if (!h2_transition) h2_transition = create_bidirectional_transition(h2, fade, {}, true);
				h2_transition.run(1);
			});

			add_render_callback(() => {
				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, fade, {}, true);
				div3_transition.run(1);
			});

			transition_in(soundsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chooseanimation.$$.fragment, local);
			if (!h2_transition) h2_transition = create_bidirectional_transition(h2, fade, {}, false);
			h2_transition.run(0);
			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, fade, {}, false);
			div3_transition.run(0);
			transition_out(soundsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(chooseanimation, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(h2);
			if (detaching && h2_transition) h2_transition.end();
			if (detaching) detach(t2);
			if (detaching) detach(div3);
			if (detaching && div3_transition) div3_transition.end();
			if (detaching) detach(t12);
			destroy_component(soundsettings, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$f(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let t1;
	let t2;
	let div1;
	let i;
	let i_class_value;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*enableSection*/ ctx[3] && create_if_block_1$7(ctx);
	let if_block1 = /*enableSection*/ ctx[3] && create_if_block$8(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.innerHTML = `<label for="">Boom</label>`;
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div1 = element("div");
			i = element("i");
			t3 = space();
			if (if_block1) if_block1.c();
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "3/4");

			attr(i, "class", i_class_value = "" + ((/*enableSection*/ ctx[3]
			? 'fas fa-minus aa-red'
			: 'fas fa-plus aa-green') + " aaCenterToggle"));

			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1/2");
			set_style(div1, "grid-column", "5/6");
			attr(div2, "class", "aa-header");
			attr(div3, "class", "aa-header-section");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div2, t1);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t2);
			append(div2, div1);
			append(div1, i);
			append(div4, t3);
			if (if_block1) if_block1.m(div4, null);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler_1*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*enableSection*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*enableSection*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$7(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*enableSection*/ 8 && i_class_value !== (i_class_value = "" + ((/*enableSection*/ ctx[3]
			? 'fas fa-minus aa-red'
			: 'fas fa-plus aa-green') + " aaCenterToggle"))) {
				attr(i, "class", i_class_value);
			}

			if (/*enableSection*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*enableSection*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$8(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div4, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	let aboveBelow;
	let { flagData } = $$props;
	const root = flagData.explosions;
	let explosions = flagData.explosions;
	let radius = explosions.radius;
	let delay = explosions.delay;
	let belowToken = explosions.below;

	function below() {
		$$invalidate(14, belowToken = !belowToken);
	}

	let enableSection = root.enable || false;

	function switchEnable() {
		$$invalidate(3, enableSection = !enableSection);
		root.enable = enableSection;
	}

	let menuType = root.menuType;
	let animation = root.animation;
	let variant = root.variant;
	let color = root.color;
	let isCustom = root.enableCustom || false;
	let customPath = root.customPath;

	function onClick() {
		new TJSDialog({
				modal: false,
				draggable: true,
				resizable: true,
				title: "Explosion Preview",
				stylesContent: { background: "rgba(125, 125, 125, 0.75)" },
				content: { class: ExplosionApp }
			}).render(true);
	}

	let explosionFilePath = color === "random"
	? `autoanimations.static.${menuType}.${animation}.${variant}`
	: `autoanimations.static.${menuType}.${animation}.${variant}.${color}`;

	const click_handler = () => onClick();
	const click_handler_1 = () => switchEnable();

	function chooseanimation_menuType_binding(value) {
		menuType = value;
		$$invalidate(4, menuType);
	}

	function chooseanimation_animation_binding(value) {
		animation = value;
		$$invalidate(5, animation);
	}

	function chooseanimation_variant_binding(value) {
		variant = value;
		$$invalidate(6, variant);
	}

	function chooseanimation_color_binding(value) {
		color = value;
		$$invalidate(7, color);
	}

	function chooseanimation_isCustom_binding(value) {
		isCustom = value;
		$$invalidate(8, isCustom);
	}

	function chooseanimation_customPath_binding(value) {
		customPath = value;
		$$invalidate(9, customPath);
	}

	function input0_input_handler() {
		radius = this.value;
		$$invalidate(1, radius);
	}

	function input1_input_handler() {
		delay = this.value;
		$$invalidate(2, delay);
	}

	const click_handler_2 = () => below();

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*radius*/ 2) {
			{
				$$invalidate(1, radius);
				explosions.radius = radius;
			}
		}

		if ($$self.$$.dirty & /*delay*/ 4) {
			{
				$$invalidate(2, delay);
				explosions.delay = delay;
			}
		}

		if ($$self.$$.dirty & /*belowToken*/ 16384) {
			{
				$$invalidate(14, belowToken);
				explosions.below = belowToken;
			}
		}

		if ($$self.$$.dirty & /*belowToken*/ 16384) {
			$$invalidate(10, aboveBelow = belowToken ? "Below Token" : "Above Token");
		}

		if ($$self.$$.dirty & /*enableSection*/ 8) {
			$$invalidate(3, enableSection);
		}

		if ($$self.$$.dirty & /*menuType*/ 16) {
			$$invalidate(4, menuType = root.menuType = menuType);
		}

		if ($$self.$$.dirty & /*animation*/ 32) {
			$$invalidate(5, animation = root.animation = animation);
		}

		if ($$self.$$.dirty & /*variant*/ 64) {
			$$invalidate(6, variant = root.variant = variant);
		}

		if ($$self.$$.dirty & /*color*/ 128) {
			$$invalidate(7, color = root.color = color);
		}

		if ($$self.$$.dirty & /*isCustom*/ 256) {
			$$invalidate(8, isCustom);
		}

		if ($$self.$$.dirty & /*customPath*/ 512) {
			$$invalidate(9, customPath);
		}

		if ($$self.$$.dirty & /*color, menuType, animation, variant*/ 240) {
			$$invalidate(15, explosionFilePath = color === "random"
			? `autoanimations.static.${menuType}.${animation}.${variant}`
			: `autoanimations.static.${menuType}.${animation}.${variant}.${color}`);
		}

		if ($$self.$$.dirty & /*explosionFilePath, customPath, isCustom*/ 33536) {
			{
				menuDBPath02.set(explosionFilePath);
				customFilePath02.set(customPath);
				customChecked02.set(isCustom);
			}
		}
	};

	return [
		flagData,
		radius,
		delay,
		enableSection,
		menuType,
		animation,
		variant,
		color,
		isCustom,
		customPath,
		aboveBelow,
		below,
		switchEnable,
		onClick,
		belowToken,
		explosionFilePath,
		click_handler,
		click_handler_1,
		chooseanimation_menuType_binding,
		chooseanimation_animation_binding,
		chooseanimation_variant_binding,
		chooseanimation_color_binding,
		chooseanimation_isCustom_binding,
		chooseanimation_customPath_binding,
		input0_input_handler,
		input1_input_handler,
		click_handler_2
	];
}

class Explosions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { flagData: 0 });
	}
}

/* src\formApps\ItemMenu\components\generalSettings.svelte generated by Svelte v3.47.0 */

function create_if_block$7(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1_value = localize("AUTOANIM.add") + "";
	let t1;
	let t2;
	let t3_value = localize("AUTOANIM.macro") + "";
	let t3;
	let label_class_value;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			attr(input, "type", "checkbox");
			attr(input, "id", "addMacro");
			input.hidden = true;
			attr(input, "class", "svelte-1s8zwsq");
			attr(label, "for", "addMacro");
			attr(label, "class", label_class_value = "" + (null_to_empty(/*enableMacro*/ ctx[2] ? "selected" : "notSelected") + " svelte-1s8zwsq"));
			set_style(label, "border", "2px ridge rgb(172, 172, 172, .47)");
			attr(div, "class", "flexcol button-labels svelte-1s8zwsq");
			set_style(div, "grid-row", "1 / 2");
			set_style(div, "grid-column", "1 / 2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			input.checked = /*enableMacro*/ ctx[2];
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(label, t2);
			append(label, t3);
			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[8]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*enableMacro*/ 4) {
				input.checked = /*enableMacro*/ ctx[2];
			}

			if (!current || dirty & /*enableMacro*/ 4 && label_class_value !== (label_class_value = "" + (null_to_empty(/*enableMacro*/ ctx[2] ? "selected" : "notSelected") + " svelte-1s8zwsq"))) {
				attr(label, "class", label_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$e(ctx) {
	let div4;
	let t0;
	let div0;
	let input0;
	let t1;
	let label0;
	let t2;
	let label0_class_value;
	let div0_transition;
	let t3;
	let div1;
	let input1;
	let input1_disabled_value;
	let t4;
	let label1;
	let t5_value = localize("AUTOANIM.customize") + "";
	let t5;
	let label1_class_value;
	let div1_class_value;
	let div1_transition;
	let t6;
	let div2;
	let input2;
	let input2_disabled_value;
	let t7;
	let label2;
	let t8;
	let label2_class_value;
	let div2_class_value;
	let div2_transition;
	let t9;
	let div3;
	let input3;
	let input3_disabled_value;
	let t10;
	let label3;
	let t11;
	let label3_class_value;
	let div3_class_value;
	let div3_transition;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0]) && create_if_block$7(ctx);

	return {
		c() {
			div4 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			input0 = element("input");
			t1 = space();
			label0 = element("label");
			t2 = text(/*disabledLabel*/ ctx[3]);
			t3 = space();
			div1 = element("div");
			input1 = element("input");
			t4 = space();
			label1 = element("label");
			t5 = text(t5_value);
			t6 = space();
			div2 = element("div");
			input2 = element("input");
			t7 = space();
			label2 = element("label");
			t8 = text("Override Autorec");
			t9 = space();
			div3 = element("div");
			input3 = element("input");
			t10 = space();
			label3 = element("label");
			t11 = text("Animate from Ammo");
			attr(input0, "type", "checkbox");
			attr(input0, "id", "killAnim");
			input0.hidden = true;
			attr(input0, "class", "svelte-1s8zwsq");
			attr(label0, "for", "killAnim");

			attr(label0, "class", label0_class_value = "" + (null_to_empty(!/*animationDisabled*/ ctx[0]
			? "selected"
			: "notSelected") + " svelte-1s8zwsq"));

			set_style(label0, "border", "2px ridge rgb(172, 172, 172, .47)");
			attr(div0, "class", "flexcol button-labels svelte-1s8zwsq");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "2 / 3");
			attr(input1, "type", "checkbox");
			attr(input1, "id", "override");
			input1.hidden = true;
			input1.disabled = input1_disabled_value = /*overrideAuto*/ ctx[4] || /*animationDisabled*/ ctx[0];
			attr(input1, "class", "svelte-1s8zwsq");
			attr(label1, "for", "override");
			attr(label1, "class", label1_class_value = "" + (null_to_empty(/*isCustomized*/ ctx[1] ? "selected" : "notSelected") + " svelte-1s8zwsq"));

			attr(div1, "class", div1_class_value = "flexcol button-labels " + (/*overrideAuto*/ ctx[4] || /*animationDisabled*/ ctx[0]
			? 'aa-disabled'
			: '') + " svelte-1s8zwsq");

			set_style(div1, "grid-row", "2 / 3");
			set_style(div1, "grid-column", "1 / 2");
			attr(input2, "type", "checkbox");
			attr(input2, "id", "overrideAuto");
			input2.hidden = true;
			input2.disabled = input2_disabled_value = /*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0];
			attr(input2, "class", "svelte-1s8zwsq");
			attr(label2, "for", "overrideAuto");
			attr(label2, "class", label2_class_value = "" + (null_to_empty(/*overrideAuto*/ ctx[4] ? "selected" : "notSelected") + " svelte-1s8zwsq"));

			attr(div2, "class", div2_class_value = "flexcol button-labels " + (/*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0]
			? 'aa-disabled'
			: '') + " svelte-1s8zwsq");

			set_style(div2, "grid-row", "2 / 3");
			set_style(div2, "grid-column", "2 / 3");
			attr(input3, "type", "checkbox");
			attr(input3, "id", "fromAmmo");
			input3.hidden = true;
			input3.disabled = input3_disabled_value = /*gameSystem*/ ctx[6] !== "dnd5e" || /*animationDisabled*/ ctx[0];
			attr(input3, "class", "svelte-1s8zwsq");
			attr(label3, "for", "fromAmmo");
			attr(label3, "class", label3_class_value = "" + (null_to_empty(/*fromAmmo*/ ctx[5] ? "selected" : "notSelected") + " svelte-1s8zwsq"));

			attr(div3, "class", div3_class_value = "flexcol button-labels " + (/*gameSystem*/ ctx[6] === 'dnd5e' && !/*animationDisabled*/ ctx[0]
			? ''
			: 'aa-disabled') + " svelte-1s8zwsq");

			set_style(div3, "grid-row", "2 / 3");
			set_style(div3, "grid-column", "3 / 4");
			attr(div4, "class", "aa-general-settings svelte-1s8zwsq");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			if (if_block) if_block.m(div4, null);
			append(div4, t0);
			append(div4, div0);
			append(div0, input0);
			input0.checked = /*animationDisabled*/ ctx[0];
			append(div0, t1);
			append(div0, label0);
			append(label0, t2);
			append(div4, t3);
			append(div4, div1);
			append(div1, input1);
			input1.checked = /*isCustomized*/ ctx[1];
			append(div1, t4);
			append(div1, label1);
			append(label1, t5);
			append(div4, t6);
			append(div4, div2);
			append(div2, input2);
			input2.checked = /*overrideAuto*/ ctx[4];
			append(div2, t7);
			append(div2, label2);
			append(label2, t8);
			append(div4, t9);
			append(div4, div3);
			append(div3, input3);
			input3.checked = /*fromAmmo*/ ctx[5];
			append(div3, t10);
			append(div3, label3);
			append(label3, t11);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[9]),
					listen(input1, "change", /*input1_change_handler*/ ctx[10]),
					listen(input2, "change", /*input2_change_handler*/ ctx[11]),
					listen(input3, "change", /*input3_change_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isCustomized, animationDisabled*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div4, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*animationDisabled*/ 1) {
				input0.checked = /*animationDisabled*/ ctx[0];
			}

			if (!current || dirty & /*disabledLabel*/ 8) set_data(t2, /*disabledLabel*/ ctx[3]);

			if (!current || dirty & /*animationDisabled*/ 1 && label0_class_value !== (label0_class_value = "" + (null_to_empty(!/*animationDisabled*/ ctx[0]
			? "selected"
			: "notSelected") + " svelte-1s8zwsq"))) {
				attr(label0, "class", label0_class_value);
			}

			if (!current || dirty & /*overrideAuto, animationDisabled*/ 17 && input1_disabled_value !== (input1_disabled_value = /*overrideAuto*/ ctx[4] || /*animationDisabled*/ ctx[0])) {
				input1.disabled = input1_disabled_value;
			}

			if (dirty & /*isCustomized*/ 2) {
				input1.checked = /*isCustomized*/ ctx[1];
			}

			if (!current || dirty & /*isCustomized*/ 2 && label1_class_value !== (label1_class_value = "" + (null_to_empty(/*isCustomized*/ ctx[1] ? "selected" : "notSelected") + " svelte-1s8zwsq"))) {
				attr(label1, "class", label1_class_value);
			}

			if (!current || dirty & /*overrideAuto, animationDisabled*/ 17 && div1_class_value !== (div1_class_value = "flexcol button-labels " + (/*overrideAuto*/ ctx[4] || /*animationDisabled*/ ctx[0]
			? 'aa-disabled'
			: '') + " svelte-1s8zwsq")) {
				attr(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*isCustomized, animationDisabled*/ 3 && input2_disabled_value !== (input2_disabled_value = /*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0])) {
				input2.disabled = input2_disabled_value;
			}

			if (dirty & /*overrideAuto*/ 16) {
				input2.checked = /*overrideAuto*/ ctx[4];
			}

			if (!current || dirty & /*overrideAuto*/ 16 && label2_class_value !== (label2_class_value = "" + (null_to_empty(/*overrideAuto*/ ctx[4] ? "selected" : "notSelected") + " svelte-1s8zwsq"))) {
				attr(label2, "class", label2_class_value);
			}

			if (!current || dirty & /*isCustomized, animationDisabled*/ 3 && div2_class_value !== (div2_class_value = "flexcol button-labels " + (/*isCustomized*/ ctx[1] || /*animationDisabled*/ ctx[0]
			? 'aa-disabled'
			: '') + " svelte-1s8zwsq")) {
				attr(div2, "class", div2_class_value);
			}

			if (!current || dirty & /*animationDisabled*/ 1 && input3_disabled_value !== (input3_disabled_value = /*gameSystem*/ ctx[6] !== "dnd5e" || /*animationDisabled*/ ctx[0])) {
				input3.disabled = input3_disabled_value;
			}

			if (dirty & /*fromAmmo*/ 32) {
				input3.checked = /*fromAmmo*/ ctx[5];
			}

			if (!current || dirty & /*fromAmmo*/ 32 && label3_class_value !== (label3_class_value = "" + (null_to_empty(/*fromAmmo*/ ctx[5] ? "selected" : "notSelected") + " svelte-1s8zwsq"))) {
				attr(label3, "class", label3_class_value);
			}

			if (!current || dirty & /*animationDisabled*/ 1 && div3_class_value !== (div3_class_value = "flexcol button-labels " + (/*gameSystem*/ ctx[6] === 'dnd5e' && !/*animationDisabled*/ ctx[0]
			? ''
			: 'aa-disabled') + " svelte-1s8zwsq")) {
				attr(div3, "class", div3_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {}, true);
				div0_transition.run(1);
			});

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, true);
				div2_transition.run(1);
			});

			add_render_callback(() => {
				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, fade, {}, true);
				div3_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block);
			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {}, false);
			div0_transition.run(0);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, false);
			div2_transition.run(0);
			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, fade, {}, false);
			div3_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block) if_block.d();
			if (detaching && div0_transition) div0_transition.end();
			if (detaching && div1_transition) div1_transition.end();
			if (detaching && div2_transition) div2_transition.end();
			if (detaching && div3_transition) div3_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	const macros = flagData.macro;
	const autoOverride = flagData.autoOverride;
	const options = flagData.options;
	let { animationDisabled = flagData.killAnim || false } = $$props;

	let disabledLabel = !animationDisabled
	? game.i18n.localize("AUTOANIM.animation") + " " + game.i18n.localize("AUTOANIM.enabled")
	: game.i18n.localize("AUTOANIM.animation") + " " + game.i18n.localize("AUTOANIM.disabled");

	let gameSystem = game.system.id;
	let { isCustomized = flagData.override || false } = $$props;
	let overrideAuto = autoOverride.enable || false;
	let fromAmmo = options.ammo || false;
	let { enableMacro = macros.enable || false } = $$props;

	function input_change_handler() {
		enableMacro = this.checked;
		$$invalidate(2, enableMacro);
	}

	function input0_change_handler() {
		animationDisabled = this.checked;
		$$invalidate(0, animationDisabled);
	}

	function input1_change_handler() {
		isCustomized = this.checked;
		$$invalidate(1, isCustomized);
	}

	function input2_change_handler() {
		overrideAuto = this.checked;
		$$invalidate(4, overrideAuto);
	}

	function input3_change_handler() {
		fromAmmo = this.checked;
		$$invalidate(5, fromAmmo);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(7, flagData = $$props.flagData);
		if ('animationDisabled' in $$props) $$invalidate(0, animationDisabled = $$props.animationDisabled);
		if ('isCustomized' in $$props) $$invalidate(1, isCustomized = $$props.isCustomized);
		if ('enableMacro' in $$props) $$invalidate(2, enableMacro = $$props.enableMacro);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*animationDisabled*/ 1) {
			{
				$$invalidate(0, animationDisabled);

				$$invalidate(3, disabledLabel = animationDisabled
				? game.i18n.localize("AUTOANIM.animation") + " " + game.i18n.localize("AUTOANIM.disabled")
				: game.i18n.localize("AUTOANIM.animation") + " " + game.i18n.localize("AUTOANIM.enabled"));
			}
		}

		if ($$self.$$.dirty & /*animationDisabled*/ 1) {
			$$invalidate(7, flagData.killAnim = animationDisabled, flagData);
		}

		if ($$self.$$.dirty & /*disabledLabel*/ 8) {
			($$invalidate(3, disabledLabel), $$invalidate(0, animationDisabled));
		}

		if ($$self.$$.dirty & /*isCustomized*/ 2) {
			$$invalidate(1, isCustomized);
		}

		if ($$self.$$.dirty & /*isCustomized*/ 2) {
			$$invalidate(7, flagData.override = isCustomized, flagData);
		}

		if ($$self.$$.dirty & /*overrideAuto*/ 16) {
			$$invalidate(4, overrideAuto);
		}

		if ($$self.$$.dirty & /*overrideAuto*/ 16) {
			autoOverride.enable = overrideAuto;
		}

		if ($$self.$$.dirty & /*fromAmmo*/ 32) {
			$$invalidate(5, fromAmmo);
		}

		if ($$self.$$.dirty & /*fromAmmo*/ 32) {
			options.ammo = fromAmmo;
		}

		if ($$self.$$.dirty & /*enableMacro*/ 4) {
			macros.enable = $$invalidate(2, enableMacro);
		}
	};

	return [
		animationDisabled,
		isCustomized,
		enableMacro,
		disabledLabel,
		overrideAuto,
		fromAmmo,
		gameSystem,
		flagData,
		input_change_handler,
		input0_change_handler,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler
	];
}

class GeneralSettings extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
			flagData: 7,
			animationDisabled: 0,
			isCustomized: 1,
			enableMacro: 2
		});
	}
}

function getPreviewFile(data) {
  let seqFiles = Sequencer.Database.getEntry(data);

  if (Array.isArray(seqFiles)) {
    seqFiles = seqFiles[0].file;

    if (Array.isArray(seqFiles)) {
      return seqFiles[0].file;
    }

    if (isObject(seqFiles)) {
      if (Array.isArray(seqFiles["15ft"])) {
        seqFiles = seqFiles["15ft"];
        return seqFiles[0];
      }

      seqFiles = seqFiles["15ft"];
      return seqFiles[0];
    }

    return seqFiles;
  }

  if (isObject(seqFiles.file)) {
    if (Array.isArray(seqFiles.file["15ft"])) {
      seqFiles = seqFiles.file["15ft"];
      return seqFiles[0];
    }

    return seqFiles.file["15ft"];
  }

  return seqFiles.file;

  function isObject(test) {
    return typeof test === "object";
  }
}

/* src\formApps\ItemMenu\videoPreviews\switchApp.svelte generated by Svelte v3.47.0 */

function create_fragment$d(ctx) {
	let video;
	let track;
	let video_src_value;

	return {
		c() {
			video = element("video");
			track = element("track");
			attr(track, "kind", "captions");
			attr(video, "class", "aaVideoPreview svelte-9fs2jg");
			if (!src_url_equal(video.src, video_src_value = /*databaseFile*/ ctx[0])) attr(video, "src", video_src_value);
			video.autoplay = "autoplay";
			video.controls = true;
			video.loop = true;
		},
		m(target, anchor) {
			insert(target, video, anchor);
			append(video, track);
		},
		p(ctx, [dirty]) {
			if (dirty & /*databaseFile*/ 1 && !src_url_equal(video.src, video_src_value = /*databaseFile*/ ctx[0])) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	let databaseFile;
	let dbPath;

	menuDBPathSwitch.subscribe(value => {
		$$invalidate(1, dbPath = value);
	});

	/*
let isCustom;
customCheckedSourceFX.subscribe((value) => {
    isCustom = value;
})
let customPath;
customFilePathSourceFX.subscribe((value) => {
    customPath = value;
})
*/
	console.log(dbPath);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dbPath*/ 2) {
			$$invalidate(0, databaseFile = getPreviewFile(dbPath));
		}
	};

	return [databaseFile, dbPath];
}

class SwitchApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\meleeRange.svelte generated by Svelte v3.47.0 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i][0];
	child_ctx[36] = list[i][1];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i][0];
	child_ctx[36] = list[i][1];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i][0];
	child_ctx[36] = list[i][1];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i][0];
	child_ctx[36] = list[i][1];
	return child_ctx;
}

// (137:8) {#if menuType && switchType === "custom"}
function create_if_block_5$3(ctx) {
	let div;
	let i;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			i = element("i");
			attr(i, "class", "fas fa-video aa-video-preview");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "1/2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, i);

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler*/ ctx[20]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (177:4) {#if switchType === "custom"}
function create_if_block_1$6(ctx) {
	let div0;
	let label0;
	let t1;
	let select0;
	let select0_class_value;
	let t2;
	let div1;
	let label1;
	let t4;
	let select1;
	let select1_class_value;
	let t5;
	let div2;
	let label2;
	let t7;
	let select2;
	let select2_class_value;
	let t8;
	let div3;
	let label3;
	let t10;
	let select3;
	let select3_class_value;
	let mounted;
	let dispose;
	let each_value_3 = Object.entries(aaTypeMenu.range);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let if_block0 = /*menuType*/ ctx[1] != "" && create_if_block_4$3(ctx);
	let if_block1 = /*menuType*/ ctx[1] != "" & /*animation*/ ctx[2] != "" && create_if_block_3$4(ctx);
	let if_block2 = /*menuType*/ ctx[1] != "" && /*animation*/ ctx[2] != "" && /*variant*/ ctx[3] != "" && create_if_block_2$4(ctx);

	return {
		c() {
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.type")}`;
			t1 = space();
			select0 = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.animation")}`;
			t4 = space();
			select1 = element("select");
			if (if_block0) if_block0.c();
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.variant")}`;
			t7 = space();
			select2 = element("select");
			if (if_block1) if_block1.c();
			t8 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = `${localize("AUTOANIM.color")}`;
			t10 = space();
			select3 = element("select");
			if (if_block2) if_block2.c();
			attr(label0, "for", "2");
			attr(label0, "class", "svelte-1cnhwgg");
			attr(select0, "name", "flags.autoanimations.options.menuType");
			attr(select0, "id", "2");

			attr(select0, "class", select0_class_value = "" + (null_to_empty(/*menuType*/ ctx[1] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"));

			if (/*menuType*/ ctx[1] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[24].call(select0));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "2 / 3");
			set_style(div0, "grid-column", "2 / 3");
			attr(label1, "for", "3");
			attr(label1, "class", "svelte-1cnhwgg");
			attr(select1, "name", "flags.autoanimations.animation");
			attr(select1, "id", "3");

			attr(select1, "class", select1_class_value = "" + (null_to_empty(/*animation*/ ctx[2] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"));

			if (/*animation*/ ctx[2] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[26].call(select1));
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "3 / 4");
			set_style(div1, "grid-column", "1 / 2");
			attr(label2, "for", "4");
			attr(label2, "class", "svelte-1cnhwgg");
			attr(select2, "name", "flags.autoanimations.options.variant");
			attr(select2, "id", "4");

			attr(select2, "class", select2_class_value = "" + (null_to_empty(/*variant*/ ctx[3] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"));

			if (/*variant*/ ctx[3] === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[28].call(select2));
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "3 / 4");
			set_style(div2, "grid-column", "2 / 3");
			attr(label3, "for", "5");
			attr(label3, "class", "svelte-1cnhwgg");
			attr(select3, "name", "flags.autoanimations.color");
			attr(select3, "id", "5");

			attr(select3, "class", select3_class_value = "" + (null_to_empty(/*color*/ ctx[4] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"));

			if (/*color*/ ctx[4] === void 0) add_render_callback(() => /*select3_change_handler*/ ctx[30].call(select3));
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "3 / 4");
			set_style(div3, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, label0);
			append(div0, t1);
			append(div0, select0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select0, null);
			}

			select_option(select0, /*menuType*/ ctx[1]);
			insert(target, t2, anchor);
			insert(target, div1, anchor);
			append(div1, label1);
			append(div1, t4);
			append(div1, select1);
			if (if_block0) if_block0.m(select1, null);
			select_option(select1, /*animation*/ ctx[2]);
			insert(target, t5, anchor);
			insert(target, div2, anchor);
			append(div2, label2);
			append(div2, t7);
			append(div2, select2);
			if (if_block1) if_block1.m(select2, null);
			select_option(select2, /*variant*/ ctx[3]);
			insert(target, t8, anchor);
			insert(target, div3, anchor);
			append(div3, label3);
			append(div3, t10);
			append(div3, select3);
			if (if_block2) if_block2.m(select3, null);
			select_option(select3, /*color*/ ctx[4]);

			if (!mounted) {
				dispose = [
					listen(select0, "change", /*select0_change_handler*/ ctx[24]),
					listen(select0, "change", /*change_handler_1*/ ctx[25]),
					listen(select1, "change", /*select1_change_handler*/ ctx[26]),
					listen(select1, "change", /*change_handler_2*/ ctx[27]),
					listen(select2, "change", /*select2_change_handler*/ ctx[28]),
					listen(select2, "change", /*change_handler_3*/ ctx[29]),
					listen(select3, "change", /*select3_change_handler*/ ctx[30])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*Object, aaTypeMenu*/ 0) {
				each_value_3 = Object.entries(aaTypeMenu.range);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty[0] & /*menuType*/ 2 && select0_class_value !== (select0_class_value = "" + (null_to_empty(/*menuType*/ ctx[1] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"))) {
				attr(select0, "class", select0_class_value);
			}

			if (dirty[0] & /*menuType*/ 2) {
				select_option(select0, /*menuType*/ ctx[1]);
			}

			if (/*menuType*/ ctx[1] != "") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4$3(ctx);
					if_block0.c();
					if_block0.m(select1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*animation, menuType*/ 6 && select1_class_value !== (select1_class_value = "" + (null_to_empty(/*animation*/ ctx[2] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"))) {
				attr(select1, "class", select1_class_value);
			}

			if (dirty[0] & /*animation, menuType*/ 6) {
				select_option(select1, /*animation*/ ctx[2]);
			}

			if (/*menuType*/ ctx[1] != "" & /*animation*/ ctx[2] != "") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3$4(ctx);
					if_block1.c();
					if_block1.m(select2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*variant, menuType, animation*/ 14 && select2_class_value !== (select2_class_value = "" + (null_to_empty(/*variant*/ ctx[3] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"))) {
				attr(select2, "class", select2_class_value);
			}

			if (dirty[0] & /*variant, menuType, animation*/ 14) {
				select_option(select2, /*variant*/ ctx[3]);
			}

			if (/*menuType*/ ctx[1] != "" && /*animation*/ ctx[2] != "" && /*variant*/ ctx[3] != "") {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2$4(ctx);
					if_block2.c();
					if_block2.m(select3, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*color, menuType, animation, variant*/ 30 && select3_class_value !== (select3_class_value = "" + (null_to_empty(/*color*/ ctx[4] != ""
			? "isPopulated"
			: "isNotPopulated") + " svelte-1cnhwgg"))) {
				attr(select3, "class", select3_class_value);
			}

			if (dirty[0] & /*color, menuType, animation, variant*/ 30) {
				select_option(select3, /*color*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (detaching) detach(t5);
			if (detaching) detach(div2);
			if (if_block1) if_block1.d();
			if (detaching) detach(t8);
			if (detaching) detach(div3);
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (188:16) {#each Object.entries(aaTypeMenu.range) as [key, name]}
function create_each_block_3(ctx) {
	let option;
	let t_value = /*name*/ ctx[36] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[35];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (203:16) {#if menuType != ""}
function create_if_block_4$3(ctx) {
	let each_1_anchor;
	let each_value_2 = Object.entries(aaNameMenu.range[/*menuType*/ ctx[1]]);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType*/ 2) {
				each_value_2 = Object.entries(aaNameMenu.range[/*menuType*/ ctx[1]]);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (204:20) {#each Object.entries(aaNameMenu.range[menuType]) as [key, name]}
function create_each_block_2(ctx) {
	let option;
	let t_value = /*name*/ ctx[36] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[35];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType*/ 2 && t_value !== (t_value = /*name*/ ctx[36] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuType*/ 2 && option_value_value !== (option_value_value = /*key*/ ctx[35])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (220:16) {#if (menuType != "") & (animation != "")}
function create_if_block_3$4(ctx) {
	let each_1_anchor;
	let each_value_1 = Object.entries(aaVariantMenu.range[/*menuType*/ ctx[1]][/*animation*/ ctx[2]]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType, animation*/ 6) {
				each_value_1 = Object.entries(aaVariantMenu.range[/*menuType*/ ctx[1]][/*animation*/ ctx[2]]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (221:20) {#each Object.entries(aaVariantMenu.range[menuType][animation]) as [key, name]}
function create_each_block_1$1(ctx) {
	let option;
	let t_value = /*name*/ ctx[36] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[35];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType, animation*/ 6 && t_value !== (t_value = /*name*/ ctx[36] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuType, animation*/ 6 && option_value_value !== (option_value_value = /*key*/ ctx[35])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (236:16) {#if menuType != "" && animation != "" && variant != ""}
function create_if_block_2$4(ctx) {
	let each_1_anchor;
	let each_value = Object.entries(aaColorMenu.range[/*menuType*/ ctx[1]][/*animation*/ ctx[2]][/*variant*/ ctx[3]]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType, animation, variant*/ 14) {
				each_value = Object.entries(aaColorMenu.range[/*menuType*/ ctx[1]][/*animation*/ ctx[2]][/*variant*/ ctx[3]]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (237:20) {#each Object.entries(aaColorMenu.range[menuType][animation][variant]) as [key, name]}
function create_each_block$2(ctx) {
	let option;
	let t_value = /*name*/ ctx[36] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[35];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*menuType, animation, variant*/ 14 && t_value !== (t_value = /*name*/ ctx[36] + "")) set_data(t, t_value);

			if (dirty[0] & /*menuType, animation, variant*/ 14 && option_value_value !== (option_value_value = /*key*/ ctx[35])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (245:0) {#if switchType === "custom"}
function create_if_block$6(ctx) {
	let div2;
	let div0;
	let label0;
	let t1;
	let button;
	let t2;
	let t3;
	let div1;
	let label1;
	let t5;
	let input;
	let input_disabled_value;
	let div1_class_value;
	let div2_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.rangeDetect")}`;
			t1 = space();
			button = element("button");
			t2 = text(/*detectLabel*/ ctx[7]);
			t3 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.gridSquares")}`;
			t5 = space();
			input = element("input");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-1cnhwgg");
			attr(button, "class", "oldCheck svelte-1cnhwgg");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "2/3");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-1cnhwgg");
			input.disabled = input_disabled_value = /*detect*/ ctx[6] === "auto";
			attr(input, "type", "Number");
			attr(input, "placeholder", "2");
			attr(input, "class", "svelte-1cnhwgg");
			attr(div1, "class", div1_class_value = "flexcol " + (/*detect*/ ctx[6] === 'auto' ? 'aa-disabled' : '') + " svelte-1cnhwgg");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "3 / 5");
			attr(div2, "class", "aa-4wide svelte-1cnhwgg");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, label0);
			append(div0, t1);
			append(div0, button);
			append(button, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, label1);
			append(div1, t5);
			append(div1, input);
			set_input_value(input, /*range*/ ctx[8]);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[31]),
					listen(input, "input", /*input_input_handler*/ ctx[32])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*detectLabel*/ 128) set_data(t2, /*detectLabel*/ ctx[7]);

			if (!current || dirty[0] & /*detect*/ 64 && input_disabled_value !== (input_disabled_value = /*detect*/ ctx[6] === "auto")) {
				input.disabled = input_disabled_value;
			}

			if (dirty[0] & /*range*/ 256) {
				set_input_value(input, /*range*/ ctx[8]);
			}

			if (!current || dirty[0] & /*detect*/ 64 && div1_class_value !== (div1_class_value = "flexcol " + (/*detect*/ ctx[6] === 'auto' ? 'aa-disabled' : '') + " svelte-1cnhwgg")) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, { duration: 500 }, true);
				div2_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, { duration: 500 }, false);
			div2_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching && div2_transition) div2_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$c(ctx) {
	let div2;
	let div1;
	let div0;
	let t1;
	let t2;
	let div5;
	let div3;
	let label1;
	let t6;
	let select;
	let option0;
	let option1;
	let option2;
	let t10;
	let div4;
	let label2;
	let t12;
	let button;
	let t13;
	let button_class_value;
	let div4_class_value;
	let t14;
	let div5_transition;
	let t15;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*menuType*/ ctx[1] && /*switchType*/ ctx[0] === "custom" && create_if_block_5$3(ctx);
	let if_block1 = /*switchType*/ ctx[0] === "custom" && create_if_block_1$6(ctx);
	let if_block2 = /*switchType*/ ctx[0] === "custom" && create_if_block$6(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			div0.innerHTML = `<label for="" class="svelte-1cnhwgg">Melee Range Switch</label>`;
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div5 = element("div");
			div3 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.ranged")}  ${localize("AUTOANIM.switch")}`;
			t6 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.enabled")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.disabled")}`;
			option2 = element("option");
			option2.textContent = `${localize("AUTOANIM.custom")}`;
			t10 = space();
			div4 = element("div");
			label2 = element("label");
			label2.textContent = "Return Animation";
			t12 = space();
			button = element("button");
			t13 = text(/*returnLabel*/ ctx[9]);
			t14 = space();
			if (if_block1) if_block1.c();
			t15 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "2/3");
			attr(div1, "class", "aa-header svelte-1cnhwgg");
			attr(div2, "class", "aa-header-section svelte-1cnhwgg");
			attr(label1, "for", "1");
			attr(label1, "class", "svelte-1cnhwgg");
			option0.__value = "on";
			option0.value = option0.__value;
			option1.__value = "off";
			option1.value = option1.__value;
			option2.__value = "custom";
			option2.value = option2.__value;
			attr(select, "name", "flags.autoanimations.animType");
			attr(select, "id", "1");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-1cnhwgg");
			if (/*switchType*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[21].call(select));
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "1 / 2");
			set_style(div3, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-1cnhwgg");
			button.disabled = /*isDisabled*/ ctx[10];

			attr(button, "class", button_class_value = "oldCheck " + (/*returnEnabled*/ ctx[5] && !/*isDisabled*/ ctx[10]
			? 'selected'
			: 'notSelected') + " svelte-1cnhwgg");

			attr(div4, "class", div4_class_value = "flexcol " + (/*isDisabled*/ ctx[10] ? 'aa-disabled' : '') + " svelte-1cnhwgg");
			set_style(div4, "grid-row", "1/2");
			set_style(div4, "grid-column", "3/4");
			attr(div5, "class", "aa-select-animation svelte-1cnhwgg");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div1, t1);
			if (if_block0) if_block0.m(div1, null);
			insert(target, t2, anchor);
			insert(target, div5, anchor);
			append(div5, div3);
			append(div3, label1);
			append(div3, t6);
			append(div3, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			select_option(select, /*switchType*/ ctx[0]);
			append(div5, t10);
			append(div5, div4);
			append(div4, label2);
			append(div4, t12);
			append(div4, button);
			append(button, t13);
			append(div5, t14);
			if (if_block1) if_block1.m(div5, null);
			insert(target, t15, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[21]),
					listen(select, "change", /*change_handler*/ ctx[22]),
					listen(button, "click", /*click_handler_1*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*menuType*/ ctx[1] && /*switchType*/ ctx[0] === "custom") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5$3(ctx);
					if_block0.c();
					if_block0.m(div1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*switchType*/ 1) {
				select_option(select, /*switchType*/ ctx[0]);
			}

			if (!current || dirty[0] & /*returnLabel*/ 512) set_data(t13, /*returnLabel*/ ctx[9]);

			if (!current || dirty[0] & /*isDisabled*/ 1024) {
				button.disabled = /*isDisabled*/ ctx[10];
			}

			if (!current || dirty[0] & /*returnEnabled, isDisabled*/ 1056 && button_class_value !== (button_class_value = "oldCheck " + (/*returnEnabled*/ ctx[5] && !/*isDisabled*/ ctx[10]
			? 'selected'
			: 'notSelected') + " svelte-1cnhwgg")) {
				attr(button, "class", button_class_value);
			}

			if (!current || dirty[0] & /*isDisabled*/ 1024 && div4_class_value !== (div4_class_value = "flexcol " + (/*isDisabled*/ ctx[10] ? 'aa-disabled' : '') + " svelte-1cnhwgg")) {
				attr(div4, "class", div4_class_value);
			}

			if (/*switchType*/ ctx[0] === "custom") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$6(ctx);
					if_block1.c();
					if_block1.m(div5, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*switchType*/ ctx[0] === "custom") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*switchType*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, {}, true);
				div5_transition.run(1);
			});

			transition_in(if_block2);
			current = true;
		},
		o(local) {
			if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, {}, false);
			div5_transition.run(0);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (detaching) detach(t2);
			if (detaching) detach(div5);
			if (if_block1) if_block1.d();
			if (detaching && div5_transition) div5_transition.end();
			if (detaching) detach(t15);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	const returningWeapons = ["chakram", "dagger", "greatsword", "hammer", "javelin", "spear"];
	let meleeSwitch = flagData.meleeSwitch;
	let switchType = meleeSwitch.switchType || "on";
	let menuType = meleeSwitch.menuType || "";

	// Sets Initial animation for Menu - Assigns to Flag when updated
	let animation = meleeSwitch.animation || "";

	// Sets Initial variant for Menu - Assigns to Flag when updated
	let variant = meleeSwitch.variant || "";

	// Sets Initial color for Menu - Assigns to Flag when updated
	let color = meleeSwitch.color || "";

	async function switchChange() {
		let newSwitchType = switchType;

		if (newSwitchType === "on") {
			$$invalidate(1, menuType = Object.keys(aaTypeMenu.range)[0]);
			$$invalidate(2, animation = Object.keys(aaNameMenu.range[menuType])[0]);
			$$invalidate(3, variant = Object.keys(aaVariantMenu.range[menuType][animation])[0]);
			$$invalidate(4, color = Object.keys(aaColorMenu.range[menuType][animation][variant])[0]);
		}
	}

	async function menuTypeChange() {
		let newMenuType = menuType;
		$$invalidate(2, animation = Object.keys(aaNameMenu.range[newMenuType])[0]);
		$$invalidate(3, variant = Object.keys(aaVariantMenu.range[newMenuType][animation])[0]);
		$$invalidate(4, color = Object.keys(aaColorMenu.range[newMenuType][animation][variant])[0]);
	}

	async function animationChange() {
		let newAnimation = animation;
		$$invalidate(3, variant = Object.keys(aaVariantMenu.range[menuType][newAnimation])[0]);
		$$invalidate(4, color = Object.keys(aaColorMenu.range[menuType][newAnimation][variant])[0]);
	}

	async function variantChange() {
		let newVariant = variant;
		$$invalidate(4, color = Object.keys(aaColorMenu.range[menuType][animation][newVariant])[0]);
	}

	let returnEnabled = meleeSwitch.enable;
	let returnLabel = returnEnabled ? "Enabled" : "Disabled";

	function switchLabel() {
		$$invalidate(5, returnEnabled = !returnEnabled);
		$$invalidate(9, returnLabel = returnEnabled ? "Enabled" : "Disabled");
	}

	let isDisabled = false;
	let detect = meleeSwitch.detect || "auto";
	let detectLabel = detect === "auto" ? "Automatic" : "Manual";

	function switchDetect() {
		$$invalidate(6, detect = detect === "auto" ? "manual" : "auto");
		$$invalidate(7, detectLabel = detect === "auto" ? "Automatic" : "Manual");
	}

	let range = meleeSwitch.range || 2;

	function onClick() {
		new TJSDialog({
				modal: false,
				draggable: true,
				resizable: true,
				title: "Range Switch Animation",
				stylesContent: { background: "rgba(125, 125, 125, 0.75)" },
				content: { class: SwitchApp }
			}).render(true);
	}

	let switchFilePath;
	const click_handler = () => onClick();

	function select_change_handler() {
		switchType = select_value(this);
		$$invalidate(0, switchType);
	}

	const change_handler = async () => await switchChange();
	const click_handler_1 = () => switchLabel();

	function select0_change_handler() {
		menuType = select_value(this);
		$$invalidate(1, menuType);
	}

	const change_handler_1 = async () => await menuTypeChange();

	function select1_change_handler() {
		animation = select_value(this);
		($$invalidate(2, animation), $$invalidate(1, menuType));
		$$invalidate(1, menuType);
	}

	const change_handler_2 = async () => await animationChange();

	function select2_change_handler() {
		variant = select_value(this);
		(($$invalidate(3, variant), $$invalidate(1, menuType)), $$invalidate(2, animation));
		$$invalidate(1, menuType);
		($$invalidate(2, animation), $$invalidate(1, menuType));
	}

	const change_handler_3 = async () => await variantChange();

	function select3_change_handler() {
		color = select_value(this);
		((($$invalidate(4, color), $$invalidate(1, menuType)), $$invalidate(2, animation)), $$invalidate(3, variant));
		$$invalidate(1, menuType);
		($$invalidate(2, animation), $$invalidate(1, menuType));
		(($$invalidate(3, variant), $$invalidate(1, menuType)), $$invalidate(2, animation));
	}

	const click_handler_2 = () => switchDetect();

	function input_input_handler() {
		range = this.value;
		$$invalidate(8, range);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(18, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*switchType*/ 1) {
			$$invalidate(0, switchType);
		}

		if ($$self.$$.dirty[0] & /*switchType*/ 1) {
			meleeSwitch.switchType = switchType;
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 2) {
			$$invalidate(1, menuType);
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 2) {
			meleeSwitch.menuType = menuType;
		}

		if ($$self.$$.dirty[0] & /*menuType, animation*/ 6) {
			$$invalidate(2, animation = menuType === "" ? "" : animation);
		}

		if ($$self.$$.dirty[0] & /*animation*/ 4) {
			meleeSwitch.animation = animation;
		}

		if ($$self.$$.dirty[0] & /*menuType, animation, variant*/ 14) {
			$$invalidate(3, variant = menuType === "" || animation === "" ? "" : variant);
		}

		if ($$self.$$.dirty[0] & /*variant*/ 8) {
			meleeSwitch.variant = variant;
		}

		if ($$self.$$.dirty[0] & /*menuType, animation, variant, color*/ 30) {
			$$invalidate(4, color = menuType === "" || animation === "" || variant === ""
			? ""
			: color);
		}

		if ($$self.$$.dirty[0] & /*color*/ 16) {
			meleeSwitch.color = color;
		}

		if ($$self.$$.dirty[0] & /*returnEnabled*/ 32) {
			meleeSwitch.returning = returnEnabled;
		}

		if ($$self.$$.dirty[0] & /*switchType, animation, menuType*/ 7) {
			$$invalidate(10, isDisabled = switchType === "custom" && returningWeapons.includes(animation) && menuType === "weapon" || switchType === "on"
			? false
			: true);
		}

		if ($$self.$$.dirty[0] & /*detect*/ 64) {
			meleeSwitch.detect = detect;
		}

		if ($$self.$$.dirty[0] & /*detectLabel*/ 128) {
			$$invalidate(7, detectLabel);
		}

		if ($$self.$$.dirty[0] & /*range*/ 256) {
			$$invalidate(8, range);
		}

		if ($$self.$$.dirty[0] & /*range*/ 256) {
			meleeSwitch.range = range;
		}

		if ($$self.$$.dirty[0] & /*color, menuType, animation, variant*/ 30) {
			$$invalidate(19, switchFilePath = color === "random"
			? `autoanimations.range.${menuType}.${animation}.${variant}`
			: `autoanimations.range.${menuType}.${animation}.${variant}.${color}`);
		}

		if ($$self.$$.dirty[0] & /*switchFilePath*/ 524288) {
			menuDBPathSwitch.set(switchFilePath);
		}
	};

	return [
		switchType,
		menuType,
		animation,
		variant,
		color,
		returnEnabled,
		detect,
		detectLabel,
		range,
		returnLabel,
		isDisabled,
		switchChange,
		menuTypeChange,
		animationChange,
		variantChange,
		switchLabel,
		switchDetect,
		onClick,
		flagData,
		switchFilePath,
		click_handler,
		select_change_handler,
		change_handler,
		click_handler_1,
		select0_change_handler,
		change_handler_1,
		select1_change_handler,
		change_handler_2,
		select2_change_handler,
		change_handler_3,
		select3_change_handler,
		click_handler_2,
		input_input_handler
	];
}

class MeleeRange extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$c, create_fragment$c, safe_not_equal, { flagData: 18 }, null, [-1, -1]);
	}
}

/* src\formApps\ItemMenu\components\macro.svelte generated by Svelte v3.47.0 */

function create_fragment$b(ctx) {
	let div0;
	let h1;
	let t1;
	let div4;
	let div1;
	let label0;
	let t3;
	let select;
	let option0;
	let option1;
	let t6;
	let div2;
	let label1;
	let t10;
	let input0;
	let t11;
	let div3;
	let label2;
	let t13;
	let input1;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = `${localize("AUTOANIM.macro")}`;
			t1 = space();
			div4 = element("div");
			div1 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.playwhen")}`;
			t3 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.macroconcurrent")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.awaitmacro")}`;
			t6 = space();
			div2 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.macro")}  ${localize("AUTOANIM.name")}`;
			t10 = space();
			input0 = element("input");
			t11 = space();
			div3 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.args")}`;
			t13 = space();
			input1 = element("input");
			attr(h1, "class", "svelte-1ybdga3");
			set_style(div0, "padding-top", "10px");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-1ybdga3");
			option0.__value = "0";
			option0.value = option0.__value;
			option1.__value = "1";
			option1.value = option1.__value;
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-1ybdga3");
			if (/*playWhen*/ ctx[2] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[4].call(select));
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-1ybdga3");
			attr(input0, "type", "text");
			attr(input0, "class", "svelte-1ybdga3");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-1ybdga3");
			attr(input1, "type", "text");
			attr(input1, "class", "svelte-1ybdga3");
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "2 / 3");
			set_style(div3, "grid-column", "1 / 3");
			attr(div4, "class", "aa-2wide svelte-1ybdga3");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h1);
			insert(target, t1, anchor);
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, label0);
			append(div1, t3);
			append(div1, select);
			append(select, option0);
			append(select, option1);
			select_option(select, /*playWhen*/ ctx[2]);
			append(div4, t6);
			append(div4, div2);
			append(div2, label1);
			append(div2, t10);
			append(div2, input0);
			set_input_value(input0, /*name*/ ctx[0]);
			append(div4, t11);
			append(div4, div3);
			append(div3, label2);
			append(div3, t13);
			append(div3, input1);
			set_input_value(input1, /*data*/ ctx[1]);

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[4]),
					listen(input0, "input", /*input0_input_handler*/ ctx[5]),
					listen(input1, "input", /*input1_input_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*playWhen*/ 4) {
				select_option(select, /*playWhen*/ ctx[2]);
			}

			if (dirty & /*name*/ 1 && input0.value !== /*name*/ ctx[0]) {
				set_input_value(input0, /*name*/ ctx[0]);
			}

			if (dirty & /*data*/ 2 && input1.value !== /*data*/ ctx[1]) {
				set_input_value(input1, /*data*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div4);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	const macros = flagData.macro;
	let name = macros.name;
	let data = macros.args;
	let playWhen = macros.playWhen;

	function select_change_handler() {
		playWhen = select_value(this);
		$$invalidate(2, playWhen);
	}

	function input0_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	function input1_input_handler() {
		data = this.value;
		$$invalidate(1, data);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(3, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*name*/ 1) {
			macros.name = $$invalidate(0, name);
		}

		if ($$self.$$.dirty & /*data*/ 2) {
			macros.args = $$invalidate(1, data);
		}

		if ($$self.$$.dirty & /*playWhen*/ 4) {
			macros.playWhen = $$invalidate(2, playWhen);
		}
	};

	return [
		name,
		data,
		playWhen,
		flagData,
		select_change_handler,
		input0_input_handler,
		input1_input_handler
	];
}

class Macro extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$b, create_fragment$b, safe_not_equal, { flagData: 3 });
	}
}

/* src\formApps\ItemMenu\components\options.svelte generated by Svelte v3.47.0 */

function create_if_block_4$2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*animType*/ ctx[0] === "aura") return create_if_block_5$2;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (156:4) {:else}
function create_else_block$1(ctx) {
	let div;
	let label;
	let t1;
	let input;
	let input_disabled_value;
	let div_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.scale")}`;
			t1 = space();
			input = element("input");
			attr(label, "for", "");
			attr(label, "class", "svelte-j93upt");
			attr(input, "type", "Number");
			input.disabled = input_disabled_value = /*animType*/ ctx[0] === "range";
			attr(input, "placeholder", "1");
			attr(input, "step", "0.01");
			attr(input, "class", "svelte-j93upt");
			attr(div, "class", div_class_value = "flexcol " + (/*animType*/ ctx[0] === "range" ? "aa-disabled" : "") + " svelte-j93upt");
			set_style(div, "grid-row", "2 / 3");
			set_style(div, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t1);
			append(div, input);
			set_input_value(input, /*scale*/ ctx[4]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_1*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*animType*/ 1 && input_disabled_value !== (input_disabled_value = /*animType*/ ctx[0] === "range")) {
				input.disabled = input_disabled_value;
			}

			if (dirty[0] & /*scale*/ 16) {
				set_input_value(input, /*scale*/ ctx[4]);
			}

			if (dirty[0] & /*animType*/ 1 && div_class_value !== (div_class_value = "flexcol " + (/*animType*/ ctx[0] === "range" ? "aa-disabled" : "") + " svelte-j93upt")) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (151:4) {#if animType === "aura"}
function create_if_block_5$2(ctx) {
	let div;
	let label;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.textContent = "Radius";
			t1 = space();
			input = element("input");
			attr(label, "for", "");
			attr(label, "class", "svelte-j93upt");
			attr(input, "type", "Number");
			attr(input, "placeholder", "3.5");
			attr(input, "step", "0.01");
			attr(input, "class", "svelte-j93upt");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "2 / 3");
			set_style(div, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t1);
			append(div, input);
			set_input_value(input, /*auraRadius*/ ctx[5]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[37]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*auraRadius*/ 32) {
				set_input_value(input, /*auraRadius*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (172:4) {#if animType === "templatefx"}
function create_if_block$5(ctx) {
	let div0;
	let label0;
	let t2;
	let input0;
	let t3;
	let div1;
	let label1;
	let t6;
	let input1;
	let t7;
	let div2;
	let label2;
	let t9;
	let button;
	let t10;
	let button_class_value;
	let t11;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block = /*persistent*/ ctx[7] && create_if_block_1$5(ctx);

	return {
		c() {
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.scale")} X`;
			t2 = space();
			input0 = element("input");
			t3 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.scale")} Y`;
			t6 = space();
			input1 = element("input");
			t7 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.remove")}`;
			t9 = space();
			button = element("button");
			t10 = text(/*isRemove*/ ctx[20]);
			t11 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(label0, "for", "");
			attr(label0, "class", "svelte-j93upt");
			attr(input0, "type", "Number");
			attr(input0, "placeholder", "1");
			attr(input0, "class", "svelte-j93upt");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "2 / 3");
			set_style(div0, "grid-column", "3 / 4");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-j93upt");
			attr(input1, "type", "Number");
			attr(input1, "placeholder", "1");
			attr(input1, "class", "svelte-j93upt");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "3 / 4");
			set_style(div1, "grid-column", "3 / 4");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-j93upt");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*removeTemplate*/ ctx[8] ? "selected" : "notSelected") + " svelte-j93upt"));
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "3 / 4");
			set_style(div2, "grid-column", "4 / 5");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, label0);
			append(div0, t2);
			append(div0, input0);
			set_input_value(input0, /*scaleX*/ ctx[9]);
			insert(target, t3, anchor);
			insert(target, div1, anchor);
			append(div1, label1);
			append(div1, t6);
			append(div1, input1);
			set_input_value(input1, /*scaleY*/ ctx[10]);
			insert(target, t7, anchor);
			insert(target, div2, anchor);
			append(div2, label2);
			append(div2, t9);
			append(div2, button);
			append(button, t10);
			insert(target, t11, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler_1*/ ctx[41]),
					listen(input1, "input", /*input1_input_handler_1*/ ctx[42]),
					listen(button, "click", /*click_handler_4*/ ctx[43])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*scaleX*/ 512) {
				set_input_value(input0, /*scaleX*/ ctx[9]);
			}

			if (dirty[0] & /*scaleY*/ 1024) {
				set_input_value(input1, /*scaleY*/ ctx[10]);
			}

			if (!current || dirty[0] & /*isRemove*/ 1048576) set_data(t10, /*isRemove*/ ctx[20]);

			if (!current || dirty[0] & /*removeTemplate*/ 256 && button_class_value !== (button_class_value = "" + (null_to_empty(/*removeTemplate*/ ctx[8] ? "selected" : "notSelected") + " svelte-j93upt"))) {
				attr(button, "class", button_class_value);
			}

			if (/*persistent*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*persistent*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$5(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t3);
			if (detaching) detach(div1);
			if (detaching) detach(t7);
			if (detaching) detach(div2);
			if (detaching) detach(t11);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (189:4) {#if persistent}
function create_if_block_1$5(ctx) {
	let div;
	let label;
	let t3;
	let select;
	let option0;
	let option1;
	let div_intro;
	let div_outro;
	let t6;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*menuType*/ ctx[1] === "circle" || /*menuType*/ ctx[1] === "square") && create_if_block_3$3();
	let if_block1 = /*persistType*/ ctx[11] === "overheadtile" && create_if_block_2$3(ctx);

	return {
		c() {
			div = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.persistant")}  ${localize("AUTOANIM.type")}`;
			t3 = space();
			select = element("select");
			if (if_block0) if_block0.c();
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.sequencereffect")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.attachtotemplate")}`;
			t6 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			attr(label, "for", "1");
			attr(label, "class", "svelte-j93upt");
			option0.__value = "sequencerground";
			option0.value = option0.__value;
			option1.__value = "attachtemplate";
			option1.value = option1.__value;
			attr(select, "id", "1");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			set_style(select, "margin-right", "15%");
			set_style(select, "margin-left", "15%");
			attr(select, "class", "svelte-j93upt");
			if (/*persistType*/ ctx[11] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[44].call(select));
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "3 / 4");
			set_style(div, "grid-column", "1 / 3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t3);
			append(div, select);
			if (if_block0) if_block0.m(select, null);
			append(select, option0);
			append(select, option1);
			select_option(select, /*persistType*/ ctx[11]);
			insert(target, t6, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[44]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*menuType*/ ctx[1] === "circle" || /*menuType*/ ctx[1] === "square") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$3();
					if_block0.c();
					if_block0.m(select, option0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*persistType*/ 2048) {
				select_option(select, /*persistType*/ ctx[11]);
			}

			if (/*persistType*/ ctx[11] === "overheadtile") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*persistType*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				div_intro = create_in_transition(div, fade, { duration: 500 });
				div_intro.start();
			});

			transition_in(if_block1);
			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fade, { duration: 500 });
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (detaching && div_outro) div_outro.end();
			if (detaching) detach(t6);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			dispose();
		}
	};
}

// (198:12) {#if menuType === "circle" || menuType === "square"}
function create_if_block_3$3(ctx) {
	let option0;
	let option1;

	return {
		c() {
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.overheadtile")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.groundtile")}`;
			option0.__value = "overheadtile";
			option0.value = option0.__value;
			option1.__value = "groundtile";
			option1.value = option1.__value;
		},
		m(target, anchor) {
			insert(target, option0, anchor);
			insert(target, option1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option0);
			if (detaching) detach(option1);
		}
	};
}

// (207:4) {#if persistType === "overheadtile"}
function create_if_block_2$3(ctx) {
	let div0;
	let label0;
	let t1;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let div0_intro;
	let div0_outro;
	let t6;
	let div2;
	let label1;
	let t8;
	let div1;
	let input0;
	let t9;
	let input1;
	let div2_intro;
	let div2_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.occlusionMode")}`;
			t1 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.occlusion03")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.occlusion01")}`;
			option2 = element("option");
			option2.textContent = `${localize("AUTOANIM.occlusion02")}`;
			option3 = element("option");
			option3.textContent = `${localize("AUTOANIM.occlusion00")}`;
			t6 = space();
			div2 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.occlusionAlpha")}`;
			t8 = space();
			div1 = element("div");
			input0 = element("input");
			t9 = space();
			input1 = element("input");
			attr(label0, "for", "1");
			attr(label0, "class", "svelte-j93upt");
			option0.__value = "3";
			option0.value = option0.__value;
			option1.__value = "1";
			option1.value = option1.__value;
			option2.__value = "2";
			option2.value = option2.__value;
			option3.__value = "0";
			option3.value = option3.__value;
			attr(select, "id", "1");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-j93upt");
			if (/*occlusionMode*/ ctx[12] === void 0) add_render_callback(() => /*select_change_handler_1*/ ctx[45].call(select));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "4 / 5");
			set_style(div0, "grid-column", "1 / 3");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-j93upt");
			attr(input0, "type", "Number");
			attr(input0, "placeholder", "1");
			attr(input0, "min", "0");
			attr(input0, "max", "1");
			attr(input0, "step", "0.01");
			attr(input0, "class", "svelte-j93upt");
			attr(input1, "type", "range");
			attr(input1, "min", "0");
			attr(input1, "max", "1");
			attr(input1, "step", "0.01");
			attr(input1, "class", "svelte-j93upt");
			attr(div1, "class", "form-group");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "4 / 5");
			set_style(div2, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, label0);
			append(div0, t1);
			append(div0, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			append(select, option3);
			select_option(select, /*occlusionMode*/ ctx[12]);
			insert(target, t6, anchor);
			insert(target, div2, anchor);
			append(div2, label1);
			append(div2, t8);
			append(div2, div1);
			append(div1, input0);
			set_input_value(input0, /*occlusionAlpha*/ ctx[13]);
			append(div1, t9);
			append(div1, input1);
			set_input_value(input1, /*occlusionAlpha*/ ctx[13]);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler_1*/ ctx[45]),
					listen(input0, "input", /*input0_input_handler_2*/ ctx[46]),
					listen(input1, "change", /*input1_change_input_handler*/ ctx[47]),
					listen(input1, "input", /*input1_change_input_handler*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*occlusionMode*/ 4096) {
				select_option(select, /*occlusionMode*/ ctx[12]);
			}

			if (dirty[0] & /*occlusionAlpha*/ 8192) {
				set_input_value(input0, /*occlusionAlpha*/ ctx[13]);
			}

			if (dirty[0] & /*occlusionAlpha*/ 8192) {
				set_input_value(input1, /*occlusionAlpha*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div0_outro) div0_outro.end(1);
				div0_intro = create_in_transition(div0, fade, { duration: 500 });
				div0_intro.start();
			});

			add_render_callback(() => {
				if (div2_outro) div2_outro.end(1);
				div2_intro = create_in_transition(div2, fade, { duration: 500 });
				div2_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div0_intro) div0_intro.invalidate();
			div0_outro = create_out_transition(div0, fade, { duration: 500 });
			if (div2_intro) div2_intro.invalidate();
			div2_outro = create_out_transition(div2, fade, { duration: 500 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching && div0_outro) div0_outro.end();
			if (detaching) detach(t6);
			if (detaching) detach(div2);
			if (detaching && div2_outro) div2_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$a(ctx) {
	let div9;
	let h2;
	let t1;
	let div8;
	let div0;
	let label0;
	let t3;
	let button0;
	let t4;
	let div0_class_value;
	let t5;
	let div1;
	let label1;
	let t7;
	let button1;
	let t8;
	let t9;
	let div2;
	let label2;
	let t11;
	let button2;
	let t12;
	let button2_disabled_value;
	let div2_class_value;
	let t13;
	let div3;
	let label3;
	let t15;
	let button3;
	let t16;
	let button3_disabled_value;
	let div3_class_value;
	let t17;
	let div4;
	let label4;
	let t19;
	let input0;
	let div4_class_value;
	let t20;
	let div5;
	let label5;
	let t24;
	let input1;
	let div5_class_value;
	let t25;
	let t26;
	let div7;
	let label6;
	let t28;
	let div6;
	let input2;
	let t29;
	let input3;
	let div7_class_value;
	let div7_intro;
	let div7_outro;
	let t30;
	let div8_intro;
	let div8_outro;
	let div9_transition;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*animType*/ ctx[0] !== "templatefx" && create_if_block_4$2(ctx);
	let if_block1 = /*animType*/ ctx[0] === "templatefx" && create_if_block$5(ctx);

	return {
		c() {
			div9 = element("div");
			h2 = element("h2");
			h2.textContent = "Options";
			t1 = space();
			div8 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Persistence";
			t3 = space();
			button0 = element("button");
			t4 = text(/*isPersistent*/ ctx[16]);
			t5 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "Z-Index";
			t7 = space();
			button1 = element("button");
			t8 = text(/*aboveBelow*/ ctx[19]);
			t9 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Visibility";
			t11 = space();
			button2 = element("button");
			t12 = text(/*bindVisibility*/ ctx[17]);
			t13 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = "Alpha";
			t15 = space();
			button3 = element("button");
			t16 = text(/*bindAlpha*/ ctx[18]);
			t17 = space();
			div4 = element("div");
			label4 = element("label");
			label4.textContent = `${localize("AUTOANIM.repeat")}`;
			t19 = space();
			input0 = element("input");
			t20 = space();
			div5 = element("div");
			label5 = element("label");
			label5.textContent = `${localize("AUTOANIM.repeat")}  ${localize("AUTOANIM.delay")}`;
			t24 = space();
			input1 = element("input");
			t25 = space();
			if (if_block0) if_block0.c();
			t26 = space();
			div7 = element("div");
			label6 = element("label");
			label6.textContent = `${localize("AUTOANIM.opacity")}`;
			t28 = space();
			div6 = element("div");
			input2 = element("input");
			t29 = space();
			input3 = element("input");
			t30 = space();
			if (if_block1) if_block1.c();
			attr(h2, "class", "svelte-j93upt");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-j93upt");
			button0.disabled = /*disabled01*/ ctx[15];
			attr(button0, "class", "svelte-j93upt");
			attr(div0, "class", div0_class_value = "flexcol " + (/*disabled01*/ ctx[15] ? "aa-disabled" : "") + " svelte-j93upt");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-j93upt");
			attr(button1, "class", "oldCheck svelte-j93upt");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-j93upt");
			button2.disabled = button2_disabled_value = /*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx';
			attr(button2, "class", "svelte-j93upt");

			attr(div2, "class", div2_class_value = "flexcol " + (/*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx'
			? "aa-disabled"
			: "") + " svelte-j93upt");

			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "3 / 4");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-j93upt");
			button3.disabled = button3_disabled_value = /*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx';
			attr(button3, "class", "svelte-j93upt");

			attr(div3, "class", div3_class_value = "flexcol " + (/*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx'
			? "aa-disabled"
			: "") + " svelte-j93upt");

			set_style(div3, "grid-row", "1 / 2");
			set_style(div3, "grid-column", "4 / 5");
			attr(label4, "for", "");
			attr(label4, "class", "svelte-j93upt");
			input0.disabled = /*isDisabled*/ ctx[14];
			attr(input0, "type", "Number");
			attr(input0, "placeholder", "1");
			attr(input0, "class", "svelte-j93upt");
			attr(div4, "class", div4_class_value = "flexcol " + (/*isDisabled*/ ctx[14] ? "aa-disabled" : "") + " svelte-j93upt");
			set_style(div4, "grid-row", "2 / 3");
			set_style(div4, "grid-column", "1 / 2");
			attr(label5, "for", "");
			attr(label5, "class", "svelte-j93upt");
			input1.disabled = /*isDisabled*/ ctx[14];
			attr(input1, "type", "Number");
			attr(input1, "placeholder", "250");
			attr(input1, "class", "svelte-j93upt");
			attr(div5, "class", div5_class_value = "flexcol " + (/*isDisabled*/ ctx[14] ? "aa-disabled" : "") + " svelte-j93upt");
			set_style(div5, "grid-row", "2 / 3");
			set_style(div5, "grid-column", "2 / 3");
			attr(label6, "for", "aaOpacity");
			attr(label6, "class", "svelte-j93upt");
			input2.disabled = /*disabled01*/ ctx[15];
			attr(input2, "type", "Number");
			attr(input2, "id", "aaOpacity");
			attr(input2, "placeholder", "1");
			attr(input2, "min", "0");
			attr(input2, "max", "1");
			attr(input2, "step", "0.01");
			attr(input2, "class", "svelte-j93upt");
			input3.disabled = /*disabled01*/ ctx[15];
			attr(input3, "type", "range");
			attr(input3, "min", "0");
			attr(input3, "max", "1");
			attr(input3, "step", "0.01");
			attr(input3, "class", "svelte-j93upt");
			attr(div6, "class", "form-group");
			attr(div7, "class", div7_class_value = "flexcol " + (/*disabled01*/ ctx[15] ? "aa-disabled" : "") + " svelte-j93upt");
			set_style(div7, "grid-row", "2 / 3");
			set_style(div7, "grid-column", "4 / 5");
			attr(div8, "class", "aa-options svelte-j93upt");
		},
		m(target, anchor) {
			insert(target, div9, anchor);
			append(div9, h2);
			append(div9, t1);
			append(div9, div8);
			append(div8, div0);
			append(div0, label0);
			append(div0, t3);
			append(div0, button0);
			append(button0, t4);
			append(div8, t5);
			append(div8, div1);
			append(div1, label1);
			append(div1, t7);
			append(div1, button1);
			append(button1, t8);
			append(div8, t9);
			append(div8, div2);
			append(div2, label2);
			append(div2, t11);
			append(div2, button2);
			append(button2, t12);
			append(div8, t13);
			append(div8, div3);
			append(div3, label3);
			append(div3, t15);
			append(div3, button3);
			append(button3, t16);
			append(div8, t17);
			append(div8, div4);
			append(div4, label4);
			append(div4, t19);
			append(div4, input0);
			set_input_value(input0, /*repeat*/ ctx[2]);
			append(div8, t20);
			append(div8, div5);
			append(div5, label5);
			append(div5, t24);
			append(div5, input1);
			set_input_value(input1, /*delay*/ ctx[3]);
			append(div8, t25);
			if (if_block0) if_block0.m(div8, null);
			append(div8, t26);
			append(div8, div7);
			append(div7, label6);
			append(div7, t28);
			append(div7, div6);
			append(div6, input2);
			set_input_value(input2, /*opacity*/ ctx[6]);
			append(div6, t29);
			append(div6, input3);
			set_input_value(input3, /*opacity*/ ctx[6]);
			append(div8, t30);
			if (if_block1) if_block1.m(div8, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[31]),
					listen(button1, "click", /*click_handler_1*/ ctx[32]),
					listen(button2, "click", /*click_handler_2*/ ctx[33]),
					listen(button3, "click", /*click_handler_3*/ ctx[34]),
					listen(input0, "input", /*input0_input_handler*/ ctx[35]),
					listen(input1, "input", /*input1_input_handler*/ ctx[36]),
					listen(input2, "input", /*input2_input_handler*/ ctx[39]),
					listen(input3, "change", /*input3_change_input_handler*/ ctx[40]),
					listen(input3, "input", /*input3_change_input_handler*/ ctx[40])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*isPersistent*/ 65536) set_data(t4, /*isPersistent*/ ctx[16]);

			if (!current || dirty[0] & /*disabled01*/ 32768) {
				button0.disabled = /*disabled01*/ ctx[15];
			}

			if (!current || dirty[0] & /*disabled01*/ 32768 && div0_class_value !== (div0_class_value = "flexcol " + (/*disabled01*/ ctx[15] ? "aa-disabled" : "") + " svelte-j93upt")) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*aboveBelow*/ 524288) set_data(t8, /*aboveBelow*/ ctx[19]);
			if (!current || dirty[0] & /*bindVisibility*/ 131072) set_data(t12, /*bindVisibility*/ ctx[17]);

			if (!current || dirty[0] & /*disabled01, animType*/ 32769 && button2_disabled_value !== (button2_disabled_value = /*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx')) {
				button2.disabled = button2_disabled_value;
			}

			if (!current || dirty[0] & /*disabled01, animType*/ 32769 && div2_class_value !== (div2_class_value = "flexcol " + (/*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx'
			? "aa-disabled"
			: "") + " svelte-j93upt")) {
				attr(div2, "class", div2_class_value);
			}

			if (!current || dirty[0] & /*bindAlpha*/ 262144) set_data(t16, /*bindAlpha*/ ctx[18]);

			if (!current || dirty[0] & /*disabled01, animType*/ 32769 && button3_disabled_value !== (button3_disabled_value = /*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx')) {
				button3.disabled = button3_disabled_value;
			}

			if (!current || dirty[0] & /*disabled01, animType*/ 32769 && div3_class_value !== (div3_class_value = "flexcol " + (/*disabled01*/ ctx[15] || /*animType*/ ctx[0] === 'templatefx'
			? "aa-disabled"
			: "") + " svelte-j93upt")) {
				attr(div3, "class", div3_class_value);
			}

			if (!current || dirty[0] & /*isDisabled*/ 16384) {
				input0.disabled = /*isDisabled*/ ctx[14];
			}

			if (dirty[0] & /*repeat*/ 4) {
				set_input_value(input0, /*repeat*/ ctx[2]);
			}

			if (!current || dirty[0] & /*isDisabled*/ 16384 && div4_class_value !== (div4_class_value = "flexcol " + (/*isDisabled*/ ctx[14] ? "aa-disabled" : "") + " svelte-j93upt")) {
				attr(div4, "class", div4_class_value);
			}

			if (!current || dirty[0] & /*isDisabled*/ 16384) {
				input1.disabled = /*isDisabled*/ ctx[14];
			}

			if (dirty[0] & /*delay*/ 8) {
				set_input_value(input1, /*delay*/ ctx[3]);
			}

			if (!current || dirty[0] & /*isDisabled*/ 16384 && div5_class_value !== (div5_class_value = "flexcol " + (/*isDisabled*/ ctx[14] ? "aa-disabled" : "") + " svelte-j93upt")) {
				attr(div5, "class", div5_class_value);
			}

			if (/*animType*/ ctx[0] !== "templatefx") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4$2(ctx);
					if_block0.c();
					if_block0.m(div8, t26);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*disabled01*/ 32768) {
				input2.disabled = /*disabled01*/ ctx[15];
			}

			if (dirty[0] & /*opacity*/ 64) {
				set_input_value(input2, /*opacity*/ ctx[6]);
			}

			if (!current || dirty[0] & /*disabled01*/ 32768) {
				input3.disabled = /*disabled01*/ ctx[15];
			}

			if (dirty[0] & /*opacity*/ 64) {
				set_input_value(input3, /*opacity*/ ctx[6]);
			}

			if (!current || dirty[0] & /*disabled01*/ 32768 && div7_class_value !== (div7_class_value = "flexcol " + (/*disabled01*/ ctx[15] ? "aa-disabled" : "") + " svelte-j93upt")) {
				attr(div7, "class", div7_class_value);
			}

			if (/*animType*/ ctx[0] === "templatefx") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*animType*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div8, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div7_outro) div7_outro.end(1);
				div7_intro = create_in_transition(div7, fade, { duration: 500 });
				div7_intro.start();
			});

			transition_in(if_block1);

			add_render_callback(() => {
				if (div8_outro) div8_outro.end(1);
				div8_intro = create_in_transition(div8, fade, { duration: 500 });
				div8_intro.start();
			});

			add_render_callback(() => {
				if (!div9_transition) div9_transition = create_bidirectional_transition(div9, fade, { duration: 500 }, true);
				div9_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (div7_intro) div7_intro.invalidate();
			div7_outro = create_out_transition(div7, fade, { duration: 500 });
			transition_out(if_block1);
			if (div8_intro) div8_intro.invalidate();
			div8_outro = create_out_transition(div8, fade, { duration: 500 });
			if (!div9_transition) div9_transition = create_bidirectional_transition(div9, fade, { duration: 500 }, false);
			div9_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div9);
			if (if_block0) if_block0.d();
			if (detaching && div7_outro) div7_outro.end();
			if (if_block1) if_block1.d();
			if (detaching && div8_outro) div8_outro.end();
			if (detaching && div9_transition) div9_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let isRemove;
	let aboveBelow;
	let bindAlpha;
	let bindVisibility;
	let isPersistent;
	let disabled01;
	let isDisabled;
	let { flagData } = $$props;
	let { animType } = $$props;
	let { menuType } = $$props;
	const options = flagData.options || {};
	let repeat = options.repeat || 1;
	let delay = options.delay || 250;
	let scale = options.scale || 1;
	let auraRadius = options.auraRadius;
	let belowToken = options.below || false;
	let opacity = options.opacity || 1;
	let unbindAlpha = options.unbindAlpha || false;
	let unbindVisbility = options.unbindVisbility || false;
	let persistent = options.persistent || false;
	let removeTemplate = options.removeTemplate || false;
	let scaleX = options.scaleX;
	let scaleY = options.scaleY;
	let persistType = options.persistType || false;
	let occlusionMode = options.occlusionMode || "3";
	let occlusionAlpha = options.occlusionAlpha || 0.5;

	function below() {
		$$invalidate(27, belowToken = !belowToken);
		console.log(menuSelection);
		console.log(isDisabled);
	}

	function switchAlpha() {
		$$invalidate(28, unbindAlpha = !unbindAlpha);
	}

	function switchVisibility() {
		$$invalidate(29, unbindVisbility = !unbindVisbility);
	}

	function switchPersistence() {
		$$invalidate(7, persistent = !persistent);
		let newPersistance = persistent;

		if (newPersistance) {
			$$invalidate(2, repeat = 1);
		}
	}

	function switchRemove() {
		$$invalidate(8, removeTemplate = !removeTemplate);
	}

	let menuSelection = flagData.animType;

	menuAnimType.subscribe(value => {
		$$invalidate(30, menuSelection = value);
	});

	const click_handler = () => switchPersistence();
	const click_handler_1 = () => below();
	const click_handler_2 = () => switchVisibility();
	const click_handler_3 = () => switchAlpha();

	function input0_input_handler() {
		repeat = this.value;
		$$invalidate(2, repeat);
	}

	function input1_input_handler() {
		delay = this.value;
		$$invalidate(3, delay);
	}

	function input_input_handler() {
		auraRadius = this.value;
		$$invalidate(5, auraRadius);
	}

	function input_input_handler_1() {
		scale = this.value;
		$$invalidate(4, scale);
	}

	function input2_input_handler() {
		opacity = this.value;
		$$invalidate(6, opacity);
	}

	function input3_change_input_handler() {
		opacity = to_number(this.value);
		$$invalidate(6, opacity);
	}

	function input0_input_handler_1() {
		scaleX = this.value;
		$$invalidate(9, scaleX);
	}

	function input1_input_handler_1() {
		scaleY = this.value;
		$$invalidate(10, scaleY);
	}

	const click_handler_4 = () => switchRemove();

	function select_change_handler() {
		persistType = select_value(this);
		$$invalidate(11, persistType);
	}

	function select_change_handler_1() {
		occlusionMode = select_value(this);
		$$invalidate(12, occlusionMode);
	}

	function input0_input_handler_2() {
		occlusionAlpha = this.value;
		$$invalidate(13, occlusionAlpha);
	}

	function input1_change_input_handler() {
		occlusionAlpha = to_number(this.value);
		$$invalidate(13, occlusionAlpha);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(26, flagData = $$props.flagData);
		if ('animType' in $$props) $$invalidate(0, animType = $$props.animType);
		if ('menuType' in $$props) $$invalidate(1, menuType = $$props.menuType);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*animType*/ 1) {
			$$invalidate(0, animType);
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 2) {
			$$invalidate(1, menuType);
		}

		if ($$self.$$.dirty[0] & /*repeat*/ 4) {
			$$invalidate(2, repeat);
		}

		if ($$self.$$.dirty[0] & /*repeat*/ 4) {
			options.repeat = repeat;
		}

		if ($$self.$$.dirty[0] & /*delay*/ 8) {
			$$invalidate(3, delay);
		}

		if ($$self.$$.dirty[0] & /*delay*/ 8) {
			options.delay = delay;
		}

		if ($$self.$$.dirty[0] & /*scale*/ 16) {
			$$invalidate(4, scale);
		}

		if ($$self.$$.dirty[0] & /*scale*/ 16) {
			options.scale = scale;
		}

		if ($$self.$$.dirty[0] & /*auraRadius*/ 32) {
			$$invalidate(5, auraRadius);
		}

		if ($$self.$$.dirty[0] & /*auraRadius*/ 32) {
			options.auraRadius = auraRadius;
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 134217728) {
			$$invalidate(27, belowToken);
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 134217728) {
			options.below = belowToken;
		}

		if ($$self.$$.dirty[0] & /*opacity*/ 64) {
			$$invalidate(6, opacity = opacity > 1 ? 1 : opacity);
		}

		if ($$self.$$.dirty[0] & /*opacity*/ 64) {
			options.opacity = opacity > 1 ? 1 : opacity;
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 268435456) {
			$$invalidate(28, unbindAlpha);
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 268435456) {
			options.unbindAlpha = unbindAlpha;
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 536870912) {
			$$invalidate(29, unbindVisbility);
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 536870912) {
			options.unbindVisbility = unbindVisbility;
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 128) {
			$$invalidate(7, persistent);
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 128) {
			options.persistent = persistent;
		}

		if ($$self.$$.dirty[0] & /*removeTemplate*/ 256) {
			$$invalidate(8, removeTemplate);
		}

		if ($$self.$$.dirty[0] & /*removeTemplate*/ 256) {
			options.removeTemplate = removeTemplate;
		}

		if ($$self.$$.dirty[0] & /*removeTemplate*/ 256) {
			$$invalidate(20, isRemove = removeTemplate ? "Yes" : "No");
		}

		if ($$self.$$.dirty[0] & /*scaleX*/ 512) {
			$$invalidate(9, scaleX);
		}

		if ($$self.$$.dirty[0] & /*scaleX*/ 512) {
			options.scaleX = scaleX;
		}

		if ($$self.$$.dirty[0] & /*scaleY*/ 1024) {
			$$invalidate(10, scaleY);
		}

		if ($$self.$$.dirty[0] & /*scaleY*/ 1024) {
			options.scaleY = scaleY;
		}

		if ($$self.$$.dirty[0] & /*persistType*/ 2048) {
			$$invalidate(11, persistType);
		}

		if ($$self.$$.dirty[0] & /*persistType*/ 2048) {
			options.persistType = persistType;
		}

		if ($$self.$$.dirty[0] & /*occlusionMode*/ 4096) {
			$$invalidate(12, occlusionMode);
		}

		if ($$self.$$.dirty[0] & /*occlusionMode*/ 4096) {
			options.occlusionMode = occlusionMode;
		}

		if ($$self.$$.dirty[0] & /*occlusionAlpha*/ 8192) {
			$$invalidate(13, occlusionAlpha = occlusionAlpha > 1 ? 1 : occlusionAlpha);
		}

		if ($$self.$$.dirty[0] & /*occlusionAlpha*/ 8192) {
			options.occlusionAlpha = occlusionAlpha > 1 ? 1 : occlusionAlpha;
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 134217728) {
			$$invalidate(19, aboveBelow = belowToken ? "Below Token" : "Above Token");
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 268435456) {
			$$invalidate(18, bindAlpha = unbindAlpha ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 536870912) {
			$$invalidate(17, bindVisibility = unbindVisbility ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 128) {
			$$invalidate(16, isPersistent = persistent ? "Persistent" : "Not Persistent");
		}

		if ($$self.$$.dirty[0] & /*menuSelection*/ 1073741824) {
			$$invalidate(30, menuSelection);
		}

		if ($$self.$$.dirty[0] & /*flagData, menuSelection*/ 1140850688) {
			$$invalidate(15, disabled01 = flagData.animType === "melee" || flagData.animType === "range" || menuSelection === "melee" || menuSelection === 'range');
		}

		if ($$self.$$.dirty[0] & /*flagData, menuSelection, persistent*/ 1140850816) {
			$$invalidate(14, isDisabled = flagData.animType === "melee" || flagData.animType === "range" || menuSelection === "melee" || menuSelection === "range"
			? false
			: persistent);
		}
	};

	return [
		animType,
		menuType,
		repeat,
		delay,
		scale,
		auraRadius,
		opacity,
		persistent,
		removeTemplate,
		scaleX,
		scaleY,
		persistType,
		occlusionMode,
		occlusionAlpha,
		isDisabled,
		disabled01,
		isPersistent,
		bindVisibility,
		bindAlpha,
		aboveBelow,
		isRemove,
		below,
		switchAlpha,
		switchVisibility,
		switchPersistence,
		switchRemove,
		flagData,
		belowToken,
		unbindAlpha,
		unbindVisbility,
		menuSelection,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		input0_input_handler,
		input1_input_handler,
		input_input_handler,
		input_input_handler_1,
		input2_input_handler,
		input3_change_input_handler,
		input0_input_handler_1,
		input1_input_handler_1,
		click_handler_4,
		select_change_handler,
		select_change_handler_1,
		input0_input_handler_2,
		input1_change_input_handler
	];
}

class Options extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { flagData: 26, animType: 0, menuType: 1 }, null, [-1, -1]);
	}
}

/* src\formApps\ItemMenu\components\primarySection.svelte generated by Svelte v3.47.0 */

function create_fragment$9(ctx) {
	let div3;
	let div2;
	let div0;
	let t1;
	let div1;
	let i;
	let div1_transition;
	let t2;
	let chooseanimation;
	let updating_menuType;
	let updating_animation;
	let updating_variant;
	let updating_color;
	let updating_isCustom;
	let updating_customPath;
	let updating_menuSelection;
	let t3;
	let options_1;
	let t4;
	let soundsettings;
	let current;
	let mounted;
	let dispose;

	function chooseanimation_menuType_binding(value) {
		/*chooseanimation_menuType_binding*/ ctx[13](value);
	}

	function chooseanimation_animation_binding(value) {
		/*chooseanimation_animation_binding*/ ctx[14](value);
	}

	function chooseanimation_variant_binding(value) {
		/*chooseanimation_variant_binding*/ ctx[15](value);
	}

	function chooseanimation_color_binding(value) {
		/*chooseanimation_color_binding*/ ctx[16](value);
	}

	function chooseanimation_isCustom_binding(value) {
		/*chooseanimation_isCustom_binding*/ ctx[17](value);
	}

	function chooseanimation_customPath_binding(value) {
		/*chooseanimation_customPath_binding*/ ctx[18](value);
	}

	function chooseanimation_menuSelection_binding(value) {
		/*chooseanimation_menuSelection_binding*/ ctx[19](value);
	}

	let chooseanimation_props = {
		flagPath: "PrimaryAnimation",
		animTypeSwitched: /*animTypeSwitched*/ ctx[2],
		animType: /*animType*/ ctx[1],
		flagData: /*flagData*/ ctx[0]
	};

	if (/*menuType*/ ctx[3] !== void 0) {
		chooseanimation_props.menuType = /*menuType*/ ctx[3];
	}

	if (/*animation*/ ctx[4] !== void 0) {
		chooseanimation_props.animation = /*animation*/ ctx[4];
	}

	if (/*variant*/ ctx[5] !== void 0) {
		chooseanimation_props.variant = /*variant*/ ctx[5];
	}

	if (/*color*/ ctx[6] !== void 0) {
		chooseanimation_props.color = /*color*/ ctx[6];
	}

	if (/*isCustom*/ ctx[7] !== void 0) {
		chooseanimation_props.isCustom = /*isCustom*/ ctx[7];
	}

	if (/*customPath*/ ctx[8] !== void 0) {
		chooseanimation_props.customPath = /*customPath*/ ctx[8];
	}

	if (/*menuSelection*/ ctx[9] !== void 0) {
		chooseanimation_props.menuSelection = /*menuSelection*/ ctx[9];
	}

	chooseanimation = new ChooseAnimation({ props: chooseanimation_props });
	binding_callbacks.push(() => bind(chooseanimation, 'menuType', chooseanimation_menuType_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'animation', chooseanimation_animation_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'variant', chooseanimation_variant_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'color', chooseanimation_color_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'isCustom', chooseanimation_isCustom_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'customPath', chooseanimation_customPath_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'menuSelection', chooseanimation_menuSelection_binding));

	options_1 = new Options({
			props: {
				animType: /*animType*/ ctx[1],
				menuType: /*menuType*/ ctx[3],
				flagData: /*flagData*/ ctx[0]
			}
		});

	soundsettings = new SoundSettings({
			props: {
				audioPath: "a01",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.innerHTML = `<label for="">Primary Animation</label>`;
			t1 = space();
			div1 = element("div");
			i = element("i");
			t2 = space();
			create_component(chooseanimation.$$.fragment);
			t3 = space();
			create_component(options_1.$$.fragment);
			t4 = space();
			create_component(soundsettings.$$.fragment);
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "3/4");
			attr(i, "class", "fas fa-video aa-video-preview");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1/2");
			set_style(div1, "grid-column", "1/2");
			attr(div2, "class", "aa-header");
			attr(div3, "class", "aa-header-section");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			append(div1, i);
			insert(target, t2, anchor);
			mount_component(chooseanimation, target, anchor);
			insert(target, t3, anchor);
			mount_component(options_1, target, anchor);
			insert(target, t4, anchor);
			mount_component(soundsettings, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chooseanimation_changes = {};
			if (dirty & /*animTypeSwitched*/ 4) chooseanimation_changes.animTypeSwitched = /*animTypeSwitched*/ ctx[2];
			if (dirty & /*animType*/ 2) chooseanimation_changes.animType = /*animType*/ ctx[1];
			if (dirty & /*flagData*/ 1) chooseanimation_changes.flagData = /*flagData*/ ctx[0];

			if (!updating_menuType && dirty & /*menuType*/ 8) {
				updating_menuType = true;
				chooseanimation_changes.menuType = /*menuType*/ ctx[3];
				add_flush_callback(() => updating_menuType = false);
			}

			if (!updating_animation && dirty & /*animation*/ 16) {
				updating_animation = true;
				chooseanimation_changes.animation = /*animation*/ ctx[4];
				add_flush_callback(() => updating_animation = false);
			}

			if (!updating_variant && dirty & /*variant*/ 32) {
				updating_variant = true;
				chooseanimation_changes.variant = /*variant*/ ctx[5];
				add_flush_callback(() => updating_variant = false);
			}

			if (!updating_color && dirty & /*color*/ 64) {
				updating_color = true;
				chooseanimation_changes.color = /*color*/ ctx[6];
				add_flush_callback(() => updating_color = false);
			}

			if (!updating_isCustom && dirty & /*isCustom*/ 128) {
				updating_isCustom = true;
				chooseanimation_changes.isCustom = /*isCustom*/ ctx[7];
				add_flush_callback(() => updating_isCustom = false);
			}

			if (!updating_customPath && dirty & /*customPath*/ 256) {
				updating_customPath = true;
				chooseanimation_changes.customPath = /*customPath*/ ctx[8];
				add_flush_callback(() => updating_customPath = false);
			}

			if (!updating_menuSelection && dirty & /*menuSelection*/ 512) {
				updating_menuSelection = true;
				chooseanimation_changes.menuSelection = /*menuSelection*/ ctx[9];
				add_flush_callback(() => updating_menuSelection = false);
			}

			chooseanimation.$set(chooseanimation_changes);
			const options_1_changes = {};
			if (dirty & /*animType*/ 2) options_1_changes.animType = /*animType*/ ctx[1];
			if (dirty & /*menuType*/ 8) options_1_changes.menuType = /*menuType*/ ctx[3];
			if (dirty & /*flagData*/ 1) options_1_changes.flagData = /*flagData*/ ctx[0];
			options_1.$set(options_1_changes);
			const soundsettings_changes = {};
			if (dirty & /*flagData*/ 1) soundsettings_changes.flagData = /*flagData*/ ctx[0];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			transition_in(chooseanimation.$$.fragment, local);
			transition_in(options_1.$$.fragment, local);
			transition_in(soundsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			transition_out(chooseanimation.$$.fragment, local);
			transition_out(options_1.$$.fragment, local);
			transition_out(soundsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (detaching && div1_transition) div1_transition.end();
			if (detaching) detach(t2);
			destroy_component(chooseanimation, detaching);
			if (detaching) detach(t3);
			destroy_component(options_1, detaching);
			if (detaching) detach(t4);
			destroy_component(soundsettings, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	let { animType } = $$props;
	let { animTypeSwitched } = $$props;
	const options = flagData.options;
	let menuType = options.menuType;
	let animation = flagData.animation;
	let variant = options.variant;
	let color = flagData.color;
	let isCustom = options.enableCustom || false;
	let customPath = options.customPath;

	let menuSelection = flagData.animType === "aura"
	? "static"
	: flagData.animType;

	let primaryFilePath;

	function onClick() {
		new TJSDialog({
				modal: false,
				draggable: true,
				resizable: true,
				title: "Primary Animation",
				stylesContent: { background: "rgba(125, 125, 125, 0.75)" },
				content: { class: PrimaryApp }
			}).render(true);
	}

	const click_handler = () => onClick();

	function chooseanimation_menuType_binding(value) {
		menuType = value;
		$$invalidate(3, menuType);
	}

	function chooseanimation_animation_binding(value) {
		animation = value;
		$$invalidate(4, animation);
	}

	function chooseanimation_variant_binding(value) {
		variant = value;
		$$invalidate(5, variant);
	}

	function chooseanimation_color_binding(value) {
		color = value;
		$$invalidate(6, color);
	}

	function chooseanimation_isCustom_binding(value) {
		isCustom = value;
		$$invalidate(7, isCustom);
	}

	function chooseanimation_customPath_binding(value) {
		customPath = value;
		$$invalidate(8, customPath);
	}

	function chooseanimation_menuSelection_binding(value) {
		menuSelection = value;
		$$invalidate(9, menuSelection);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
		if ('animType' in $$props) $$invalidate(1, animType = $$props.animType);
		if ('animTypeSwitched' in $$props) $$invalidate(2, animTypeSwitched = $$props.animTypeSwitched);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*menuType*/ 8) {
			$$invalidate(3, menuType = options.menuType = menuType);
		}

		if ($$self.$$.dirty & /*animation*/ 16) {
			$$invalidate(4, animation = $$invalidate(0, flagData.animation = animation, flagData));
		}

		if ($$self.$$.dirty & /*variant*/ 32) {
			$$invalidate(5, variant = options.variant = variant);
		}

		if ($$self.$$.dirty & /*color*/ 64) {
			$$invalidate(6, color = $$invalidate(0, flagData.color = color, flagData));
		}

		if ($$self.$$.dirty & /*isCustom*/ 128) {
			$$invalidate(7, isCustom);
		}

		if ($$self.$$.dirty & /*customPath*/ 256) {
			$$invalidate(8, customPath);
		}

		if ($$self.$$.dirty & /*menuSelection*/ 512) {
			$$invalidate(9, menuSelection);
		}

		if ($$self.$$.dirty & /*color, menuSelection, menuType, animation, variant*/ 632) {
			$$invalidate(11, primaryFilePath = color === "random"
			? `autoanimations.${menuSelection}.${menuType}.${animation}.${variant}`
			: `autoanimations.${menuSelection}.${menuType}.${animation}.${variant}.${color}`);
		}

		if ($$self.$$.dirty & /*primaryFilePath, customPath, isCustom*/ 2432) {
			// Sets Store variables for sending to the Video Previewer
			{
				menuDBPath01.set(primaryFilePath);
				customFilePath01.set(customPath);
				customChecked01.set(isCustom);
			}
		}
	};

	return [
		flagData,
		animType,
		animTypeSwitched,
		menuType,
		animation,
		variant,
		color,
		isCustom,
		customPath,
		menuSelection,
		onClick,
		primaryFilePath,
		click_handler,
		chooseanimation_menuType_binding,
		chooseanimation_animation_binding,
		chooseanimation_variant_binding,
		chooseanimation_color_binding,
		chooseanimation_isCustom_binding,
		chooseanimation_customPath_binding,
		chooseanimation_menuSelection_binding
	];
}

class PrimarySection extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			flagData: 0,
			animType: 1,
			animTypeSwitched: 2
		});
	}
}

/* src\formApps\ItemMenu\videoPreviews\sourceFXApp.svelte generated by Svelte v3.47.0 */

function create_fragment$8(ctx) {
	let video;
	let track;
	let video_src_value;

	return {
		c() {
			video = element("video");
			track = element("track");
			attr(track, "kind", "captions");
			attr(video, "class", "aaVideoPreview svelte-9fs2jg");
			if (!src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) attr(video, "src", video_src_value);
			video.autoplay = "autoplay";
			video.controls = true;
			video.loop = true;
		},
		m(target, anchor) {
			insert(target, video, anchor);
			append(video, track);
		},
		p(ctx, [dirty]) {
			if (dirty & /*filePath*/ 1 && !src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let databaseFile;
	let filePath;
	let dbPath;

	menuDBPathSourceFX.subscribe(value => {
		$$invalidate(1, dbPath = value);
	});

	let isCustom;

	customCheckedSourceFX.subscribe(value => {
		$$invalidate(2, isCustom = value);
	});

	let customPath;

	customFilePathSourceFX.subscribe(value => {
		$$invalidate(3, customPath = value);
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dbPath*/ 2) {
			$$invalidate(4, databaseFile = getPreviewFile(dbPath));
		}

		if ($$self.$$.dirty & /*isCustom, customPath, databaseFile*/ 28) {
			$$invalidate(0, filePath = isCustom ? customPath : databaseFile);
		}
	};

	return [filePath, dbPath, isCustom, customPath, databaseFile];
}

class SourceFXApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\videoPreviews\targetFXApp.svelte generated by Svelte v3.47.0 */

function create_fragment$7(ctx) {
	let video;
	let track;
	let video_src_value;

	return {
		c() {
			video = element("video");
			track = element("track");
			attr(track, "kind", "captions");
			attr(video, "class", "aaVideoPreview svelte-9fs2jg");
			if (!src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) attr(video, "src", video_src_value);
			video.autoplay = "autoplay";
			video.controls = true;
			video.loop = true;
		},
		m(target, anchor) {
			insert(target, video, anchor);
			append(video, track);
		},
		p(ctx, [dirty]) {
			if (dirty & /*filePath*/ 1 && !src_url_equal(video.src, video_src_value = /*filePath*/ ctx[0])) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	let databaseFile;
	let filePath;
	let dbPath;

	menuDBPathTargetFX.subscribe(value => {
		$$invalidate(1, dbPath = value);
	});

	let isCustom;

	customCheckedTargetFX.subscribe(value => {
		$$invalidate(2, isCustom = value);
	});

	let customPath;

	customFilePathTargetFX.subscribe(value => {
		$$invalidate(3, customPath = value);
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dbPath*/ 2) {
			$$invalidate(4, databaseFile = getPreviewFile(dbPath));
		}

		if ($$self.$$.dirty & /*isCustom, customPath, databaseFile*/ 28) {
			$$invalidate(0, filePath = isCustom ? customPath : databaseFile);
		}
	};

	return [filePath, dbPath, isCustom, customPath, databaseFile];
}

class TargetFXApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\extraFX.svelte generated by Svelte v3.47.0 */

function create_if_block_1$4(ctx) {
	let div;
	let i;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			i = element("i");
			attr(i, "class", "fas fa-video aa-video-preview");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "1/2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, i);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler*/ ctx[31]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

// (194:4) {#if enableSection}
function create_if_block$4(ctx) {
	let chooseanimation;
	let updating_menuType;
	let updating_animation;
	let updating_variant;
	let updating_color;
	let updating_isCustom;
	let updating_customPath;
	let t0;
	let h2;
	let h2_transition;
	let t2;
	let div9;
	let div0;
	let label0;
	let t4;
	let button0;
	let t5;
	let button0_disabled_value;
	let div0_class_value;
	let t6;
	let div1;
	let label1;
	let t8;
	let button1;
	let t9;
	let t10;
	let div2;
	let label2;
	let t12;
	let button2;
	let t13;
	let button2_disabled_value;
	let div2_class_value;
	let t14;
	let div3;
	let label3;
	let t16;
	let button3;
	let t17;
	let button3_disabled_value;
	let div3_class_value;
	let t18;
	let div4;
	let label4;
	let t20;
	let input0;
	let div4_class_value;
	let t21;
	let div5;
	let label5;
	let t25;
	let input1;
	let div5_class_value;
	let t26;
	let div6;
	let label6;
	let t28;
	let input2;
	let t29;
	let div8;
	let label7;
	let t31;
	let div7;
	let input3;
	let t32;
	let input4;
	let div8_intro;
	let div8_outro;
	let div9_transition;
	let t33;
	let soundsettings;
	let current;
	let mounted;
	let dispose;

	function chooseanimation_menuType_binding(value) {
		/*chooseanimation_menuType_binding*/ ctx[33](value);
	}

	function chooseanimation_animation_binding(value) {
		/*chooseanimation_animation_binding*/ ctx[34](value);
	}

	function chooseanimation_variant_binding(value) {
		/*chooseanimation_variant_binding*/ ctx[35](value);
	}

	function chooseanimation_color_binding(value) {
		/*chooseanimation_color_binding*/ ctx[36](value);
	}

	function chooseanimation_isCustom_binding(value) {
		/*chooseanimation_isCustom_binding*/ ctx[37](value);
	}

	function chooseanimation_customPath_binding(value) {
		/*chooseanimation_customPath_binding*/ ctx[38](value);
	}

	let chooseanimation_props = {
		flagPath: /*flagPath*/ ctx[1],
		flagData: /*flagData*/ ctx[0]
	};

	if (/*menuType*/ ctx[8] !== void 0) {
		chooseanimation_props.menuType = /*menuType*/ ctx[8];
	}

	if (/*animation*/ ctx[9] !== void 0) {
		chooseanimation_props.animation = /*animation*/ ctx[9];
	}

	if (/*variant*/ ctx[10] !== void 0) {
		chooseanimation_props.variant = /*variant*/ ctx[10];
	}

	if (/*color*/ ctx[11] !== void 0) {
		chooseanimation_props.color = /*color*/ ctx[11];
	}

	if (/*isCustom*/ ctx[12] !== void 0) {
		chooseanimation_props.isCustom = /*isCustom*/ ctx[12];
	}

	if (/*customPath*/ ctx[13] !== void 0) {
		chooseanimation_props.customPath = /*customPath*/ ctx[13];
	}

	chooseanimation = new ChooseAnimation({ props: chooseanimation_props });
	binding_callbacks.push(() => bind(chooseanimation, 'menuType', chooseanimation_menuType_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'animation', chooseanimation_animation_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'variant', chooseanimation_variant_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'color', chooseanimation_color_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'isCustom', chooseanimation_isCustom_binding));
	binding_callbacks.push(() => bind(chooseanimation, 'customPath', chooseanimation_customPath_binding));

	soundsettings = new SoundSettings({
			props: {
				audioPath: /*audioPath*/ ctx[14],
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(chooseanimation.$$.fragment);
			t0 = space();
			h2 = element("h2");
			h2.textContent = "Options";
			t2 = space();
			div9 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Persistence";
			t4 = space();
			button0 = element("button");
			t5 = text(/*isPersistent*/ ctx[16]);
			t6 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "Z-Index";
			t8 = space();
			button1 = element("button");
			t9 = text(/*aboveBelow*/ ctx[19]);
			t10 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Visibility";
			t12 = space();
			button2 = element("button");
			t13 = text(/*bindVisibility*/ ctx[17]);
			t14 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = "Alpha";
			t16 = space();
			button3 = element("button");
			t17 = text(/*bindAlpha*/ ctx[18]);
			t18 = space();
			div4 = element("div");
			label4 = element("label");
			label4.textContent = `${localize("AUTOANIM.repeat")}`;
			t20 = space();
			input0 = element("input");
			t21 = space();
			div5 = element("div");
			label5 = element("label");

			label5.textContent = `${localize("AUTOANIM.repeat")} 
                ${localize("AUTOANIM.delay")}`;

			t25 = space();
			input1 = element("input");
			t26 = space();
			div6 = element("div");
			label6 = element("label");
			label6.textContent = `${localize("AUTOANIM.scale")}`;
			t28 = space();
			input2 = element("input");
			t29 = space();
			div8 = element("div");
			label7 = element("label");
			label7.textContent = `${localize("AUTOANIM.opacity")}`;
			t31 = space();
			div7 = element("div");
			input3 = element("input");
			t32 = space();
			input4 = element("input");
			t33 = space();
			create_component(soundsettings.$$.fragment);
			set_style(h2, "margin-top", "5px");
			attr(h2, "class", "svelte-1w3oi2h");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-1w3oi2h");
			button0.disabled = button0_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX";
			attr(button0, "class", "svelte-1w3oi2h");

			attr(div0, "class", div0_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h");

			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-1w3oi2h");
			attr(button1, "class", "oldCheck svelte-1w3oi2h");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-1w3oi2h");
			button2.disabled = button2_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX";
			attr(button2, "class", "svelte-1w3oi2h");

			attr(div2, "class", div2_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h");

			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "3 / 4");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-1w3oi2h");
			button3.disabled = button3_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX";
			attr(button3, "class", "svelte-1w3oi2h");

			attr(div3, "class", div3_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h");

			set_style(div3, "grid-row", "1 / 2");
			set_style(div3, "grid-column", "4 / 5");
			attr(label4, "for", "aaRepeat");
			attr(label4, "class", "svelte-1w3oi2h");
			input0.disabled = /*persistent*/ ctx[6];
			attr(input0, "id", "aaRepeat");
			attr(input0, "type", "Number");
			attr(input0, "placeholder", "1");
			attr(input0, "class", "svelte-1w3oi2h");
			attr(div4, "class", div4_class_value = "flexcol " + (/*persistent*/ ctx[6] ? 'aa-opacityButton' : '') + " svelte-1w3oi2h");
			set_style(div4, "grid-row", "2 / 3");
			set_style(div4, "grid-column", "1 / 2");
			attr(label5, "for", "aaDelay");
			attr(label5, "class", "svelte-1w3oi2h");
			input1.disabled = /*persistent*/ ctx[6];
			attr(input1, "it", "aaDelay");
			attr(input1, "type", "Number");
			attr(input1, "placeholder", "250");
			attr(input1, "class", "svelte-1w3oi2h");
			attr(div5, "class", div5_class_value = "flexcol " + (/*persistent*/ ctx[6] ? 'aa-opacityButton' : '') + " svelte-1w3oi2h");
			set_style(div5, "grid-row", "2 / 3");
			set_style(div5, "grid-column", "2 / 3");
			attr(label6, "for", "");
			attr(label6, "class", "svelte-1w3oi2h");
			attr(input2, "type", "Number");
			attr(input2, "placeholder", "1");
			attr(input2, "step", "0.01");
			attr(input2, "class", "svelte-1w3oi2h");
			attr(div6, "class", "flexcol");
			set_style(div6, "grid-row", "2 / 3");
			set_style(div6, "grid-column", "3 / 4");
			attr(label7, "for", "");
			attr(label7, "class", "svelte-1w3oi2h");
			attr(input3, "type", "Number");
			attr(input3, "placeholder", "1");
			attr(input3, "min", "0");
			attr(input3, "max", "1");
			attr(input3, "step", "0.01");
			attr(input3, "class", "svelte-1w3oi2h");
			attr(input4, "type", "range");
			attr(input4, "min", "0");
			attr(input4, "max", "1");
			attr(input4, "step", "0.01");
			attr(input4, "class", "svelte-1w3oi2h");
			attr(div7, "class", "form-group");
			attr(div8, "class", "flexcol");
			set_style(div8, "grid-row", "2 / 3");
			set_style(div8, "grid-column", "4 / 5");
			attr(div9, "class", "aa-options svelte-1w3oi2h");
		},
		m(target, anchor) {
			mount_component(chooseanimation, target, anchor);
			insert(target, t0, anchor);
			insert(target, h2, anchor);
			insert(target, t2, anchor);
			insert(target, div9, anchor);
			append(div9, div0);
			append(div0, label0);
			append(div0, t4);
			append(div0, button0);
			append(button0, t5);
			append(div9, t6);
			append(div9, div1);
			append(div1, label1);
			append(div1, t8);
			append(div1, button1);
			append(button1, t9);
			append(div9, t10);
			append(div9, div2);
			append(div2, label2);
			append(div2, t12);
			append(div2, button2);
			append(button2, t13);
			append(div9, t14);
			append(div9, div3);
			append(div3, label3);
			append(div3, t16);
			append(div3, button3);
			append(button3, t17);
			append(div9, t18);
			append(div9, div4);
			append(div4, label4);
			append(div4, t20);
			append(div4, input0);
			set_input_value(input0, /*repeat*/ ctx[2]);
			append(div9, t21);
			append(div9, div5);
			append(div5, label5);
			append(div5, t25);
			append(div5, input1);
			set_input_value(input1, /*delay*/ ctx[3]);
			append(div9, t26);
			append(div9, div6);
			append(div6, label6);
			append(div6, t28);
			append(div6, input2);
			set_input_value(input2, /*scale*/ ctx[4]);
			append(div9, t29);
			append(div9, div8);
			append(div8, label7);
			append(div8, t31);
			append(div8, div7);
			append(div7, input3);
			set_input_value(input3, /*opacity*/ ctx[5]);
			append(div7, t32);
			append(div7, input4);
			set_input_value(input4, /*opacity*/ ctx[5]);
			insert(target, t33, anchor);
			mount_component(soundsettings, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_2*/ ctx[39]),
					listen(button1, "click", /*click_handler_3*/ ctx[40]),
					listen(button2, "click", /*click_handler_4*/ ctx[41]),
					listen(button3, "click", /*click_handler_5*/ ctx[42]),
					listen(input0, "input", /*input0_input_handler*/ ctx[43]),
					listen(input1, "input", /*input1_input_handler*/ ctx[44]),
					listen(input2, "input", /*input2_input_handler*/ ctx[45]),
					listen(input3, "input", /*input3_input_handler*/ ctx[46]),
					listen(input4, "change", /*input4_change_input_handler*/ ctx[47]),
					listen(input4, "input", /*input4_change_input_handler*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const chooseanimation_changes = {};
			if (dirty[0] & /*flagPath*/ 2) chooseanimation_changes.flagPath = /*flagPath*/ ctx[1];
			if (dirty[0] & /*flagData*/ 1) chooseanimation_changes.flagData = /*flagData*/ ctx[0];

			if (!updating_menuType && dirty[0] & /*menuType*/ 256) {
				updating_menuType = true;
				chooseanimation_changes.menuType = /*menuType*/ ctx[8];
				add_flush_callback(() => updating_menuType = false);
			}

			if (!updating_animation && dirty[0] & /*animation*/ 512) {
				updating_animation = true;
				chooseanimation_changes.animation = /*animation*/ ctx[9];
				add_flush_callback(() => updating_animation = false);
			}

			if (!updating_variant && dirty[0] & /*variant*/ 1024) {
				updating_variant = true;
				chooseanimation_changes.variant = /*variant*/ ctx[10];
				add_flush_callback(() => updating_variant = false);
			}

			if (!updating_color && dirty[0] & /*color*/ 2048) {
				updating_color = true;
				chooseanimation_changes.color = /*color*/ ctx[11];
				add_flush_callback(() => updating_color = false);
			}

			if (!updating_isCustom && dirty[0] & /*isCustom*/ 4096) {
				updating_isCustom = true;
				chooseanimation_changes.isCustom = /*isCustom*/ ctx[12];
				add_flush_callback(() => updating_isCustom = false);
			}

			if (!updating_customPath && dirty[0] & /*customPath*/ 8192) {
				updating_customPath = true;
				chooseanimation_changes.customPath = /*customPath*/ ctx[13];
				add_flush_callback(() => updating_customPath = false);
			}

			chooseanimation.$set(chooseanimation_changes);
			if (!current || dirty[0] & /*isPersistent*/ 65536) set_data(t5, /*isPersistent*/ ctx[16]);

			if (!current || dirty[0] & /*flagPath*/ 2 && button0_disabled_value !== (button0_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX")) {
				button0.disabled = button0_disabled_value;
			}

			if (!current || dirty[0] & /*flagPath*/ 2 && div0_class_value !== (div0_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h")) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*aboveBelow*/ 524288) set_data(t9, /*aboveBelow*/ ctx[19]);
			if (!current || dirty[0] & /*bindVisibility*/ 131072) set_data(t13, /*bindVisibility*/ ctx[17]);

			if (!current || dirty[0] & /*flagPath*/ 2 && button2_disabled_value !== (button2_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX")) {
				button2.disabled = button2_disabled_value;
			}

			if (!current || dirty[0] & /*flagPath*/ 2 && div2_class_value !== (div2_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h")) {
				attr(div2, "class", div2_class_value);
			}

			if (!current || dirty[0] & /*bindAlpha*/ 262144) set_data(t17, /*bindAlpha*/ ctx[18]);

			if (!current || dirty[0] & /*flagPath*/ 2 && button3_disabled_value !== (button3_disabled_value = /*flagPath*/ ctx[1] === "sourceExtraFX")) {
				button3.disabled = button3_disabled_value;
			}

			if (!current || dirty[0] & /*flagPath*/ 2 && div3_class_value !== (div3_class_value = "flexcol " + (/*flagPath*/ ctx[1] === 'sourceExtraFX'
			? 'aa-opacityButton'
			: '') + " svelte-1w3oi2h")) {
				attr(div3, "class", div3_class_value);
			}

			if (!current || dirty[0] & /*persistent*/ 64) {
				input0.disabled = /*persistent*/ ctx[6];
			}

			if (dirty[0] & /*repeat*/ 4) {
				set_input_value(input0, /*repeat*/ ctx[2]);
			}

			if (!current || dirty[0] & /*persistent*/ 64 && div4_class_value !== (div4_class_value = "flexcol " + (/*persistent*/ ctx[6] ? 'aa-opacityButton' : '') + " svelte-1w3oi2h")) {
				attr(div4, "class", div4_class_value);
			}

			if (!current || dirty[0] & /*persistent*/ 64) {
				input1.disabled = /*persistent*/ ctx[6];
			}

			if (dirty[0] & /*delay*/ 8) {
				set_input_value(input1, /*delay*/ ctx[3]);
			}

			if (!current || dirty[0] & /*persistent*/ 64 && div5_class_value !== (div5_class_value = "flexcol " + (/*persistent*/ ctx[6] ? 'aa-opacityButton' : '') + " svelte-1w3oi2h")) {
				attr(div5, "class", div5_class_value);
			}

			if (dirty[0] & /*scale*/ 16) {
				set_input_value(input2, /*scale*/ ctx[4]);
			}

			if (dirty[0] & /*opacity*/ 32) {
				set_input_value(input3, /*opacity*/ ctx[5]);
			}

			if (dirty[0] & /*opacity*/ 32) {
				set_input_value(input4, /*opacity*/ ctx[5]);
			}

			const soundsettings_changes = {};
			if (dirty[0] & /*audioPath*/ 16384) soundsettings_changes.audioPath = /*audioPath*/ ctx[14];
			if (dirty[0] & /*flagData*/ 1) soundsettings_changes.flagData = /*flagData*/ ctx[0];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(chooseanimation.$$.fragment, local);

			add_render_callback(() => {
				if (!h2_transition) h2_transition = create_bidirectional_transition(h2, fade, {}, true);
				h2_transition.run(1);
			});

			add_render_callback(() => {
				if (div8_outro) div8_outro.end(1);
				div8_intro = create_in_transition(div8, fade, { duration: 500 });
				div8_intro.start();
			});

			add_render_callback(() => {
				if (!div9_transition) div9_transition = create_bidirectional_transition(div9, fade, {}, true);
				div9_transition.run(1);
			});

			transition_in(soundsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chooseanimation.$$.fragment, local);
			if (!h2_transition) h2_transition = create_bidirectional_transition(h2, fade, {}, false);
			h2_transition.run(0);
			if (div8_intro) div8_intro.invalidate();
			div8_outro = create_out_transition(div8, fade, { duration: 500 });
			if (!div9_transition) div9_transition = create_bidirectional_transition(div9, fade, {}, false);
			div9_transition.run(0);
			transition_out(soundsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(chooseanimation, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(h2);
			if (detaching && h2_transition) h2_transition.end();
			if (detaching) detach(t2);
			if (detaching) detach(div9);
			if (detaching && div8_outro) div8_outro.end();
			if (detaching && div9_transition) div9_transition.end();
			if (detaching) detach(t33);
			destroy_component(soundsettings, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$6(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let label;
	let t0;
	let t1;
	let t2;
	let div1;
	let i;
	let i_class_value;
	let t3;
	let div4_transition;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*enableSection*/ ctx[7] && create_if_block_1$4(ctx);
	let if_block1 = /*enableSection*/ ctx[7] && create_if_block$4(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			label = element("label");
			t0 = text(/*sectionTitle*/ ctx[15]);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div1 = element("div");
			i = element("i");
			t3 = space();
			if (if_block1) if_block1.c();
			attr(label, "for", "");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1/2");
			set_style(div0, "grid-column", "3/4");

			attr(i, "class", i_class_value = "" + ((/*enableSection*/ ctx[7]
			? 'fas fa-minus aa-red'
			: 'fas fa-plus aa-green') + " aaCenterToggle"));

			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1/2");
			set_style(div1, "grid-column", "5/6");
			attr(div2, "class", "aa-header");
			attr(div3, "class", "aa-header-section");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, label);
			append(label, t0);
			append(div2, t1);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t2);
			append(div2, div1);
			append(div1, i);
			append(div4, t3);
			if (if_block1) if_block1.m(div4, null);
			current = true;

			if (!mounted) {
				dispose = listen(i, "click", /*click_handler_1*/ ctx[32]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*sectionTitle*/ 32768) set_data(t0, /*sectionTitle*/ ctx[15]);

			if (/*enableSection*/ ctx[7]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*enableSection*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*enableSection*/ 128 && i_class_value !== (i_class_value = "" + ((/*enableSection*/ ctx[7]
			? 'fas fa-minus aa-red'
			: 'fas fa-plus aa-green') + " aaCenterToggle"))) {
				attr(i, "class", i_class_value);
			}

			if (/*enableSection*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*enableSection*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div4, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			add_render_callback(() => {
				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, { duration: 500 }, true);
				div4_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, { duration: 500 }, false);
			div4_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching && div4_transition) div4_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let aboveBelow;
	let bindAlpha;
	let bindVisibility;
	let isPersistent;
	let { flagData } = $$props;
	let { flagPath } = $$props;
	let root;
	let audioPath;
	let sectionTitle;

	switch (flagPath) {
		case "sourceExtraFX":
			console.log("Source FX Options");
			root = flagData.sourceToken;
			audioPath = "s01";
			sectionTitle = "Source Effect";
			break;
		case "targetExtraFX":
			console.log("Target FX Options");
			root = flagData.targetToken;
			audioPath = "t01";
			sectionTitle = "Target Effect";
			break;
	}
	let repeat = root.loops || 1;
	let delay = root.loopDelay;
	let scale = root.scale || 1;
	let belowToken = root.animLevel || false;
	let opacity = root.opacity || 1;
	let unbindAlpha = root.unbindAlpha || false;
	let unbindVisbility = root.unbindVisbility || false;

	let persistent = flagPath === "sourceExtraFX"
	? false
	: root.persistent || false;

	function below() {
		$$invalidate(26, belowToken = !belowToken);
	}

	function switchAlpha() {
		$$invalidate(27, unbindAlpha = !unbindAlpha);
	}

	function switchVisibility() {
		$$invalidate(28, unbindVisbility = !unbindVisbility);
	}

	function switchPersistence() {
		$$invalidate(6, persistent = !persistent);
		let newPersistance = persistent;

		if (newPersistance) {
			$$invalidate(2, repeat = 1);
		}
	}

	let enableSection = root.enable || false;

	function switchEnable() {
		$$invalidate(7, enableSection = !enableSection);
		root.enable = enableSection;
	}

	let menuType = root.menuType;
	let animation = root.animation;
	let variant = root.variant;
	let color = root.color;
	let isCustom = root.enableCustom || false;
	let customPath = root.customPath;

	function onClick() {
		new TJSDialog({
				modal: false,
				draggable: true,
				resizable: true,
				title: flagPath === "sourceExtraFX"
				? "Extra Source Effect"
				: "Extra Target Effect",
				stylesContent: { background: "rgba(125, 125, 125, 0.75)" },
				content: {
					class: flagPath === "sourceExtraFX" ? SourceFXApp : TargetFXApp
				}
			}).render(true);
	}

	let sourceFilePath;
	let targetFilePath;
	const click_handler = () => onClick();
	const click_handler_1 = () => switchEnable();

	function chooseanimation_menuType_binding(value) {
		menuType = value;
		$$invalidate(8, menuType);
	}

	function chooseanimation_animation_binding(value) {
		animation = value;
		$$invalidate(9, animation);
	}

	function chooseanimation_variant_binding(value) {
		variant = value;
		$$invalidate(10, variant);
	}

	function chooseanimation_color_binding(value) {
		color = value;
		$$invalidate(11, color);
	}

	function chooseanimation_isCustom_binding(value) {
		isCustom = value;
		$$invalidate(12, isCustom);
	}

	function chooseanimation_customPath_binding(value) {
		customPath = value;
		$$invalidate(13, customPath);
	}

	const click_handler_2 = () => switchPersistence();
	const click_handler_3 = () => below();
	const click_handler_4 = () => switchVisibility();
	const click_handler_5 = () => switchAlpha();

	function input0_input_handler() {
		repeat = this.value;
		$$invalidate(2, repeat);
	}

	function input1_input_handler() {
		delay = this.value;
		$$invalidate(3, delay);
	}

	function input2_input_handler() {
		scale = this.value;
		$$invalidate(4, scale);
	}

	function input3_input_handler() {
		opacity = this.value;
		$$invalidate(5, opacity);
	}

	function input4_change_input_handler() {
		opacity = to_number(this.value);
		$$invalidate(5, opacity);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
		if ('flagPath' in $$props) $$invalidate(1, flagPath = $$props.flagPath);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*repeat*/ 4) {
			$$invalidate(2, repeat = root.loops = repeat);
		}

		if ($$self.$$.dirty[0] & /*delay*/ 8) {
			$$invalidate(3, delay = root.loopDelay = delay);
		}

		if ($$self.$$.dirty[0] & /*scale*/ 16) {
			$$invalidate(4, scale = root.scale = scale);
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 67108864) {
			$$invalidate(26, belowToken = root.animLevel = belowToken);
		}

		if ($$self.$$.dirty[0] & /*opacity*/ 32) {
			$$invalidate(5, opacity = root.opacity = opacity > 1 ? 1 : opacity);
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 134217728) {
			$$invalidate(27, unbindAlpha = root.unbindAlpha = unbindAlpha);
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 268435456) {
			$$invalidate(28, unbindVisbility = root.unbindVisbility = unbindVisbility);
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 64) {
			$$invalidate(6, persistent = root.persistent = persistent);
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 67108864) {
			$$invalidate(19, aboveBelow = belowToken ? "Below Token" : "Above Token");
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 134217728) {
			$$invalidate(18, bindAlpha = unbindAlpha ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 268435456) {
			$$invalidate(17, bindVisibility = unbindVisbility ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 64) {
			$$invalidate(16, isPersistent = persistent ? "Persistent" : "Not Persistent");
		}

		if ($$self.$$.dirty[0] & /*enableSection*/ 128) {
			$$invalidate(7, enableSection);
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 256) {
			$$invalidate(8, menuType = root.menuType = menuType);
		}

		if ($$self.$$.dirty[0] & /*animation*/ 512) {
			$$invalidate(9, animation = root.animation = animation);
		}

		if ($$self.$$.dirty[0] & /*variant*/ 1024) {
			$$invalidate(10, variant = root.variant = variant);
		}

		if ($$self.$$.dirty[0] & /*color*/ 2048) {
			$$invalidate(11, color = root.color = color);
		}

		if ($$self.$$.dirty[0] & /*isCustom*/ 4096) {
			$$invalidate(12, isCustom);
		}

		if ($$self.$$.dirty[0] & /*customPath*/ 8192) {
			$$invalidate(13, customPath);
		}

		if ($$self.$$.dirty[0] & /*flagPath, color, menuType, animation, variant*/ 3842) {
			if (flagPath === "sourceExtraFX") {
				$$invalidate(29, sourceFilePath = color === "random"
				? `autoanimations.static.${menuType}.${animation}.${variant}`
				: `autoanimations.static.${menuType}.${animation}.${variant}.${color}`);
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, color, menuType, animation, variant*/ 3842) {
			if (flagPath === "targetExtraFX") {
				$$invalidate(30, targetFilePath = color === "random"
				? `autoanimations.static.${menuType}.${animation}.${variant}`
				: `autoanimations.static.${menuType}.${animation}.${variant}.${color}`);
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, sourceFilePath, customPath, isCustom*/ 536883202) {
			if (flagPath === "sourceExtraFX") {
				menuDBPathSourceFX.set(sourceFilePath);
				customFilePathSourceFX.set(customPath);
				customCheckedSourceFX.set(isCustom);
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, targetFilePath, customPath, isCustom*/ 1073754114) {
			if (flagPath === "targetExtraFX") {
				menuDBPathTargetFX.set(targetFilePath);
				customFilePathTargetFX.set(customPath);
				customCheckedTargetFX.set(isCustom);
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, enableSection*/ 130) {
			{
				if (flagPath === "sourceExtraFX") {
					extraSource.set(enableSection);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*flagPath, enableSection*/ 130) {
			{
				if (flagPath === "targetExtraFX") {
					extraTarget.set(enableSection);
				}
			}
		}
	};

	return [
		flagData,
		flagPath,
		repeat,
		delay,
		scale,
		opacity,
		persistent,
		enableSection,
		menuType,
		animation,
		variant,
		color,
		isCustom,
		customPath,
		audioPath,
		sectionTitle,
		isPersistent,
		bindVisibility,
		bindAlpha,
		aboveBelow,
		below,
		switchAlpha,
		switchVisibility,
		switchPersistence,
		switchEnable,
		onClick,
		belowToken,
		unbindAlpha,
		unbindVisbility,
		sourceFilePath,
		targetFilePath,
		click_handler,
		click_handler_1,
		chooseanimation_menuType_binding,
		chooseanimation_animation_binding,
		chooseanimation_variant_binding,
		chooseanimation_color_binding,
		chooseanimation_isCustom_binding,
		chooseanimation_customPath_binding,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler,
		input4_change_input_handler
	];
}

class ExtraFX extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { flagData: 0, flagPath: 1 }, null, [-1, -1]);
	}
}

/* src\formApps\ItemMenu\components\3dCanvasOptions.svelte generated by Svelte v3.47.0 */

function create_if_block_1$3(ctx) {
	let div;
	let label;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.arc")}`;
			t1 = space();
			input = element("input");
			attr(label, "for", "");
			attr(label, "class", "svelte-4h0ulx");
			attr(input, "type", "Number");
			attr(input, "step", ".01");
			attr(input, "placeholder", "2");
			attr(input, "class", "svelte-4h0ulx");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "3 / 4");
			set_style(div, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t1);
			append(div, input);
			set_input_value(input, /*arc*/ ctx[5]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[25]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*arc*/ 32) {
				set_input_value(input, /*arc*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (150:4) {#if type !== "sprite"}
function create_if_block$3(ctx) {
	let div0;
	let label0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let t4;
	let input1;
	let t5;
	let div2;
	let label2;
	let t7;
	let input2;
	let t8;
	let div3;
	let label3;
	let t10;
	let input3;
	let t11;
	let div4;
	let label4;
	let t13;
	let input4;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.gravity")}`;
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.mass")}`;
			t4 = space();
			input1 = element("input");
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.life")}`;
			t7 = space();
			input2 = element("input");
			t8 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = `${localize("AUTOANIM.emiterSize")}`;
			t10 = space();
			input3 = element("input");
			t11 = space();
			div4 = element("div");
			label4 = element("label");
			label4.textContent = `${localize("AUTOANIM.rate")}`;
			t13 = space();
			input4 = element("input");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-4h0ulx");
			attr(input0, "type", "Number");
			attr(input0, "step", ".01");
			attr(input0, "placeholder", "0");
			attr(input0, "class", "svelte-4h0ulx");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "4 / 5");
			set_style(div0, "grid-column", "2 / 3");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-4h0ulx");
			attr(input1, "type", "Number");
			attr(input1, "step", ".01");
			attr(input1, "placeholder", "100");
			attr(input1, "class", "svelte-4h0ulx");
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "4 / 5");
			set_style(div1, "grid-column", "3 / 4");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-4h0ulx");
			attr(input2, "type", "Number");
			attr(input2, "step", ".01");
			attr(input2, "placeholder", "500");
			attr(input2, "class", "svelte-4h0ulx");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "4 / 5");
			set_style(div2, "grid-column", "4 / 5");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-4h0ulx");
			attr(input3, "type", "Number");
			attr(input3, "step", ".0001");
			attr(input3, "placeholder", ".0001");
			attr(input3, "class", "svelte-4h0ulx");
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "5 / 6");
			set_style(div3, "grid-column", "2 / 3");
			attr(label4, "for", "rate");
			attr(label4, "class", "svelte-4h0ulx");
			attr(input4, "type", "Number");
			attr(input4, "step", ".01");
			attr(input4, "id", "rate");
			attr(input4, "placeholder", "10");
			attr(input4, "class", "svelte-4h0ulx");
			attr(div4, "class", "flexcol");
			set_style(div4, "grid-row", "5 / 6");
			set_style(div4, "grid-column", "3 / 4");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, label0);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*gravity*/ ctx[9]);
			insert(target, t2, anchor);
			insert(target, div1, anchor);
			append(div1, label1);
			append(div1, t4);
			append(div1, input1);
			set_input_value(input1, /*mass*/ ctx[10]);
			insert(target, t5, anchor);
			insert(target, div2, anchor);
			append(div2, label2);
			append(div2, t7);
			append(div2, input2);
			set_input_value(input2, /*life*/ ctx[11]);
			insert(target, t8, anchor);
			insert(target, div3, anchor);
			append(div3, label3);
			append(div3, t10);
			append(div3, input3);
			set_input_value(input3, /*emittersize*/ ctx[12]);
			insert(target, t11, anchor);
			insert(target, div4, anchor);
			append(div4, label4);
			append(div4, t13);
			append(div4, input4);
			set_input_value(input4, /*rate*/ ctx[13]);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler_1*/ ctx[29]),
					listen(input1, "input", /*input1_input_handler_1*/ ctx[30]),
					listen(input2, "input", /*input2_input_handler_1*/ ctx[31]),
					listen(input3, "input", /*input3_input_handler_1*/ ctx[32]),
					listen(input4, "input", /*input4_input_handler_1*/ ctx[33])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*gravity*/ 512) {
				set_input_value(input0, /*gravity*/ ctx[9]);
			}

			if (dirty[0] & /*mass*/ 1024) {
				set_input_value(input1, /*mass*/ ctx[10]);
			}

			if (dirty[0] & /*life*/ 2048) {
				set_input_value(input2, /*life*/ ctx[11]);
			}

			if (dirty[0] & /*emittersize*/ 4096) {
				set_input_value(input3, /*emittersize*/ ctx[12]);
			}

			if (dirty[0] & /*rate*/ 8192) {
				set_input_value(input4, /*rate*/ ctx[13]);
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t2);
			if (detaching) detach(div1);
			if (detaching) detach(t5);
			if (detaching) detach(div2);
			if (detaching) detach(t8);
			if (detaching) detach(div3);
			if (detaching) detach(t11);
			if (detaching) detach(div4);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$5(ctx) {
	let div9;
	let div0;
	let label0;
	let t2;
	let input0;
	let t3;
	let div1;
	let input1;
	let t4;
	let div2;
	let input2;
	let t5;
	let div3;
	let label1;
	let t8;
	let input3;
	let t9;
	let div4;
	let label2;
	let t11;
	let input4;
	let t12;
	let div5;
	let label3;
	let t14;
	let input5;
	let t15;
	let t16;
	let div6;
	let label4;
	let t18;
	let input6;
	let t19;
	let div7;
	let label5;
	let t21;
	let input7;
	let t22;
	let div8;
	let label6;
	let t24;
	let input8;
	let t25;
	let t26;
	let div11;
	let div10;
	let label7;
	let t28;
	let input9;
	let t29;
	let button;
	let mounted;
	let dispose;
	let if_block0 = (/*type*/ ctx[0] === "projectile" || /*type*/ ctx[0] === "ray") && create_if_block_1$3(ctx);
	let if_block1 = /*type*/ ctx[0] !== "sprite" && create_if_block$3(ctx);

	return {
		c() {
			div9 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.color")} 01`;
			t2 = space();
			input0 = element("input");
			t3 = space();
			div1 = element("div");
			input1 = element("input");
			t4 = space();
			div2 = element("div");
			input2 = element("input");
			t5 = space();
			div3 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.color")} 02`;
			t8 = space();
			input3 = element("input");
			t9 = space();
			div4 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.speed")}`;
			t11 = space();
			input4 = element("input");
			t12 = space();
			div5 = element("div");
			label3 = element("label");
			label3.textContent = `${localize("AUTOANIM.repeat")}`;
			t14 = space();
			input5 = element("input");
			t15 = space();
			if (if_block0) if_block0.c();
			t16 = space();
			div6 = element("div");
			label4 = element("label");
			label4.textContent = `${localize("AUTOANIM.delayMS")}`;
			t18 = space();
			input6 = element("input");
			t19 = space();
			div7 = element("div");
			label5 = element("label");
			label5.textContent = `${localize("AUTOANIM.scale")}`;
			t21 = space();
			input7 = element("input");
			t22 = space();
			div8 = element("div");
			label6 = element("label");
			label6.textContent = `${localize("AUTOANIM.alpha")}`;
			t24 = space();
			input8 = element("input");
			t25 = space();
			if (if_block1) if_block1.c();
			t26 = space();
			div11 = element("div");
			div10 = element("div");
			label7 = element("label");
			label7.textContent = `${localize("AUTOANIM.sprite")}`;
			t28 = space();
			input9 = element("input");
			t29 = space();
			button = element("button");
			button.innerHTML = `<i class="fas fa-file-import fa-fw"></i>`;
			attr(label0, "for", "");
			attr(label0, "class", "svelte-4h0ulx");
			attr(input0, "type", "Text");
			attr(input0, "class", "svelte-4h0ulx");
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "2 / 3");
			set_style(div0, "grid-column", "1 / 2");
			attr(input1, "type", "color");
			attr(input1, "data-edit", "color");
			attr(input1, "id", "tint");
			attr(input1, "class", "svelte-4h0ulx");
			attr(div1, "class", "form-group");
			set_style(div1, "grid-row", "3 / 4");
			set_style(div1, "grid-column", "1 / 2");
			attr(input2, "type", "color");
			attr(input2, "data-edit", "color");
			attr(input2, "id", "tint");
			attr(input2, "class", "svelte-4h0ulx");
			attr(div2, "class", "form-group");
			set_style(div2, "grid-row", "4 / 5");
			set_style(div2, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-4h0ulx");
			attr(input3, "type", "Text");
			attr(input3, "class", "svelte-4h0ulx");
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "5 / 6");
			set_style(div3, "grid-column", "1 / 2");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-4h0ulx");
			attr(input4, "type", "Number");
			attr(input4, "step", ".01");
			attr(input4, "placeholder", "5");
			attr(input4, "class", "svelte-4h0ulx");
			attr(div4, "class", "flexcol");
			set_style(div4, "grid-row", "2 / 3");
			set_style(div4, "grid-column", "2 / 3");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-4h0ulx");
			attr(input5, "type", "Number");
			attr(input5, "step", ".01");
			attr(input5, "placeholder", "1");
			attr(input5, "class", "svelte-4h0ulx");
			attr(div5, "class", "flexcol");
			set_style(div5, "grid-row", "2 / 3");
			set_style(div5, "grid-column", "3 / 4");
			attr(label4, "for", "");
			attr(label4, "class", "svelte-4h0ulx");
			attr(input6, "type", "Number");
			attr(input6, "step", ".01");
			attr(input6, "placeholder", "0");
			attr(input6, "class", "svelte-4h0ulx");
			attr(div6, "class", "flexcol");
			set_style(div6, "grid-row", "2 / 3");
			set_style(div6, "grid-column", "4 / 5");
			attr(label5, "for", "");
			attr(label5, "class", "svelte-4h0ulx");
			attr(input7, "type", "Number");
			attr(input7, "step", ".01");
			attr(input7, "placeholder", "0.7");
			attr(input7, "class", "svelte-4h0ulx");
			attr(div7, "class", "flexcol");
			set_style(div7, "grid-row", "3 / 4");
			set_style(div7, "grid-column", "2 / 3");
			attr(label6, "for", "");
			attr(label6, "class", "svelte-4h0ulx");
			attr(input8, "type", "Number");
			attr(input8, "step", ".01");
			attr(input8, "placeholder", "0.5");
			attr(input8, "class", "svelte-4h0ulx");
			attr(div8, "class", "flexcol");
			set_style(div8, "grid-row", "3 / 4");
			set_style(div8, "grid-column", "4 / 5");
			attr(div9, "class", "aa-3d-settings svelte-4h0ulx");
			attr(label7, "for", "");
			set_style(label7, "align-self", "end");
			attr(input9, "type", "text");
			attr(button, "class", "file-picker svelte-4h0ulx");
			attr(div10, "class", "form-group");
			set_style(div10, "grid-row", "1/2");
			set_style(div10, "grid-column", "1/3");
			attr(div11, "class", "aa-customAnim-container svelte-4h0ulx");
		},
		m(target, anchor) {
			insert(target, div9, anchor);
			append(div9, div0);
			append(div0, label0);
			append(div0, t2);
			append(div0, input0);
			set_input_value(input0, /*color01*/ ctx[1]);
			append(div9, t3);
			append(div9, div1);
			append(div1, input1);
			set_input_value(input1, /*color01*/ ctx[1]);
			append(div9, t4);
			append(div9, div2);
			append(div2, input2);
			set_input_value(input2, /*color02*/ ctx[2]);
			append(div9, t5);
			append(div9, div3);
			append(div3, label1);
			append(div3, t8);
			append(div3, input3);
			set_input_value(input3, /*color02*/ ctx[2]);
			append(div9, t9);
			append(div9, div4);
			append(div4, label2);
			append(div4, t11);
			append(div4, input4);
			set_input_value(input4, /*speed*/ ctx[3]);
			append(div9, t12);
			append(div9, div5);
			append(div5, label3);
			append(div5, t14);
			append(div5, input5);
			set_input_value(input5, /*repeat*/ ctx[4]);
			append(div9, t15);
			if (if_block0) if_block0.m(div9, null);
			append(div9, t16);
			append(div9, div6);
			append(div6, label4);
			append(div6, t18);
			append(div6, input6);
			set_input_value(input6, /*delay*/ ctx[6]);
			append(div9, t19);
			append(div9, div7);
			append(div7, label5);
			append(div7, t21);
			append(div7, input7);
			set_input_value(input7, /*scale*/ ctx[7]);
			append(div9, t22);
			append(div9, div8);
			append(div8, label6);
			append(div8, t24);
			append(div8, input8);
			set_input_value(input8, /*alpha*/ ctx[8]);
			append(div9, t25);
			if (if_block1) if_block1.m(div9, null);
			insert(target, t26, anchor);
			insert(target, div11, anchor);
			append(div11, div10);
			append(div10, label7);
			append(div10, t28);
			append(div10, input9);
			set_input_value(input9, /*spritePath*/ ctx[14]);
			append(div10, t29);
			append(div10, button);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[18]),
					listen(input1, "input", /*input1_input_handler*/ ctx[19]),
					listen(input2, "input", /*input2_input_handler*/ ctx[20]),
					listen(input3, "input", /*input3_input_handler*/ ctx[21]),
					listen(input4, "input", /*input4_input_handler*/ ctx[22]),
					listen(input4, "change", /*change_handler*/ ctx[23]),
					listen(input5, "input", /*input5_input_handler*/ ctx[24]),
					listen(input6, "input", /*input6_input_handler*/ ctx[26]),
					listen(input7, "input", /*input7_input_handler*/ ctx[27]),
					listen(input8, "input", /*input8_input_handler*/ ctx[28]),
					listen(input9, "input", /*input9_input_handler*/ ctx[34]),
					listen(button, "click", prevent_default(/*click_handler*/ ctx[35]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*color01*/ 2) {
				set_input_value(input0, /*color01*/ ctx[1]);
			}

			if (dirty[0] & /*color01*/ 2) {
				set_input_value(input1, /*color01*/ ctx[1]);
			}

			if (dirty[0] & /*color02*/ 4) {
				set_input_value(input2, /*color02*/ ctx[2]);
			}

			if (dirty[0] & /*color02*/ 4) {
				set_input_value(input3, /*color02*/ ctx[2]);
			}

			if (dirty[0] & /*speed*/ 8) {
				set_input_value(input4, /*speed*/ ctx[3]);
			}

			if (dirty[0] & /*repeat*/ 16) {
				set_input_value(input5, /*repeat*/ ctx[4]);
			}

			if (/*type*/ ctx[0] === "projectile" || /*type*/ ctx[0] === "ray") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$3(ctx);
					if_block0.c();
					if_block0.m(div9, t16);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*delay*/ 64) {
				set_input_value(input6, /*delay*/ ctx[6]);
			}

			if (dirty[0] & /*scale*/ 128) {
				set_input_value(input7, /*scale*/ ctx[7]);
			}

			if (dirty[0] & /*alpha*/ 256) {
				set_input_value(input8, /*alpha*/ ctx[8]);
			}

			if (/*type*/ ctx[0] !== "sprite") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$3(ctx);
					if_block1.c();
					if_block1.m(div9, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*spritePath*/ 16384 && input9.value !== /*spritePath*/ ctx[14]) {
				set_input_value(input9, /*spritePath*/ ctx[14]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div9);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t26);
			if (detaching) detach(div11);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	let { type } = $$props;

	flagData.levels3d[type]
	? flagData.levels3d[type]
	: flagData.levels3d[type] = {};

	const root = flagData.levels3d[type];
	let spritePath;

	switch (type) {
		case "projectile":
			spritePath = root.sprite || "modules/levels-3d-preview/assets/particles/emberssmall.png";
			break;
		case "ray":
			spritePath = root.sprite || "modules/levels-3d-preview/assets/particles/emberssmall.png";
			break;
		case "sprite":
			spritePath = root.sprite || "modules/levels-3d-preview/assets/particles/emberssmall.png";
			break;
		case "explosion":
			spritePath = root.sprite || "modules/levels-3d-preview/assets/particles/dust.png";
			break;
	}

	let color01 = root.color01;
	let color02 = root.color02;
	let speed = root.speed;
	let repeat = root.repeat;
	let arc = root.arc;
	let delay = root.delay;
	let scale = root.scale;
	let alpha = root.alpha;
	let gravity = root.gravity;
	let mass = root.mass;
	let life = root.life;
	let emittersize = root.emittersize;
	let rate = root.rate;

	function logFlags() {
		console.log(flagData);
	}

	async function selectCustom() {
		const current = spritePath;

		const picker = new FilePicker({
				type: "imagevideo",
				current,
				callback: path => {
					$$invalidate(14, spritePath = path);
				}
			});

		setTimeout(
			() => {
				picker.element[0].style.zIndex = `${Number.MAX_SAFE_INTEGER}`;
			},
			100
		);

		await picker.browse(current);
	}

	function input0_input_handler() {
		color01 = this.value;
		$$invalidate(1, color01);
	}

	function input1_input_handler() {
		color01 = this.value;
		$$invalidate(1, color01);
	}

	function input2_input_handler() {
		color02 = this.value;
		$$invalidate(2, color02);
	}

	function input3_input_handler() {
		color02 = this.value;
		$$invalidate(2, color02);
	}

	function input4_input_handler() {
		speed = this.value;
		$$invalidate(3, speed);
	}

	const change_handler = () => logFlags();

	function input5_input_handler() {
		repeat = this.value;
		$$invalidate(4, repeat);
	}

	function input_input_handler() {
		arc = this.value;
		$$invalidate(5, arc);
	}

	function input6_input_handler() {
		delay = this.value;
		$$invalidate(6, delay);
	}

	function input7_input_handler() {
		scale = this.value;
		$$invalidate(7, scale);
	}

	function input8_input_handler() {
		alpha = this.value;
		$$invalidate(8, alpha);
	}

	function input0_input_handler_1() {
		gravity = this.value;
		$$invalidate(9, gravity);
	}

	function input1_input_handler_1() {
		mass = this.value;
		$$invalidate(10, mass);
	}

	function input2_input_handler_1() {
		life = this.value;
		$$invalidate(11, life);
	}

	function input3_input_handler_1() {
		emittersize = this.value;
		$$invalidate(12, emittersize);
	}

	function input4_input_handler_1() {
		rate = this.value;
		$$invalidate(13, rate);
	}

	function input9_input_handler() {
		spritePath = this.value;
		$$invalidate(14, spritePath);
	}

	const click_handler = () => selectCustom();

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(17, flagData = $$props.flagData);
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*color01*/ 2) {
			$$invalidate(1, color01 = root.color01 = color01
			? color01.toString(16).padStart(6, "0").toUpperCase()
			: "#FFFFFF");
		}

		if ($$self.$$.dirty[0] & /*color02*/ 4) {
			$$invalidate(2, color02 = root.color02 = color02
			? color02.toString(16).padStart(6, "0").toUpperCase()
			: "#FFFFFF");
		}

		if ($$self.$$.dirty[0] & /*speed*/ 8) {
			$$invalidate(3, speed = root.speed = speed);
		}

		if ($$self.$$.dirty[0] & /*repeat*/ 16) {
			$$invalidate(4, repeat = root.repeat = repeat);
		}

		if ($$self.$$.dirty[0] & /*arc*/ 32) {
			$$invalidate(5, arc = root.arc = arc);
		}

		if ($$self.$$.dirty[0] & /*delay*/ 64) {
			$$invalidate(6, delay = root.delay = delay);
		}

		if ($$self.$$.dirty[0] & /*scale*/ 128) {
			$$invalidate(7, scale = root.scale = scale);
		}

		if ($$self.$$.dirty[0] & /*alpha*/ 256) {
			$$invalidate(8, alpha = root.alpha = alpha);
		}

		if ($$self.$$.dirty[0] & /*gravity*/ 512) {
			$$invalidate(9, gravity = root.gravity = gravity);
		}

		if ($$self.$$.dirty[0] & /*mass*/ 1024) {
			$$invalidate(10, mass = root.mass = mass);
		}

		if ($$self.$$.dirty[0] & /*life*/ 2048) {
			$$invalidate(11, life = root.life = life);
		}

		if ($$self.$$.dirty[0] & /*emittersize*/ 4096) {
			$$invalidate(12, emittersize = root.emittersize = emittersize);
		}

		if ($$self.$$.dirty[0] & /*rate*/ 8192) {
			$$invalidate(13, rate = root.rate = rate);
		}
	};

	return [
		type,
		color01,
		color02,
		speed,
		repeat,
		arc,
		delay,
		scale,
		alpha,
		gravity,
		mass,
		life,
		emittersize,
		rate,
		spritePath,
		logFlags,
		selectCustom,
		flagData,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler,
		input4_input_handler,
		change_handler,
		input5_input_handler,
		input_input_handler,
		input6_input_handler,
		input7_input_handler,
		input8_input_handler,
		input0_input_handler_1,
		input1_input_handler_1,
		input2_input_handler_1,
		input3_input_handler_1,
		input4_input_handler_1,
		input9_input_handler,
		click_handler
	];
}

class _3dCanvasOptions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { flagData: 17, type: 0 }, null, [-1, -1]);
	}
}

/* src\formApps\ItemMenu\components\3dMenuShell.svelte generated by Svelte v3.47.0 */

function create_if_block_3$2(ctx) {
	let options3d;
	let current;

	options3d = new _3dCanvasOptions({
			props: {
				type: "projectile",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(options3d.$$.fragment);
		},
		m(target, anchor) {
			mount_component(options3d, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const options3d_changes = {};
			if (dirty & /*flagData*/ 1) options3d_changes.flagData = /*flagData*/ ctx[0];
			options3d.$set(options3d_changes);
		},
		i(local) {
			if (current) return;
			transition_in(options3d.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(options3d.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(options3d, detaching);
		}
	};
}

// (33:0) {#if type3d === "sprite"}
function create_if_block_2$2(ctx) {
	let options3d;
	let current;

	options3d = new _3dCanvasOptions({
			props: {
				type: "sprite",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(options3d.$$.fragment);
		},
		m(target, anchor) {
			mount_component(options3d, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const options3d_changes = {};
			if (dirty & /*flagData*/ 1) options3d_changes.flagData = /*flagData*/ ctx[0];
			options3d.$set(options3d_changes);
		},
		i(local) {
			if (current) return;
			transition_in(options3d.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(options3d.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(options3d, detaching);
		}
	};
}

// (36:0) {#if type3d === "ray"}
function create_if_block_1$2(ctx) {
	let options3d;
	let current;

	options3d = new _3dCanvasOptions({
			props: {
				type: "ray",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(options3d.$$.fragment);
		},
		m(target, anchor) {
			mount_component(options3d, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const options3d_changes = {};
			if (dirty & /*flagData*/ 1) options3d_changes.flagData = /*flagData*/ ctx[0];
			options3d.$set(options3d_changes);
		},
		i(local) {
			if (current) return;
			transition_in(options3d.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(options3d.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(options3d, detaching);
		}
	};
}

// (39:0) {#if type3d === "explosion"}
function create_if_block$2(ctx) {
	let options3d;
	let current;

	options3d = new _3dCanvasOptions({
			props: {
				type: "explosion",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(options3d.$$.fragment);
		},
		m(target, anchor) {
			mount_component(options3d, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const options3d_changes = {};
			if (dirty & /*flagData*/ 1) options3d_changes.flagData = /*flagData*/ ctx[0];
			options3d.$set(options3d_changes);
		},
		i(local) {
			if (current) return;
			transition_in(options3d.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(options3d.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(options3d, detaching);
		}
	};
}

function create_fragment$4(ctx) {
	let h1;
	let t1;
	let h3;
	let t3;
	let div1;
	let div0;
	let label;
	let t5;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let option4;
	let t10;
	let t11;
	let t12;
	let t13;
	let if_block3_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*type3d*/ ctx[1] === "projectile" && create_if_block_3$2(ctx);
	let if_block1 = /*type3d*/ ctx[1] === "sprite" && create_if_block_2$2(ctx);
	let if_block2 = /*type3d*/ ctx[1] === "ray" && create_if_block_1$2(ctx);
	let if_block3 = /*type3d*/ ctx[1] === "explosion" && create_if_block$2(ctx);

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "3D Canvas Particle Animations";
			t1 = space();
			h3 = element("h3");
			h3.textContent = "Requires the 3D Canvas Module by Ripper";
			t3 = space();
			div1 = element("div");
			div0 = element("div");
			label = element("label");
			label.textContent = `${localize("AUTOANIM.type")}`;
			t5 = space();
			select = element("select");
			option0 = element("option");
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.projectile")}`;
			option2 = element("option");
			option2.textContent = `${localize("AUTOANIM.sprite")}`;
			option3 = element("option");
			option3.textContent = `${localize("AUTOANIM.ray")}`;
			option4 = element("option");
			option4.textContent = `${localize("AUTOANIM.explosion")}`;
			t10 = space();
			if (if_block0) if_block0.c();
			t11 = space();
			if (if_block1) if_block1.c();
			t12 = space();
			if (if_block2) if_block2.c();
			t13 = space();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			attr(h1, "class", "svelte-10p3um");
			attr(h3, "class", "svelte-10p3um");
			attr(label, "for", "");
			attr(label, "class", "svelte-10p3um");
			option0.__value = "";
			option0.value = option0.__value;
			option1.__value = "projectile";
			option1.value = option1.__value;
			option2.__value = "sprite";
			option2.value = option2.__value;
			option3.__value = "ray";
			option3.value = option3.__value;
			option4.__value = "explosion";
			option4.value = option4.__value;
			attr(select, "class", "svelte-10p3um");
			if (/*type3d*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "2 / 3");
			attr(div1, "class", "aa-3wide svelte-10p3um");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, h3, anchor);
			insert(target, t3, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label);
			append(div0, t5);
			append(div0, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			append(select, option3);
			append(select, option4);
			select_option(select, /*type3d*/ ctx[1]);
			insert(target, t10, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t11, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t12, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t13, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, if_block3_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*type3d*/ 2) {
				select_option(select, /*type3d*/ ctx[1]);
			}

			if (/*type3d*/ ctx[1] === "projectile") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*type3d*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t11.parentNode, t11);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*type3d*/ ctx[1] === "sprite") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*type3d*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t12.parentNode, t12);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*type3d*/ ctx[1] === "ray") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*type3d*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t13.parentNode, t13);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*type3d*/ ctx[1] === "explosion") {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*type3d*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block$2(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(h3);
			if (detaching) detach(t3);
			if (detaching) detach(div1);
			if (detaching) detach(t10);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t11);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t12);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t13);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(if_block3_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	const root = flagData.levels3d;
	let type3d = root.type || "";

	function select_change_handler() {
		type3d = select_value(this);
		$$invalidate(1, type3d);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*type3d*/ 2) {
			$$invalidate(1, type3d = root.type = type3d);
		}
	};

	return [flagData, type3d, select_change_handler];
}

class _3dMenuShell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { flagData: 0 });
	}
}

/* src\formApps\ItemMenu\components\presets\bardicInspiration.svelte generated by Svelte v3.47.0 */

class BardicInspiration extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\bless.svelte generated by Svelte v3.47.0 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i][0];
	child_ctx[24] = list[i][1];
	return child_ctx;
}

// (59:12) {#each Object.entries(aaColorMenu.static.spell.bless['01']) as [key, name]}
function create_each_block$1(ctx) {
	let option;
	let t_value = /*name*/ ctx[24] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[23];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment$3(ctx) {
	let h1;
	let t1;
	let div1;
	let div0;
	let label0;
	let t3;
	let select;
	let t4;
	let h2;
	let t6;
	let div7;
	let div2;
	let label1;
	let t8;
	let button0;
	let t9;
	let t10;
	let div3;
	let label2;
	let t12;
	let button1;
	let t13;
	let t14;
	let div4;
	let label3;
	let t16;
	let button2;
	let t17;
	let t18;
	let div5;
	let label4;
	let t20;
	let button3;
	let t21;
	let t22;
	let div6;
	let label5;
	let t24;
	let input;
	let t25;
	let soundsettings;
	let current;
	let mounted;
	let dispose;
	let each_value = Object.entries(aaColorMenu.static.spell.bless['01']);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	soundsettings = new SoundSettings({
			props: {
				audioPath: "a01",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Bless Animation";
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.color")}`;
			t3 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			h2 = element("h2");
			h2.textContent = "Options";
			t6 = space();
			div7 = element("div");
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "Persistence";
			t8 = space();
			button0 = element("button");
			t9 = text(/*isPersistent*/ ctx[4]);
			t10 = space();
			div3 = element("div");
			label2 = element("label");
			label2.textContent = "Z-Index";
			t12 = space();
			button1 = element("button");
			t13 = text(/*aboveBelow*/ ctx[3]);
			t14 = space();
			div4 = element("div");
			label3 = element("label");
			label3.textContent = "Visibility";
			t16 = space();
			button2 = element("button");
			t17 = text(/*bindVisibility*/ ctx[5]);
			t18 = space();
			div5 = element("div");
			label4 = element("label");
			label4.textContent = "Alpha";
			t20 = space();
			button3 = element("button");
			t21 = text(/*bindAlpha*/ ctx[6]);
			t22 = space();
			div6 = element("div");
			label5 = element("label");
			label5.textContent = `${localize("AUTOANIM.scale")}`;
			t24 = space();
			input = element("input");
			t25 = space();
			create_component(soundsettings.$$.fragment);
			attr(h1, "class", "svelte-ta9sfn");
			attr(label0, "for", "");
			attr(label0, "class", "svelte-ta9sfn");
			attr(select, "class", "svelte-ta9sfn");
			if (/*color*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[15].call(select));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "3 / 4");
			set_style(div0, "grid-column", "2 / 3");
			attr(div1, "class", "aa-3wide svelte-ta9sfn");
			set_style(h2, "margin-top", "5px");
			attr(h2, "class", "svelte-ta9sfn");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-ta9sfn");
			attr(button0, "class", "svelte-ta9sfn");
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "1 / 2");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-ta9sfn");
			attr(button1, "class", "oldCheck svelte-ta9sfn");
			attr(div3, "class", "flexcol");
			set_style(div3, "grid-row", "1 / 2");
			set_style(div3, "grid-column", "2 / 3");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-ta9sfn");
			attr(button2, "class", "svelte-ta9sfn");
			attr(div4, "class", "flexcol");
			set_style(div4, "grid-row", "1 / 2");
			set_style(div4, "grid-column", "3 / 4");
			attr(label4, "for", "");
			attr(label4, "class", "svelte-ta9sfn");
			attr(button3, "class", "svelte-ta9sfn");
			attr(div5, "class", "flexcol");
			set_style(div5, "grid-row", "1 / 2");
			set_style(div5, "grid-column", "4 / 5");
			attr(label5, "for", "");
			attr(label5, "class", "svelte-ta9sfn");
			attr(input, "type", "Number");
			attr(input, "placeholder", "1");
			attr(input, "step", "0.01");
			attr(input, "class", "svelte-ta9sfn");
			attr(div6, "class", "flexcol");
			set_style(div6, "grid-row", "2 / 3");
			set_style(div6, "grid-column", "3 / 4");
			attr(div7, "class", "aa-options svelte-ta9sfn");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label0);
			append(div0, t3);
			append(div0, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*color*/ ctx[1]);
			insert(target, t4, anchor);
			insert(target, h2, anchor);
			insert(target, t6, anchor);
			insert(target, div7, anchor);
			append(div7, div2);
			append(div2, label1);
			append(div2, t8);
			append(div2, button0);
			append(button0, t9);
			append(div7, t10);
			append(div7, div3);
			append(div3, label2);
			append(div3, t12);
			append(div3, button1);
			append(button1, t13);
			append(div7, t14);
			append(div7, div4);
			append(div4, label3);
			append(div4, t16);
			append(div4, button2);
			append(button2, t17);
			append(div7, t18);
			append(div7, div5);
			append(div5, label4);
			append(div5, t20);
			append(div5, button3);
			append(button3, t21);
			append(div7, t22);
			append(div7, div6);
			append(div6, label5);
			append(div6, t24);
			append(div6, input);
			set_input_value(input, /*scale*/ ctx[2]);
			insert(target, t25, anchor);
			mount_component(soundsettings, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[15]),
					listen(button0, "click", /*click_handler*/ ctx[16]),
					listen(button1, "click", /*click_handler_1*/ ctx[17]),
					listen(button2, "click", /*click_handler_2*/ ctx[18]),
					listen(button3, "click", /*click_handler_3*/ ctx[19]),
					listen(input, "input", /*input_input_handler*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, aaColorMenu*/ 0) {
				each_value = Object.entries(aaColorMenu.static.spell.bless['01']);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*color, Object, aaColorMenu*/ 2) {
				select_option(select, /*color*/ ctx[1]);
			}

			if (!current || dirty & /*isPersistent*/ 16) set_data(t9, /*isPersistent*/ ctx[4]);
			if (!current || dirty & /*aboveBelow*/ 8) set_data(t13, /*aboveBelow*/ ctx[3]);
			if (!current || dirty & /*bindVisibility*/ 32) set_data(t17, /*bindVisibility*/ ctx[5]);
			if (!current || dirty & /*bindAlpha*/ 64) set_data(t21, /*bindAlpha*/ ctx[6]);

			if (dirty & /*scale*/ 4) {
				set_input_value(input, /*scale*/ ctx[2]);
			}

			const soundsettings_changes = {};
			if (dirty & /*flagData*/ 1) soundsettings_changes.flagData = /*flagData*/ ctx[0];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(soundsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(soundsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t4);
			if (detaching) detach(h2);
			if (detaching) detach(t6);
			if (detaching) detach(div7);
			if (detaching) detach(t25);
			destroy_component(soundsettings, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let bindAlpha;
	let bindVisibility;
	let isPersistent;
	let aboveBelow;
	let { flagData } = $$props;
	const options = flagData.options;
	const blessColors = Object.keys(aaColorMenu.static.spell.bless["01"]);

	let color = blessColors.includes(flagData.color)
	? flagData.color
	: blessColors[0];

	let unbindAlpha = options.unbindAlpha || false;
	let unbindVisbility = options.unbindVisbility || false;
	let persistent = options.persistent || false;
	let belowToken = options.below || false;
	let scale = options.scale || 1;

	function switchAlpha() {
		$$invalidate(11, unbindAlpha = !unbindAlpha);
	}

	function switchVisibility() {
		$$invalidate(12, unbindVisbility = !unbindVisbility);
	}

	function switchPersistence() {
		$$invalidate(13, persistent = !persistent);
	}

	function below() {
		$$invalidate(14, belowToken = !belowToken);
	}

	function select_change_handler() {
		color = select_value(this);
		$$invalidate(1, color);
	}

	const click_handler = () => switchPersistence();
	const click_handler_1 = () => below();
	const click_handler_2 = () => switchVisibility();
	const click_handler_3 = () => switchAlpha();

	function input_input_handler() {
		scale = this.value;
		$$invalidate(2, scale);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color*/ 2) {
			$$invalidate(1, color = $$invalidate(0, flagData.color = color, flagData));
		}

		if ($$self.$$.dirty & /*unbindAlpha*/ 2048) {
			$$invalidate(11, unbindAlpha = options.unbindAlpha = unbindAlpha);
		}

		if ($$self.$$.dirty & /*unbindAlpha*/ 2048) {
			$$invalidate(6, bindAlpha = unbindAlpha ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty & /*unbindVisbility*/ 4096) {
			$$invalidate(12, unbindVisbility = options.unbindVisbility = unbindVisbility);
		}

		if ($$self.$$.dirty & /*unbindVisbility*/ 4096) {
			$$invalidate(5, bindVisibility = unbindVisbility ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty & /*persistent*/ 8192) {
			$$invalidate(13, persistent = options.persistent = persistent);
		}

		if ($$self.$$.dirty & /*persistent*/ 8192) {
			$$invalidate(4, isPersistent = persistent ? "Persistent" : "Not Persistent");
		}

		if ($$self.$$.dirty & /*belowToken*/ 16384) {
			$$invalidate(14, belowToken = options.below = belowToken);
		}

		if ($$self.$$.dirty & /*belowToken*/ 16384) {
			$$invalidate(3, aboveBelow = belowToken ? "Below Token" : "Above Token");
		}

		if ($$self.$$.dirty & /*scale*/ 4) {
			$$invalidate(2, scale = options.scale = scale);
		}
	};

	return [
		flagData,
		color,
		scale,
		aboveBelow,
		isPersistent,
		bindVisibility,
		bindAlpha,
		switchAlpha,
		switchVisibility,
		switchPersistence,
		below,
		unbindAlpha,
		unbindVisbility,
		persistent,
		belowToken,
		select_change_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		input_input_handler
	];
}

class Bless extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { flagData: 0 });
	}
}

/* src\formApps\ItemMenu\components\presets\dualattach.svelte generated by Svelte v3.47.0 */

class Dualattach extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\fireball.svelte generated by Svelte v3.47.0 */

class Fireball extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\huntersmark.svelte generated by Svelte v3.47.0 */

class Huntersmark extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\shield.svelte generated by Svelte v3.47.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i][0];
	child_ctx[31] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i][0];
	child_ctx[31] = list[i][1];
	return child_ctx;
}

// (82:12) {#each Object.entries(aaVariantMenu.static.spell.shieldspell) as [key, name]}
function create_each_block_1(ctx) {
	let option;
	let t_value = /*name*/ ctx[31] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[30];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (90:12) {#each Object.entries(aaColorMenu.static.spell.shieldspell[variant]) as [key, name]}
function create_each_block(ctx) {
	let option;
	let t_value = /*name*/ ctx[31] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[30];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*variant*/ 2 && t_value !== (t_value = /*name*/ ctx[31] + "")) set_data(t, t_value);

			if (dirty[0] & /*variant*/ 2 && option_value_value !== (option_value_value = /*key*/ ctx[30])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment$2(ctx) {
	let h1;
	let t1;
	let div3;
	let div0;
	let label0;
	let t3;
	let select0;
	let t4;
	let div1;
	let label1;
	let t6;
	let select1;
	let t7;
	let div2;
	let label2;
	let t9;
	let select2;
	let option0;
	let option1;
	let t12;
	let h2;
	let t14;
	let div9;
	let div4;
	let label3;
	let t16;
	let button0;
	let t17;
	let t18;
	let div5;
	let label4;
	let t20;
	let button1;
	let t21;
	let t22;
	let div6;
	let label5;
	let t24;
	let button2;
	let t25;
	let t26;
	let div7;
	let label6;
	let t28;
	let button3;
	let t29;
	let t30;
	let div8;
	let label7;
	let t32;
	let input;
	let t33;
	let soundsettings;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = Object.entries(aaVariantMenu.static.spell.shieldspell);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Object.entries(aaColorMenu.static.spell.shieldspell[/*variant*/ ctx[1]]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	soundsettings = new SoundSettings({
			props: {
				audioPath: "a01",
				flagData: /*flagData*/ ctx[0]
			}
		});

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Shield Animation";
			t1 = space();
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${localize("AUTOANIM.variant")}`;
			t3 = space();
			select0 = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${localize("AUTOANIM.color")}`;
			t6 = space();
			select1 = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = `${localize("AUTOANIM.endEffect")}`;
			t9 = space();
			select2 = element("select");
			option0 = element("option");
			option0.textContent = `${localize("AUTOANIM.explode")}`;
			option1 = element("option");
			option1.textContent = `${localize("AUTOANIM.fade")}`;
			t12 = space();
			h2 = element("h2");
			h2.textContent = "Options";
			t14 = space();
			div9 = element("div");
			div4 = element("div");
			label3 = element("label");
			label3.textContent = "Persistence";
			t16 = space();
			button0 = element("button");
			t17 = text(/*isPersistent*/ ctx[6]);
			t18 = space();
			div5 = element("div");
			label4 = element("label");
			label4.textContent = "Z-Index";
			t20 = space();
			button1 = element("button");
			t21 = text(/*aboveBelow*/ ctx[5]);
			t22 = space();
			div6 = element("div");
			label5 = element("label");
			label5.textContent = "Visibility";
			t24 = space();
			button2 = element("button");
			t25 = text(/*bindVisibility*/ ctx[7]);
			t26 = space();
			div7 = element("div");
			label6 = element("label");
			label6.textContent = "Alpha";
			t28 = space();
			button3 = element("button");
			t29 = text(/*bindAlpha*/ ctx[8]);
			t30 = space();
			div8 = element("div");
			label7 = element("label");
			label7.textContent = `${localize("AUTOANIM.scale")}`;
			t32 = space();
			input = element("input");
			t33 = space();
			create_component(soundsettings.$$.fragment);
			attr(h1, "class", "svelte-ta9sfn");
			attr(label0, "for", "4");
			attr(label0, "class", "svelte-ta9sfn");
			attr(select0, "name", "flags.autoanimations.options.variant");
			attr(select0, "class", "svelte-ta9sfn");
			if (/*variant*/ ctx[1] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[18].call(select0));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 2");
			attr(label1, "for", "");
			attr(label1, "class", "svelte-ta9sfn");
			attr(select1, "class", "svelte-ta9sfn");
			if (/*color*/ ctx[2] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[20].call(select1));
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "2 / 3");
			attr(label2, "for", "");
			attr(label2, "class", "svelte-ta9sfn");
			option0.__value = "outro_explode";
			option0.value = option0.__value;
			option1.__value = "outro_fade";
			option1.value = option1.__value;
			attr(select2, "class", "svelte-ta9sfn");
			if (/*shieldVar*/ ctx[3] === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[21].call(select2));
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "3 / 4");
			attr(div3, "class", "aa-3wide svelte-ta9sfn");
			set_style(h2, "margin-top", "5px");
			attr(h2, "class", "svelte-ta9sfn");
			attr(label3, "for", "");
			attr(label3, "class", "svelte-ta9sfn");
			attr(button0, "class", "svelte-ta9sfn");
			attr(div4, "class", "flexcol");
			set_style(div4, "grid-row", "1 / 2");
			set_style(div4, "grid-column", "1 / 2");
			attr(label4, "for", "");
			attr(label4, "class", "svelte-ta9sfn");
			attr(button1, "class", "oldCheck svelte-ta9sfn");
			attr(div5, "class", "flexcol");
			set_style(div5, "grid-row", "1 / 2");
			set_style(div5, "grid-column", "2 / 3");
			attr(label5, "for", "");
			attr(label5, "class", "svelte-ta9sfn");
			attr(button2, "class", "svelte-ta9sfn");
			attr(div6, "class", "flexcol");
			set_style(div6, "grid-row", "1 / 2");
			set_style(div6, "grid-column", "3 / 4");
			attr(label6, "for", "");
			attr(label6, "class", "svelte-ta9sfn");
			attr(button3, "class", "svelte-ta9sfn");
			attr(div7, "class", "flexcol");
			set_style(div7, "grid-row", "1 / 2");
			set_style(div7, "grid-column", "4 / 5");
			attr(label7, "for", "");
			attr(label7, "class", "svelte-ta9sfn");
			attr(input, "type", "Number");
			attr(input, "placeholder", "1");
			attr(input, "step", "0.01");
			attr(input, "class", "svelte-ta9sfn");
			attr(div8, "class", "flexcol");
			set_style(div8, "grid-row", "2 / 3");
			set_style(div8, "grid-column", "3 / 4");
			attr(div9, "class", "aa-options svelte-ta9sfn");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, label0);
			append(div0, t3);
			append(div0, select0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select0, null);
			}

			select_option(select0, /*variant*/ ctx[1]);
			append(div3, t4);
			append(div3, div1);
			append(div1, label1);
			append(div1, t6);
			append(div1, select1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select1, null);
			}

			select_option(select1, /*color*/ ctx[2]);
			append(div3, t7);
			append(div3, div2);
			append(div2, label2);
			append(div2, t9);
			append(div2, select2);
			append(select2, option0);
			append(select2, option1);
			select_option(select2, /*shieldVar*/ ctx[3]);
			insert(target, t12, anchor);
			insert(target, h2, anchor);
			insert(target, t14, anchor);
			insert(target, div9, anchor);
			append(div9, div4);
			append(div4, label3);
			append(div4, t16);
			append(div4, button0);
			append(button0, t17);
			append(div9, t18);
			append(div9, div5);
			append(div5, label4);
			append(div5, t20);
			append(div5, button1);
			append(button1, t21);
			append(div9, t22);
			append(div9, div6);
			append(div6, label5);
			append(div6, t24);
			append(div6, button2);
			append(button2, t25);
			append(div9, t26);
			append(div9, div7);
			append(div7, label6);
			append(div7, t28);
			append(div7, button3);
			append(button3, t29);
			append(div9, t30);
			append(div9, div8);
			append(div8, label7);
			append(div8, t32);
			append(div8, input);
			set_input_value(input, /*scale*/ ctx[4]);
			insert(target, t33, anchor);
			mount_component(soundsettings, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select0, "change", /*select0_change_handler*/ ctx[18]),
					listen(select0, "change", /*change_handler*/ ctx[19]),
					listen(select1, "change", /*select1_change_handler*/ ctx[20]),
					listen(select2, "change", /*select2_change_handler*/ ctx[21]),
					listen(button0, "click", /*click_handler*/ ctx[22]),
					listen(button1, "click", /*click_handler_1*/ ctx[23]),
					listen(button2, "click", /*click_handler_2*/ ctx[24]),
					listen(button3, "click", /*click_handler_3*/ ctx[25]),
					listen(input, "input", /*input_input_handler*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*Object, aaVariantMenu*/ 0) {
				each_value_1 = Object.entries(aaVariantMenu.static.spell.shieldspell);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*variant*/ 2) {
				select_option(select0, /*variant*/ ctx[1]);
			}

			if (dirty[0] & /*variant*/ 2) {
				each_value = Object.entries(aaColorMenu.static.spell.shieldspell[/*variant*/ ctx[1]]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*color, variant*/ 6) {
				select_option(select1, /*color*/ ctx[2]);
			}

			if (dirty[0] & /*shieldVar*/ 8) {
				select_option(select2, /*shieldVar*/ ctx[3]);
			}

			if (!current || dirty[0] & /*isPersistent*/ 64) set_data(t17, /*isPersistent*/ ctx[6]);
			if (!current || dirty[0] & /*aboveBelow*/ 32) set_data(t21, /*aboveBelow*/ ctx[5]);
			if (!current || dirty[0] & /*bindVisibility*/ 128) set_data(t25, /*bindVisibility*/ ctx[7]);
			if (!current || dirty[0] & /*bindAlpha*/ 256) set_data(t29, /*bindAlpha*/ ctx[8]);

			if (dirty[0] & /*scale*/ 16) {
				set_input_value(input, /*scale*/ ctx[4]);
			}

			const soundsettings_changes = {};
			if (dirty[0] & /*flagData*/ 1) soundsettings_changes.flagData = /*flagData*/ ctx[0];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(soundsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(soundsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div3);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t12);
			if (detaching) detach(h2);
			if (detaching) detach(t14);
			if (detaching) detach(div9);
			if (detaching) detach(t33);
			destroy_component(soundsettings, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let bindAlpha;
	let bindVisibility;
	let isPersistent;
	let aboveBelow;
	let { flagData } = $$props;
	const options = flagData.options;
	const shieldVariants = Object.keys(aaColorMenu.static.spell.shieldspell);

	let variant = shieldVariants.includes(options.variant)
	? options.variant
	: shieldVariants[0];

	const shieldColors = Object.keys(aaColorMenu.static.spell.shieldspell[variant]);

	let color = shieldColors.includes(flagData.color)
	? flagData.color
	: shieldColors[0];

	let shieldVar = options.shieldVar || "outro_explode";
	let unbindAlpha = options.unbindAlpha || false;
	let unbindVisbility = options.unbindVisbility || false;
	let persistent = options.persistent || false;
	let belowToken = options.below || false;
	let scale = options.scale || 1;

	function switchAlpha() {
		$$invalidate(14, unbindAlpha = !unbindAlpha);
	}

	function switchVisibility() {
		$$invalidate(15, unbindVisbility = !unbindVisbility);
	}

	function switchPersistence() {
		$$invalidate(16, persistent = !persistent);
	}

	function below() {
		$$invalidate(17, belowToken = !belowToken);
	}

	async function variantChange() {
		let newVariant = variant;
		$$invalidate(2, color = Object.keys(aaColorMenu.static.spell.shieldspell[newVariant])[0]);
	}

	function select0_change_handler() {
		variant = select_value(this);
		$$invalidate(1, variant);
	}

	const change_handler = async () => await variantChange();

	function select1_change_handler() {
		color = select_value(this);
		$$invalidate(2, color);
		$$invalidate(1, variant);
	}

	function select2_change_handler() {
		shieldVar = select_value(this);
		$$invalidate(3, shieldVar);
	}

	const click_handler = () => switchPersistence();
	const click_handler_1 = () => below();
	const click_handler_2 = () => switchVisibility();
	const click_handler_3 = () => switchAlpha();

	function input_input_handler() {
		scale = this.value;
		$$invalidate(4, scale);
	}

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*variant*/ 2) {
			$$invalidate(1, variant = options.variant = variant);
		}

		if ($$self.$$.dirty[0] & /*color*/ 4) {
			$$invalidate(2, color = $$invalidate(0, flagData.color = color, flagData));
		}

		if ($$self.$$.dirty[0] & /*shieldVar*/ 8) {
			$$invalidate(3, shieldVar = options.shieldVar = shieldVar);
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 16384) {
			$$invalidate(14, unbindAlpha = options.unbindAlpha = unbindAlpha);
		}

		if ($$self.$$.dirty[0] & /*unbindAlpha*/ 16384) {
			$$invalidate(8, bindAlpha = unbindAlpha ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 32768) {
			$$invalidate(15, unbindVisbility = options.unbindVisbility = unbindVisbility);
		}

		if ($$self.$$.dirty[0] & /*unbindVisbility*/ 32768) {
			$$invalidate(7, bindVisibility = unbindVisbility ? "Unbound" : "Bound");
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 65536) {
			$$invalidate(16, persistent = options.persistent = persistent);
		}

		if ($$self.$$.dirty[0] & /*persistent*/ 65536) {
			$$invalidate(6, isPersistent = persistent ? "Persistent" : "Not Persistent");
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 131072) {
			$$invalidate(17, belowToken = options.below = belowToken);
		}

		if ($$self.$$.dirty[0] & /*belowToken*/ 131072) {
			$$invalidate(5, aboveBelow = belowToken ? "Below Token" : "Above Token");
		}

		if ($$self.$$.dirty[0] & /*scale*/ 16) {
			$$invalidate(4, scale = options.scale = scale);
		}
	};

	return [
		flagData,
		variant,
		color,
		shieldVar,
		scale,
		aboveBelow,
		isPersistent,
		bindVisibility,
		bindAlpha,
		switchAlpha,
		switchVisibility,
		switchPersistence,
		below,
		variantChange,
		unbindAlpha,
		unbindVisbility,
		persistent,
		belowToken,
		select0_change_handler,
		change_handler,
		select1_change_handler,
		select2_change_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		input_input_handler
	];
}

class Shield extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { flagData: 0 }, null, [-1, -1]);
	}
}

/* src\formApps\ItemMenu\components\presets\sneakAttack.svelte generated by Svelte v3.47.0 */

class SneakAttack extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\teleportation.svelte generated by Svelte v3.47.0 */

class Teleportation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presets\thunderwave.svelte generated by Svelte v3.47.0 */

class Thunderwave extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

/* src\formApps\ItemMenu\components\presetShell.svelte generated by Svelte v3.47.0 */

function create_if_block_8$1(ctx) {
	let bards;
	let current;
	bards = new BardicInspiration({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(bards.$$.fragment);
		},
		m(target, anchor) {
			mount_component(bards, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const bards_changes = {};
			if (dirty & /*flagData*/ 1) bards_changes.flagData = /*flagData*/ ctx[0];
			bards.$set(bards_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bards.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bards.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(bards, detaching);
		}
	};
}

// (26:0) {#if presetType === "bless"}
function create_if_block_7$1(ctx) {
	let bless;
	let current;
	bless = new Bless({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(bless.$$.fragment);
		},
		m(target, anchor) {
			mount_component(bless, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const bless_changes = {};
			if (dirty & /*flagData*/ 1) bless_changes.flagData = /*flagData*/ ctx[0];
			bless.$set(bless_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bless.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bless.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(bless, detaching);
		}
	};
}

// (29:0) {#if presetType === "dualattach"}
function create_if_block_6$1(ctx) {
	let dualattach;
	let current;
	dualattach = new Dualattach({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(dualattach.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dualattach, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dualattach_changes = {};
			if (dirty & /*flagData*/ 1) dualattach_changes.flagData = /*flagData*/ ctx[0];
			dualattach.$set(dualattach_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dualattach.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dualattach.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dualattach, detaching);
		}
	};
}

// (32:0) {#if presetType === "fireball"}
function create_if_block_5$1(ctx) {
	let fireball;
	let current;
	fireball = new Fireball({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(fireball.$$.fragment);
		},
		m(target, anchor) {
			mount_component(fireball, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const fireball_changes = {};
			if (dirty & /*flagData*/ 1) fireball_changes.flagData = /*flagData*/ ctx[0];
			fireball.$set(fireball_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fireball.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fireball.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(fireball, detaching);
		}
	};
}

// (35:0) {#if presetType === "huntersmark"}
function create_if_block_4$1(ctx) {
	let huntersmark;
	let current;
	huntersmark = new Huntersmark({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(huntersmark.$$.fragment);
		},
		m(target, anchor) {
			mount_component(huntersmark, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const huntersmark_changes = {};
			if (dirty & /*flagData*/ 1) huntersmark_changes.flagData = /*flagData*/ ctx[0];
			huntersmark.$set(huntersmark_changes);
		},
		i(local) {
			if (current) return;
			transition_in(huntersmark.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(huntersmark.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(huntersmark, detaching);
		}
	};
}

// (38:0) {#if presetType === "shieldspell"}
function create_if_block_3$1(ctx) {
	let shield;
	let current;
	shield = new Shield({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(shield.$$.fragment);
		},
		m(target, anchor) {
			mount_component(shield, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const shield_changes = {};
			if (dirty & /*flagData*/ 1) shield_changes.flagData = /*flagData*/ ctx[0];
			shield.$set(shield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(shield.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(shield.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(shield, detaching);
		}
	};
}

// (41:0) {#if presetType === "sneakattack"}
function create_if_block_2$1(ctx) {
	let sneakattack;
	let current;
	sneakattack = new SneakAttack({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(sneakattack.$$.fragment);
		},
		m(target, anchor) {
			mount_component(sneakattack, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sneakattack_changes = {};
			if (dirty & /*flagData*/ 1) sneakattack_changes.flagData = /*flagData*/ ctx[0];
			sneakattack.$set(sneakattack_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sneakattack.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sneakattack.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(sneakattack, detaching);
		}
	};
}

// (44:0) {#if presetType === "teleportation"}
function create_if_block_1$1(ctx) {
	let teleportation;
	let current;
	teleportation = new Teleportation({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(teleportation.$$.fragment);
		},
		m(target, anchor) {
			mount_component(teleportation, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const teleportation_changes = {};
			if (dirty & /*flagData*/ 1) teleportation_changes.flagData = /*flagData*/ ctx[0];
			teleportation.$set(teleportation_changes);
		},
		i(local) {
			if (current) return;
			transition_in(teleportation.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(teleportation.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(teleportation, detaching);
		}
	};
}

// (47:0) {#if presetType === "thunderwave"}
function create_if_block$1(ctx) {
	let thunderwave;
	let current;
	thunderwave = new Thunderwave({ props: { flagData: /*flagData*/ ctx[0] } });

	return {
		c() {
			create_component(thunderwave.$$.fragment);
		},
		m(target, anchor) {
			mount_component(thunderwave, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const thunderwave_changes = {};
			if (dirty & /*flagData*/ 1) thunderwave_changes.flagData = /*flagData*/ ctx[0];
			thunderwave.$set(thunderwave_changes);
		},
		i(local) {
			if (current) return;
			transition_in(thunderwave.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(thunderwave.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(thunderwave, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let if_block8_anchor;
	let current;
	let if_block0 = /*presetType*/ ctx[1] === "bardicinspiration" && create_if_block_8$1(ctx);
	let if_block1 = /*presetType*/ ctx[1] === "bless" && create_if_block_7$1(ctx);
	let if_block2 = /*presetType*/ ctx[1] === "dualattach" && create_if_block_6$1(ctx);
	let if_block3 = /*presetType*/ ctx[1] === "fireball" && create_if_block_5$1(ctx);
	let if_block4 = /*presetType*/ ctx[1] === "huntersmark" && create_if_block_4$1(ctx);
	let if_block5 = /*presetType*/ ctx[1] === "shieldspell" && create_if_block_3$1(ctx);
	let if_block6 = /*presetType*/ ctx[1] === "sneakattack" && create_if_block_2$1(ctx);
	let if_block7 = /*presetType*/ ctx[1] === "teleportation" && create_if_block_1$1(ctx);
	let if_block8 = /*presetType*/ ctx[1] === "thunderwave" && create_if_block$1(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			t5 = space();
			if (if_block6) if_block6.c();
			t6 = space();
			if (if_block7) if_block7.c();
			t7 = space();
			if (if_block8) if_block8.c();
			if_block8_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert(target, t5, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert(target, t6, anchor);
			if (if_block7) if_block7.m(target, anchor);
			insert(target, t7, anchor);
			if (if_block8) if_block8.m(target, anchor);
			insert(target, if_block8_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*presetType*/ ctx[1] === "bardicinspiration") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "bless") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_7$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "dualattach") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_6$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "fireball") {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_5$1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "huntersmark") {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_4$1(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "shieldspell") {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_3$1(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t5.parentNode, t5);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "sneakattack") {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_2$1(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(t6.parentNode, t6);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "teleportation") {
				if (if_block7) {
					if_block7.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block7, 1);
					}
				} else {
					if_block7 = create_if_block_1$1(ctx);
					if_block7.c();
					transition_in(if_block7, 1);
					if_block7.m(t7.parentNode, t7);
				}
			} else if (if_block7) {
				group_outros();

				transition_out(if_block7, 1, 1, () => {
					if_block7 = null;
				});

				check_outros();
			}

			if (/*presetType*/ ctx[1] === "thunderwave") {
				if (if_block8) {
					if_block8.p(ctx, dirty);

					if (dirty & /*presetType*/ 2) {
						transition_in(if_block8, 1);
					}
				} else {
					if_block8 = create_if_block$1(ctx);
					if_block8.c();
					transition_in(if_block8, 1);
					if_block8.m(if_block8_anchor.parentNode, if_block8_anchor);
				}
			} else if (if_block8) {
				group_outros();

				transition_out(if_block8, 1, 1, () => {
					if_block8 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(if_block5);
			transition_in(if_block6);
			transition_in(if_block7);
			transition_in(if_block8);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(if_block5);
			transition_out(if_block6);
			transition_out(if_block7);
			transition_out(if_block8);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t5);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(t6);
			if (if_block7) if_block7.d(detaching);
			if (detaching) detach(t7);
			if (if_block8) if_block8.d(detaching);
			if (detaching) detach(if_block8_anchor);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { flagData } = $$props;
	const options = flagData.options;
	let { presetType = options.presetType } = $$props;

	$$self.$$set = $$props => {
		if ('flagData' in $$props) $$invalidate(0, flagData = $$props.flagData);
		if ('presetType' in $$props) $$invalidate(1, presetType = $$props.presetType);
	};

	return [flagData, presetType];
}

class PresetShell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { flagData: 0, presetType: 1 });
	}
}

/* src\formApps\ItemMenu\itemMenuAppShell.svelte generated by Svelte v3.47.0 */

function create_if_block_4(ctx) {
	let div1;
	let div0;
	let generalsettings;
	let updating_animationDisabled;
	let updating_isCustomized;
	let updating_enableMacro;
	let t0;
	let div0_transition;
	let t1;
	let t2;
	let t3;
	let div1_transition;
	let current;

	function generalsettings_animationDisabled_binding(value) {
		/*generalsettings_animationDisabled_binding*/ ctx[32](value);
	}

	function generalsettings_isCustomized_binding(value) {
		/*generalsettings_isCustomized_binding*/ ctx[33](value);
	}

	function generalsettings_enableMacro_binding(value) {
		/*generalsettings_enableMacro_binding*/ ctx[34](value);
	}

	let generalsettings_props = { flagData: /*flagData*/ ctx[1] };

	if (/*animationDisabled*/ ctx[2] !== void 0) {
		generalsettings_props.animationDisabled = /*animationDisabled*/ ctx[2];
	}

	if (/*isCustomized*/ ctx[3] !== void 0) {
		generalsettings_props.isCustomized = /*isCustomized*/ ctx[3];
	}

	if (/*enableMacro*/ ctx[4] !== void 0) {
		generalsettings_props.enableMacro = /*enableMacro*/ ctx[4];
	}

	generalsettings = new GeneralSettings({ props: generalsettings_props });
	binding_callbacks.push(() => bind(generalsettings, 'animationDisabled', generalsettings_animationDisabled_binding));
	binding_callbacks.push(() => bind(generalsettings, 'isCustomized', generalsettings_isCustomized_binding));
	binding_callbacks.push(() => bind(generalsettings, 'enableMacro', generalsettings_enableMacro_binding));
	let if_block0 = /*isCustomized*/ ctx[3] && create_if_block_11(ctx);
	let if_block1 = /*enableMacro*/ ctx[4] && create_if_block_10(ctx);
	let if_block2 = /*showSound*/ ctx[9] && create_if_block_9(ctx);
	let if_block3 = !/*animationDisabled*/ ctx[2] && /*isCustomized*/ ctx[3] && create_if_block_5(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(generalsettings.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			attr(div0, "class", "aaMenu-section svelte-7n0yf9");
			attr(div1, "class", "aaMidSection svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(generalsettings, div0, null);
			append(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const generalsettings_changes = {};
			if (dirty[0] & /*flagData*/ 2) generalsettings_changes.flagData = /*flagData*/ ctx[1];

			if (!updating_animationDisabled && dirty[0] & /*animationDisabled*/ 4) {
				updating_animationDisabled = true;
				generalsettings_changes.animationDisabled = /*animationDisabled*/ ctx[2];
				add_flush_callback(() => updating_animationDisabled = false);
			}

			if (!updating_isCustomized && dirty[0] & /*isCustomized*/ 8) {
				updating_isCustomized = true;
				generalsettings_changes.isCustomized = /*isCustomized*/ ctx[3];
				add_flush_callback(() => updating_isCustomized = false);
			}

			if (!updating_enableMacro && dirty[0] & /*enableMacro*/ 16) {
				updating_enableMacro = true;
				generalsettings_changes.enableMacro = /*enableMacro*/ ctx[4];
				add_flush_callback(() => updating_enableMacro = false);
			}

			generalsettings.$set(generalsettings_changes);

			if (/*isCustomized*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*isCustomized*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*enableMacro*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*enableMacro*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*showSound*/ ctx[9]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*showSound*/ 512) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_9(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*animationDisabled*/ ctx[2] && /*isCustomized*/ ctx[3]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*animationDisabled, isCustomized*/ 12) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_5(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(generalsettings.$$.fragment, local);
			transition_in(if_block0);

			add_render_callback(() => {
				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {}, true);
				div0_transition.run(1);
			});

			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(generalsettings.$$.fragment, local);
			transition_out(if_block0);
			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {}, false);
			div0_transition.run(0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(generalsettings);
			if (if_block0) if_block0.d();
			if (detaching && div0_transition) div0_transition.end();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

// (203:20) {#if isCustomized}
function create_if_block_11(ctx) {
	let div1;
	let div0;
	let label;
	let t3;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let option4;
	let option5;
	let t10;
	let div1_transition;
	let current;
	let mounted;
	let dispose;
	let if_block = /*animType*/ ctx[7] === "preset" && create_if_block_12(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			label = element("label");

			label.textContent = `${localize("AUTOANIM.animation")} 
                                ${localize("AUTOANIM.type")}`;

			t3 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("autoanimations.animTypes.melee")}`;
			option1 = element("option");
			option1.textContent = `${localize("autoanimations.animTypes.ranged")}`;
			option2 = element("option");
			option2.textContent = `${localize("autoanimations.animTypes.onToken")}`;
			option3 = element("option");
			option3.textContent = `${localize("autoanimations.animTypes.templates")}`;
			option4 = element("option");
			option4.textContent = `${localize("autoanimations.animTypes.typeAuras")}`;
			option5 = element("option");
			option5.textContent = `${localize("autoanimations.animTypes.presets")}`;
			t10 = space();
			if (if_block) if_block.c();
			attr(label, "for", "1");
			attr(label, "class", "svelte-7n0yf9");
			option0.__value = "melee";
			option0.value = option0.__value;
			option1.__value = "range";
			option1.value = option1.__value;
			option2.__value = "static";
			option2.value = option2.__value;
			option3.__value = "templatefx";
			option3.value = option3.__value;
			option4.__value = "aura";
			option4.value = option4.__value;
			option5.__value = "preset";
			option5.value = option5.__value;
			attr(select, "id", "1");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-7n0yf9");
			if (/*animType*/ ctx[7] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[35].call(select));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "2 / 3");
			attr(div1, "class", "aa-pickAnim svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label);
			append(div0, t3);
			append(div0, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			append(select, option3);
			append(select, option4);
			append(select, option5);
			select_option(select, /*animType*/ ctx[7]);
			append(div1, t10);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[35]),
					listen(select, "change", /*change_handler*/ ctx[36])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*animType*/ 128) {
				select_option(select, /*animType*/ ctx[7]);
			}

			if (/*animType*/ ctx[7] === "preset") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_12(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (detaching && div1_transition) div1_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (247:24) {#if animType === "preset"}
function create_if_block_12(ctx) {
	let div;
	let label;
	let t3;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let option4;
	let option5;
	let option6;
	let option7;
	let option8;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			label = element("label");

			label.textContent = `${localize("AUTOANIM.preset")} 
                            ${localize("AUTOANIM.type")}`;

			t3 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${localize("autoanimations.presetTypes.bardicinspiration")}`;
			option1 = element("option");
			option1.textContent = `${localize("autoanimations.presetTypes.bless")}`;
			option2 = element("option");
			option2.textContent = `${localize("autoanimations.presetTypes.dualattach")}`;
			option3 = element("option");
			option3.textContent = `${localize("autoanimations.presetTypes.fireball")}`;
			option4 = element("option");
			option4.textContent = `${localize("autoanimations.presetTypes.huntersmark")}`;
			option5 = element("option");
			option5.textContent = `${localize("autoanimations.presetTypes.shieldspell")}`;
			option6 = element("option");
			option6.textContent = `${localize("autoanimations.presetTypes.sneakattack")}`;
			option7 = element("option");
			option7.textContent = `${localize("autoanimations.presetTypes.animTeleportation")}`;
			option8 = element("option");
			option8.textContent = `${localize("autoanimations.presetTypes.thunderwave")} D&D 5e`;
			attr(label, "for", "1");
			attr(label, "class", "svelte-7n0yf9");
			option0.__value = "bardicinspiration";
			option0.value = option0.__value;
			option1.__value = "bless";
			option1.value = option1.__value;
			option2.__value = "dualattach";
			option2.value = option2.__value;
			option3.__value = "fireball";
			option3.value = option3.__value;
			option4.__value = "huntersmark";
			option4.value = option4.__value;
			option5.__value = "shieldspell";
			option5.value = option5.__value;
			option6.__value = "sneakattack";
			option6.value = option6.__value;
			option7.__value = "teleportation";
			option7.value = option7.__value;
			option8.__value = "thunderwave";
			option8.value = option8.__value;
			attr(select, "id", "1");
			set_style(select, "text-align", "center");
			set_style(select, "justify-self", "center");
			attr(select, "class", "svelte-7n0yf9");
			if (/*presetType*/ ctx[8] === void 0) add_render_callback(() => /*select_change_handler_1*/ ctx[37].call(select));
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "2 / 3");
			set_style(div, "grid-column", "2 / 3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(div, t3);
			append(div, select);
			append(select, option0);
			append(select, option1);
			append(select, option2);
			append(select, option3);
			append(select, option4);
			append(select, option5);
			append(select, option6);
			append(select, option7);
			append(select, option8);
			select_option(select, /*presetType*/ ctx[8]);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler_1*/ ctx[37]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*presetType*/ 256) {
				select_option(select, /*presetType*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (276:16) {#if enableMacro}
function create_if_block_10(ctx) {
	let div;
	let macrofield;
	let div_transition;
	let current;
	macrofield = new Macro({ props: { flagData: /*flagData*/ ctx[1] } });

	return {
		c() {
			div = element("div");
			create_component(macrofield.$$.fragment);
			attr(div, "class", "aaMenu-section svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(macrofield, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const macrofield_changes = {};
			if (dirty[0] & /*flagData*/ 2) macrofield_changes.flagData = /*flagData*/ ctx[1];
			macrofield.$set(macrofield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(macrofield.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(macrofield.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(macrofield);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (281:16) {#if showSound}
function create_if_block_9(ctx) {
	let div;
	let soundsettings;
	let div_transition;
	let current;

	soundsettings = new SoundSettings({
			props: {
				audioPath: "a01",
				flagData: /*flagData*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(soundsettings.$$.fragment);
			attr(div, "class", "aaMenu-section svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(soundsettings, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const soundsettings_changes = {};
			if (dirty[0] & /*flagData*/ 2) soundsettings_changes.flagData = /*flagData*/ ctx[1];
			soundsettings.$set(soundsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(soundsettings.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(soundsettings.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(soundsettings);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (286:16) {#if !animationDisabled && isCustomized}
function create_if_block_5(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	const if_block_creators = [create_if_block_8, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*animType*/ ctx[7] === "preset") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*animType*/ ctx[7] === "melee" && create_if_block_7(ctx);
	let if_block2 = (/*animType*/ ctx[7] === "melee" || /*animType*/ ctx[7] === "range" || /*animType*/ ctx[7] === "static") && create_if_block_6(ctx);

	return {
		c() {
			div = element("div");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(div, "class", "aaMenu-section svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div, null);
			}

			if (/*animType*/ ctx[7] === "melee") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*animType*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*animType*/ ctx[7] === "melee" || /*animType*/ ctx[7] === "range" || /*animType*/ ctx[7] === "static") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*animType*/ 128) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (290:24) {:else}
function create_else_block(ctx) {
	let primarysection;
	let current;

	primarysection = new PrimarySection({
			props: {
				animTypeSwitched: /*animTypeSwitched*/ ctx[11],
				animType: /*animType*/ ctx[7],
				flagData: /*flagData*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(primarysection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(primarysection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const primarysection_changes = {};
			if (dirty[0] & /*animTypeSwitched*/ 2048) primarysection_changes.animTypeSwitched = /*animTypeSwitched*/ ctx[11];
			if (dirty[0] & /*animType*/ 128) primarysection_changes.animType = /*animType*/ ctx[7];
			if (dirty[0] & /*flagData*/ 2) primarysection_changes.flagData = /*flagData*/ ctx[1];
			primarysection.$set(primarysection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(primarysection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(primarysection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(primarysection, detaching);
		}
	};
}

// (288:24) {#if animType === "preset"}
function create_if_block_8(ctx) {
	let presetmenu;
	let current;

	presetmenu = new PresetShell({
			props: {
				flagData: /*flagData*/ ctx[1],
				presetType: /*presetType*/ ctx[8]
			}
		});

	return {
		c() {
			create_component(presetmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(presetmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const presetmenu_changes = {};
			if (dirty[0] & /*flagData*/ 2) presetmenu_changes.flagData = /*flagData*/ ctx[1];
			if (dirty[0] & /*presetType*/ 256) presetmenu_changes.presetType = /*presetType*/ ctx[8];
			presetmenu.$set(presetmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(presetmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(presetmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(presetmenu, detaching);
		}
	};
}

// (294:20) {#if animType === "melee"}
function create_if_block_7(ctx) {
	let div;
	let rangeswitch;
	let current;
	rangeswitch = new MeleeRange({ props: { flagData: /*flagData*/ ctx[1] } });

	return {
		c() {
			div = element("div");
			create_component(rangeswitch.$$.fragment);
			attr(div, "class", "aaMenu-section svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(rangeswitch, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const rangeswitch_changes = {};
			if (dirty[0] & /*flagData*/ 2) rangeswitch_changes.flagData = /*flagData*/ ctx[1];
			rangeswitch.$set(rangeswitch_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeswitch.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeswitch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(rangeswitch);
		}
	};
}

// (299:20) {#if animType === "melee" || animType === "range" || animType === "static"}
function create_if_block_6(ctx) {
	let div;
	let explosionsettings;
	let current;
	explosionsettings = new Explosions({ props: { flagData: /*flagData*/ ctx[1] } });

	return {
		c() {
			div = element("div");
			create_component(explosionsettings.$$.fragment);
			attr(div, "class", "aaMenu-section svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(explosionsettings, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const explosionsettings_changes = {};
			if (dirty[0] & /*flagData*/ 2) explosionsettings_changes.flagData = /*flagData*/ ctx[1];
			explosionsettings.$set(explosionsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(explosionsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(explosionsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(explosionsettings);
		}
	};
}

// (307:8) {#if focusExtra}
function create_if_block_1(ctx) {
	let div8;
	let div5;
	let div3;
	let div0;
	let label0;
	let t0;
	let label0_class_value;
	let t1;
	let t2;
	let div1;
	let t4;
	let t5;
	let div2;
	let label2;
	let t6;
	let label2_class_value;
	let t7;
	let div4;
	let t9;
	let div6;
	let extrafx0;
	let t10;
	let div7;
	let extrafx1;
	let div8_transition;
	let current;
	let if_block0 = /*enableSource*/ ctx[5] && create_if_block_3();
	let if_block1 = /*enableTarget*/ ctx[6] && create_if_block_2();

	extrafx0 = new ExtraFX({
			props: {
				flagPath: "sourceExtraFX",
				flagData: /*flagData*/ ctx[1]
			}
		});

	extrafx1 = new ExtraFX({
			props: {
				flagPath: "targetExtraFX",
				flagData: /*flagData*/ ctx[1]
			}
		});

	return {
		c() {
			div8 = element("div");
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			t0 = text("Source");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div1 = element("div");
			div1.innerHTML = `<label for="" class="selected svelte-7n0yf9" style="border: 2px outset #dddddd">Primary</label>`;
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			t6 = text("Target");
			t7 = space();
			div4 = element("div");

			div4.innerHTML = `<label for="" style="align-self:center" class="svelte-7n0yf9">Requires use of a Primary Animation, either
                            Customized or Autorec</label>`;

			t9 = space();
			div6 = element("div");
			create_component(extrafx0.$$.fragment);
			t10 = space();
			div7 = element("div");
			create_component(extrafx1.$$.fragment);
			attr(label0, "for", "");
			attr(label0, "class", label0_class_value = "" + (null_to_empty(/*enableSource*/ ctx[5] ? "selected" : "notSelected") + " svelte-7n0yf9"));
			set_style(label0, "border", "2px outset #dddddd");
			attr(div0, "class", "flexcol aa-button-labels");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 2");
			attr(div1, "class", "flexcol aa-button-labels");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "3 / 4");
			attr(label2, "for", "");
			attr(label2, "class", label2_class_value = "" + (null_to_empty(/*enableTarget*/ ctx[6] ? "selected" : "notSelected") + " svelte-7n0yf9"));
			set_style(label2, "border", "2px outset #dddddd");
			attr(div2, "class", "flexcol aa-button-labels");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "5 / 6");
			attr(div3, "class", "aa-5wide svelte-7n0yf9");
			attr(div4, "class", "flexcol aa-extraFX-hint svelte-7n0yf9");
			set_style(div4, "grid-row", "2/3");
			set_style(div4, "grid-column", "1/6");
			attr(div5, "class", "aaMenu-section svelte-7n0yf9");
			attr(div6, "class", "aaMenu-section svelte-7n0yf9");
			attr(div7, "class", "aaMenu-section svelte-7n0yf9");
			attr(div8, "class", "aaMidSection svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div5);
			append(div5, div3);
			append(div3, div0);
			append(div0, label0);
			append(label0, t0);
			append(div3, t1);
			if (if_block0) if_block0.m(div3, null);
			append(div3, t2);
			append(div3, div1);
			append(div3, t4);
			if (if_block1) if_block1.m(div3, null);
			append(div3, t5);
			append(div3, div2);
			append(div2, label2);
			append(label2, t6);
			append(div5, t7);
			append(div5, div4);
			append(div8, t9);
			append(div8, div6);
			mount_component(extrafx0, div6, null);
			append(div8, t10);
			append(div8, div7);
			mount_component(extrafx1, div7, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*enableSource*/ 32 && label0_class_value !== (label0_class_value = "" + (null_to_empty(/*enableSource*/ ctx[5] ? "selected" : "notSelected") + " svelte-7n0yf9"))) {
				attr(label0, "class", label0_class_value);
			}

			if (/*enableSource*/ ctx[5]) {
				if (if_block0) {
					if (dirty[0] & /*enableSource*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div3, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*enableTarget*/ ctx[6]) {
				if (if_block1) {
					if (dirty[0] & /*enableTarget*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div3, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*enableTarget*/ 64 && label2_class_value !== (label2_class_value = "" + (null_to_empty(/*enableTarget*/ ctx[6] ? "selected" : "notSelected") + " svelte-7n0yf9"))) {
				attr(label2, "class", label2_class_value);
			}

			const extrafx0_changes = {};
			if (dirty[0] & /*flagData*/ 2) extrafx0_changes.flagData = /*flagData*/ ctx[1];
			extrafx0.$set(extrafx0_changes);
			const extrafx1_changes = {};
			if (dirty[0] & /*flagData*/ 2) extrafx1_changes.flagData = /*flagData*/ ctx[1];
			extrafx1.$set(extrafx1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(extrafx0.$$.fragment, local);
			transition_in(extrafx1.$$.fragment, local);

			add_render_callback(() => {
				if (!div8_transition) div8_transition = create_bidirectional_transition(div8, fade, {}, true);
				div8_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(extrafx0.$$.fragment, local);
			transition_out(extrafx1.$$.fragment, local);
			if (!div8_transition) div8_transition = create_bidirectional_transition(div8, fade, {}, false);
			div8_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div8);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			destroy_component(extrafx0);
			destroy_component(extrafx1);
			if (detaching && div8_transition) div8_transition.end();
		}
	};
}

// (323:24) {#if enableSource}
function create_if_block_3(ctx) {
	let div;
	let label;
	let label_transition;
	let current;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.innerHTML = `<i class="fas fa-arrow-right fa-2xl"></i>`;
			attr(label, "for", "");
			set_style(label, "align-self", "center");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "2/3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, true);
				label_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, false);
			label_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && label_transition) label_transition.end();
		}
	};
}

// (349:24) {#if enableTarget}
function create_if_block_2(ctx) {
	let div;
	let label;
	let label_transition;
	let current;

	return {
		c() {
			div = element("div");
			label = element("label");
			label.innerHTML = `<i class="fas fa-arrow-right fa-2xl"></i>`;
			attr(label, "for", "");
			set_style(label, "align-self", "center");
			attr(div, "class", "flexcol");
			set_style(div, "grid-row", "1/2");
			set_style(div, "grid-column", "4/5");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, true);
				label_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, false);
			label_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && label_transition) label_transition.end();
		}
	};
}

// (395:8) {#if focus3d}
function create_if_block(ctx) {
	let div1;
	let div0;
	let menu3d;
	let div1_transition;
	let current;
	menu3d = new _3dMenuShell({ props: { flagData: /*flagData*/ ctx[1] } });

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(menu3d.$$.fragment);
			attr(div0, "class", "aaMenu-section svelte-7n0yf9");
			attr(div1, "class", "aaMidSection svelte-7n0yf9");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(menu3d, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			const menu3d_changes = {};
			if (dirty[0] & /*flagData*/ 2) menu3d_changes.flagData = /*flagData*/ ctx[1];
			menu3d.$set(menu3d_changes);
		},
		i(local) {
			if (current) return;
			transition_in(menu3d.$$.fragment, local);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(menu3d.$$.fragment, local);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(menu3d);
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

// (142:0) <ApplicationShell      bind:elementRoot      transition={scale}      transitionOptions={{ duration: 500 }}      stylesContent={{ background: "rgba(125, 125, 125, 0.75)" }}      stylesApp={{ header: "red" }}  >
function create_default_slot(ctx) {
	let form_1;
	let div4;
	let div3;
	let div0;
	let button0;
	let i0;
	let t0;
	let t1_value = localize("AUTOANIM.primary") + "";
	let t1;
	let t2;
	let t3_value = localize("AUTOANIM.animation") + "";
	let t3;
	let button0_class_value;
	let t4;
	let div1;
	let button1;
	let i1;
	let t5;
	let t6_value = localize("AUTOANIM.extra") + "";
	let t6;
	let t7;
	let t8_value = localize("AUTOANIM.effects") + "";
	let t8;
	let button1_class_value;
	let t9;
	let div2;
	let button2;
	let i2;
	let t10;
	let button2_class_value;
	let div4_transition;
	let t11;
	let t12;
	let t13;
	let t14;
	let div8;
	let div7;
	let div5;
	let button3;
	let t16;
	let div6;
	let button4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*focusPrimary*/ ctx[14] && create_if_block_4(ctx);
	let if_block1 = /*focusExtra*/ ctx[13] && create_if_block_1(ctx);
	let if_block2 = /*focus3d*/ ctx[12] && create_if_block(ctx);

	return {
		c() {
			form_1 = element("form");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			button0 = element("button");
			i0 = element("i");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");
			button1 = element("button");
			i1 = element("i");
			t5 = space();
			t6 = text(t6_value);
			t7 = space();
			t8 = text(t8_value);
			t9 = space();
			div2 = element("div");
			button2 = element("button");
			i2 = element("i");
			t10 = text(" 3D Canvas");
			t11 = space();
			if (if_block0) if_block0.c();
			t12 = space();
			if (if_block1) if_block1.c();
			t13 = space();
			if (if_block2) if_block2.c();
			t14 = space();
			div8 = element("div");
			div7 = element("div");
			div5 = element("div");
			button3 = element("button");
			button3.textContent = "Submit";
			t16 = space();
			div6 = element("div");
			button4 = element("button");
			button4.textContent = "Close and Submit";
			attr(i0, "class", "fas fa-bomb");
			attr(button0, "class", button0_class_value = "" + (null_to_empty(/*focusPrimary*/ ctx[14] ? "selected" : "notSelected") + " svelte-7n0yf9"));
			attr(div0, "class", "flexcol");
			set_style(div0, "grid-row", "1 / 2");
			set_style(div0, "grid-column", "1 / 2");
			attr(i1, "class", "fas fa-user-plus");
			attr(button1, "class", button1_class_value = "" + (null_to_empty(/*focusExtra*/ ctx[13] ? "selected" : "notSelected") + " svelte-7n0yf9"));
			attr(div1, "class", "flexcol");
			set_style(div1, "grid-row", "1 / 2");
			set_style(div1, "grid-column", "2 / 3");
			attr(i2, "class", "fas fa-vr-cardboard");
			attr(button2, "class", button2_class_value = "" + (null_to_empty(/*focus3d*/ ctx[12] ? "selected" : "notSelected") + " svelte-7n0yf9"));
			attr(div2, "class", "flexcol");
			set_style(div2, "grid-row", "1 / 2");
			set_style(div2, "grid-column", "3 / 4");
			attr(div3, "class", "aa-tabs svelte-7n0yf9");
			attr(div4, "class", "aaTopSection svelte-7n0yf9");
			set_style(div4, "margin-top", "5px");
			attr(button3, "class", "footer-button svelte-7n0yf9");
			attr(button3, "type", "submit");
			attr(div5, "class", "flexcol");
			set_style(div5, "grid-row", "1/2");
			set_style(div5, "grid-column", "1/2");
			attr(button4, "class", "footer-button svelte-7n0yf9");
			attr(div6, "class", "flexcol");
			set_style(div6, "grid-row", "1/2");
			set_style(div6, "grid-column", "2/3");
			attr(div7, "class", "aa-submit svelte-7n0yf9");
			attr(div8, "class", "aaBottomSection svelte-7n0yf9");
			set_style(div8, "margin-bottom", "5px");
			attr(form_1, "autocomplete", "off");
			attr(form_1, "id", "item-menu-aa");
			attr(form_1, "class", "overview");
		},
		m(target, anchor) {
			insert(target, form_1, anchor);
			append(form_1, div4);
			append(div4, div3);
			append(div3, div0);
			append(div0, button0);
			append(button0, i0);
			append(button0, t0);
			append(button0, t1);
			append(button0, t2);
			append(button0, t3);
			append(div3, t4);
			append(div3, div1);
			append(div1, button1);
			append(button1, i1);
			append(button1, t5);
			append(button1, t6);
			append(button1, t7);
			append(button1, t8);
			append(div3, t9);
			append(div3, div2);
			append(div2, button2);
			append(button2, i2);
			append(button2, t10);
			append(form_1, t11);
			if (if_block0) if_block0.m(form_1, null);
			append(form_1, t12);
			if (if_block1) if_block1.m(form_1, null);
			append(form_1, t13);
			if (if_block2) if_block2.m(form_1, null);
			append(form_1, t14);
			append(form_1, div8);
			append(div8, div7);
			append(div7, div5);
			append(div5, button3);
			append(div7, t16);
			append(div7, div6);
			append(div6, button4);
			/*form_1_binding*/ ctx[38](form_1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[29]),
					listen(button1, "click", /*click_handler_1*/ ctx[30]),
					listen(button2, "click", /*click_handler_2*/ ctx[31]),
					listen(button3, "click", prevent_default(/*applyFlags*/ ctx[15])),
					listen(button4, "click", prevent_default(/*closeApp*/ ctx[16])),
					listen(form_1, "submit", prevent_default(/*submit_handler*/ ctx[28]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*focusPrimary*/ 16384 && button0_class_value !== (button0_class_value = "" + (null_to_empty(/*focusPrimary*/ ctx[14] ? "selected" : "notSelected") + " svelte-7n0yf9"))) {
				attr(button0, "class", button0_class_value);
			}

			if (!current || dirty[0] & /*focusExtra*/ 8192 && button1_class_value !== (button1_class_value = "" + (null_to_empty(/*focusExtra*/ ctx[13] ? "selected" : "notSelected") + " svelte-7n0yf9"))) {
				attr(button1, "class", button1_class_value);
			}

			if (!current || dirty[0] & /*focus3d*/ 4096 && button2_class_value !== (button2_class_value = "" + (null_to_empty(/*focus3d*/ ctx[12] ? "selected" : "notSelected") + " svelte-7n0yf9"))) {
				attr(button2, "class", button2_class_value);
			}

			if (/*focusPrimary*/ ctx[14]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*focusPrimary*/ 16384) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(form_1, t12);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*focusExtra*/ ctx[13]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*focusExtra*/ 8192) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(form_1, t13);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*focus3d*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*focus3d*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(form_1, t14);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, true);
				div4_transition.run(1);
			});

			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, fade, {}, false);
			div4_transition.run(0);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form_1);
			if (detaching && div4_transition) div4_transition.end();
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			/*form_1_binding*/ ctx[38](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let applicationshell;
	let updating_elementRoot;
	let current;

	function applicationshell_elementRoot_binding(value) {
		/*applicationshell_elementRoot_binding*/ ctx[39](value);
	}

	let applicationshell_props = {
		transition: scale,
		transitionOptions: { duration: 500 },
		stylesContent: { background: "rgba(125, 125, 125, 0.75)" },
		stylesApp: { header: "red" },
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*elementRoot*/ ctx[0] !== void 0) {
		applicationshell_props.elementRoot = /*elementRoot*/ ctx[0];
	}

	applicationshell = new ApplicationShell({ props: applicationshell_props });
	binding_callbacks.push(() => bind(applicationshell, 'elementRoot', applicationshell_elementRoot_binding));

	return {
		c() {
			create_component(applicationshell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(applicationshell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const applicationshell_changes = {};

			if (dirty[0] & /*form, flagData, focus3d, enableTarget, enableSource, focusExtra, animType, presetType, animTypeSwitched, animationDisabled, isCustomized, showSound, enableMacro, focusPrimary*/ 32766 | dirty[1] & /*$$scope*/ 4096) {
				applicationshell_changes.$$scope = { dirty, ctx };
			}

			if (!updating_elementRoot && dirty[0] & /*elementRoot*/ 1) {
				updating_elementRoot = true;
				applicationshell_changes.elementRoot = /*elementRoot*/ ctx[0];
				add_flush_callback(() => updating_elementRoot = false);
			}

			applicationshell.$set(applicationshell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(applicationshell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(applicationshell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(applicationshell, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let focusPrimary;
	let focusExtra;
	let focus3d;
	let { elementRoot } = $$props;
	let { item } = $$props;
	let { itemFlags } = $$props;
	const flags = itemFlags.autoanimations || {};
	const wait = delay => new Promise(resolve => setTimeout(resolve, delay));
	let animationDisabled = flags.killAnim;
	let isCustomized;

	const flagData = {
		killAnim: flags.killAnim,
		animLevel: flags.animLevel,
		override: flags.override,
		animType: flags.animType,
		animation: flags.animation,
		color: flags.color,
		version: flags.version
		? flags.version
		: Object.keys(flagMigrations.migrations).map(n => Number(n)).reverse()[0],
		options: flags.options || {},
		explosions: flags.explosions || {},
		audio: flags.audio || {},
		autoOverride: flags.autoOverride || {},
		macro: flags.macro || {},
		levels3d: flags.levels3d || {},
		sourceToken: flags.sourceToken || {},
		targetToken: flags.targetToken || {},
		meleeSwitch: flags.meleeSwitch || {}
	};

	const options = flagData.options;
	let enableMacro;
	let showSound;
	let menuType;
	let form = void 0;
	const { application } = getContext("external");

	async function applyFlags() {
		const updatedFlags = {
			data: { flags: { autoanimations: flagData } }
		};

		await item.update(updatedFlags.data);
	}

	async function closeApp() {
		const updatedFlags = {
			data: { flags: { autoanimations: flagData } }
		};

		await item.update(updatedFlags.data);
		application.close();
	}

	let primaryTab = true;
	let extraTab = false;
	let tab3d = false;

	function switchPrimary() {
		$$invalidate(25, primaryTab = !extraTab && !tab3d ? primaryTab : !primaryTab);
		$$invalidate(26, extraTab = false);
		$$invalidate(27, tab3d = false);
	}

	function switchExtra() {
		$$invalidate(26, extraTab = !primaryTab && !tab3d ? extraTab : !extraTab);
		$$invalidate(25, primaryTab = false);
		$$invalidate(27, tab3d = false);
	}

	function switch3d() {
		$$invalidate(27, tab3d = !primaryTab && !extraTab ? tab3d : !tab3d);
		$$invalidate(25, primaryTab = false);
		$$invalidate(26, extraTab = false);
	}

	let enableSource = flagData.sourceToken.enable || false;

	extraSource.subscribe(value => {
		$$invalidate(5, enableSource = value);
	});

	let enableTarget = flagData.targetToken.enable || false;

	extraTarget.subscribe(value => {
		$$invalidate(6, enableTarget = value);
	});

	// Sets Initial animType for Menu - Assigns to Flag when updated
	let animType = flagData.animType || "melee";

	let presetType = options.presetType;
	let animTypeSwitched = false;

	async function typeSwitch() {
		$$invalidate(11, animTypeSwitched = true);
		await wait(150);
		$$invalidate(11, animTypeSwitched = false);
	}

	function submit_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = () => switchPrimary();
	const click_handler_1 = () => switchExtra();
	const click_handler_2 = () => switch3d();

	function generalsettings_animationDisabled_binding(value) {
		animationDisabled = value;
		$$invalidate(2, animationDisabled);
	}

	function generalsettings_isCustomized_binding(value) {
		isCustomized = value;
		$$invalidate(3, isCustomized);
	}

	function generalsettings_enableMacro_binding(value) {
		enableMacro = value;
		$$invalidate(4, enableMacro);
	}

	function select_change_handler() {
		animType = select_value(this);
		$$invalidate(7, animType);
	}

	const change_handler = () => typeSwitch();

	function select_change_handler_1() {
		presetType = select_value(this);
		$$invalidate(8, presetType);
	}

	function form_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			form = $$value;
			$$invalidate(10, form);
		});
	}

	function applicationshell_elementRoot_binding(value) {
		elementRoot = value;
		$$invalidate(0, elementRoot);
	}

	$$self.$$set = $$props => {
		if ('elementRoot' in $$props) $$invalidate(0, elementRoot = $$props.elementRoot);
		if ('item' in $$props) $$invalidate(21, item = $$props.item);
		if ('itemFlags' in $$props) $$invalidate(22, itemFlags = $$props.itemFlags);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*isCustomized*/ 8) {
			$$invalidate(3, isCustomized);
		}

		if ($$self.$$.dirty[0] & /*enableMacro*/ 16) {
			$$invalidate(4, enableMacro);
		}

		if ($$self.$$.dirty[0] & /*animationDisabled*/ 4) {
			$$invalidate(9, showSound = animationDisabled ? true : false);
		}

		if ($$self.$$.dirty[0] & /*menuType*/ 16777216) {
			$$invalidate(24, menuType);
		}

		if ($$self.$$.dirty[0] & /*primaryTab*/ 33554432) {
			$$invalidate(14, focusPrimary = primaryTab);
		}

		if ($$self.$$.dirty[0] & /*extraTab*/ 67108864) {
			$$invalidate(13, focusExtra = extraTab);
		}

		if ($$self.$$.dirty[0] & /*tab3d*/ 134217728) {
			$$invalidate(12, focus3d = tab3d);
		}

		if ($$self.$$.dirty[0] & /*enableSource*/ 32) {
			$$invalidate(5, enableSource);
		}

		if ($$self.$$.dirty[0] & /*enableTarget*/ 64) {
			$$invalidate(6, enableTarget);
		}

		if ($$self.$$.dirty[0] & /*animType*/ 128) {
			{
				$$invalidate(7, animType);
				$$invalidate(1, flagData.animType = animType, flagData);
			}
		}

		if ($$self.$$.dirty[0] & /*presetType*/ 256) {
			$$invalidate(8, presetType = options.presetType = presetType);
		}
	};

	return [
		elementRoot,
		flagData,
		animationDisabled,
		isCustomized,
		enableMacro,
		enableSource,
		enableTarget,
		animType,
		presetType,
		showSound,
		form,
		animTypeSwitched,
		focus3d,
		focusExtra,
		focusPrimary,
		applyFlags,
		closeApp,
		switchPrimary,
		switchExtra,
		switch3d,
		typeSwitch,
		item,
		itemFlags,
		flags,
		menuType,
		primaryTab,
		extraTab,
		tab3d,
		submit_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		generalsettings_animationDisabled_binding,
		generalsettings_isCustomized_binding,
		generalsettings_enableMacro_binding,
		select_change_handler,
		change_handler,
		select_change_handler_1,
		form_1_binding,
		applicationshell_elementRoot_binding
	];
}

class ItemMenuAppShell extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				elementRoot: 0,
				item: 21,
				itemFlags: 22,
				flags: 23,
				flagData: 1
			},
			null,
			[-1, -1]
		);
	}

	get elementRoot() {
		return this.$$.ctx[0];
	}

	set elementRoot(elementRoot) {
		this.$$set({ elementRoot });
		flush();
	}

	get item() {
		return this.$$.ctx[21];
	}

	set item(item) {
		this.$$set({ item });
		flush();
	}

	get itemFlags() {
		return this.$$.ctx[22];
	}

	set itemFlags(itemFlags) {
		this.$$set({ itemFlags });
		flush();
	}

	get flags() {
		return this.$$.ctx[23];
	}

	get flagData() {
		return this.$$.ctx[1];
	}
}

class aaAutoRecognition extends FormApplication {
  constructor(object = {}, options) {
    super(object, options);
  }

  static get defaultOptions() {
    return foundry.utils.mergeObject(super.defaultOptions, {
      template: './modules/autoanimations/src/custom-recognition/settings.html',
      id: 'automatic-recognition',
      title: "Automatic Recognition Settings",
      resizable: true,
      width: 700,
      height: "auto",
      closeOnSubmit: true,
      tabs: [{
        navSelector: ".tabs",
        contentSelector: "form",
        initial: "name"
      }]
    });
  }

  getSettingsData() {
    let settingsData = {
      "aaAutorec": game.settings.get("autoanimations", "aaAutorec")
    };
    return settingsData;
  }

  getData() {
    let data = super.getData();
    data.menuTypes = aaTypeMenu, data.menuNames = aaNameMenu, data.menuVariants = aaVariantMenu, data.menuColors = aaColorMenu, data.currentAutoVersion = Object.keys(autoRecMigration.migrations).map(n => Number(n)).reverse()[0];
    data.settings = this.getSettingsData();
    data.show = false;
    data.system = {
      id: game.system.id,
      title: game.system.data.title
    };
    return data;
  }

  activateListeners(html) {
    var _this = this;

    super.activateListeners(html);
    html.find('button.add-autorecog-melee').click(this._addMelee.bind(this));
    html.find('button.add-autorecog-range').click(this._addRange.bind(this));
    html.find('button.add-autorecog-static').click(this._addStatic.bind(this));
    html.find('button.add-autorecog-templates').click(this._addTemplate.bind(this));
    html.find('button.add-autorecog-auras').click(this._addAura.bind(this));
    html.find('button.add-autorecog-preset').click(this._addPreset.bind(this));
    html.find('button.add-autorecog-aefx').click(this._addAefx.bind(this));
    html.find('.duplicate-melee').click(this._duplicateMelee.bind(this));
    html.find('.duplicate-range').click(this._duplicateRange.bind(this));
    html.find('.duplicate-static').click(this._duplicateStatic.bind(this));
    html.find('.duplicate-templates').click(this._duplicateTemplate.bind(this));
    html.find('.duplicate-auras').click(this._duplicateAura.bind(this));
    html.find('.duplicate-preset').click(this._duplicatePreset.bind(this));
    html.find('.duplicate-aefx').click(this._duplicateAefx.bind(this)); //html.find('button.add-autorecog-template').click(this._addTemplate.bind(this));

    html.find('.aa-autorecognition input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-autorec-submit-open').click(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    }); //html.find('button.remove-autorecog').click(this._onRemoveOverride.bind(this));

    html.find('.remove-autorecog').click(this._onRemoveOverride.bind(this));
    html.on('click', '.enableMacro', evt => {
      var change = $(evt.currentTarget).closest('.form-fields').find('.showMacro').is(":checked");

      if (change === true) {
        $(evt.currentTarget).closest('.form-fields').find('.showMacro').prop('checked', false);
      } else {
        $(evt.currentTarget).closest('.form-fields').find('.showMacro').prop('checked', true);
      }

      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.on('click', '.showSoundOnly', evt => {
      var change = $(evt.currentTarget).closest('.form-fields').find('.showSound').is(":checked");

      if (change === true) {
        $(evt.currentTarget).closest('.form-fields').find('.showSound').prop('checked', false);
      } else {
        $(evt.currentTarget).closest('.form-fields').find('.showSound').prop('checked', true);
      }

      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.aa-autorecognition select').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.on('click', '.collapse-button', evt => {
      var change = $(evt.currentTarget).closest('.form-fields').find('.hideme').is(":checked");

      if (change === true) {
        $(evt.currentTarget).closest('.form-fields').find('.hideme').prop('checked', false);
      } else {
        $(evt.currentTarget).closest('.form-fields').find('.hideme').prop('checked', true);
      }

      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.on('click', '.button-2d', evt => {
      var change = $(evt.currentTarget).closest('.form-fields').find('.anim2d').is(":checked");

      if (change === true) {
        $(evt.currentTarget).closest('.form-fields').find('.anim2d').prop('checked', false);
      } else {
        $(evt.currentTarget).closest('.form-fields').find('.anim2d').prop('checked', true);
      }

      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.on('keyup', '#aatest', this._onSearch.bind(this)); //html.on('focus', '.aa-autorecognition', this._loadSearch.bind(this))

    html.on(this._loadSearch());
    html.on('open', '#aatest', evt => {
      evt.preventDefault();
    });
    html.find("#aa-autorec-export").click(AutorecFunctions._exportAutorecToJSON);
    html.find("#aa-autorec-import").on("click", async function () {
      if (await importFromJSONDialog()) {
        _this.close();
      }
    });
    html.find("#aa-autorec-merge").on("click", async function () {
      if (await importJSONAndMerge()) {
        _this.close();
      }
    });
    html.find('.particles input[type="color"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.find('.particles input[type="checkbox"]').change(evt => {
      this.submit({
        preventClose: true
      }).then(() => this.render());
    });
    html.on('click', '.sort-menu', async function (evt) {
      evt.preventDefault();
      await _this.sortAutorec();

      _this.render();
    });
  }

  _loadSearch(evt) {
    var _settings$aaAutorec, _settings$aaAutorec$s;

    //debugger
    const settings = this.getSettingsData();
    const search = (_settings$aaAutorec = settings.aaAutorec) === null || _settings$aaAutorec === void 0 ? void 0 : (_settings$aaAutorec$s = _settings$aaAutorec.search) === null || _settings$aaAutorec$s === void 0 ? void 0 : _settings$aaAutorec$s.toLowerCase();
    this.element.find('.aa-search').each((index, element) => {
      const text = $(element).find('.auto-name').val().toLowerCase();

      if (text.includes(search)) {
        $(element).show(250);
      } else {
        $(element).hide();
      }
    });
  }

  _onSearch(evt) {
    const search = $(evt.currentTarget).val().toLowerCase();
    this.element.find('.aa-search').each((index, element) => {
      const text = $(element).find('.auto-name').val().toLowerCase();

      if (text.includes(search)) {
        $(element).show(250);
      } else {
        $(element).hide();
      }
    });
  }

  async _addMelee(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.melee-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {}; //updateData[`aaAutorec.melee.${idx}.repeat`] = 1;
    //updateData[`aaAutorec.melee.${idx}.delay`] = 500;
    //updateData[`aaAutorec.melee.${idx}.scale`] = 1;

    updateData[`aaAutorec.melee.${idx}.below`] = false;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addRange(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.range-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {}; //updateData[`aaAutorec.range.${idx}.repeat`] = 1;
    //updateData[`aaAutorec.range.${idx}.delay`] = 500;

    updateData[`aaAutorec.range.${idx}.below`] = false;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addStatic(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.static-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {}; //updateData[`aaAutorec.static.${idx}.repeat`] = 1;
    //updateData[`aaAutorec.static.${idx}.delay`] = 500;
    //updateData[`aaAutorec.static.${idx}.scale`] = 1;

    updateData[`aaAutorec.static.${idx}.below`] = false;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addTemplate(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.templates-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {}; //updateData[`aaAutorec.templates.${idx}.repeat`] = 1;
    //updateData[`aaAutorec.templates.${idx}.delay`] = 500;

    updateData[`aaAutorec.templates.${idx}.below`] = false; //updateData[`aaAutorec.templates.${idx}.opacity`] = 0.75;

    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addAura(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.auras-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {};
    updateData[`aaAutorec.auras.${idx}.tint`] = '#ffffff'; //updateData[`aaAutorec.auras.${idx}.opacity`] = 0.75;
    //updateData[`aaAutorec.auras.${idx}.scale`] = 1;

    updateData[`aaAutorec.auras.${idx}.below`] = true;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addPreset(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.preset-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {}; //updateData[`aaAutorec.preset.${idx}.scale`] = 1;

    updateData[`aaAutorec.preset.${idx}.below`] = false; //updateData[`aaAutorec.preset.${idx}.anchorX`] = 0.5;
    //updateData[`aaAutorec.preset.${idx}.anchorY`] = 0.5;

    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _addAefx(event) {
    event.preventDefault();
    let idx = 0;
    const entries = event.target.closest('div.tab').querySelectorAll('div.aefx-settings');
    const last = entries[entries.length - 1];

    if (last) {
      idx = last.dataset.idx + 1;
    }

    let updateData = {};
    updateData[`aaAutorec.aefx.${idx}.below`] = false;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _onRemoveOverride(event) {
    event.preventDefault();
    const data = await game.settings.get('autoanimations', 'aaAutorec');
    let idx = event.target.dataset.idx;
    delete data[event.target.classList[3]][idx];
    const menuType = ['melee', 'range', 'static', 'templates', 'auras', 'preset', 'aefx'];

    for (let i = 0; i < menuType.length; i++) {
      let compacted = {};

      try {
        Object.values(data[menuType[i]]);
      } catch (exception) {
        continue;
      }

      Object.values(data[menuType[i]]).forEach((val, idx) => compacted[idx] = val);
      data[menuType[i]] = compacted;
    }

    await game.settings.set('autoanimations', "aaAutorec", data);
    this.render();
  }

  async _duplicateMelee(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.melee-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.melee[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.melee.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicateRange(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.range-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.range[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.range.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicateStatic(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.static-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.static[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.static.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicateTemplate(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.templates-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.templates[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.templates.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicateAura(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.auras-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.auras[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.auras.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicatePreset(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.preset-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.preset[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.preset.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }

  async _duplicateAefx(event) {
    event.preventDefault();
    let currentIDX = event.target.dataset.idx;
    const entries = event.target.closest('div.tab').querySelectorAll('div.aefx-settings');
    const last = entries[entries.length - 1];
    let idx = last.dataset.idx + 1;
    let autorecSettings = game.settings.get('autoanimations', 'aaAutorec');
    let newSet = autorecSettings.aefx[currentIDX];
    newSet.name = newSet.name + " (COPY)";
    let updateData = {};
    updateData[`aaAutorec.aefx.${idx}`] = newSet;
    await this._onSubmit(event, {
      updateData: updateData,
      preventClose: true
    });
    this.render();
  }
  /** @override */


  async _updateObject(_, formData) {
    const data = expandObject(formData).aaAutorec;
    const menuType = ['melee', 'range', 'static', 'templates', 'auras', 'preset', 'aefx'];

    for (let i = 0; i < menuType.length; i++) {
      let compacted = {};

      try {
        Object.values(data[menuType[i]]);
      } catch (exception) {
        continue;
      }

      Object.values(data[menuType[i]]).forEach((val, idx) => compacted[idx] = val);
      data[menuType[i]] = compacted;
    }

    const oldData = await game.settings.get('autoanimations', 'aaAutorec');
    const newData = mergeObject(oldData, data);
    await game.settings.set('autoanimations', "aaAutorec", newData);
  }

  async sortAutorec() {
    const autoRec = await game.settings.get('autoanimations', 'aaAutorec');
    const sortedMenu = {};
    sortedMenu.version = autoRec.version;
    sortedMenu.search = autoRec.search;
    sortedMenu.melee = autoRec.melee ? await this.sortMenu(autoRec.melee) : {};
    sortedMenu.range = autoRec.range ? await this.sortMenu(autoRec.range) : {};
    sortedMenu.static = autoRec.static ? await this.sortMenu(autoRec.static) : {};
    sortedMenu.templates = autoRec.templates ? await this.sortMenu(autoRec.templates) : {};
    sortedMenu.auras = autoRec.auras ? await this.sortMenu(autoRec.auras) : {};
    sortedMenu.preset = autoRec.preset ? await this.sortMenu(autoRec.preset) : {};
    sortedMenu.aefx = autoRec.aefx ? await this.sortMenu(autoRec.aefx) : {};
    await game.settings.set("autoanimations", "aaAutorec", sortedMenu);
  }

  async sortMenu(data) {
    const mergedArray = [];
    const keys = Object.keys(data);
    const keyLength = keys.length;

    for (var i = 0; i < keyLength; i++) {
      var currentObject = data[keys[i]];

      if (!currentObject.name) {
        break;
      }

      currentObject.menuSection = keys[i];
      mergedArray.push(currentObject);
    }

    mergedArray.sort((a, b) => b.name.toLowerCase() > a.name.toLowerCase() ? -1 : 1);
    const sortedMenu = {};
    const newLength = mergedArray.length;

    for (var i = 0; i < newLength; i++) {
      var currentKey = i.toString();
      sortedMenu[currentKey] = mergedArray[currentKey];
    }

    return sortedMenu;
  }

} // Credit to Tim Poseny of Midi-QOL for the import/export functions for settings

async function importFromJSONDialog() {
  const content = await renderTemplate("modules/autoanimations/src/custom-recognition/import-data.html", {
    entity: "autoanimations",
    name: "aaAutorec"
  });
  let dialog = new Promise((resolve, reject) => {
    new Dialog({
      title: game.i18n.format("AUTOANIM.menuImport"),
      content: content,
      buttons: {
        import: {
          icon: '<i class="fas fa-file-import"></i>',
          label: game.i18n.format("AUTOANIM.overwrite"),
          callback: html => {
            var _ui$notifications;

            //@ts-ignore
            const form = html.find("form")[0];
            if (!form.data.files.length) return (_ui$notifications = ui.notifications) === null || _ui$notifications === void 0 ? void 0 : _ui$notifications.error("You did not upload a data file!");
            readTextFromFile(form.data.files[0]).then(json => {
              AutorecFunctions._importAutorecFromJSON(json);

              resolve(true);
            });
          }
        },
        merge: {
          icon: '<i class="fas fa-file-import"></i>',
          label: game.i18n.format("AUTOANIM.merge"),
          callback: html => {
            var _ui$notifications2;

            //@ts-ignore
            const form = html.find("form")[0];
            if (!form.data.files.length) return (_ui$notifications2 = ui.notifications) === null || _ui$notifications2 === void 0 ? void 0 : _ui$notifications2.error("You did not upload a data file!");
            readTextFromFile(form.data.files[0]).then(json => {
              AutorecFunctions._mergeAutorecFile(json);

              resolve(true);
            });
          }
        },
        no: {
          icon: '<i class="fas fa-times"></i>',
          label: "Cancel",
          callback: html => resolve(false)
        }
      },
      default: "import"
    }, {
      width: 600
    }).render(true);
  });
  return await dialog;
}

class AAItemMenu extends SvelteApplication {
  //constructor(options = {}) { super(options); }
  constructor(item) {
    //console.log(Object.entries(aaNameMenu.melee.weapon))
    super({
      title: `A-A Item Setting for ${item.name}`,
      id: `AA-item-settings`,
      zIndex: 102,
      svelte: {
        class: ItemMenuAppShell,
        target: document.body,
        props: {
          item: item,
          itemFlags: item.data.flags
        }
      } //close: () => this.options.reject(),
      //...options

    });
    /*
    this.hookId = Hooks.on('updateActor', (changedActor) => {
        if (changedActor !== actor) return;
        setTimeout(() => {
            this.svelte.applicationShell.updateHealthBar();
        }, 100);
    });
    */
  }
  /**
   * 
   */


  static get defaultOptions() {
    return foundry.utils.mergeObject(super.defaultOptions, {
      resizable: true,
      minimizable: true,
      width: 600,
      height: 650,
      closeOnSubmit: true
    });
  }

  _getHeaderButtons() {
    const buttons = super._getHeaderButtons();

    buttons.unshift({
      class: 'autorec-shortcut',
      icon: 'fas fa-globe',
      title: 'Launch Autorec',
      label: "Autorec Menu",
      styles: {
        color: 'lightblue'
      },
      onclick: function () {
        if (game.user.isGM) {
          new aaAutoRecognition().render(true);
        }
      }
    });
    return buttons;
  }

}

class aaAutorec {
  static get defaultConfiguration() {
    const defaultConfig = {
      search: "",
      melee: {
        0: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.dagger"),
          animation: 'dagger',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        1: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.flurryofblows"),
          animation: 'flurryofblows',
          variant: 'physical',
          color: 'blue',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        2: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.greataxe"),
          animation: 'greataxe',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        3: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.greatclub"),
          animation: 'greatclub',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        4: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.greatsword"),
          animation: 'greatsword',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        5: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.handaxe"),
          animation: 'handaxe',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        6: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.sword"),
          animation: 'sword',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        7: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.mace"),
          animation: 'mace',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        8: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.maul"),
          animation: 'maul',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        9: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.spear"),
          animation: 'spear',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        10: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.rapier"),
          animation: 'rapier',
          variant: '01',
          color: 'white',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        },
        11: {
          hidden: true,
          meleeType: 'weapon',
          name: game.i18n.localize("AUTOANIM.unarmedstrike"),
          animation: 'unarmedstrike',
          variant: 'physical',
          color: 'blue',
          repeat: 1,
          delay: 500,
          scale: 1,
          menuType: "weapon"
        }
      },
      range: {
        0: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.crossbow"),
          animation: 'bolt',
          variant: 'physical',
          color: 'orange',
          repeat: 1,
          delay: 500,
          type: "weapon",
          menuType: "weapon"
        },
        1: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.bow"),
          animation: 'arrow',
          variant: 'regular',
          color: 'regular',
          repeat: 1,
          delay: 500,
          type: "weapon",
          menuType: "weapon"
        },
        2: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.disintegrate"),
          animation: 'disintegrate',
          variant: '01',
          color: 'green',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        3: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.eldritchblast"),
          animation: 'eldritchblast',
          variant: '01',
          color: 'purple',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        4: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.firebolt"),
          animation: 'firebolt',
          variant: '01',
          color: 'orange',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        5: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.guidingbolt"),
          animation: 'guidingbolt',
          variant: '01',
          color: 'blueyellow',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        6: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.magicmissile"),
          animation: 'magicmissile',
          variant: '01',
          color: 'purple',
          repeat: 3,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        7: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.rayoffrost"),
          animation: 'rayoffrost',
          variant: '01',
          color: 'blue',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        8: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.scorchingray"),
          animation: 'scorchingray',
          variant: '01',
          color: 'orange',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        },
        9: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.witchbolt"),
          animation: 'witchbolt',
          variant: '01',
          color: 'blue',
          repeat: 1,
          delay: 500,
          type: "spell",
          menuType: "spell"
        }
      },
      static: {
        0: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.curewounds"),
          animation: 'curewounds',
          staticOptions: 'staticSpells',
          variant: '01',
          color: 'blue',
          repeat: 1,
          delay: 500,
          scale: 1.5,
          below: true,
          type: "targetDefault",
          menuType: "spell"
        },
        1: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.itemHealingWord"),
          animation: 'generichealing',
          staticOptions: 'staticSpells',
          variant: '01',
          color: 'blue',
          repeat: 1,
          delay: 500,
          scale: 1.5,
          below: true,
          type: "targetDefault",
          menuType: "spell"
        },
        2: {
          hidden: true,
          name: game.i18n.localize("AUTOANIM.tollthedead"),
          animation: 'tollthedead',
          staticOptions: 'staticSpells',
          variant: 'complete',
          color: 'green',
          repeat: 1,
          delay: 500,
          scale: 1,
          below: false,
          type: "target",
          menuType: "spell"
        },
        3: {
          staticOptions: 'creature',
          animation: "bite",
          below: false,
          color: "red",
          custom: false,
          delay: 500,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.bite"),
          repeat: 1,
          scale: 1,
          type: "target",
          variant: "01",
          menuType: "creature"
        },
        4: {
          staticOptions: 'creature',
          animation: "claw",
          below: false,
          color: "red",
          custom: false,
          delay: 500,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.claw"),
          repeat: 1,
          scale: 1,
          type: "target",
          variant: "01",
          menuType: "creature"
        }
      },
      templates: {
        0: {
          animation: "calllightning",
          below: false,
          color: 'blueorange',
          custom: false,
          delay: 500,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.calllightning"),
          occlusionAlpha: 0.7,
          occlusionMode: "3",
          opacity: 0.75,
          overhead: true,
          persist: true,
          persistType: 'overheadtile',
          removeTemplate: true,
          repeat: 1,
          type: 'circle',
          variant: '01',
          scaleX: 1,
          scaleY: 1,
          menuType: "circle"
        },
        1: {
          animation: "fogcloud",
          below: false,
          color: 'white',
          custom: false,
          delay: 500,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.fogcloud"),
          occlusionAlpha: 0.65,
          occlusionMode: "3",
          opacity: 0.75,
          overhead: true,
          persist: true,
          persistType: 'overheadtile',
          removeTemplate: true,
          repeat: 1,
          type: 'circle',
          variant: '01',
          scaleX: 1,
          scaleY: 1,
          menuType: "circle"
        },
        2: {
          animation: "thunderwave",
          below: false,
          color: "blue",
          custom: false,
          delay: 500,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.thunderwave"),
          opacity: 0.75,
          persist: false,
          removeTemplate: true,
          repeat: 3,
          type: "rect",
          variant: "01",
          scaleX: 1,
          scaleY: 1,
          menuType: "square"
        }
      },
      auras: {
        0: {
          animation: "spiritguardians",
          below: false,
          color: 'darkblue',
          custom: false,
          hidden: true,
          name: game.i18n.localize("AUTOANIM.spiritguardians"),
          opacity: 0.75,
          scale: 3.5,
          static: false,
          tint: '#ffffff',
          variant: '01',
          ignoretargets: true,
          menuType: "spell"
        }
      },
      preset: {
        0: {
          animateSelf: true,
          animateTarget: true,
          animation: "bardicinspiration",
          below: false,
          hidden: true,
          marker: true,
          name: game.i18n.localize("AUTOANIM.bardicinspiration"),
          scale: 1,
          selfAnimation: "music",
          selfColor: "blue",
          selfMarkerColor: "greenorange",
          targetAnimation: "bardicinspiration",
          targetColor: "greenorange",
          targetMarkerColor: "greenorange"
        },
        1: {
          addCTA: false,
          animation: "bless",
          below: true,
          color: "yellow",
          hidden: true,
          name: game.i18n.localize("AUTOANIM.bless"),
          scale: 1.5
        },
        2: {
          animation: "shieldspell",
          below: false,
          color: "blue",
          endeffect: "outro_explode",
          hidden: true,
          name: game.i18n.localize("AUTOANIM.shield"),
          scale: 1,
          variant: "01"
        },
        3: {
          animation: "teleportation",
          below: false,
          color: "blue",
          custom: false,
          hidden: true,
          hideTemplate: false,
          name: game.i18n.localize("AUTOANIM.mistystep"),
          range: 30,
          scale: 1.5,
          subAnimation: "mistystep",
          measureType: "alternating",
          custom02: false,
          customPath02: "",
          subAnimation02: "mistystep",
          variant: "01",
          variant02: "02",
          color02: "blue",
          scale02: 1.5,
          menuType: "spell",
          menuType02: "spell"
        }
      },
      version: 4
    };
    return defaultConfig;
  }

  constructor() {
    this._enabled = false;
  }

}
new aaAutorec();

function aaSettings() {
  var _game$modules$get;

  const menuAAAutoRecSettings = {
    key: 'custom-autorec',
    config: {
      label: game.i18n.format("AUTOANIM.autoRecSetting"),
      icon: "fas fa-dice-d20",
      type: aaAutoRecognition,
      restricted: true
    }
  };
  const AutoRecSettings = {
    key: 'aaAutorec',
    config: {
      name: "Automatic Recognition",
      hint: "Configure Automatic Recognition",
      scope: 'world',
      config: false,
      default: {},
      type: Object
    }
  };
  game.settings.registerMenu('autoanimations', menuAAAutoRecSettings.key, menuAAAutoRecSettings.config);
  game.settings.register('autoanimations', AutoRecSettings.key, mergeObject(AutoRecSettings.config, {
    default: aaAutorec.defaultConfiguration
  }, true, true));
  game.settings.register("autoanimations", "killAllAnim", {
    name: game.i18n.format("AUTOANIM.toggleAnimations"),
    hint: game.i18n.format("AUTOANIM.toggleAnimations_hint"),
    scope: "client",
    config: true,
    type: String,
    choices: {
      "on": game.i18n.format("AUTOANIM.ON"),
      "off": game.i18n.format("AUTOANIM.OFF")
    },
    default: "on",
    onChange: value => {
      if (value === "off") {
        disableAnimations();
      }

      if (value === "on") {
        window.location.reload();
      }
    }
  });
  game.settings.register("autoanimations", "disableAutoRec", {
    name: game.i18n.format("AUTOANIM.settingDisableAutoRec"),
    hint: game.i18n.format("AUTOANIM.settingDisableAutoRecHint"),
    scope: "client",
    config: true,
    type: Boolean,
    default: false
  });
  game.settings.register("autoanimations", "globaldelay", {
    name: game.i18n.format("AUTOANIM.globaldelay_name"),
    hint: game.i18n.format("AUTOANIM.globaldelay_hint"),
    scope: "world",
    config: true,
    default: 100,
    type: Number
  });
  game.settings.register("autoanimations", "videoLoop", {
    name: game.i18n.format("AUTOANIM.animPreview"),
    hint: game.i18n.format("AUTOANIM.animPreviewHint"),
    scope: "world",
    type: String,
    choices: {
      "0": "No Video Preview",
      "1": "Manually Play Video Preview",
      "2": "Autoplay Video Preview"
    },
    default: "0",
    config: true
  });
  game.settings.register("autoanimations", "jb2aLocation", {
    name: game.i18n.format("AUTOANIM.s3Name"),
    hint: game.i18n.format("AUTOANIM.s3Hint"),
    scope: 'world',
    config: true,
    type: String,
    default: "",
    onChange: () => {
      window.location.reload();
    }
  });
  game.settings.register("autoanimations", "hideFromPlayers", {
    name: game.i18n.format("AUTOANIM.animtab_name"),
    hint: game.i18n.format("AUTOANIM.animtab_hint"),
    scope: "world",
    config: true,
    type: Boolean,
    default: false
  });
  game.settings.register("autoanimations", "decoupleSound", {
    name: game.i18n.format("AUTOANIM.decoupleSounds"),
    hint: game.i18n.format("AUTOANIM.decoupleSounds_hint"),
    scope: "world",
    config: true,
    type: Boolean,
    default: false
  });
  game.settings.register("autoanimations", "rangeSwitch", {
    name: game.i18n.format("AUTOANIM.settingRangeSwitch"),
    hint: game.i18n.format("AUTOANIM.settingRangeSwitchhint"),
    scope: "client",
    config: true,
    type: Boolean,
    default: false
  });
  game.settings.register("autoanimations", "noTips", {
    name: game.i18n.format("AUTOANIM.noTips"),
    hint: game.i18n.format("AUTOANIM.noTipsHint"),
    scope: "client",
    config: true,
    type: Boolean,
    default: false
  });

  switch (game.system.id) {
    case "demonlord":
      {
        game.settings.register("autoanimations", "playtrigger", {
          name: game.i18n.format("AUTOANIM.demonlordtrigger_name"),
          hint: game.i18n.format("AUTOANIM.demonlordtrigger_hint"),
          scope: "world",
          type: String,
          choices: {
            "rollattack": game.i18n.format("AUTOANIM.demonlordtrigger_rollattack"),
            "hits": game.i18n.format("AUTOANIM.demonlordtrigger_hits"),
            "misses": game.i18n.format("AUTOANIM.demonlordtrigger_misses"),
            "rolldamage": game.i18n.format("AUTOANIM.demonlordtrigger_rolldamage"),
            "applydamage": game.i18n.format("AUTOANIM.demonlordtrigger_applydamage")
          },
          default: "rollattack",
          config: true
        });
        break;
      }

    case "sfrpg":
      {
        game.settings.register("autoanimations", "playonDamage", {
          name: game.i18n.format("AUTOANIM.midiondmg_name"),
          hint: game.i18n.format("AUTOANIM.midiondmg_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true,
          onChange: () => {
            window.location.reload();
          }
        });
      }
      break;

    case "dnd5e":
    case "sw5e":
      game.settings.register("autoanimations", "disableAEAnimations", {
        name: game.i18n.format("AUTOANIM.disableAEAnimations"),
        hint: game.i18n.format("AUTOANIM.disableAEAnimationsHint"),
        scope: 'world',
        type: Boolean,
        default: false,
        config: true
      });

      if ((_game$modules$get = game.modules.get("midi-qol")) !== null && _game$modules$get !== void 0 && _game$modules$get.active) {
        game.settings.register("autoanimations", "playonhit", {
          name: game.i18n.format("AUTOANIM.midionhit_name"),
          hint: game.i18n.format("AUTOANIM.midionhit_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true
        });
        game.settings.register("autoanimations", "playonmiss", {
          name: game.i18n.format("AUTOANIM.midionmiss_name"),
          hint: game.i18n.format("AUTOANIM.midionmiss_hint"),
          scope: `world`,
          type: Boolean,
          default: false,
          config: true
        });
        game.settings.register("autoanimations", "playonDamage", {
          name: game.i18n.format("AUTOANIM.midiondmg_name"),
          hint: game.i18n.format("AUTOANIM.midiondmg_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true,
          onChange: () => {
            window.location.reload();
          }
        });
        game.settings.register("autoanimations", "EnableCritical", {
          name: game.i18n.format("AUTOANIM.crithit_name"),
          hint: game.i18n.format("AUTOANIM.crithit_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true,
          onchange: () => {
            window.location.reload();
          }
        });
        game.settings.register("autoanimations", "CriticalAnimation", {
          name: game.i18n.format("AUTOANIM.crithitAnim_name"),
          //name: "Choose A File",
          scope: 'world',
          config: true,
          type: String,
          filePicker: "imagevideo"
        });
        game.settings.register("autoanimations", "EnableCriticalMiss", {
          name: game.i18n.format("AUTOANIM.critmiss_name"),
          hint: game.i18n.format("AUTOANIM.critmiss_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true,
          onchange: () => {
            window.location.reload();
          }
        });
        game.settings.register("autoanimations", "CriticalMissAnimation", {
          name: game.i18n.format("AUTOANIM.critmissAnim_name"),
          scope: 'world',
          config: true,
          type: String,
          filePicker: "imagevideo"
        });
      } else {
        game.settings.register("autoanimations", "playonDamageCore", {
          name: game.i18n.format("AUTOANIM.coreondmg_name"),
          hint: game.i18n.format("AUTOANIM.coreondmg_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true
        });
      }

      break;

    case "pf2e":
      {
        game.settings.register("autoanimations", "playonDamageCore", {
          name: game.i18n.format("AUTOANIM.coreondmg_name"),
          hint: game.i18n.format("AUTOANIM.coreondmg_hint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true
        });
        game.settings.register("autoanimations", "playonmiss", {
          name: game.i18n.format("AUTOANIM.midionmiss_name"),
          hint: "Requires Animations to be played on Attack rolls",
          scope: `world`,
          type: Boolean,
          default: false,
          config: true
        });
        game.settings.register("autoanimations", "disableNestedEffects", {
          name: game.i18n.format("AUTOANIM.disableNested"),
          hint: game.i18n.format("AUTOANIM.disableNestedHint"),
          scope: `world`,
          type: Boolean,
          default: false,
          config: true
        });
      }
      break;

    case "pf1":
      {
        game.settings.register("autoanimations", "disableAEAnimations", {
          name: game.i18n.format("AUTOANIM.disableAEAnimations"),
          hint: game.i18n.format("AUTOANIM.disableAEAnimationsHint"),
          scope: 'world',
          type: Boolean,
          default: false,
          config: true
        });
      }
      break;
  }

  game.settings.register("autoanimations", "debug", {
    name: game.i18n.format("AUTOANIM.debugging"),
    scope: "world",
    config: true,
    default: false,
    type: Boolean
  });
}

Hooks.once('socketlib.ready', function () {
  setupSocket();
});
var killAllAnimations;
function disableAnimations() {
  socket.off('module.sequencer');
  killAllAnimations = true;
}
Hooks.on('init', () => {
  Handlebars.registerHelper('ifEquals', function (arg1, arg2, options) {
    return arg1 == arg2 ? options.fn(this) : options.inverse(this);
  });
  Handlebars.registerHelper('ifnoteq', function (a, b, options) {
    if (a != b) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  Handlebars.registerHelper('matchOverhead', function (autoObj, options) {
    if (autoObj.persist && (autoObj.menuType === 'circle' || autoObj.menuType === 'square')) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  Handlebars.registerHelper('sequencerOnly', function (autoObj, options) {
    if (autoObj.persist && (autoObj.menuType === 'ray' || autoObj.menuType === 'cone')) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  Handlebars.registerHelper('isAeSupported', function (options) {
    let supportedSystems = ['dnd5e', 'pf2e', 'pf1'];

    if (supportedSystems.includes(game.system.id)) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  loadTemplates(['modules/autoanimations/src/custom-recognition/settings.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-melee-autorec.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-ranged-autorec.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-static-autorec.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-templates-autorec.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-auras-autorec.html', 'modules/autoanimations/src/custom-recognition/autorec-templates/aa-presets-autorec.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animations.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/pre-postfx.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-melee.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-ranged.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-ontoken.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-templates.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-auras.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-presets.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/item-autoOverride.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/add-explosion.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/levels3d.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/animation-menus/add-3Dexplosion.html', 'modules/autoanimations/src/item-sheet-handlers/aa-templates/macrocall.html', 'modules/autoanimations/src/active-effects/aeMenus/ae-animations.html', 'modules/autoanimations/src/active-effects/aeMenus/ae-autorecMenu.html', 'modules/autoanimations/src/custom-recognition/import-data.html']);
}); // sets the A-A button on the Item Sheet title bar

Hooks.on(`renderItemSheet`, async (app, html, data) => {
  if (!game.user.isGM && game.settings.get("autoanimations", "hideFromPlayers")) {
    return;
  }

  const pf2eRuleTypes = ['condition', 'effect'];
  const aaBtn = $(`<a class="aa-item-settings" title="A-A"><i class="fas fa-biohazard"></i>A-A</a>`);
  aaBtn.click(async ev => {
    var _app$item, _app$item2;

    await flagMigrations.handle(app.document); // if this is a PF1 "Buff" effect or PF2e Ruleset Item (Active Effects) spawn the Active Effect menu. Otherwise continue as normal

    if (game.system.id === 'pf1' && ((_app$item = app.item) === null || _app$item === void 0 ? void 0 : _app$item.type) === 'buff' || game.system.id === 'pf2e' && pf2eRuleTypes.includes((_app$item2 = app.item) === null || _app$item2 === void 0 ? void 0 : _app$item2.type)) {
      new AAActiveEffectMenu(app.document, {}).render(true);
    } else {
      //new AAItemSettings(app.document, {}).render(true);
      new AAItemMenu(app.document, {}).render(true);
    }
  });
  html.closest('.app').find('.aa-item-settings').remove();
  let titleElement = html.closest('.app').find('.window-title');
  aaBtn.insertAfter(titleElement);
});
Hooks.on(`renderActiveEffectConfig`, async (app, html, data) => {
  if (!game.user.isGM && game.settings.get("autoanimations", "hideFromPlayers")) {
    return;
  }

  const aaBtn = $(`<a class="aa-item-settings" title="A-A"><i class="fas fa-biohazard"></i>A-A</a>`);
  aaBtn.click(async ev => {
    await flagMigrations.handle(app.document);
    new AAActiveEffectMenu(app.document, {}).render(true);
  });
  html.closest('.app').find('.aa-item-settings').remove();
  let titleElement = html.closest('.app').find('.window-title');
  aaBtn.insertAfter(titleElement);
}); // Registers Database with Sequencer

Hooks.on("aa.ready", () => {
  let obj01 = moduleIncludes("jb2a_patreon") === true ? JB2APATREONDB : JB2AFREEDB;
  Sequencer.Database.registerEntries("autoanimations", obj01, true);

  if (game.settings.get("autoanimations", "killAllAnim") === "off") {
    console.log("ANIMATIONS ARE OFF");
    socket.off('module.sequencer'); //

    killAllAnimations = true;
  }
});
Hooks.once('ready', async function () {
  var _game$modules$get;

  aaSettings();
  const s3Check = game.settings.get('autoanimations', 'jb2aLocation');
  const jb2aPatreonFound = moduleIncludes("jb2a_patreon"); //const jb2aFreeFound = moduleIncludes("JB2A_DnD5e");

  let jb2aPath = game.settings.get('autoanimations', 'jb2aLocation');
  let s3Patreon;

  if (!jb2aPath || jb2aPath === "null") {
    if (jb2aPatreonFound) {
      jb2aPath = 'modules/jb2a_patreon';
    } else {
      jb2aPath = 'modules/JB2A_DnD5e';
    }
  } else {
    if (jb2aPath.includes('patreon')) {
      s3Patreon = true;
    }
  }
  /*
  if (moduleIncludes("jb2a_patreon")) {
      await jb2aAAPatreonDatabase(jb2aPath)
  } else {
      await jb2aAAFreeDatabase(jb2aPath)
  }
  */


  let obj01;

  if (jb2aPatreonFound || s3Patreon) {
    await jb2aAAPatreonDatabase(jb2aPath);
    obj01 = JB2APATREONDB;
  } else {
    await jb2aAAFreeDatabase(jb2aPath);
    obj01 = JB2AFREEDB;
  }

  if (game.user.isGM && !game.modules.get("JB2A_DnD5e") && !game.modules.get("jb2a_patreon")) {
    if (s3Check && (s3Check.includes('jb2a_patreon') || s3Check.includes('JB2A_DnD5e'))) ; else {
      ui.notifications.error(game.i18n.format("AUTOANIM.error"));
    }
  }

  autoRecMigration.handle(game.settings.get('autoanimations', 'aaAutorec'));

  if ((_game$modules$get = game.modules.get("midi-qol")) !== null && _game$modules$get !== void 0 && _game$modules$get.active) {

    switch (game.settings.get("autoanimations", "playonDamage")) {
      case true:
        Hooks.on("midi-qol.DamageRollComplete", workflow => {
          setUpMidi(workflow);
        }); //Hooks.on('midi-qol.preambleComplete', (workflow) => { midiAOE(workflow) });

        Hooks.on("createChatMessage", msg => {
          midiTemplateAnimations(msg);
        });
        Hooks.on("midi-qol.RollComplete", workflow => {
          setUpMidiNoAttackDamage(workflow);
        });
        break;

      case false:
        Hooks.on("midi-qol.AttackRollComplete", workflow => {
          setUpMidi(workflow);
        });
        Hooks.on("midi-qol.RollComplete", workflow => {
          setUpMidiNoAttack(workflow);
        }); //Hooks.on('midi-qol.preambleComplete', (workflow) => { midiAOE(workflow) });

        Hooks.on("createChatMessage", msg => {
          midiTemplateAnimations(msg);
        });
        break;
    }

    if (game.settings.get("autoanimations", "EnableCritical") || game.settings.get("autoanimations", "EnableCriticalMiss")) {
      Hooks.on("midi-qol.AttackRollComplete", workflow => {
        criticalCheck(workflow);
      });
    }
  } else {
    switch (game.system.id) {
      case "alienrpg":
        Hooks.on("createChatMessage", async msg => {
          setupAlienRPG(msg);
        });
        break;

      case "pf1":
      case "D35E":
        Hooks.on("createChatMessage", async msg => {
          onCreateChatMessage(msg);
        });
        break;

      case "dnd5e":
      case "sw5e":
        Hooks.on("createChatMessage", async msg => {
          setUp5eCore(msg);
        });
        break;

      case "tormenta20":
        Hooks.on("createChatMessage", async msg => {
          setupTormenta20(msg);
        });
        break;

      case "demonlord":
        Hooks.on("DL.Action", async data => {
          setupDemonLord(data);
        });
        break;

      case "pf2e":
        Hooks.on("createChatMessage", async msg => {
          pf2eReady(msg);
        });
        break;

      case "forbidden-lands":
        Hooks.on("createChatMessage", async msg => {
          fblReady(msg);
        });
        break;

      case "sfrpg":
        Hooks.on("createChatMessage", async msg => {
          var _sourceToken$actor, _sourceToken$actor$it;

          function extractItemId(content) {
            try {
              return $(content).attr("data-item-id");
            } catch (exception) {
              return null;
            }
          }

          const itemId = extractItemId(msg.data.content);

          if (!itemId) {
            return;
          }

          const tokenId = msg.data.speaker.token;
          const sourceToken = canvas.tokens.get(tokenId) || canvas.tokens.placeables.find(token => {
            var _token$actor, _token$actor$items;

            return (_token$actor = token.actor) === null || _token$actor === void 0 ? void 0 : (_token$actor$items = _token$actor.items) === null || _token$actor$items === void 0 ? void 0 : _token$actor$items.get(itemId);
          });

          if (!sourceToken) {
            return;
          }

          const item = (_sourceToken$actor = sourceToken.actor) === null || _sourceToken$actor === void 0 ? void 0 : (_sourceToken$actor$it = _sourceToken$actor.items) === null || _sourceToken$actor$it === void 0 ? void 0 : _sourceToken$actor$it.get(itemId);

          if (!item.hasAttack && !item.hasDamage) {
            let data = {};
            starFinder(data, msg);
          }
        });

        if (game.settings.get("autoanimations", "playonDamage")) {
          Hooks.on("damageRolled", async data => {
            Hooks.once("createChatMessage", async msg => {
              if (msg.user.id !== game.user.id) {
                return;
              }
              starFinder(data, msg);
            });
          });
        } else {
          Hooks.on("attackRolled", async data => {
            Hooks.once("createChatMessage", async msg => {
              if (msg.user.id !== game.user.id) {
                return;
              }
              starFinder(data, msg);
            });
          });
          Hooks.on("damageRolled", async data => {
            Hooks.once("createChatMessage", async msg => {
              if (msg.user.id !== game.user.id) {
                return;
              }

              if (data.item.hasAttack) {
                return;
              } else {
                starFinder(data, msg);
              }
            });
          });
        }

        break;

      case "starwarsffg":
        Hooks.on("createChatMessage", async msg => {
          swffgReady(msg);
        });
        break;

      case "swade":
        Hooks.on("swadeAction", async (SwadeTokenOrActor, SwadeItem) => {
          const controlledTokens = canvas.tokens.controlled;
          let token;

          if (controlledTokens.length > 0) {
            token = controlledTokens.find(token => token.data.actorId === SwadeTokenOrActor.id);
          }

          if (token) {
            SwadeTokenOrActor = token;
          }

          swadeData(SwadeTokenOrActor, SwadeItem);
        });
        Hooks.on("BRSW-RollItem", async (data, html) => {
          var tokenId = data.getFlag("betterrolls-swade2", "token");

          if (tokenId) {
            var token = canvas.tokens.get(tokenId);
            var itemId = data.getFlag("betterrolls-swade2", "item_id");
            var item = token.actor.items.get(itemId);
            swadeData(token, item);
          } else {
            var actorId = data.getFlag("betterrolls-swade2", "actor");
            var actor = game.actors.get(actorId);
            var itemId = data.getFlag("betterrolls-swade2", "item_id");
            var item = actor.items.get(itemId);
            swadeData(actor, item);
          }
        });
        break;

      case "wfrp4e":
        Hooks.on("wfrp4e:rollWeaponTest", async (data, info) => {
          //let targets = game.user.targets;
          wfrpWeapon(data, info);
        });
        Hooks.on("wfrp4e:rollPrayerTest", async (data, info) => {
          //let targets = game.user.targets;
          wfrpPrayer(data, info);
        });
        Hooks.on("wfrp4e:rollCastTest", async (data, info) => {
          //let targets = game.user.targets;
          wfrpCast(data, info);
        });
        Hooks.on("wfrp4e:rollTraitTest", async (data, info) => {
          //let targets = game.user.targets;
          wfrpTrait(data, info);
        });
        /*
        Hooks.on("wfrp4e:rollTest", async (data, info) => {
            let targets = game.user.targets;
            wfrpSkill(data, targets, info)
        });
        */

        break;

      case 'ose':
        Hooks.on("createChatMessage", async msg => {
          oseReady(msg);
        });
        break;

      case 'dcc':
        Hooks.on("createChatMessage", async msg => {
          dccReady(msg);
        });
        break;
    }
  } //Active Effect Hooks


  switch (game.system.id) {
    case "dnd5e":
      Hooks.on("createActiveEffect", (effect, data, userId) => {
        if (game.settings.get("autoanimations", "disableAEAnimations")) {
          console.log(`DEBUG | Automated Animations | Active Effect Animations are Disabled`);
          return;
        }

        if (game.user.id !== userId) {
          return;
        }

        createActiveEffects5e(effect);
      });
      Hooks.on("deleteActiveEffect", (effect, data, userId) => {
        var _game$modules$get2;

        if (game.user.id !== userId) {
          return;
        }

        deleteActiveEffects5e(effect);

        if ((_game$modules$get2 = game.modules.get('midi-qol')) !== null && _game$modules$get2 !== void 0 && _game$modules$get2.active) {
          checkConcentration(effect);
        }
      });
      Hooks.on("updateActiveEffect", (data, toggle, other, userId) => {
        if (game.settings.get("autoanimations", "disableAEAnimations")) {
          console.log(`DEBUG | Automated Animations | Active Effect Animations are Disabled`);
          return;
        }

        if (game.user.id !== userId) {
          return;
        }

        toggleActiveEffects5e(data, toggle);
      }); //}

      break;

    case 'pf2e':
      Hooks.on("createItem", (item, data, userId) => {
        if (game.user.id !== userId) {
          return;
        }

        createActiveEffectsPF2e(item);
      });
      Hooks.on("deleteItem", (item, data, userId) => {
        if (game.user.id !== userId) {
          return;
        }

        deleteActiveEffectsPF2e(item);
      });
      break;

    case "pf1":
      Hooks.on("createActiveEffect", (effect, data, userId) => {
        if (game.settings.get("autoanimations", "disableAEAnimations")) {
          console.log(`DEBUG | Automated Animations | Active Effect Animations are Disabled`);
          return;
        }

        if (game.user.id !== userId) {
          return;
        }

        createActiveEffectsPF1(effect);
      });
      Hooks.on("deleteActiveEffect", (effect, data, userId) => {
        if (game.user.id !== userId) {
          return;
        }

        deleteActiveEffectsPF1(effect);
      });
      /*
      Hooks.on("updateActiveEffect", (data, toggle, other, userId) => {
          if (game.settings.get("autoanimations", "disableAEAnimations")) {
              console.log(`DEBUG | Automated Animations | Active Effect Animations are Disabled`);
              return;
          }
          if (game.user.id !== userId) { return; }
          toggleActiveEffectsPF1(data, toggle)
      });
      */
      //}

      break;
  }

  Hooks.callAll("aa.ready", obj01);
});
/* External call for animations
* sourceToken as the originating token
* targets as an array from the user
* item as the item instance being used
* options to override settings e.g. playOnMiss: true, hitTargets: Array of TokenIDs
*/


class AutoAnimations {
  static async playAnimation(sourceToken, targets, item, options = {}) {
    if (killAllAnimations) {
      return;
    }

    const data = _objectSpread2({
      token: sourceToken,
      targets: targets,
      item: item
    }, options);

    let handler = await systemData.make(null, null, data);
    trafficCop(handler);
  }

}

window.AutoAnimations = AutoAnimations;

function moduleIncludes(test) {
  return !!game.modules.get(test);
}
/*
/ Midi-QOL Functions for DnD 5e and Star Wars 5e
*/
// setUpMidi for 5e/SW5e Animations on "Attack Rolls" (not specifically on damage)


async function setUpMidi(workflow) {
  if (killAllAnimations) {
    return;
  }

  let handler = await systemData.make(workflow);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  if (handler.shouldPlayImmediately) {
    return;
  }

  trafficCop(handler);
} // setUpMidiNoAD for Animations on items that have NO Attack or Damage rolls. Active if Animate on Damage true


async function setUpMidiNoAttackDamage(workflow) {
  var _workflow$item, _workflow$item2;

  if (killAllAnimations) {
    return;
  }

  if ((_workflow$item = workflow.item) !== null && _workflow$item !== void 0 && _workflow$item.hasAttack || (_workflow$item2 = workflow.item) !== null && _workflow$item2 !== void 0 && _workflow$item2.hasDamage) {
    return;
  }

  let handler = await systemData.make(workflow);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  if (handler.shouldPlayImmediately) {
    return;
  }

  trafficCop(handler);
} // setUpMidiNoD for Animations on items that have NO Attack Roll. Active only if Animating on Attack Rolls


async function setUpMidiNoAttack(workflow) {
  var _workflow$item3;

  if (killAllAnimations) {
    return;
  }

  if ((_workflow$item3 = workflow.item) !== null && _workflow$item3 !== void 0 && _workflow$item3.hasAttack) {
    return;
  }

  let handler = await systemData.make(workflow);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  if (handler.shouldPlayImmediately) {
    return;
  }

  trafficCop(handler);
}
/*
// For AOE items when using Midi QOL
async function midiAOE(workflow) {
    if (killAllAnimations) { return; }
    const handler = await systemData.make(workflow);
    if (!handler.item || !handler.sourceToken) {
        return;
    }
    if (handler.shouldPlayImmediately) {
        trafficCop(handler);
    } else { return; }
}
*/
// Special cases required when using Midi-QOL. Houses only the Template Animations right now


async function midiTemplateAnimations(msg) {
  var _msg$user;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== ((_msg$user = msg.user) === null || _msg$user === void 0 ? void 0 : _msg$user.id)) {
    return;
  }

  const handler = await systemData.make(msg, true);

  if (!handler.item || !handler.sourceToken) {
    return;
  } //let breakOut = checkMessege(msg);


  if (handler.shouldPlayImmediately
  /*&& (breakOut === 0 || game.modules.get("betterrolls5e")?.active)*/
  ) {
    trafficCop(handler);
  } else {
    return;
  }
}
/*
* Midi-QOL Critical Hit and Fumble animations
*
*/


async function criticalCheck(workflow) {
  if (killAllAnimations) {
    return;
  }

  if (!workflow.isCritical && !workflow.isFumble) {
    return;
  }

  let critical = workflow.isCritical;
  let fumble = workflow.isFumble;
  let token;
  let critAnim = game.settings.get("autoanimations", "CriticalAnimation");
  let critMissAnim = game.settings.get("autoanimations", "CriticalMissAnimation");

  switch (true) {
    case game.settings.get("autoanimations", "EnableCritical") && critical:
      token = canvas.tokens.get(workflow.tokenId);
      new Sequence().effect().file(critAnim).atLocation(token).play();
      break;

    case game.settings.get("autoanimations", "EnableCriticalMiss") && fumble:
      token = canvas.tokens.get(workflow.tokenId);
      new Sequence().effect().file(critMissAnim).atLocation(token).play();
      break;
  }
}
/*
/ Set up DnD5e and SW5e CORE (NON MIDI)
*/


async function setUp5eCore(msg) {
  var _ref, _msg$data$flags$dnd5e, _msg$data2, _msg$data2$flags, _msg$data2$flags$dnd, _msg$data2$flags$dnd$, _msg$data2$flags$dnd$2, _msg$data3, _msg$data3$flavor, _msg$data$flags$sw5e$, _msg$data4, _msg$data4$flags, _msg$data4$flags$sw5e, _msg$data4$flags$sw5e2, _msg$data4$flags$sw5e3, _game$modules$get3, _game$modules$get4, _game$modules$get5;

  if (killAllAnimations) {
    return;
  }

  if (msg.user.id !== game.user.id) {
    return;
  }
  const animationNow = game.settings.get("autoanimations", "playonDamageCore");
  let handler;
  let rollType;

  switch (game.system.id) {
    case "dnd5e":
      handler = await systemData.make(msg);
      rollType = (_ref = (_msg$data$flags$dnd5e = (_msg$data2 = msg.data) === null || _msg$data2 === void 0 ? void 0 : (_msg$data2$flags = _msg$data2.flags) === null || _msg$data2$flags === void 0 ? void 0 : (_msg$data2$flags$dnd = _msg$data2$flags.dnd5e) === null || _msg$data2$flags$dnd === void 0 ? void 0 : (_msg$data2$flags$dnd$ = _msg$data2$flags$dnd.roll) === null || _msg$data2$flags$dnd$ === void 0 ? void 0 : (_msg$data2$flags$dnd$2 = _msg$data2$flags$dnd$.type) === null || _msg$data2$flags$dnd$2 === void 0 ? void 0 : _msg$data2$flags$dnd$2.toLowerCase()) !== null && _msg$data$flags$dnd5e !== void 0 ? _msg$data$flags$dnd5e : (_msg$data3 = msg.data) === null || _msg$data3 === void 0 ? void 0 : (_msg$data3$flavor = _msg$data3.flavor) === null || _msg$data3$flavor === void 0 ? void 0 : _msg$data3$flavor.toLowerCase()) !== null && _ref !== void 0 ? _ref : "pass";
      break;

    case "sw5e":
      handler = await systemData.make(msg);
      rollType = (_msg$data$flags$sw5e$ = (_msg$data4 = msg.data) === null || _msg$data4 === void 0 ? void 0 : (_msg$data4$flags = _msg$data4.flags) === null || _msg$data4$flags === void 0 ? void 0 : (_msg$data4$flags$sw5e = _msg$data4$flags.sw5e) === null || _msg$data4$flags$sw5e === void 0 ? void 0 : (_msg$data4$flags$sw5e2 = _msg$data4$flags$sw5e.roll) === null || _msg$data4$flags$sw5e2 === void 0 ? void 0 : (_msg$data4$flags$sw5e3 = _msg$data4$flags$sw5e2.type) === null || _msg$data4$flags$sw5e3 === void 0 ? void 0 : _msg$data4$flags$sw5e3.toLowerCase()) !== null && _msg$data$flags$sw5e$ !== void 0 ? _msg$data$flags$sw5e$ : "pass";
      break;
  }

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  switch (true) {
    case !handler.hasAttack && !handler.hasDamage:
      trafficCop(handler);
      break;

    case handler.shouldPlayImmediately && !rollType.includes("damage") && !rollType.includes("attack"):
      trafficCop(handler);
      break;

    case animationNow:
      if (rollType.includes("damage")) {
        if (handler.shouldPlayImmediately) {
          return;
        }

        trafficCop(handler);
      }

      break;

    case !animationNow:
      switch (true) {
        case ((_game$modules$get3 = game.modules.get("mre-dnd5e")) === null || _game$modules$get3 === void 0 ? void 0 : _game$modules$get3.active) && game.settings.get("mre-dnd5e", "autoCheck") && !handler.hasAttack && handler.hasDamage && !rollType.includes("damage"):
          trafficCop(handler);
          break;

        case ((_game$modules$get4 = game.modules.get("mre-dnd5e")) === null || _game$modules$get4 === void 0 ? void 0 : _game$modules$get4.active) && game.settings.get("mre-dnd5e", "autoCheck") && rollType.includes("damage"):
          break;

        case rollType.includes("damage") && !handler.hasAttack:
        case rollType.includes('attack'):
          if (handler.shouldPlayImmediately) {
            return;
          }

          trafficCop(handler);
          break;

        case ((_game$modules$get5 = game.modules.get("betterrolls5e")) === null || _game$modules$get5 === void 0 ? void 0 : _game$modules$get5.active) && !handler.hasAttack && handler.hasDamage:
          if (handler.shouldPlayImmediately) {
            return;
          }

          trafficCop(handler);
          break;
      }

      break;
  }
}
/*
/ sets Handler for PF1 and DnD3.5
*/


async function onCreateChatMessage(msg) {
  if (killAllAnimations) {
    return;
  }

  if (msg.user.id !== game.user.id) {
    return;
  }
  let handler;

  switch (game.system.id) {
    case "pf1":
      handler = await systemData.make(msg);
      break;

    case "D35E":
      handler = await systemData.make(msg);
      break;
  }

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}
/*
/ Sets Handler for Star Wars FFG
*/


async function swffgReady(msg) {
  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== msg.user.id) {
    return;
  }

  let handler = await systemData.make(msg);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}
/*
/ Sets Handler for SWADE
*/


async function swadeData(SwadeTokenOrActor, SwadeItem) {
  if (killAllAnimations) {
    return;
  }

  let data = {
    SwadeTokenOrActor,
    SwadeItem
  };
  let handler = await systemData.make(data);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}
/*
/ Sets Handler for Starfinder
*/


async function starFinder(data, msg) {
  if (killAllAnimations) {
    return;
  }

  const sfrpgData = {
    data,
    msg
  };
  const handler = await systemData.make(sfrpgData); //let tokenId = msg.data.speaker.token;
  //let sourceToken = canvas.tokens.get(tokenId);
  //let targets = Array.from(msg.user.targets);
  //let item = data.item;
  //AutoAnimations.playAnimation(sourceToken, targets, item)

  trafficCop(handler);
}
/*
/ Sets Handler for Tormenta 20
*/


async function setupTormenta20(msg) {
  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== msg.user.id) {
    return;
  }

  let handler = await systemData.make(msg);

  if (!handler.item || !handler.sourceToken) {
    return;
  }
  /*
  if (game.user.id === msg.user.id) {
      switch (true) {
          case ((handler.animType === "t12") && (handler.isCustomized)):
              teleportation(handler);
              break;
      }
  }
  */


  trafficCop(handler);
}
/*
/ Sets Handler for Forbidden Lands
*/


async function fblReady(msg) {
  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== msg.user.id) {
    return;
  }

  const handler = await systemData.make(msg);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}
/*
/ Sets Handler for Demon Lord
*/


async function setupDemonLord(data) {
  if (killAllAnimations) {
    return;
  }

  let handler = await systemData.make(data);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}
/*
/ Sets Handler for Pathfinder 2e and routes to animations
*/


async function pf2eReady(msg) {
  var _handler$item$data$da, _handler$item, _handler$item$data, _handler$item$data$da2, _handler$item$data$da3, _msg$data$flavor, _handler$item2, _handler$item2$data, _handler$item2$data$d, _handler$item2$data$d2, _handler$item2$data$d3, _msg$data$flavor2, _msg$data$flavor3, _msg$data$flavor4, _handler$item$data2, _handler$item$data2$d, _handler$item$data2$d2, _msg$data$flavor5, _msg$data$flags$pf2e, _msg$data$flags$pf2e$, _msg$data$flags$pf2e2, _msg$data$flags$pf2e3, _msg$data$flags$pf2e4;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== msg.user.id) {
    return;
  }

  const handler = await systemData.make(msg);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  const itemType = handler.itemType;
  let damage; //= /*handler.item.damageValue ||*/ //handler.item?.data.data.damage?.length || handler.item?.data?.data?.damage?.value["0"]?.value;

  const spellType = (_handler$item$data$da = (_handler$item = handler.item) === null || _handler$item === void 0 ? void 0 : (_handler$item$data = _handler$item.data) === null || _handler$item$data === void 0 ? void 0 : (_handler$item$data$da2 = _handler$item$data.data) === null || _handler$item$data$da2 === void 0 ? void 0 : (_handler$item$data$da3 = _handler$item$data$da2.spellType) === null || _handler$item$data$da3 === void 0 ? void 0 : _handler$item$data$da3.value) !== null && _handler$item$data$da !== void 0 ? _handler$item$data$da : "utility";
  const playOnDmg = game.settings.get("autoanimations", "playonDamageCore");

  if (handler.shouldPlayImmediately && !((_msg$data$flavor = msg.data.flavor) !== null && _msg$data$flavor !== void 0 && _msg$data$flavor.toLowerCase().includes("damage"))) {
    trafficCop(handler);
    return;
  }

  if (handler.shouldPlayImmediately) {
    return;
  }

  switch (itemType) {
    case "spell":
      damage = (_handler$item2 = handler.item) === null || _handler$item2 === void 0 ? void 0 : (_handler$item2$data = _handler$item2.data) === null || _handler$item2$data === void 0 ? void 0 : (_handler$item2$data$d = _handler$item2$data.data) === null || _handler$item2$data$d === void 0 ? void 0 : (_handler$item2$data$d2 = _handler$item2$data$d.damage) === null || _handler$item2$data$d2 === void 0 ? void 0 : (_handler$item2$data$d3 = _handler$item2$data$d2.value["0"]) === null || _handler$item2$data$d3 === void 0 ? void 0 : _handler$item2$data$d3.value;

      switch (spellType) {
        case "utility":
          if (!damage) {
            trafficCop(handler);
          } else if ((_msg$data$flavor2 = msg.data.flavor) !== null && _msg$data$flavor2 !== void 0 && _msg$data$flavor2.toLowerCase().includes("damage")) {
            trafficCop(handler);
          }

          break;

        case "save":
          if (!damage) {
            trafficCop(handler);
          } else if ((_msg$data$flavor3 = msg.data.flavor) !== null && _msg$data$flavor3 !== void 0 && _msg$data$flavor3.toLowerCase().includes("damage")) {
            trafficCop(handler);
          }

          break;

        case "heal":
          if ((_msg$data$flavor4 = msg.data.flavor) !== null && _msg$data$flavor4 !== void 0 && _msg$data$flavor4.toLowerCase().includes('healing')) {
            trafficCop(handler);
          }

          if (((_handler$item$data2 = handler.item.data) === null || _handler$item$data2 === void 0 ? void 0 : (_handler$item$data2$d = _handler$item$data2.data) === null || _handler$item$data2$d === void 0 ? void 0 : (_handler$item$data2$d2 = _handler$item$data2$d.category) === null || _handler$item$data2$d2 === void 0 ? void 0 : _handler$item$data2$d2.value) === "focus") {
            trafficCop(handler);
          }

          break;

        case "attack":
          switch (playOnDmg) {
            case true:
              if ((_msg$data$flavor5 = msg.data.flavor) !== null && _msg$data$flavor5 !== void 0 && _msg$data$flavor5.toLowerCase().includes("damage")) {
                trafficCop(handler);
              }

              break;

            default:
              if ((_msg$data$flags$pf2e = msg.data.flags.pf2e) !== null && _msg$data$flags$pf2e !== void 0 && (_msg$data$flags$pf2e$ = _msg$data$flags$pf2e.context) !== null && _msg$data$flags$pf2e$ !== void 0 && _msg$data$flags$pf2e$.type.includes("attack")) {
                trafficCop(handler);
              }

          }

          break;
      }

      break;

    case "melee":
    case "weapon":
      switch (true) {
        case playOnDmg:
          if ((_msg$data$flags$pf2e2 = msg.data.flags.pf2e) !== null && _msg$data$flags$pf2e2 !== void 0 && _msg$data$flags$pf2e2.damageRoll
          /*msg.data.flavor?.toLowerCase().includes("damage")*/
          ) {
            trafficCop(handler);
          }

          break;

        default:
          if ((_msg$data$flags$pf2e3 = msg.data.flags.pf2e) !== null && _msg$data$flags$pf2e3 !== void 0 && (_msg$data$flags$pf2e4 = _msg$data$flags$pf2e3.context) !== null && _msg$data$flags$pf2e4 !== void 0 && _msg$data$flags$pf2e4.type.includes("attack")) {
            trafficCop(handler);
          }

      }

      break;

    case "consumable":
    case "armor":
    case "feat":
    case "action":
    case "effect":
      trafficCop(handler);
      break;
  }
}
/*
/ WFRP Functions
*/


async function wfrpWeapon(data, info) {
  var _data$context;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== info.user) {
    return;
  }

  let handler = await systemData.make({
    item: data.weapon,
    targets: (_data$context = data.context) === null || _data$context === void 0 ? void 0 : _data$context.targets,
    info: info
  });

  switch (true) {
    case handler.animType === "t12" && handler.isCustomized:
      teleportation(handler);
      break;

    default:
      trafficCop(handler);
  }
}

async function wfrpPrayer(data, info) {
  var _data$context2;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== info.user) {
    return;
  }

  let handler = await systemData.make({
    item: data.prayer,
    targets: (_data$context2 = data.context) === null || _data$context2 === void 0 ? void 0 : _data$context2.targets,
    info: info
  });

  switch (true) {
    case handler.animType === "t12" && handler.isCustomized:
      teleportation(handler);
      break;

    default:
      trafficCop(handler);
  }
}

async function wfrpCast(data, info) {
  var _data$context3;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== info.user) {
    return;
  }

  let handler = await systemData.make({
    item: data.spell,
    targets: (_data$context3 = data.context) === null || _data$context3 === void 0 ? void 0 : _data$context3.targets,
    info: info
  });

  switch (true) {
    case handler.animType === "t12" && handler.isCustomized:
      teleportation(handler);
      break;

    default:
      trafficCop(handler);
  }
}

async function wfrpTrait(data, info) {
  var _data$context4;

  if (killAllAnimations) {
    return;
  }

  if (game.user.id !== info.user) {
    return;
  }

  let handler = await systemData.make({
    item: data.trait,
    targets: (_data$context4 = data.context) === null || _data$context4 === void 0 ? void 0 : _data$context4.targets,
    info: info
  });

  switch (true) {
    case handler.animType === "t12" && handler.isCustomized:
      teleportation(handler);
      break;

    default:
      trafficCop(handler);
  }
}
/*
async function wfrpSkill(data, info) {
    if (killAllAnimations) { return; }
    if (game.user.id !== info.user) { return }
    let handler = await systemData.make({ item: data.skill, targets: data.targets, info: info });
    switch (true) {
        case ((handler.animType === "t12") && (handler.isCustomized)):
            teleportation(handler);
            break;
        default:
            trafficCop(handler);
    }
}
*/


async function oseReady(input) {
  if (killAllAnimations) {
    return;
  }

  if (input.user.id !== game.user.id) {
    return;
  }
  let handler = await systemData.make(input);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}

async function setupAlienRPG(input) {
  if (killAllAnimations) {
    return;
  }

  if (input.user.id !== game.user.id) {
    return;
  }
  let handler = await systemData.make(input);

  if (!handler.item || !handler.sourceToken) {
    return;
  }

  trafficCop(handler);
}

async function dccReady(input) {
  var _input$data, _input$data$flags, _input$data$flags$dcc, _input$data2, _input$data2$flags, _input$data2$flags$dc;

  if (killAllAnimations) {
    return;
  }

  if (input.user.id !== game.user.id) {
    return;
  }

  if (!game.settings.get('dcc', 'useStandardDiceRoller')) {
    let handler = await systemData.make(input);

    if (!handler.item || !handler.sourceToken) {
      return;
    }

    trafficCop(handler);
  } else if (((_input$data = input.data) === null || _input$data === void 0 ? void 0 : (_input$data$flags = _input$data.flags) === null || _input$data$flags === void 0 ? void 0 : (_input$data$flags$dcc = _input$data$flags.dcc) === null || _input$data$flags$dcc === void 0 ? void 0 : _input$data$flags$dcc.RollType) === "Damage" || ((_input$data2 = input.data) === null || _input$data2 === void 0 ? void 0 : (_input$data2$flags = _input$data2.flags) === null || _input$data2$flags === void 0 ? void 0 : (_input$data2$flags$dc = _input$data2$flags.dcc) === null || _input$data2$flags$dc === void 0 ? void 0 : _input$data2$flags$dc.RollType) === "SpellCheck") {
    let handler = await systemData.make(input);

    if (!handler.item || !handler.sourceToken) {
      return;
    }

    trafficCop(handler);
  }
}

export { disableAnimations };
//# sourceMappingURL=module.js.map
